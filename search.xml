<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react- props / state 練習</title>
      <link href="/2022/05/08/react-1/"/>
      <url>/2022/05/08/react-1/</url>
      
        <content type="html"><![CDATA[<h2 id="props-state-的應用"><a href="#props-state-的應用" class="headerlink" title="props, state 的應用"></a>props, state 的應用</h2><ul><li>props 傳入參數的部分</li><li>state 讓組建本身有狀態</li></ul><h3 id="製作-計數器"><a href="#製作-計數器" class="headerlink" title="製作 計數器"></a>製作 計數器</h3><ul><li>props</li><li>製作，讓計數器的數字變化，可以同步變化到 button 上的數字<ul><li>在父層 App.vue 做一個內容的傳送</li><li>在 子元件，要自訂一個變數，作為接收父層從來的資料</li></ul></li></ul><pre><code class="jsx">import &quot;./styles.css&quot;;type BtnProps = {  btnNum: number;};const Btn: React.FC&lt;BtnProps&gt; = ({ btnNum }) =&gt; {  return (    &lt;button&gt;      add 1&lt;span&gt;目前總數：{btnNum}&lt;/span&gt;    &lt;/button&gt;  );};export default function App() {  const num = 0;  return (    &lt;div className=&quot;App&quot;&gt;      &lt;h1&gt;Counter: {num}&lt;/h1&gt;      &lt;Btn btnNum={num} /&gt;    &lt;/div&gt;  );}</code></pre><p><img src="https://i.imgur.com/OnOdTAs.png" alt=""><br><img src="https://i.imgur.com/8VkhCGp.png" alt=""></p><h3 id="進階，希望透過點擊-button-同步更改數值"><a href="#進階，希望透過點擊-button-同步更改數值" class="headerlink" title="進階，希望透過點擊 button 同步更改數值"></a>進階，希望透過點擊 button 同步更改數值</h3><ul><li><p>讓 render (react 渲染機制)，可以在變數被變動的時候順便觸發渲染機制</p><ul><li>改變變數 -&gt; 觸發渲染<h3 id="使用-state-達成上述目的"><a href="#使用-state-達成上述目的" class="headerlink" title="使用 state 達成上述目的"></a>使用 state 達成上述目的</h3></li></ul><p><strong>對組建本身引入 state 機制</strong></p></li><li><p>用 state 來做變數宣告，只要 state 變數有做變動都會觸發渲染機制</p><ul><li>當變數有涉及於頁面上的更新，就會需要使用 state</li></ul></li><li><p>Hook 本身多是 use 開頭</p></li><li><p><code>useState()</code> 是一個 function</p></li></ul><p><strong>用陣列解構來取的 return 的值</strong></p><ul><li><ol><li>當前的值</li></ol></li><li><ol start="2"><li>再回傳一個 function : 用來設定/變動 第一個數值<br><code>const [num2, setNum2] = useState(999)</code></li></ol></li></ul><p><a href="https://codesandbox.io/s/react-props-state-yuc6qv?file=/src/App.tsx" target="_blank" rel="noopener">example-1</a></p><h2 id="實現-父層數值變化，子組件隨之變化"><a href="#實現-父層數值變化，子組件隨之變化" class="headerlink" title="實現 父層數值變化，子組件隨之變化"></a>實現 父層數值變化，子組件隨之變化</h2><ul><li>應該將主要的更新動作都放置父組件</li><li>將放在父組件的事件，透過 props 方式傳給子組件，並將該變數放到按鈕的點擊事件上</li></ul><p><a href="https://codesandbox.io/s/react-props-state-2-ylm345?file=/src/App.tsx" target="_blank" rel="noopener">example-2 </a></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 - Slot</title>
      <link href="/2022/05/07/Vue-Slot/"/>
      <url>/2022/05/07/Vue-Slot/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><p>剛學習 vue 的時候，對 slot 完全一竅不通，不了解要如何挖空多元件，來放入資料，更是不知道他能使用的時機是什麼時候，種種因素，讓我從官方文件找些範例釐清，也找了些文章閱讀加深記憶，順手也紀錄在部落格上～</p><p>使用時機：</p><ul><li>使用同一個 元件 , 但只有內文不同。</li><li>有時候資料是靜態，不常變動，甚至需要大量重複。這情況不必要使用 props。</li></ul><ol><li><p>共用樣式<br>從 <a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdD5cbmltcG9ydCBGYW5jeUJ1dHRvbiBmcm9tICcuL0ZhbmN5QnV0dG9uLnZ1ZSdcbiAgXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHsgRmFuY3lCdXR0b24gfVxufVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPEZhbmN5QnV0dG9uPlxuICAgIENsaWNrIG1lIDwhLS0gc2xvdCBjb250ZW50IC0tPlxuIFx0PC9GYW5jeUJ1dHRvbj5cbjwvdGVtcGxhdGU+IiwiaW1wb3J0LW1hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge1xuICAgIFwidnVlXCI6IFwiaHR0cHM6Ly9zZmMudnVlanMub3JnL3Z1ZS5ydW50aW1lLmVzbS1icm93c2VyLmpzXCJcbiAgfVxufSIsIkZhbmN5QnV0dG9uLnZ1ZSI6Ijx0ZW1wbGF0ZT5cbiAgPGJ1dHRvbiBjbGFzcz1cImZhbmN5LWJ0blwiPlxuICBcdDxzbG90Lz4gPCEtLSBzbG90IG91dGxldCAtLT5cblx0PC9idXR0b24+XG48L3RlbXBsYXRlPlxuXG48c3R5bGU+XG4uZmFuY3ktYnRuIHtcbiAgY29sb3I6ICNmZmY7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgzMTVkZWcsICM0MmQzOTIgMjUlLCAjNjQ3ZWZmKTtcbiAgYm9yZGVyOiBub25lO1xuICBwYWRkaW5nOiA1cHggMTBweDtcbiAgbWFyZ2luOiA1cHg7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuPC9zdHlsZT4ifQ==" target="_blank" rel="noopener">官網的範例</a>可以看到，讓按鈕的文字可以彈性的變化。</p></li><li><p>named slot(具名插槽) </p></li></ol><ul><li>建立一個元件，其中含有多個slot區塊<br><a href="https://replit.com/@as45986/Named-Slots#src/App.vue" target="_blank" rel="noopener">範例連結</a></li></ul><ol start="3"><li>Scoped slots（作用域插槽）</li></ol><ul><li>把子元件的資料取出來，給父層使用</li><li>不同於前面 slot 的使用，是由父層輸入資料呈現於頁面<br><a href="https://replit.com/@as45986/Scoped-Slots#src/App.vue" target="_blank" rel="noopener">範例</a></li></ul><p>資料來源:<br><a href="https://vuejs.org/" target="_blank" rel="noopener">vuejs</a><br><a href="https://ithelp.ithome.com.tw/articles/10273298?sc=iThomeR" target="_blank" rel="noopener">不只懂 Vue 語法：什麼是 slot？請示範 slot 的用法？</a><br><a href="https://ithelp.ithome.com.tw/articles/10194384" target="_blank" rel="noopener">用範例理解 Vue.js #18：Slot</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> slot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket 簡介與使用</title>
      <link href="/2022/04/02/websocket/"/>
      <url>/2022/04/02/websocket/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/piRytMY.png" alt=""></p><p>近期購買了布魯斯的 TypeScript 的課程，除了學到型別之外，還接觸到 ＷebSocket 的使用，所以就來簡單紀錄下 ＷebSocket 是什麼，在專案內可以實現什麼功能。</p><p>WebSocket是一種網路傳輸協定，讓前端與後端溝通除非有一方斷開連接，否則會一直保持聯繫</p><h2 id="情境說明"><a href="#情境說明" class="headerlink" title="情境說明"></a>情境說明</h2><ol><li>使用者上下線狀態：可以延遲幾秒鐘，可以使用 setInterval 做出輪循</li></ol><ul><li>設定每幾秒發出請求，更新狀態</li><li>使用 HTTP 協議的請求：GET\POST 等方式，做出Request\Response</li></ul><ol start="2"><li>聊天室：會希望聊天訊息是即時更新，若採用上面的方式，為了使訊息更新及時會從每幾秒改為每幾毫秒，這樣的方式會造成短時間內不斷發出請求，造成消耗後端資源</li></ol><ul><li>指建立一次連結，可以與後端持續保持聯係</li></ul><h2 id="聊天室的實際運用"><a href="#聊天室的實際運用" class="headerlink" title="聊天室的實際運用"></a>聊天室的實際運用</h2><ul><li>將在 node.js 建立 websocket 的服務，讓前端連線到node.js的服務</li><li>socket.io =&gt; 包裝 websocket 協議的 node.js 的工具包<ul><li>當使用 node.js 做開發，就可以透過 socket.io 提供的功能實現</li></ul></li></ul><h2 id="安裝-socket-io"><a href="#安裝-socket-io" class="headerlink" title="安裝 socket.io"></a>安裝 socket.io</h2><ul><li>socket.io-clinet : 在前端的部分要使用 clinet 安裝包<br><code>npm i -D socket.io socket.io-clinet</code></li></ul><h3 id="後端"><a href="#後端" class="headerlink" title="後端"></a>後端</h3><ul><li>將 socket.io 引入 node.js 的 server 端</li></ul><pre><code class="javascript">import devServer from &quot;@/server/dev&quot;;import prodServer from &quot;@/server/prod&quot;;import express from &quot;express&quot;;import { Server } from &quot;socket.io&quot;import http from &quot;http&quot;  //也可以引入http模組const port = 3000;const app = express();//透過 http 將 server 建立起來const server = http.createServer(app)const io = new Server(server)const userService = new UserService//監聽server.listen(port, () =&gt; {  console.log(`The application is running on port ${port}.`);});</code></pre><pre><code class="typescript">//建立起連接時，發出訊息//當有用戶連接到connection 就會有回呼函式io.on(&#39;connection&#39;,(socket)=&gt;{    //發出訊息    socket.emit(&#39;join&#39;, &#39;Welcom&#39;)})</code></pre><h2 id="如何在前端使用，與後端建立連線？"><a href="#如何在前端使用，與後端建立連線？" class="headerlink" title="如何在前端使用，與後端建立連線？"></a>如何在前端使用，與後端建立連線？</h2><ul><li>到前端的入口檔案</li></ul><pre><code class="typescript">//將 socket.io 的包引入前端程式這邊import { io } from &quot;socket.io-client&quot;;//1. 建立連接到 node serverconst clientIo = io();clientIo.on(&#39;join&#39;,(msg)=&gt;{    console.log(&#39;msg&#39;,msg)})</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 - toRef , toRefs</title>
      <link href="/2022/02/28/Vue-toRef/"/>
      <url>/2022/02/28/Vue-toRef/</url>
      
        <content type="html"><![CDATA[<h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><ul><li>將…變成 ref<br>從 reactive 物件抽出包裝成一個 ref 的值，與原本物件 是連接的，所以修改時，原本的值也會跟著變動。</li><li>只能處理一個屬性，須告知要輸入的屬性\物件</li><li>注意: 更改原始物件內的值，所響應會跟著變動</li></ul><h3 id="在-prop-的應用"><a href="#在-prop-的應用" class="headerlink" title="在 prop 的應用"></a>在 prop 的應用</h3><ul><li>來自的 props 是 物件資料，可以使用toRef<pre><code class="javascript">props: {apiUser: { required: true, type: Object}},setup(props) { const userCopy = toRef(props, &#39;apiUser&#39;)}</code></pre></li><li>範例二</li></ul><pre><code class="html">&lt;template&gt;&lt;h2&gt;姓名: {{person.name}}&lt;/h2&gt;&lt;h2&gt;年齡: {{person.age}}&lt;/h2&gt;&lt;h2&gt;職業描述: {{person.job.front.dec}}&lt;/h2&gt;&lt;button @click=&#39;person.name += ~&#39;&gt;修改姓名&lt;/button&gt;&lt;button @click=&#39;person.age ++ &#39;&gt;增加年齡&lt;/button&gt;&lt;/template&gt;</code></pre><pre><code class="javascript">&lt;script&gt;import {reactive} from &#39;vue&#39;;export default {    name: &#39;Demo&#39;,    setup(){        const person = reactive({            name: &#39;Eva&#39;,            age: 25,            job:{               front:{                   dec:&#39;前端工程師&#39;               }            }        })        return{            person        }    }}&lt;/script&gt;</code></pre><ul><li>要將以上的模板寫的更容易</li></ul><pre><code class="html">&lt;template&gt;&lt;h2&gt;姓名: {{name}}&lt;/h2&gt;&lt;h2&gt;年齡: {{age}}&lt;/h2&gt;&lt;h2&gt;職業描述: {{dec}}&lt;/h2&gt;&lt;button @click=&#39;name += ~&#39;&gt;修改姓名&lt;/button&gt;&lt;button @click=&#39;age ++ &#39;&gt;增加年齡&lt;/button&gt;&lt;/template&gt;</code></pre><pre><code class="javascript">//就是返回普通的物件內容        return{            name: person.name,            age: person.age,            dec: person.job.front.dec        }</code></pre><ul><li><p>但此方式要注意，字串模板會無法響應更新的問題</p></li><li><p>使用 toRef 來達到響應</p></li></ul><pre><code class="javascript">&lt;script&gt;import {reactive,toRef} from &#39;vue&#39;;export default {    name: &#39;Demo&#39;,    setup(){        const person = reactive({            name: &#39;Eva&#39;,            age: 25,            job:{               front:{                   dec:&#39;前端工程師&#39;               }            }        })        //單一轉換        const name2 = toRefs(person,&#39;name&#39;)        return{            name: toRef(person,&#39;name&#39;),            age: toRef(person,&#39;age&#39;),            dec: toRef(person.job.front,&#39;dec&#39;)        }    }}&lt;/script&gt;</code></pre><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><p>toRefs用來把響應式物件轉換成普通物件，把物件中的每一個屬性，包裹成ref物件<br>    * toRefs就是toRef的升級版，只是toRefs是把響應式物件進行轉換</p><h3 id="延續上方，toRefs"><a href="#延續上方，toRefs" class="headerlink" title="延續上方，toRefs"></a>延續上方，toRefs</h3><ul><li>可以批量處理，一個物件裡的屬性<ul><li>只會將第一層展開，所以以下在 job 的內層 </li></ul></li></ul><pre><code class="html">&lt;template&gt;&lt;h2&gt;姓名: {{name}}&lt;/h2&gt;&lt;h2&gt;年齡: {{age}}&lt;/h2&gt;&lt;h2&gt;職業描述: {{job.front.dec}}&lt;/h2&gt;&lt;button @click=&#39;name += ~&#39;&gt;修改姓名&lt;/button&gt;&lt;button @click=&#39;age ++ &#39;&gt;增加年齡&lt;/button&gt;&lt;/template&gt;</code></pre><pre><code class="javascript">&lt;script&gt;import {reactive,toRefs} from &#39;vue&#39;;export default {    name: &#39;Demo&#39;,    setup(){        const person = reactive({            name: &#39;Eva&#39;,            age: 25,            job:{               front:{                   dec:&#39;前端工程師&#39;               }            }        })        //可以批量處理，所以只需要傳入個物件，        const new = toRefs(person)        console.log(new)        //在物件中再放toRefs(person) ，會變成物件包物件，所以要展開        return{           ...toRefs(person)            // name: toRef(person,&#39;name&#39;),            // age: toRef(person,&#39;age&#39;),            // dec: toRef(person.job.front,&#39;dec&#39;)        }    }}&lt;/script&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> v-for </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript - 註記(Annotation) 與斷言(Assertion)</title>
      <link href="/2022/01/14/TS-3/"/>
      <url>/2022/01/14/TS-3/</url>
      
        <content type="html"><![CDATA[<p>從開始學習前端之後，大多的學習資源都是來自線上課程、youtube 影片為主，鮮少透過閱讀書籍來學習相關知識，但自從進入公司之後，因為公司內有些程式書籍能夠借閱，先是從 JavaScript 大全開始，一開始閱讀起來真的滿痛苦，不知道該如何消化內容，直接順著讀過去又怕忘記，但目前還是順順的讀到了第8章～後來，找到的方式就是在筆記軟體上做些註記，工作上遇到相關的再回過頭看一次，加入筆記。</p><p>而在此次，發現 TypeScript 即便已經看過介紹型別、基本使用基礎的影片後，仍然覺得不太足夠，所以就開始翻閱書籍 「讓 TypeScript 成為你全端開發的 ACE」，文中介紹滿多之前沒有注意到觀念、也有帶到不少 JavaScript 的觀念來呼應。所以本篇，多是來自於書中資訊，透過整理呈現。</p><h2 id="註記-Annotation-V-S-斷言-Assertion"><a href="#註記-Annotation-V-S-斷言-Assertion" class="headerlink" title="註記 Annotation V.S. 斷言 Assertion"></a>註記 Annotation V.S. 斷言 Assertion</h2><ul><li>型別註記：指在告訴 TS 編譯器：「任何被註記到的變數、函式的參數等，都必須遵照被註記過後的變數型別」。</li><li>所以編譯器會隨時隨地的監測該變數有沒有出現型別衝突的可能—關鍵字為遵照。</li><li>而，斷言型別則是無視 TS 編譯器分析整個程式碼的型別推論過程，果斷的告訴 TS 編譯器：「被斷言過後的表達式之運算結果就是某某型別」—關鍵意象是「覆蓋」該表達式的型別推論結果。</li></ul><h2 id="註記與斷言"><a href="#註記與斷言" class="headerlink" title="註記與斷言"></a>註記與斷言</h2><ul><li>帶有冒號的相關語法</li></ul><pre><code class="typescript">let randomNumber:number = Math.random();const subscribed:boolean = true;</code></pre><ul><li>如果遇到函式，參數(Argument)部分除了可以有類似註記方式標明輸入的參數型別外，在參數宣告結尾也可以註記該函式輸出之型別。</li></ul><pre><code class="javascript">function isPositive(input: number):boolean{    return input &gt; 0}</code></pre><ul><li>但JS裡，宣告函式的方法有很多種，其中一個是將函式最為值指派到變數。</li></ul><pre><code class="javascript">const isPositive:(input:number) =&gt; boolean = function(input){    return input &gt; 0}</code></pre><ul><li>以上，也能把變數指派的函式，改成ES6箭頭函式<ul><li>指派運算子(Assignment Operator ，就是指程式裡的等號)左方是函式的型別註記表示法，右方則是普通函式宣告</li></ul></li></ul><pre><code class="typescript">const isPositive:(input:number) =&gt; boolean = input =&gt; input &gt;0;</code></pre><ul><li>採用邊宣告函式、邊註記型別的方式定義函式</li></ul><pre><code class="typescript">const isPositive = function (input:number):boolean{    return input&gt;0}</code></pre><pre><code class="typescript">const isPositive =  (input:number):boolean =&gt;  input&gt;0</code></pre><h2 id="型別斷言語法"><a href="#型別斷言語法" class="headerlink" title="型別斷言語法"></a>型別斷言語法</h2><ul><li>斷言(Assertion)的語法很簡單，看到有使用關鍵字 as 或者 <code>&lt;T&gt;(...)</code> 的格式就是斷言的用法。</li><li>通常會使用斷言的情境，程式沒辦法推論某表達式的確切運算結果之型別，我們才會用選擇使出斷言來處理這種情境。</li><li>程式沒辦法推論？<ul><li>使用第三方的資源（Third-party resources），如使用外來JSON API 獲得的內容之型別格式、讀取檔案轉成 JSON 物件的結果、使用套件提供的功能、呼叫會回傳未知結果的函式。</li></ul></li></ul><pre><code class="typescript">const aNumber = returnsUnknow() as number;</code></pre><p>或是這樣：</p><pre><code class="typescript">const aNumber = &lt;number&gt;(returnsUnkonw());</code></pre><ul><li>請注意：斷言的語法部分，沒有人斷言在變數的名稱宣告部分—也就是是說，如果你這樣寫是錯的：</li></ul><pre><code class="typescript">const aNumber as number = returnsUnknow(); //這是錯誤的</code></pre><ul><li>概念有點像，決斷地告訴程式，某表達式的運算結果之型別。</li><li>變數本身不是被運算，而是被指派某個東西，而斷言應該是斷在被指派的值或表達式的運算結果上。</li></ul><h4 id="複雜一點"><a href="#複雜一點" class="headerlink" title="複雜一點"></a>複雜一點</h4><ul><li>函式宣告表達式有可以被斷言(畢竟函式作為表達式也會被當成值)</li></ul><pre><code class="typescript">const isPositive =(input =&gt; input &gt; 0) as (input: number) =&gt; boolean</code></pre><p>或者是：</p><pre><code class="javascript">const isPositive = &lt;(input: number) =&gt; boolean&gt;(input =&gt; input &gt;0);</code></pre><ul><li>上面斷言的寫法效果跟之前示範過基礎註記手法：</li></ul><pre><code class="typescript">const isPositive :(input: number) =&gt; boolean = input =&gt; input &gt;0;</code></pre><p>或者是</p><pre><code class="typescript">const isPositive ＝(input: number)：boolean =&gt; input &gt;0;</code></pre><h2 id="說下，敘述式與表達式的定義與差別"><a href="#說下，敘述式與表達式的定義與差別" class="headerlink" title="說下，敘述式與表達式的定義與差別"></a>說下，敘述式與表達式的定義與差別</h2><ol><li>敘述式：程式運行的流程，例如：JS 裡的判斷敘述式(if…else)以及迴圈敘述式(for 或者是 while 迴圈)。</li><li>表達式代表的則是程式碼運算的流程，並且會將運算結果回傳。其中兩者最關鍵差異為：敘述式不會回傳值，表達式則會。</li></ol><ul><li>以下為常見的表達式範例：</li></ul><pre><code class="typescript"> //運算表達式 Arithmetic expression 1+2*3 ; //回傳解果為7//邏輯表達式 Logical Expressiontrue &amp;&amp; (something === null || myAge &lt; 18) //回傳結果為 true 或 false//函式（或方法的呼叫） Function / Method Invocation ExpressionMath.pow(2,10) //回傳結果為 1024//三元運算子 Ternary OperatormyAge &lt; 18 ? &#39;Youngster&#39; : &#39;Adult&#39;; //回傳結果為 &#39;Youngster&#39; 因為 myAge &lt; 18 </code></pre><p>而敘述式：</p><pre><code class="javascript">if(/*expression 1*/){    //若 expression1 為 true 則執行}else if(/*expression 2*/){    //若 expression2 為 true 則執行} else{    //若 expression1、expression2 都不為 true 則執行此}//迴圈敘述式 Looping Statementwhile (/*expression */){    //若 expression 為 true， 則重複執行直到 expression 為 false 時跳脫}</code></pre><ul><li>按照上面敘述式的定義 — 由於敘述式是在敘述運行流程，而不會回傳值，所以你才不會在 JavaScript 裡面看到這樣的寫法：</li></ul><pre><code class="javascript">// JS 並有提供這寫法const status = if(Age &lt;18 ){    return &#39;Young&#39;}else{    return &#39;Adult&#39;}</code></pre><ul><li>注意：敘述式不一定是多行式（或區塊式）地呈現的最佳案例：變數宣告的指派敘述式(Variable Declaration Assignment Statement)<pre><code class="javascript">//變數宣告的 指派敘述式const foo =123;</code></pre></li><li>請問上面指派式會回傳什麼結果 =&gt;數字 123 或 udefined。正解為 udefined<ul><li>指派式的回傳結果為 undefined</li></ul></li><li>所以可以歸納出，javaScript 的變數宣告的指派式屬於敘述式，非表達式。</li></ul><h4 id="表達式什麼時候會以非單行的程式碼，也就是區塊的方式？"><a href="#表達式什麼時候會以非單行的程式碼，也就是區塊的方式？" class="headerlink" title="表達式什麼時候會以非單行的程式碼，也就是區塊的方式？"></a>表達式什麼時候會以非單行的程式碼，也就是區塊的方式？</h4><ul><li>立即呼叫函式表達式(IIFE)</li></ul><pre><code class="javascript">const status = (funcrion(myAge){                                 if (myAge &lt;18){ return &#39;Young&#39;}                                    return &#39;Adult&#39;                                })(16) //假設填入參數為16，呼叫該函式的結果回傳 &#39;Young&#39;</code></pre><ul><li>當可以分清楚表達式與敘述式差別後，回歸型別斷言</li><li>斷言的基礎語法<ul><li>斷言的語法只能用在表達式上，因為表達式具備回傳值，敘述式則沒有</li><li>因此，可以「斷言該表達式所運算結果之代表型別」</li></ul></li></ul><p>寫法如下：</p><pre><code class="javascript">&lt;expression&gt; as T assertion&lt;T assertion &gt;(&lt;expression&gt;)</code></pre><pre><code class="typescript">//運算表達式(foo+bar*baz) as number;// 邏輯表達式(isPositive(num) &amp;&amp; idEven(num)) as boolean;//functionMath.pow(2, 10) as number//(myAge &lt;18 ? &#39;Young&#39; : &#39;Adult&#39;) as string;//IIFE(funcrion(myAge){                     if (myAge &lt;18){ return &#39;Young&#39;}                        return &#39;Adult&#39;                    })(16) as number//只要是表達式，就算在其他敘述式、表達式內也能使用somefunction(foo as number , bar as string) as boolean</code></pre><p>換種寫法：</p><pre><code class="typescript">&lt;number&gt;(foo+bar*baz);// 邏輯表達式&lt;boolean&gt; (isPositive(num) &amp;&amp; idEven(num)) ;//function&lt;number&gt; Math.pow(2, 10) ;//&lt;string&gt;(myAge &lt;18 ? &#39;Young&#39; : &#39;Adult&#39;) ;//IIFE &lt;number&gt;(     funcrion(myAge){                     if (myAge &lt;18){ return &#39;Young&#39;}                        return &#39;Adult&#39;                    })(16)   );//只要是表達式，就算在其他敘述式、表達式內也能使用&lt;boolean&gt;somefunction(foo as number , bar as string) </code></pre><p>以上針對註記 Annotation V.S. 斷言 Assertion 做個簡單整理～</p>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FormData 表單的運用</title>
      <link href="/2022/01/06/FormData-1/"/>
      <url>/2022/01/06/FormData-1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/xf0DAqA.png" alt=""></p><p>最近遇到將表單資料存到後端的方式，過去一直以為是將資料整理為物件方式存取即可，後來發現使用FormData來建立物件傳送檔案即可!</p><ul><li>FormData 是一個表單格式，利用它將資料轉成表單的格式，並且以表單的形式回傳給後端</li></ul><h2 id="建立-FormData-物件"><a href="#建立-FormData-物件" class="headerlink" title="建立 FormData 物件"></a>建立 FormData 物件</h2><ul><li>最直接方式，先取得form的資料</li></ul><pre><code class="javascript">// 根據表單元素取得表單資料var form = document.querySelector(&#39;form&#39;);var formData = new FormData(form);// 可以用 append 把欄位灌進去表單中var formData = new FormData(); // 一開始表單的資料是空的formData.append(&#39;username&#39;, Chris); // 增加欄位formData.append(&#39;image&#39;, file); // 檔案也可以透過 append 放進來</code></pre><h2 id="以下介紹幾個基礎的使用方式："><a href="#以下介紹幾個基礎的使用方式：" class="headerlink" title="以下介紹幾個基礎的使用方式："></a>以下介紹幾個基礎的使用方式：</h2><ul><li><code>formData.append(name, value)</code> : 加入有 name 和 value 的表單資料(name:表單標籤的名稱,value: input 輸入的值)</li><li><code>formData.append(name, blob, fileName)</code> : 加入字段，就像它是 <code>&lt;input type=&quot;file&quot;&gt;</code>，第三個參數 fileName 設置檔案名</li><li><code>formData.delete(name)</code> : 移除帶有 name 的字段，</li><li><code>formData.get(name)</code> : 取得帶有 name 的值，</li><li><code>formData.has(name)</code> : 如果帶有給定 name 的字段，返回 true，否則返回 false。</li></ul><h2 id="使用axios-傳遞資料"><a href="#使用axios-傳遞資料" class="headerlink" title="使用axios 傳遞資料"></a>使用axios 傳遞資料</h2><pre><code class="javascript">var formData = new FormData();//宣告要取得的值var title = form.nameformData.append(&quot;formTitle&quot;, title);axios.post(&#39;upload_file&#39;, formData, {    headers: {      &#39;Content-Type&#39;: &#39;multipart/form-data&#39;    }})</code></pre><h2 id="補充-vue-Typescript-宣告型別"><a href="#補充-vue-Typescript-宣告型別" class="headerlink" title="補充 vue+Typescript 宣告型別"></a>補充 vue+Typescript 宣告型別</h2><ul><li>以 stack overflow 內的資料為例：<ul><li>可以使用 ref來取得DOM元素，並宣告該變數為HTMLFormElement<pre><code class="javascript">&lt;el-form    class=&quot;m-auto&quot;    ref=&quot;formRef&quot;    :model=&quot;form&quot;    :rules=&quot;rules&quot;  &gt;</code></pre><pre><code class="javascript">const formRef = ref&lt;HTMLFormElement&gt;();</code></pre></li></ul></li><li>另是使用 element-UI 的表單，也可以使用<br><code>import {  ElForm } from &quot;element-ui&quot;;</code></li></ul><p><a href="https://www.ucamc.com/articles/332-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8jquery-ajax-submit-%E5%82%B3%E9%80%81form%E8%A1%A8%E5%96%AEserialize-%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">如何使用jQuery AJAX submit 傳送form表單方法</a><br><a href="https://5xruby.tw/courses/javascript" target="_blank" rel="noopener">JavaScript / jQuery 前端開發入門實戰</a><br><a href="https://zh.javascript.info/formdata" target="_blank" rel="noopener">JavaScript Info-formData</a><br><a href="https://stackoverflow.com/questions/67074871/vue-3-typescript-unable-to-access-method-from-ref" target="_blank" rel="noopener">stackoverflow</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt3-取得資料的方式</title>
      <link href="/2021/12/10/Nuxt3-1/"/>
      <url>/2021/12/10/Nuxt3-1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/FAgr4vk.png" alt=""></p><h2 id="useAsyncData"><a href="#useAsyncData" class="headerlink" title="useAsyncData"></a>useAsyncData</h2><pre><code class="javascript">const {  data: Ref&lt;DataT&gt;,  pending: Ref&lt;boolean&gt;,  refresh: (force?: boolean) =&gt; Promise&lt;void&gt;,  error?: any} = useAsyncData(  key: string,  fn: () =&gt; Object,  options?: { lazy: boolean, server: boolean })</code></pre><ul><li>頁面、組件中都可以使用useAsyncData 取得資料</li><li>Key ：寫一個唯一的id<br>請求資料的函式</li><li>使用 useAsyncData 會回傳物件<br>data : 返回的資料<br>pedding : 指出資料是否被取得<br>refresh : 是否要刷新資料<h3 id="Option-介紹"><a href="#Option-介紹" class="headerlink" title="Option 介紹"></a>Option 介紹</h3></li><li>Lazy 延遲載入，直到數據獲取時，才顯示於頁面</li><li>默認會是 false</li><li>Server 頁面是在server端要載入，就可以設定為true</li><li>Pick 從回傳的資料中，選擇要使用的key值</li></ul><h3 id="useAsyncData撰寫方式的範例"><a href="#useAsyncData撰寫方式的範例" class="headerlink" title="useAsyncData撰寫方式的範例"></a>useAsyncData撰寫方式的範例</h3><ul><li>本地建立資料夾<ul><li>server/api/count.ts</li></ul></li></ul><pre><code class="javascript">let counter = 0export default () =&gt; {  counter++  return JSON.stringify(counter)}</code></pre><ul><li><code>app.vue</code>，使用 useAsyncData</li></ul><pre><code class="javascript">&lt;script setup&gt;const { data } = await useAsyncData(&#39;count&#39;, () =&gt; $fetch(&#39;/api/count&#39;))&lt;/script&gt;&lt;template&gt;  Page visits: {{ data }}&lt;/template&gt;</code></pre><h2 id="useFetch"><a href="#useFetch" class="headerlink" title="useFetch"></a>useFetch</h2><ul><li>頁面、組件中可以使用useFetch獲取任意URL資源</li><li>useFetch包裝 了useAsyncData 和 $fetch</li><li>會根據 URL 自動生成 Key，也會去推斷API 的類型a<pre><code class="javascript">const {data: Ref&lt;DataT&gt;,pending: Ref&lt;boolean&gt;,refresh: (force?: boolean) =&gt; Promise&lt;void&gt;,error?: any} = useFetch(url: string, options?)</code></pre></li></ul><pre><code class="javascript">&lt;script setup&gt;const { data } = await useFetch(&#39;/api/count&#39;)&lt;/script&gt;&lt;template&gt;  Page visits: {{ data.count }}&lt;/template&gt;</code></pre><h2 id="補充：其他2個類似方式"><a href="#補充：其他2個類似方式" class="headerlink" title="補充：其他2個類似方式"></a>補充：其他2個類似方式</h2><ul><li>useLazyAsyncData : 方法等於useAsyncData，僅設置了lazy選項為true</li><li>useLazyFetch : 方法等於useFetch，僅設置了lazy選項為true</li></ul><h2 id="實作範例："><a href="#實作範例：" class="headerlink" title="實作範例："></a>實作範例：</h2><ul><li><code>/api/mountains/everest</code><ul><li>API 會產生的物件資料</li></ul></li></ul><pre><code class="javascript">{  &quot;title&quot;: &quot;Mount Everest&quot;,  &quot;description&quot;: &quot;Mount Everest is Earth&#39;s highest mountain above sea level, located in the Mahalangur Himal sub-range of the Himalayas. The China–Nepal border runs across its summit point&quot;,  &quot;height&quot;: &quot;8,848 m&quot;,  &quot;countries&quot;: [    &quot;China&quot;,    &quot;Nepal&quot;  ],  &quot;continent&quot;: &quot;Asia&quot;,  &quot;image&quot;: &quot;https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Everest_kalapatthar.jpg/600px-Everest_kalapatthar.jpg&quot;}</code></pre><p>Nuxt 3 為了提高效率會在取得資料後，緩存在當前頁面的payload<br>官方建議：如果只打算在組件中使用到 title 和 description ，你可以使用關鍵的屬性運用即可<br>選項中加入 pick，裡面的值就是取得資料中的key值</p><pre><code class="javascript">&lt;script setup&gt;const { data: mountain } = await useFetch(&#39;/api/mountains/everest&#39;, { pick: [&#39;title&#39;, &#39;description&#39;] })&lt;/script&gt;&lt;template&gt;  &lt;h1&gt;{{ mountain.title }}&lt;/h1&gt;  &lt;p&gt;{{ mountain.description }}&lt;/p&gt;&lt;/template&gt;</code></pre><p><a href="https://v3.nuxtjs.org/docs/usage/data-fetching" target="_blank" rel="noopener">參考資料</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 基礎介紹 (2)</title>
      <link href="/2021/11/27/TS-2/"/>
      <url>/2021/11/27/TS-2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/xGK5aDO.png" alt=""></p><p>要熟悉 TypeScript 的型別訂定，並不容易，而且撰寫時也會花費較多的時間，但好處是減少程式碼的錯誤，也讓協作者更容易解讀對方撰寫的程式碼。<br>萬事起頭難，不同的地方就是多讀幾次，或是尋找相關的範例來相呼應！</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>傳統方法中，JavaScript 透過建構函式實現類別的概念，透過原型鏈實現繼承。而在 ES6 中，我們終於迎來了 class。</p><ul><li><p>定義一切事務的抽象特點</p></li><li><p>object  ：class 的實例  new Class 生成</p></li><li><p>物件導向 OOP(Object Oriented Programming) ：三大特性 封裝、繼承、多型</p><ul><li>封裝（Encapsulation）：將對資料的操作細節隱藏起來，只暴露對外的介面。外界呼叫端不需要（也不可能）知道細節，就能透過對外提供的介面來訪問該物件，同時也保證了外界無法任意更改物件內部的資料</li><li>繼承（Inheritance）：子類別繼承父類別，子類別除了擁有父類別的所有特性外，還有一些更具體的特性</li><li>多型（Polymorphism）：由繼承而產生了相關的不同的類別，對同一個方法可以有不同的響應<h3 id="複習下-ES6-撰寫方式"><a href="#複習下-ES6-撰寫方式" class="headerlink" title="複習下 ES6 撰寫方式"></a>複習下 ES6 撰寫方式</h3></li></ul></li><li><p>使用 class 定義類別，使用 constructor 定義建構函式。</p></li></ul><pre><code class="javascript">class Animal{    constructor(name){        this.name = name;    }     run () {       return `${this.name} is running`     }}const snake = new Animal(&#39;lily&#39;)console.log(snake.run()); // lily is running// 繼承的特性（繼承父類的屬性及方法）， 繼承 run 的方法class Dog extends Animal {  bark() {    return `${this.name} is barking`  }}const bao = new Dog(&#39;bao&#39;)console.log(bao.run()) // bao is runningconsole.log(bao.bark()) // bao is  barking</code></pre><ul><li>使用 extends 關鍵字實現繼承</li><li>这里我们重寫構造函式，注意在子類的構造函式中，必須使用 super 調用父類的方法，否則會報錯。</li></ul><pre><code class="typescript">// class Cat extends Animal {  constructor(name) {    super(name)    console.log(this.name) //maomao  }  run() {      // run 方法重寫    return &#39;Meow, &#39; + super.run()  }}const maomao = new Cat(&#39;maomao&#39;)console.log(maomao.run()) //Meow, maomao is runing</code></pre><h4 id="TypeScript-中的-class"><a href="#TypeScript-中的-class" class="headerlink" title="TypeScript 中的 class"></a>TypeScript 中的 class</h4><p>TypeScript 可以使用三種訪問修飾符（Access Modifiers）</p><ul><li>public 修飾的屬性或方法是公有的，可以在任何地方被調用到，預設所有的屬性和方法都是 public 的</li><li>private 修飾的屬性或方法是私有的，不能在声明它的类的外部調用</li><li>protected 修飾的屬性或方法是受保护的，它和 private 類似，區别是它在子類中也是允许被訪問的<br>例子說明：</li><li>name 被設定為了 public，所以直接訪問實例的 name 屬性是允許的。</li></ul><pre><code class="typescript">class Animal {    public name;    public constructor(name) {        this.name = name;    }}let a = new Animal(&#39;Jack&#39;);console.log(a.name); // Jacka.name = &#39;Tom&#39;;console.log(a.name); // Tom</code></pre><ul><li>希望有的屬性是無法直接存取的，這時候就可以用 private 了：</li><li>name 設為 private</li></ul><pre><code class="typescript">class Animal {    private name;    public constructor(name) {        this.name = name;    }}let a = new Animal(&#39;Jack&#39;);console.log(a.name); // Jacka.name = &#39;Tom&#39;;// index.ts(9,13): error TS2341: Property &#39;name&#39; is private and only accessible within class &#39;Animal&#39;.// index.ts(10,1): error TS2341: Property &#39;name&#39; is private and only accessible within class &#39;Animal&#39;.</code></pre><ul><li>使用 private 修飾的屬性或方法，在子類別中也是不允許訪問的：</li></ul><pre><code class="typescript">class Animal {    private name;    public constructor(name) {        this.name = name;    }}class Cat extends Animal {    constructor(name) {        super(name);        console.log(this.name);     }}// index.ts(11,17): error TS2341: Property &#39;name&#39; is private and only accessible within class &#39;Animal&#39;.</code></pre><ul><li>而如果是用 protected 修飾，則允許在子類別中訪問：</li><li>將上述程式碼修改一下</li></ul><pre><code class="typescript">class Animal {    protected name;    public constructor(name) {        this.name = name;    }}</code></pre><h3 id="類別-class-的型別"><a href="#類別-class-的型別" class="headerlink" title="類別 class 的型別"></a>類別 class 的型別</h3><p>給類別加上 TypeScript 的型別很簡單，與介面類似：</p><pre><code class="typescript">class Animal {    name: string;    constructor(name: string) {        this.name = name;    }    sayHi(): string {      return `My name is ${this.name}`;    }}let a: Animal = new Animal(&#39;Jack&#39;);console.log(a.sayHi()); // My name is Jack</code></pre><p><a href="https://willh.gitbook.io/typescript-tutorial/advanced/class" target="_blank" rel="noopener">類別</a></p><h3 id="class-與-interface"><a href="#class-與-interface" class="headerlink" title="class 與 interface"></a>class 與 interface</h3><ul><li>介面（Interfaces）：不同類別之間公有的屬性或方法，可以抽象成一個介面。介面可以被類別實現（implements）。一個類別只能繼承自另一個類別，但是可以實現多個介面</li><li>在 物件導向 世界中，一個 class 只能繼承自另外一個class</li><li>有時候不同 class 之前，可以有共同的特性，使用子類繼承父類的方法很難來完成</li><li>class 可以使用 implements 來實現 interface （提高 OOP 的靈活性）</li></ul><h4 id="範例一："><a href="#範例一：" class="headerlink" title="範例一："></a>範例一：</h4><ul><li>有 車子和手機，都有打開radio的功能</li><li>可以將兩個共有的抽取為一個 interface</li></ul><pre><code class="typescript">class Car  {  switchRadio(trigger: boolean) {  }}class Cellphone {  switchRadio(trigger: boolean) {  }}</code></pre><h4 id="可以將兩個共有的抽取為一個-interface"><a href="#可以將兩個共有的抽取為一個-interface" class="headerlink" title="可以將兩個共有的抽取為一個 interface"></a>可以將兩個共有的抽取為一個 interface</h4><ul><li>void =&gt; 代表什麼都不返回</li><li>在class 後面放入  implements 讓類去實現它</li></ul><pre><code class="typescript">interface Radio {  switchRadio(trigger: boolean): void;}class Car implements Radio {  switchRadio(trigger) {    return 123  }}class Cellphone implements Radio {  switchRadio() {  }}</code></pre><h4 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h4><ul><li>新特性為 檢查電池的容量</li><li>是手機有，但汽車沒有的</li><li>所以新建立一個 interface （檢查battery）<ul><li>此功能只有手機有，所以放在手機的class</li></ul></li></ul><pre><code class="typescript">interface Battery {  checkBatteryStatus(): void;}// 要實現多个介面，我们只需要中間用 都好 隔开即可。class Cellphone implements Radio, Battery {  switchRadio() {  }  checkBatteryStatus() {  }}</code></pre><h4 id="此外-interface-之間有繼承關係"><a href="#此外-interface-之間有繼承關係" class="headerlink" title="此外 interface 之間有繼承關係"></a>此外 interface 之間有繼承關係</h4><ul><li>建立 radioWithBattery 繼承 Radio ，裡面再放入檢查電量的設定</li></ul><pre><code class="typescript">interface radioWithBattery extends Radio {  checkBatteryStatus(): void;}class Cellphone implements radioWithBattery {  switchRadio() {  }  checkBatteryStatus() {  }}</code></pre><p><a href="https://willh.gitbook.io/typescript-tutorial/advanced/class-and-interfaces" target="_blank" rel="noopener">類別與介面</a></p><h2 id="enum-列舉"><a href="#enum-列舉" class="headerlink" title="enum 列舉"></a>enum 列舉</h2><ul><li>常數指執行程序中不會被改變的值，在 JS 中我們一般會用 const 來宣告</li><li>但有些取值是在一定範圍內的一系列常數。<ul><li>如：一周內七天、三原色(紅、黃、藍)、方向(上、下、左、右)<h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3></li></ul></li><li>數字列舉</li><li>列舉成員會被賦值為從0，開始遞增</li></ul><pre><code class="typescript">// 數字列舉，一个數字列舉可以用 enum 这个關鍵詞來定義，我们定義一系列的方向，然后这里面的值，列舉成员会被赋值为從 0 开始遞增的數字,enum Direction {  Up,  Down,  Left,  Right,}console.log(Direction.Up) //0// 還有一个神奇的點是這個列舉还做了反向映射console.log(Direction[0]) //up</code></pre><p><img src="https://i.imgur.com/VMRV8oM.png" alt=""></p><ul><li>可以手動賦予值</li><li>未手動賦值的列舉項會接著上一個列舉項遞增。</li></ul><pre><code class="typescript">  Up = 10,  Down,  Left,  Right,}console.log(Direction.Down) // 11 ，後面的項目數值會遞增console.log(Direction[0]) //up</code></pre><h3 id="範例二-1"><a href="#範例二-1" class="headerlink" title="範例二"></a>範例二</h3><pre><code class="typescript">// 字符串列舉enum Direction {  Up = &#39;UP&#39;,  Down = &#39;DOWN&#39;,  Left = &#39;LEFT&#39;,  Right = &#39;RIGHT&#39;,}const value = &#39;UP&#39;if (value === Direction.Up) {  console.log(&#39;go up!&#39;)}</code></pre><h3 id="範例三"><a href="#範例三" class="headerlink" title="範例三"></a>範例三</h3><ul><li>常數列舉<ul><li>編譯後的邏輯變少了</li><li>使用常數列舉會內連列舉的用法並且不會將設定的列舉編譯成 JS 程式碼</li></ul></li></ul><pre><code class="typescript">const  enum Direction {  Up = &#39;UP&#39;,  Down = &#39;DOWN&#39;,  Left = &#39;LEFT&#39;,  Right = &#39;RIGHT&#39;,}const value = &#39;UP&#39;if (value === Direction.Up) {  console.log(&#39;go up!&#39;)}</code></pre><p><img src="https://i.imgur.com/Fp2XF0y.png" alt=""></p><hr><h2 id="泛型-Generics"><a href="#泛型-Generics" class="headerlink" title="泛型 Generics"></a>泛型 Generics</h2><ul><li>要解決什麼問題<ul><li>建立函式 echo 參數為 arg ，接著宣告變數傳入參數</li><li>但其中的型別沒有設定</li><li>傳入和返回的型別無法統一</li></ul></li></ul><pre><code class="typescript">function echo(arg) {  return arg}const result = echo(123)// 這時候我們發現了一個問題，我们傳入了數字，但是返回了 any</code></pre><p><img src="https://i.imgur.com/lo6XFH8.png" alt=""></p><ul><li>當在建構 function、internet及Class 時，你會希望這些component都能被重複運用的 Generic(泛型)提供了一個彈性的作法。</li><li>語法是: <code>&lt;T&gt;</code></li></ul><h3 id="範例一-1"><a href="#範例一-1" class="headerlink" title="範例一"></a>範例一</h3><ul><li>泛型（Generics）是指在定義function、internet及Class的时候，不预先指定具體的型別，而在使用的时候再指定型別的一種特性。</li></ul><pre><code class="typescript">function echo&lt;T&gt;(arg: T): T {  return arg}const result = echo(123)</code></pre><p><img src="https://i.imgur.com/X4quRIj.png" alt=""></p><h3 id="範例二-傳入多個"><a href="#範例二-傳入多個" class="headerlink" title="範例二 傳入多個"></a>範例二 傳入多個</h3><pre><code class="typescript">function swap&lt;T, U&gt;(tuple: [T, U]): [U, T] {  return [tuple[1], tuple[0]]}const result = swap([&#39;string&#39;, 123])</code></pre><p><img src="https://i.imgur.com/hJ5IqSY.png" alt=""></p><h3 id="泛型第二部分-约束泛型"><a href="#泛型第二部分-约束泛型" class="headerlink" title="泛型第二部分 - 约束泛型"></a>泛型第二部分 - 约束泛型</h3><ul><li>帶有「限制」的泛型</li></ul><pre><code class="typescript">function echoWithArr&lt;T&gt;(arg: T): T {  console.log(arg.length)  return arg}// 上例中，泛型 T 不一定包含属性 length，我们可以给他傳入任意型別，當然有些不包括 length 属性，那样就會報錯// 我們使用了 extends 約束了泛型 T 必須符合介面 IWithLength 的形狀，也就是必須包含 length 屬性。interface IWithLength {  length: number;}function echoWithLength&lt;T extends IWithLength&gt;(arg: T): T {  console.log(arg.length)  return arg}echoWithLength(&#39;str&#39;)const result3 = echoWithLength({length: 10})const result4 = echoWithLength([1, 2, 3])//此時如果呼叫 loggingIdentity 的時候，傳入的 arg 不包含 length，那麼在編譯階段就會報錯了echoWithLength(7);// index.ts(10,17): error TS2345: Argument of type &#39;7&#39; is not assignable to parameter of type &#39;Lengthwise&#39;</code></pre><h3 id="泛型第三部分-泛型在-class-和-interface-中的使用"><a href="#泛型第三部分-泛型在-class-和-interface-中的使用" class="headerlink" title="泛型第三部分 - 泛型在 class 和 interface 中的使用"></a>泛型第三部分 - 泛型在 class 和 interface 中的使用</h3><ol><li>泛型在 class 的使用</li></ol><ul><li>在第一個程式中存在一个问题，它允許你向 Queue 中添加任何型別的數據，當然，當數據被彈出隊列时，也可以是任意類型</li><li>在下方的範例中，看起来可以向隊列中添加 string 型別的數據，但是那麼在使用的過程中，就會出現無法捕捉的錯誤</li></ul><pre><code class="typescript">class Queue {  private data = [];  push(item) {    return this.data.push(item)  }  pop() {    return this.data.shift()  }}const queue = new Queue()queue.push(1)queue.push(&#39;str&#39;)console.log(queue.pop().toFixed())console.log(queue.pop().toFixed())</code></pre><pre><code class="typescript">class Queue&lt;T&gt; {  private data = [];  push(item: T) {    return this.data.push(item)  }  pop(): T {    return this.data.shift()  }}const queue = new Queue&lt;number&gt;()</code></pre><ol start="2"><li>泛型在  interface 中的使用</li></ol><ul><li>之前提過可以使用介面的方式來定義一個函式需要符合的形狀</li><li>當然也可以使用含有泛型的介面來定義函式的形狀：</li></ul><pre><code class="typescript">//泛型和 interfaceinterface KeyPair&lt;T, U&gt; {  key: T;  value: U;}let kp1: KeyPair&lt;number, string&gt; = { key: 1, value: &quot;str&quot;}let kp2: KeyPair&lt;string, number&gt; = { key: &quot;str&quot;, value: 123}let arr:number[] = [1,2,3];let arrTwo:Array&lt;number&gt; = [1,2,3]</code></pre><p><img src="https://i.imgur.com/6GXBwCI.png" alt=""></p><p>interface 搭配泛型之后，可以靈活的返回不同的型別</p><ul><li><p>創建一个拥有特定型別的容器，class 和 泛型 仿佛给一个容器貼上標籤一样</p></li><li><p>泛型就好像一个可變的參數，在用的时候傳入，生成这個不同型別的一个容器，</p></li><li><p>上個部分的用它来靈活的约束参数的型別，不需要參數是一个特别死板的型別，不希望他是一个特定 string、number 型別，我要傳入的参數必须有某某屬性、某某方法，否則就會報錯。</p></li><li><p>在函式使用的时候，函式的这个型別推斷，不會進入到函式中，所以使用表達式，没法明確建立型別的绑定，用泛型可以让我们打破這個鴻溝，這個时候就可以返回它傳入的類型。</p><h2 id="Type-Aliases"><a href="#Type-Aliases" class="headerlink" title="Type Aliases"></a>Type Aliases</h2></li><li><p>就是给型別起一個别名，讓它可以更方便的被重用。</p></li></ul><pre><code class="typescript">let sum: (x: number, y: number) =&gt; numberconst result = sum(1,2)type PlusType = (x: number, y: number) =&gt; numberlet sum2: PlusType// 支持聯合type StrOrNumber = string | numberlet result2: StrOrNumber = &#39;123&#39;result2 = 123 //沒有錯// 字符串字面量 ，類似在列舉的常數變量type Directions = &#39;Up&#39; | &#39;Down&#39; | &#39;Left&#39; | &#39;Right&#39;// 使toWhere 這個變量為 Direction 類型let toWhere: Directions = &#39;Up&#39;</code></pre><ul><li>我們使用 type 定了一個字串字面量型別 EventNames，它只能取三種字串中的一種。<br>注意，型別別名與字串字面量型別都是使用 type 進行定義。</li></ul><pre><code class="typescript">type EventNames = &#39;click&#39; | &#39;scroll&#39; | &#39;mousemove&#39;;function handleEvent(ele: Element, event: EventNames) {    // do something}handleEvent(document.getElementById(&#39;hello&#39;), &#39;scroll&#39;);  // 沒問題handleEvent(document.getElementById(&#39;world&#39;), &#39;dbclick&#39;); // 報錯，event 不能為 &#39;dbclick&#39;// index.ts(7,47): error TS2345: Argument of type &#39;&quot;dbclick&quot;&#39; is not assignable to parameter of type &#39;EventNames&#39;.</code></pre><h2 id="Intersection-Types"><a href="#Intersection-Types" class="headerlink" title="Intersection Types"></a>Intersection Types</h2><ul><li>使用 <code>&amp;</code> 符號</li><li>經過上面的 type 使 IName 就有了 name 和 age兩個屬性在裡面<ul><li>和interface 的 extends 有點類似，都是為了實現物件形狀組合和擴展</li></ul></li></ul><pre><code class="typescript">interface IName  {  name: string}type IPerson = IName &amp; { age: number }// 經過上面的 type 使 IName 就有了 name 和 age兩個屬性在裡面let person: IPerson = { name: &#39;hello&#39;, age: 12}</code></pre><p>什麼时候用介面，什麼时候用 Type Aliases：</p><ul><li>interface 是 docker typing 的實現方式，是一種獨特類型，和extends class  implememts 有關的用interface ，</li><li>和交叉，聯合型別的有關的用 Type Aliases；</li></ul><h2 id="內建物件"><a href="#內建物件" class="headerlink" title="內建物件"></a>內建物件</h2><h3 id="DOM-和-BOM-的內建物件"><a href="#DOM-和-BOM-的內建物件" class="headerlink" title="DOM 和 BOM 的內建物件"></a>DOM 和 BOM 的內建物件</h3><p>DOM 和 BOM 提供的內建物件有：<br>Document、HTMLElement、Event、NodeList 等。<br>TypeScript 中會經常用到這些型別：</p><pre><code class="typescript">let body: HTMLElement = document.body;let allDiv: NodeList = document.querySelectorAll(&#39;div&#39;);document.addEventListener(&#39;click&#39;, function(e: MouseEvent) {  // Do something});</code></pre><h3 id="ECMAScript-的內建物件"><a href="#ECMAScript-的內建物件" class="headerlink" title="ECMAScript 的內建物件"></a>ECMAScript 的內建物件</h3><ul><li>Boolean、Error、Date、RegExp 等。</li></ul><pre><code class="typescript">let b: Boolean = new Boolean(1);let e: Error = new Error(&#39;Error occurred&#39;);let d: Date = new Date();let r: RegExp = /[a-z]/;</code></pre><p><a href="https://github.com/Microsoft/TypeScript/tree/main/src/lib">TypeScript 內置</a></p><h2 id="Utility-Types"><a href="#Utility-Types" class="headerlink" title="Utility Types"></a>Utility Types</h2><p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html" target="_blank" rel="noopener">官方</a><br>Typescript 還提供了一些功能性，帮助性的型別，這些型別，大家在 JS 的世界是看不到的，這些型別叫做 utility types，提供一些簡潔明快而且非常方便的功能。</p><ul><li>使用  Partial</li><li>Omit</li></ul><pre><code class="typescript">// partial，它可以把傳入的型別都變成可選interface IPerson {  name: string  age: number}let viking: IPerson = { name: &#39;viking&#39;, age: 20 }type IPartial = Partial&lt;IPerson&gt;let viking2: IPartial = { } //可以都不傳，也不會報錯// Omit，它返回的型別可以忽略傳入型別的某个屬性// 以下範例 將 name 忽略掉type IOmit = Omit&lt;IPerson, &#39;name&#39;&gt;let viking3: IOmit = { age: 20 }</code></pre><p>資料來源：</p><ol><li>線上課程：實戰 Vue3.0(正式版) + TS </li><li><a href="https://willh.gitbook.io/typescript-tutorial/" target="_blank" rel="noopener">TypeScript 新手指南</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 基礎介紹 (1)</title>
      <link href="/2021/11/27/TS-1/"/>
      <url>/2021/11/27/TS-1/</url>
      
        <content type="html"><![CDATA[<p>因為工作需求，有需多缺乏的技能需要補齊，TypeScript 就是其中一項。<br>上班看不懂的時候邊查詢，空閒時間再來上課不足不懂的知識點，但還是得透過文章的整理來好好消化一下！<br>既然要開始介紹 TypeScript 就先來說說使用它的原因吧。</p><h2 id="為什麼使用-TypeScript"><a href="#為什麼使用-TypeScript" class="headerlink" title="為什麼使用 TypeScript"></a>為什麼使用 TypeScript</h2><ul><li><p>程式語言中，有區分強型別和弱型別兩種類型。</p></li><li><p>而 JavaScript 是弱型別語言。</p></li><li><p>在 JavaScript 中，他會自己判斷應該執行的型別。自行做[型別自動轉換]</p></li><li><p>在快速開發時，很有可能引發一些預期之外的錯誤，相當不利於多人協同開發。</p><ul><li>優點：寫法彈性。</li><li>缺點：無法在開發時期檢查型別。</li></ul></li><li><p>依據上述的問題，所以使用 TypeScript</p></li></ul><ol><li>使程式碼更容易理解 （如函式需傳入的參數可以明確設定型別）</li><li>減少程式碼撰寫的錯誤</li><li>可以完全兼容JavaScript，此外能與 ES6 完美結合，並提供更多支援寫法。</li></ol><h2 id="安裝介紹"><a href="#安裝介紹" class="headerlink" title="安裝介紹"></a>安裝介紹</h2><ul><li>就是直接到官方網站查看，依需求安裝<br><img src="https://i.imgur.com/wfMqk4w.png" alt=""></li></ul><p><code>npm install -g typescript</code></p><ul><li>檢查版本<br><code>tsc -v</code></li></ul><h2 id="型別介紹"><a href="#型別介紹" class="headerlink" title="型別介紹"></a>型別介紹</h2><p>從 JavaScript 型別分類開始</p><h3 id="字串-string"><a href="#字串-string" class="headerlink" title="字串 string"></a>字串 string</h3><ul><li>和ES6一樣，可以使用[字串樣板 Template Literals]<pre><code class="TypeScript">let firstName:string = &#39;NaNa&#39;let message: string = `Hello,${firstName}`</code></pre></li></ul><pre><code>### 布林值 boolean布林值是最基礎的資料型別，在 TypeScript 中，使用 boolean 定義布林值型別： ```typescriptlet isDonw:boolean = false </code></pre><p>注意：使用建構函式 Boolean 建立的物件不是布林值：</p><ul><li>事實上 new Boolean() 返回的是一個 Boolean 物件<pre><code class="JavaScript">let createdByNewBoolean: boolean = new Boolean(1);</code></pre></li></ul><p>// Type ‘Boolean’ is not assignable to type ‘boolean’.<br>//   ‘boolean’ is a primitive, but ‘Boolean’ is a wrapper object. Prefer using ‘boolean’ when possible.</p><pre><code></code></pre><p>在 TypeScript 中，boolean 是 JavaScript 中的基本型別，而 Boolean 是 JavaScript 中的建構函式。</p><pre><code>### 數值 number```TypeScriptlet age:number = 10let notANumber: number = NaN;let infinityNumber: number = Infinity;</code></pre><h3 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h3><ul><li>與 void 的區別是，undefined 和 null 是所有型別的子型別<ul><li>unfefined 可以賦值給number類型的變數</li><li>陣列被赋值為 undefined 或 null 不会报错</li><li><code>let num:number = undefined</code></li></ul></li></ul><pre><code class="TypeScript">let u: undefined = undefined;let n: null = null;// 這樣也不會報錯let u: undefined;let num: number = u;</code></pre><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><ul><li>通常用在當函式沒有回傳值時。<br><img src="https://i.imgur.com/OOnpUUH.png" alt=""></li><li>而 void 型別的變數不能賦值給 number 型別的變數：<pre><code class="JavaScript">let u: void;let num: number = u;</code></pre></li></ul><p>// Type ‘void’ is not assignable to type ‘number’.</p><pre><code>### any* 在任意值上任何属性都是允許的    * 當有明確型別時，應避免使用 any     * 因為 any 可以任意調用方法和屬性，很有可能出現錯誤（就喪失類型檢查的意義）如果是 any 型別，則允許被賦值為任意型別```TypeScriptlet myFavoriteNumber: any = &#39;seven&#39;;myFavoriteNumber = 7;</code></pre><h4 id="未宣告型別的變數"><a href="#未宣告型別的變數" class="headerlink" title="未宣告型別的變數"></a>未宣告型別的變數</h4><p>變數如果在宣告的時候，未指定其型別，那麼它會被識別為任意值型別：</p><pre><code class="JavaScript">let something;something = &#39;seven&#39;;something = 7;something.setName(&#39;Tom&#39;);</code></pre><h3 id="陣列-Array-與-元組-Tuple"><a href="#陣列-Array-與-元組-Tuple" class="headerlink" title="陣列 Array 與 元組 Tuple"></a>陣列 Array 與 元組 Tuple</h3><h4 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h4><ol><li>在想宣告的型別後面加上[]，宣告為某個型別的Array<pre><code class="TypeScript">let idList:number[] = [1,2,3]</code></pre></li><li>使用陣列泛型，Array &lt;元素型別&gt;<pre><code class="TypeScript">let list:Array&lt;number&gt; = [1,2,3]</code></pre></li></ol><ul><li>注意，當已經宣告這是個數字陣列<ul><li>要 push 字串進去，會出現錯誤<pre><code class="TypeScript">let list:Array&lt;number&gt; = [1,2,3]list.push(&quot;4&quot;)</code></pre><img src="https://i.imgur.com/bzszCFn.png" alt=""><h3 id="元組-Tuple"><a href="#元組-Tuple" class="headerlink" title="元組 Tuple"></a>元組 Tuple</h3></li><li>剛剛的陣列將同一類型的數據放在一起，但是，想加入不同型別的數據怎麼辦？</li><li>表示方式與陣列相似，將型別寫在<code>[]</code></li><li>有固定長度和元素型別的陣列<pre><code class="typescript">// 表示方式和陣列非常相似，只不过它将型別寫在了里面 這時會對每一項產生了限定的作用let user: [string, number] = [&#39;viking&#39;, 20]//但是当我们少寫一項 就會報錯，同樣多寫也會報錯user = [&#39;molly&#39;, 20, true]</code></pre><img src="https://i.imgur.com/MfhvOd7.png" alt=""></li></ul></li></ul><p><a href="https://willh.gitbook.io/typescript-tutorial/advanced/tuple#can-kao" target="_blank" rel="noopener">元組</a></p><h3 id="物件的型別——介面-Interface"><a href="#物件的型別——介面-Interface" class="headerlink" title="物件的型別——介面 (Interface)"></a>物件的型別——介面 (Interface)</h3><ul><li>Interface 可以用來定義物件，還有由物件所延伸的型別（例如，陣列、函式）</li><li><code>age?: number;</code> 在該屬性後面加上 <code>?</code> 表示為可選屬性 ，也就是在宣告新的物件時，可以彈性加入或不加入age （也不會報錯）</li></ul><pre><code class="typescript">// 我们定義了一個介面 Personinterface Person {  name: string;  age: number;}// 接着定义了一个變數 NaNa，它的型別是 Person。//这样，我们就约束了 NaNa 的形狀必須和介面 Person 一致。let NaNa: Person ={  name: &#39;NaNa&#39;,  age: 20}//有时我们希望不要完全匹配一个形狀，那么可以用可選屬性：interface Person {    name: string;    age?: number;}let NaNa: Person = {    name: &#39;NaNa&#39;}</code></pre><h3 id="唯讀屬性"><a href="#唯讀屬性" class="headerlink" title="唯讀屬性"></a>唯讀屬性</h3><ul><li>readonly 是用在屬性上面</li><li>希望物件中的一些欄位只能在建立的時候被賦值，那麼可以用 readonly 定義唯讀屬性</li></ul><pre><code class="typescript">interface Person {  readonly id: number;  name: string;  age?: number;}// 建立物件let Vic: Person ={  id:1,    name: &#39;Vic&#39;,  age: 20}//不能去修改id    Vic.id = 9527</code></pre><h3 id="函式型別"><a href="#函式型別" class="headerlink" title="函式型別"></a>函式型別</h3><ul><li>函式可以作為參數、可以存入陣列，可以被另外一個函式返回、可以被賦值另外一個變數</li><li>函式是由兩部分構成，一個是輸入(通過不同參數來實現)，二為輸出(就是函數的返回結果)<h4 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h4></li><li>設定參數型別、返回的型別</li><li>若參數設定了 x、y兩個，也就只能放入兩個<pre><code class="typescript">// 来到我们的第一个例子，约定输入，约定输出function add(x: number, y: number): number {return x + y}</code></pre><img src="https://i.imgur.com/RLOECvw.png" alt=""></li></ul><h4 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h4><ul><li>也可以設定可選參數</li><li>在 z? 表示 z 可有可無</li></ul><pre><code class="typescript">// 可选参数function add(x: number, y: number, z?: number): number {  if (typeof z === &#39;number&#39;) {    return x + y + z  } else {    return x + y  }}</code></pre><ul><li>而在可選參數後面不可以再添加確定參數<br><img src="https://i.imgur.com/qzQRT0r.png" alt=""></li></ul><h4 id="例外說明：引數預設值"><a href="#例外說明：引數預設值" class="headerlink" title="例外說明：引數預設值"></a>例外說明：引數預設值</h4><ul><li>在 ES6 中，我們允許給函式的引數新增預設值，TypeScript 會將添加了預設值的引數識別為可選引數：</li></ul><pre><code class="typescript">function buildName(firstName: string, lastName: string = &#39;Cat&#39;) {    return firstName + &#39; &#39; + lastName;}let tomcat = buildName(&#39;Tom&#39;, &#39;Cat&#39;);let tom = buildName(&#39;Tom&#39;); // 因為 lastName 添加了預設值，識別為可選引數</code></pre><p>此時就不受「可選引數必須接在必需引數後面」的限制了：</p><pre><code class="typescript">function buildName(firstName: string = &#39;Tom&#39;, lastName: string) {    return firstName + &#39; &#39; + lastName;}let tomcat = buildName(&#39;Tom&#39;, &#39;Cat&#39;);let cat = buildName(undefined, &#39;Cat&#39;);</code></pre><h4 id="例子三"><a href="#例子三" class="headerlink" title="例子三"></a>例子三</h4><ul><li>函式的表達式</li></ul><pre><code class="typescript">const add = (x: number, y: number, z?: number): number =&gt; {  if (typeof z === &#39;number&#39;) {    return x + y + z  } else {    return x + y  }}// 函式本身的类型const add2: (x: number, y: number, z?:number) =&gt; number = add</code></pre><ul><li>函式不只輸入、輸出有類型，本身也有類型<br><img src="https://i.imgur.com/f2Ym2Zb.png" alt=""></li><li>將 add2 賦予 string 會出錯誤</li><li>所以須聲明一模一樣的 <code>const add2: (x: number, y: number, z?:number) =&gt; number = add</code><br><img src="https://i.imgur.com/FvS1OvL.png" alt=""></li></ul><h4 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h4><ul><li>使用 interface (單純定義函式的 Interface)</li></ul><pre><code class="typescript">// interface 描述函数类型const sum = (x: number, y: number) =&gt; {  return x + y}interface ISum {  (x: number, y: number): number}const sum2: ISum = sum</code></pre><ul><li>另一個範例</li></ul><pre><code class="typescript">interface SearchFunc {    (source: string, subString: string): boolean;}let mySearch: SearchFunc;mySearch = function(source: string, subString: string) {    return source.search(subString) !== -1;}</code></pre><hr><h2 id="型別推論（Type-Inference）-聯合型別（Union-Types）-型別斷言（Type-Assertion）"><a href="#型別推論（Type-Inference）-聯合型別（Union-Types）-型別斷言（Type-Assertion）" class="headerlink" title="型別推論（Type Inference）\ 聯合型別（Union Types） \ 型別斷言（Type Assertion）"></a>型別推論（Type Inference）\ 聯合型別（Union Types） \ 型別斷言（Type Assertion）</h2><h3 id="型別推論（Type-Inference）"><a href="#型別推論（Type-Inference）" class="headerlink" title="型別推論（Type Inference）"></a>型別推論（Type Inference）</h3><ul><li>可以推論出我們賦值過程中，這個變數應該是什麼類型的</li><li>TS 會在沒有明確指定型別的時候，推測出型別<br><img src="https://i.imgur.com/280zYEs.png" alt=""></li></ul><h3 id="聯合型別（Union-Types）"><a href="#聯合型別（Union-Types）" class="headerlink" title="聯合型別（Union Types）"></a>聯合型別（Union Types）</h3><ul><li>用分隔符號</li><li>當 TypeScript 不确定一个聯合型別的變數到底是哪個型別的时候，我们只能使用此聯合型別的所有型別裡共有的屬性或方法</li></ul><pre><code class="TypeScript">// 允許 numberOrString 的型別是 string 或者 number，但是不能是其他型別。let numberOrString: number | string // 而在使用此聯合型別的所有型別里共有的屬性性或方法：numberOrString.length  //會報錯 （只有 string 適用）numberOrString.toString() //string 和 number 的共同屬性是沒問題//若放在函式定義型別function getLength(something: string | number): number {    return something.length;}// index.ts(2,22): error TS2339: Property &#39;length&#39; does not exist on type &#39;string | number&#39;.//   Property &#39;length&#39; does not exist on type &#39;number&#39;.</code></pre><ul><li>聯合型別的變數在被賦值的時候，會根據型別推論的規則推斷出一個型別：</li></ul><pre><code class="TypeScript">let numberOrString: string | number;numberOrString = &#39;seven&#39;;console.log(numberOrString.length); // 5numberOrString = 7;console.log(numberOrString.length); // 編譯時報錯// index.ts(5,30): error TS2339: Property &#39;length&#39; does not exist on type &#39;number&#39;.</code></pre><p>上例中，第二行的 numberOrString 被推斷成了 string，存取它的 length 屬性不會報錯。<br>而第四行的 numberOrString 被推斷成了 number，存取它的 length 屬性時就報錯了。</p><ul><li>type guard </li><li>當遇到聯合類型，可以使用條件語句，自動幫你縮小型別範圍</li></ul><pre><code class="javascript">// typescript 在不同的条件分支里面，智能的缩小了范围，这样我们代码出错的几率就大大的降低了。function getLength2(input: string | number): number {  if (typeof input === &#39;string&#39;) {    return input.length  } else {    return input.toString().length  }}</code></pre><h3 id="型別斷言（Type-Assertion）"><a href="#型別斷言（Type-Assertion）" class="headerlink" title="型別斷言（Type Assertion）"></a>型別斷言（Type Assertion）</h3><ul><li>開發者比 TS 更了解編寫的程式碼。因此，TS 允許開發者覆蓋它的推論，這樣的機制稱為「型別斷言」。</li></ul><pre><code class="typescript">// 这里我们可以用 as 關鍵字，告诉typescript 这里我把它看作是一個 string，你可以给他用 string 的方法。function getLength(input: string | number): number {  const str = input as string  if (str.length) {    return str.length  } else {    const number = input as number    return number.toString().length  }}</code></pre><ul><li>型別斷言不是型別轉換，斷言成一個聯合型別中不存在的型別是不允許的：</li></ul><pre><code class="TypeScript">function toBoolean(something: string | number): boolean {    return &lt;boolean&gt;something;}// index.ts(2,10): error TS2352: Type &#39;string | number&#39; cannot be converted to type &#39;boolean&#39;.//   Type &#39;number&#39; is not comparable to type &#39;boolean&#39;.</code></pre><p>基礎型別先介紹到這裡，下篇將介紹一些進階用法～</p><p>資料來源：</p><ol><li>線上課程：實戰 Vue3.0(正式版) + TS </li><li><a href="https://willh.gitbook.io/typescript-tutorial/" target="_blank" rel="noopener">TypeScript 新手指南</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>講講幾個 Nuxt.js 重要觀念</title>
      <link href="/2021/11/10/Nuxt-2/"/>
      <url>/2021/11/10/Nuxt-2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/4LE0BUW.png" alt=""></p><p>在使用 Nuxt.js 開啟專案後，會自動生成不少文件檔案，今天就來介紹幾樣基礎設定以及檔案的運用吧！</p><h2 id="了解-Nuxt-路徑引用規則"><a href="#了解-Nuxt-路徑引用規則" class="headerlink" title="了解 Nuxt 路徑引用規則"></a>了解 Nuxt 路徑引用規則</h2><ul><li><code>~</code>以及<code>@</code> ：根目錄 <ul><li>(注意：nuxt.conf.js、非 nuxt 結構的 js 檔 除外)</li></ul></li><li>波浪或小老鼠 :從根目錄 搜尋assets 資料夾<br><img src="https://i.imgur.com/CNUlrGz.png" alt=""><br>以下也一樣<br><code>import test from &quot;@/assets/js/test.js&quot;</code></li></ul><ol start="2"><li><code>./</code>：自己的目錄</li></ol><ul><li>nuxt.conf.js、以及非 nuxt 結構要這樣撰寫<br><img src="https://i.imgur.com/2qLJ5te.png" alt=""></li></ul><ol start="3"><li>放在 static 資料夾裡的引用方式(直接斜線)<code>&lt;img src=&quot;/demo.png&quot; alt=&quot;&quot;&gt;</code></li><li>補充：<br><a href="https://docs.google.com/presentation/d/15q4Vsl3I6Bf5F1f2LdNj_OvF5fcrl7aPv5aA1E39Kjw/edit#slide=id.g813fdce503_0_0" target="_blank" rel="noopener">2.4 nuxt 圖片處理 - webpack 相關設定</a></li></ol><ul><li><p>在asset 加入 img 資料夾(將圖片放在這裡)<br><code>&lt;img src=&quot;@/assets/img/demo.png&quot; alt=&quot;&quot;&gt;</code><br><img src="https://i.imgur.com/iSsni0c.png" alt=""></p></li><li><p>放在css作背景圖<br>  *<code>background: url(~assets/img/demo.png);  //nuxt css 引入圖片不能加斜線</code></p><ul><li>也不能將波浪改為@<br>:::info<br>原本波浪斜線方式:<br><code>background: url(~/assets/img/demo.png);</code><br>:::<br><img src="https://i.imgur.com/ekDF3vK.png" alt=""></li></ul></li></ul><h2 id="nuxt-config-js-設定"><a href="#nuxt-config-js-設定" class="headerlink" title="nuxt.config.js 設定"></a>nuxt.config.js 設定</h2><ul><li>vue cli3 設定vue 專案是透過是 main.js/ vue.config.js 這兩隻檔案。<ul><li>main.js 為程式的進入點</li></ul></li><li>nuxt 則統一用 nuxt.conf.js 做為設定。<ul><li>要編輯這份文件達到專案需求</li><li>如 wedpack 是放在 build</li></ul></li></ul><p><img src="https://i.imgur.com/aLpoUcR.png" alt=""></p><ul><li>此外在此檔案可以做標題、引入 CDN 等基礎設置<ul><li>head,meta 可以做表頭的設定</li><li>script 可以引入 JS 的檔案或 CDN 資源</li></ul></li><li>css 全域設定，也同樣放在這裡<ul><li><a href="https://nuxtjs.org/docs/configuration-glossary/configuration-css/" target="_blank" rel="noopener">The css property</a><pre><code class="javascript">css: [&#39;~/assets/scss/demo.scss&#39;],</code></pre></li></ul></li></ul><pre><code>```javascriptexport default {  // Global page headers: https://go.nuxtjs.dev/config-head  head: {    title: &#39;myNuxt&#39;,    htmlAttrs: {      lang: &#39;en&#39;    },    meta: [      { charset: &#39;utf-8&#39; },      { name: &#39;viewport&#39;, content: &#39;width=device-width, initial-scale=1&#39; },      { hid: &#39;description&#39;, name: &#39;description&#39;, content: &#39;&#39; },      { name: &#39;format-detection&#39;, content: &#39;網站前後端、網頁設計、程式語言網站&#39; }    ],    link: [      { rel: &#39;icon&#39;, type: &#39;image/x-icon&#39;, href: &#39;/favicon.ico&#39; }    ],    script:    [      { src: &quot;/jquery.min.js&quot;},      { src: &quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/js/all.js&quot; }    ]  },</code></pre><p><img src="https://i.imgur.com/krqrhq8.png" alt=""></p><h3 id="引用-static-靜態資源的檔案"><a href="#引用-static-靜態資源的檔案" class="headerlink" title="引用 static 靜態資源的檔案"></a>引用 static 靜態資源的檔案</h3><ul><li>static資料夾:靜態資源資料夾<ul><li>其中要連接該檔案路徑要用斜線</li><li>這裡面的檔案不會被打包和優化<br><img src="https://i.imgur.com/46ebZ9F.png" alt=""></li></ul></li></ul><h2 id="套件安裝"><a href="#套件安裝" class="headerlink" title="套件安裝!"></a>套件安裝!</h2><ol><li>最簡單方式是使用打包後的 CDN 或 js 檔案 <ul><li>在head 的 script 放入 CDN</li></ul></li><li>使用 <a href="https://nuxtjs.org/docs/directory-structure/plugins/" target="_blank" rel="noopener">nuxt plugins</a> 自包 js 套件 或 vue 套件 → 較麻煩</li><li>使用 <a href="https://zh.nuxtjs.org/guide/modules/" target="_blank" rel="noopener">nuxt modules</a> 來引入套件<ul><li>套件較少</li></ul></li></ol><ul><li>nuxt module 主要是將 plugin 在封裝一層出來。(就是 nuxt 專有的套件)，如果對安裝 plugins 沒把握，就找有 nuxt modules 的套件來安裝。</li></ul><h3 id="練習1包裝一般的-vue-套件"><a href="#練習1包裝一般的-vue-套件" class="headerlink" title="練習1包裝一般的 vue 套件"></a>練習1包裝一般的 vue 套件</h3><p> <a href="https://www.npmjs.com/package/vuejs-datepicker" target="_blank" rel="noopener">vuejs-datepicker</a></p><p>1、npm install vuejs-datepicker</p><ul><li>若直接依照官網來安裝，並在檔案引入會發生錯誤</li><li>所以 install 完之後要再執行下面動作<br>2、plugins 新增一個檔案：datepicker.js → 撰寫套件</li><li>在 plugins 資料夾，新增檔案<pre><code class="javascript">import Vue from &#39;vue&#39;import Datepicker from &#39;vuejs-datepicker&#39;;</code></pre></li></ul><p>Vue.component(‘Datepicker’, Datepicker)</p><pre><code>![](https://i.imgur.com/l0kYSwT.png)3、nuxt.config.js 安裝 plugin → 可以設定該套件只在 客戶端 運作* 可以將插件安裝在客戶端或是 server 端```javascript{ src: &#39;~/plugins/datepicker.js&#39;, mode: &#39;client&#39; },</code></pre><ul><li>要使用時，再放入頁面<br><img src="https://i.imgur.com/gNNLJ2O.png" alt=""><h3 id="練習2-安裝一般的-js-套件"><a href="#練習2-安裝一般的-js-套件" class="headerlink" title="練習2 安裝一般的 js 套件"></a>練習2 安裝一般的 js 套件</h3><a href="https://greensock.com/docs/v3/Installation" target="_blank" rel="noopener">GSAP</a></li></ul><ol><li>npm install gsap</li><li>plugins 新增一個檔案：gsap.js → 撰寫套件<pre><code class="javascript">import Vue from &#39;vue&#39;import gsap from &quot;gsap&quot;;</code></pre></li></ol><p>Vue.prototype.$gsap = gsap</p><pre><code>![](https://i.imgur.com/t3G7UGN.png)3. nuxt.config.js 安裝 plugin```javascript plugins: [    { src: &#39;~/plugins/gsap.js&#39;, mode: &#39;client&#39; },  ],</code></pre><ul><li><code>create()</code> 會在前端執行\後端執行</li></ul><h3 id="練習3-nuxt-安裝"><a href="#練習3-nuxt-安裝" class="headerlink" title="練習3 nuxt 安裝"></a>練習3 nuxt 安裝</h3><p><a href="https://axios.nuxtjs.org/" target="_blank" rel="noopener">axios modules</a></p><ol><li>npm install @nuxtjs/axios</li><li>plugins 新增一個檔案：axios.js </li></ol><ul><li><p>如同前面的練習，到  nuxt.config.js</p><pre><code class="javascript">modules: [  &#39;@nuxtjs/axios&#39;,],</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為何要學習 Nuxt.js ？</title>
      <link href="/2021/11/10/Nuxt-1/"/>
      <url>/2021/11/10/Nuxt-1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/4LE0BUW.png" alt=""></p><p>製作網站，都會希望自己的網站可以被搜尋引擎找得到，並且可以在使用者輸入關鍵字後，可以在頭幾個項目中就能關注到自己的網站！<br>而在使用 Vue.js 框架，因為是使用 SPA 架構無法做到 SEO (search engine optimization) 的效果，別人無法輕易的找到我們所製作的網站。<br>今天要介紹的 Nuxt.js 是一個基於 Vue.js、用來處理伺服器渲染（Server-side rendering(SSR)）的框架。透過 SSR 我們可以做到更好的 SEO 效果。</p><p>本文首要任務： 認識 SPA 與 SSR 的差異</p><h2 id="SPA-Single-Page-Application-架構"><a href="#SPA-Single-Page-Application-架構" class="headerlink" title="SPA (Single Page Application) 架構"></a>SPA (Single Page Application) 架構</h2><ul><li>讓一些後端的工作，分擔到前端 (如： router 設定)</li><li>流程為：使用者開了瀏覽器 -&gt; 向後端server要資料，因為改為SPA 架構，所以提供的會是SPA 首頁（會載入JS\編譯好的CSS\一頁空殼的HTML網頁），此空殼經過 Vue 編譯產出 DOM 物件，讓瀏覽器印出。</li><li>讓回應速度更快，使用者在轉換頁面時得到更好的體驗。<ul><li>SPA（Single Page Application）意思是僅有一個頁面的應用程式，也就是說網頁不需跳轉頁面就可以達到基本的建立、讀取、修改、刪除資料功能。</li></ul></li><li>後端負責調整API 邏輯\架構<h3 id="SPA-缺點"><a href="#SPA-缺點" class="headerlink" title="SPA 缺點"></a>SPA 缺點</h3></li><li>SEO差(SPA 一開始吐的是空殼)，GOOGLE 爬不到頁面資訊</li><li>SMO差，FB爬不到頁面資訊</li><li>首屏速度慢，一開始畫面會空白或閃爍<ul><li>發出請求資訊到實際上呈現完整頁面時間</li></ul></li></ul><h2 id="SSR-Server-Side-Rendering"><a href="#SSR-Server-Side-Rendering" class="headerlink" title="SSR (Server Side Rendering)"></a>SSR (Server Side Rendering)</h2><p>流程為：使用者開了瀏覽器 -&gt; 向後端server要資料，因為改為SSR，所以會提供一整個頁面(不會是畫面空白閃爍)</p><ul><li>希望頁面可以將網頁整個東西呈現，並讓搜尋引擎查得到</li><li>處理 SEO(針對搜尋引擎)</li></ul><ul><li>title</li><li>meta tag<ul><li>全域 <code>&lt;head&gt;</code> 設定</li><li>單頁 <code>&lt;head&gt;</code> 設定 </li></ul></li><li>description</li></ul><ul><li>處理 SMO (針對 Social media)<ul><li>twitter\youtube\Line…<h3 id="有更多的彈性設定"><a href="#有更多的彈性設定" class="headerlink" title="有更多的彈性設定"></a>有更多的彈性設定</h3><h4 id="Nuxt-有三種模式，可以幫你解決問題"><a href="#Nuxt-有三種模式，可以幫你解決問題" class="headerlink" title="Nuxt 有三種模式，可以幫你解決問題"></a>Nuxt 有三種模式，可以幫你解決問題</h4></li></ul></li></ul><ol><li>Universal: SSR + CSR </li></ol><ul><li>全域設定 mode: ‘Universal’</li></ul><ol start="2"><li>SPA: 不跑SSR </li></ol><ul><li>全域設定 mode: ‘spa’ 或執行 nuxt-spa</li></ul><ol start="3"><li>Static Generated (Pre Rendering): 產生靜態頁面</li></ol><ul><li>nuxt run generate<ul><li>預先將頁面轉成靜態頁面</li><li>如要拉10樣商品，就先拉10個頁面</li></ul></li></ul><p>希望本篇的扼要介紹能夠讓讀者快速知道其中的差異。</p><p>參考資料：<br><a href="https://medium.com/@jackercleaninglab/ssr-nuxt-js-%E8%B6%85%E5%85%A5%E9%96%80-84a0823b45ed" target="_blank" rel="noopener">SSR — Nuxt.js 超入門</a><br><a href="https://www.youtube.com/watch?v=szrRDJBFmvQ" target="_blank" rel="noopener">Vue Nuxt 介紹與實作範例</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>實作 Vuex - Todo List</title>
      <link href="/2021/10/20/vuex-todo/"/>
      <url>/2021/10/20/vuex-todo/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/RPoUnyd.png" alt=""></p><p>之前的實作練習都沒有機會使用到 Vuex，總是覺得它的資料存取、取得或是管理，對於剛接觸Vue 的我來說還是相對複雜，而且剛開始接觸 Vue 總要先練習下 props \ emit 資料傳遞才行啊～<br>既然已經會使用基礎的資料傳遞後，那就要近一步實作 Vuex 狀態管理</p><h2 id="實作功能說明"><a href="#實作功能說明" class="headerlink" title="實作功能說明"></a>實作功能說明</h2><ul><li>資料的取得來自 JSONPlaceholder<ul><li>從Vuex來實作資料的取得、刪除、更新</li></ul></li><li>針對目前取得的資料進行筆數的篩選</li><li>區分未完成事項、以及完成事項</li><li>可透過點擊方塊改變色塊</li><li>接下來～會製作 3個 component ，將元件放到 App.vue</li></ul><p><a href="https://eva813.github.io/Vuex-Todo/index.html" target="_blank" rel="noopener">成品</a></p><h4 id="開始前別忘了先建立-module"><a href="#開始前別忘了先建立-module" class="headerlink" title="開始前別忘了先建立 module"></a>開始前別忘了先建立 module</h4><h2 id="Vuex-檔案的處理"><a href="#Vuex-檔案的處理" class="headerlink" title="Vuex 檔案的處理"></a>Vuex 檔案的處理</h2><ul><li>這裡開專案直接有建立 vuex</li><li>進入 store &gt; index.js</li></ul><pre><code class="javascript">import { createStore } from &#39;vuex&#39;;import todos from &#39;./modules/todos&#39;;export default createStore({  state: {  },  mutations: {  },  actions: {  },  modules: {    todos,  }})</code></pre><h2 id="建立-modules-資料夾"><a href="#建立-modules-資料夾" class="headerlink" title="建立 modules 資料夾"></a>建立 modules 資料夾</h2><ul><li>store &gt; modules &gt; todo.js<ul><li>從這裡的資料取得並傳遞到 Todos.vue<pre><code class="javascript">import axios from &#39;axios&#39;;</code></pre></li></ul></li></ul><p>const state = {};<br>const getters = {};<br>const actions = {};<br>const mutations = {};</p><p>export default {<br>  state,<br>  getters,<br>  actions,<br>  mutations<br>}</p><pre><code>#### 接下來要嘗試來串取資料* 取得假資料[jsonplaceholder-todo](https://jsonplaceholder.typicode.com/todos)## 在 todo.js 來製作資料的串接* 首先state這裡要先建立空陣列，getters 則是建立資料取得的函式* 在action 來發出請求，取得回應，並傳給 mutations    * mutations 是改變資料的地方* 引入axios，使用 Asyc await 使用 get 來串接資料   * 將串到的資料 commit 到 mutations，改變原本todos資料內容```javascriptimport axios from &#39;axios&#39;;const state = {  todos: []};const getters = {  getTodos: (state) =&gt; state.todos,};const actions = {  async fetchTodos({ commit }) {    const res = await axios.get(&quot;https://jsonplaceholder.typicode.com/todos&quot;);    // console.log(res.data);    commit(&#39;setTodos&#39;, res.data);  }};const mutations = {  setTodos: (state, todos) =&gt; {    state.todos = todos;  }};export default {  state,  getters,  actions,  mutations}</code></pre><p><img src="https://i.imgur.com/4wmzRwy.png" alt=""></p><h2 id="建立-Todos-vue"><a href="#建立-Todos-vue" class="headerlink" title="建立 Todos.vue"></a>建立 Todos.vue</h2><ul><li><p>此元件主要是呈現所有的 Todo list</p><h3 id="取得-vuex-中的資料"><a href="#取得-vuex-中的資料" class="headerlink" title="取得 vuex 中的資料"></a>取得 vuex 中的資料</h3></li><li><p>引入 mapGetters, mapActions</p></li><li><p>將要從 getters 拿到的陣列，放到computed做資料的取得</p><ul><li>將該陣列<code>getTodos</code> 放到 v-for</li></ul></li><li><p>串接的 action 使用 mapActions，於 methods中執行，而此函式要在<code>created</code>階段運行</p></li><li><p>如此一來就可以，從 Vuex 中得到資料</p></li></ul><pre><code class="javascript">&lt;template&gt;  &lt;h3&gt;Todos&lt;/h3&gt;  &lt;div class=&quot;todos&quot;&gt;    &lt;div class=&quot;todo&quot; v-for=&quot;todo in getTodos&quot; :key=&quot;todo.id&quot;&gt;      {{ todo.title }}    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { mapGetters, mapActions } from &quot;vuex&quot;;export default {  name: &quot;Todos&quot;,  methods:{    ...mapActions([&quot;fetchTodos&quot;])  },  computed: mapGetters([&quot;getTodos&quot;]),  created() {    this.fetchTodos();  },};&lt;/script&gt;</code></pre><p><img src="https://i.imgur.com/4RKUMtJ.png" alt=""></p><p><img src="https://i.imgur.com/IiWla0A.png" alt=""></p><h2 id="製作加入新-todo-功能"><a href="#製作加入新-todo-功能" class="headerlink" title="製作加入新 todo 功能"></a>製作加入新 todo 功能</h2><ul><li>建立一個新的 component =&gt; AddTodo.vue</li><li>在 AddTodo 這個元件，製作 輸入框<pre><code class="javascript">&lt;template&gt;&lt;div&gt;  &lt;h3&gt;Add Todo&lt;/h3&gt;  &lt;div class=&quot;add&quot;&gt;    &lt;form&gt;    &lt;input type=&quot;text&quot; placeholder=&quot;Add Todo...&quot; v-model=&quot;title&quot; /&gt;    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;    &lt;/form&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {name: &quot;AddTodo&quot;,};&lt;/script&gt;</code></pre><h3 id="到-module-gt-todo-js"><a href="#到-module-gt-todo-js" class="headerlink" title="到 module &gt; todo.js"></a>到 module &gt; todo.js</h3></li><li>使用 async 與 axios 傳入資料<ul><li>第二個參數為 title</li><li>post 的網址一樣，後面接的參數為title, complete: false (any new todo that it’s not going to completed)</li></ul></li></ul><pre><code class="javascript">const actions = {  async fetchTodos({ commit }) {    const res = await axios.get(&quot;https://jsonplaceholder.typicode.com/todos&quot;);    // console.log(res.data);    commit(&#39;setTodos&#39;, res.data);  },  async addTodo({ commit }, title) {    const res = await axios.post(&quot;https://jsonplaceholder.typicode.com/todos&quot;, { title, completed: false });    commit(&#39;addNewTodo&#39;, res.data);  }};</code></pre><ul><li>而在action 中使用axios 來新增資料，要將這必新資料 push 到 todo的陣列中<ul><li>存入的該資料要放在，陣列的最前面所以使用 unshift<pre><code class="javascript">const mutations = {setTodos: (state, todos) =&gt; {state.todos = todos;},addNewTodo: (state, todo) =&gt; {state.todos.unshift(todo);}};</code></pre></li></ul></li></ul><h3 id="到-AddTodo-vue-來呼叫此-action"><a href="#到-AddTodo-vue-來呼叫此-action" class="headerlink" title="到 AddTodo.vue 來呼叫此 action"></a>到 AddTodo.vue 來呼叫此 action</h3><ul><li>import <code>mapActions</code></li></ul><pre><code class="html">&lt;template&gt;  &lt;div&gt;    &lt;h3&gt;Add Todo&lt;/h3&gt;    &lt;div class=&quot;add&quot;&gt;      &lt;form @submit=&quot;onSubmit&quot;&gt;        &lt;input type=&quot;text&quot; placeholder=&quot;Add Todo...&quot; v-model=&quot;title&quot; /&gt;        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;      &lt;/form&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><pre><code class="javascript">&lt;script&gt;import { mapActions } from &quot;vuex&quot;;export default {  name: &quot;AddTodo&quot;,  data() {    return {      title: &quot;&quot;,    };  },  method: {    ...mapActions([&quot;addTodo&quot;]),    onSubmit(e) {      e.preventDefault();      //點擊後呼叫action中的加入todo函式，並傳入title資料      this.addTodo(this.title);    },  },};&lt;/script&gt;</code></pre><p><img src="https://i.imgur.com/57j3S5m.png" alt=""></p><h3 id="這裡要特別提出說明"><a href="#這裡要特別提出說明" class="headerlink" title="這裡要特別提出說明"></a>這裡要特別提出說明</h3><p>因為是使用線上的虛擬資料，他不允許我們可以存入新資料到他的API裡面<br>所以可以看到下方的錯誤顯示(重複 id)<br>而此在重新整理之後，存入的資料會消失</p><p><img src="https://i.imgur.com/nNh6AXL.png" alt=""></p><p><img src="https://i.imgur.com/0IZlhhL.png" alt=""></p><hr><h2 id="製作刪除功能"><a href="#製作刪除功能" class="headerlink" title="製作刪除功能"></a>製作刪除功能</h2><ul><li>以id作為參數，來依此刪除</li><li>不用儲存response資料<ul><li>在 async deleteTodo ，製作 by id 刪除</li><li>到 mutations =&gt; 使用 filter 存下資料</li></ul></li></ul><pre><code class="javascript">import axios from &#39;axios&#39;;const state = {  todos: []};const getters = {  getTodos: (state) =&gt; state.todos,};const actions = {  async fetchTodos({ commit }) {    const res = await axios.get(&quot;https://jsonplaceholder.typicode.com/todos&quot;);    // console.log(res.data);    commit(&#39;setTodos&#39;, res.data);  },  async addTodo({ commit }, title) {    const res = await axios.post(&quot;https://jsonplaceholder.typicode.com/todos&quot;, { title, completed: false });    commit(&#39;addNewTodo&#39;, res.data);  },  async deleteTodo({ commit }, id) {    await axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`);    commit(&#39;removeTodo&#39;, id)  }};const mutations = {  setTodos: (state, todos) =&gt; {    state.todos = todos;  },  addNewTodo: (state, todo) =&gt; {    state.todos.unshift(todo);  },  removeTodo: (state, id) =&gt; {    state.todos = state.todos.filter((todo) =&gt; todo.id !== id);    //使用filter 將，不是id的篩選出來  }};export default {  state,  getters,  actions,  mutations}</code></pre><ul><li>回到 Todos.vue</li><li>在 template 放入垃圾桶的 icon<ul><li>執行刪除的功能，在 icon 綁定刪除事件<code>deleteTodo()</code></li><li><code>deleteTodo()</code>就是來自於 methods 取得的事件<pre><code class="html">&lt;template&gt;&lt;h3&gt;Todos&lt;/h3&gt;&lt;div class=&quot;todos&quot;&gt;&lt;div class=&quot;todo&quot; v-for=&quot;todo in getTodos&quot; :key=&quot;todo.id&quot;&gt;{{ todo.title }}&lt;i class=&quot;fas fa-trash-alt&quot; @click=&quot;deleteTodo(todo.id)&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;/template&gt;</code></pre><pre><code class="javascript">&lt;script&gt;import { mapGetters, mapActions } from &quot;vuex&quot;;export default {name: &quot;Todos&quot;,methods: {...mapActions([&quot;fetchTodos&quot;, &quot;deleteTodo&quot;]),},computed: mapGetters([&quot;getTodos&quot;]),created() {this.fetchTodos();},};&lt;/script&gt;</code></pre></li></ul></li></ul><pre><code>---## 製作篩選器功能* 當 FilterTodo.vue 這裡的篩選器執行的時候，會執行 action中的函式，進行篩選```html&lt;style scoped&gt;select {  margin-top: 20px;  padding: 6px;  border: #ef9a9a 1px solid;}&lt;/style&gt;&lt;template&gt;  &lt;div&gt;    Filter todos:    &lt;select&gt;      &lt;option value=&quot;200&quot;&gt;200&lt;/option&gt;      &lt;option value=&quot;100&quot;&gt;100&lt;/option&gt;      &lt;option value=&quot;50&quot;&gt;50&lt;/option&gt;      &lt;option value=&quot;30&quot;&gt;30&lt;/option&gt;      &lt;option value=&quot;20&quot;&gt;20&lt;/option&gt;      &lt;option value=&quot;10&quot;&gt;10&lt;/option&gt;    &lt;/select&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><pre><code class="javascript">&lt;script&gt;export default {  name: &quot;FilterTodos&quot;,};&lt;/script&gt;</code></pre><p>將該元件綁到 App.vue</p><pre><code class="javascript">&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;div class=&quot;container&quot;&gt;      &lt;AddTodo /&gt;      &lt;FilterTodos /&gt;      &lt;Todos /&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;!-- &lt;router-view /&gt; --&gt;&lt;/template&gt;&lt;script&gt;import Todos from &quot;@/components/Todos.vue&quot;;import AddTodo from &quot;@/components/AddTodo.vue&quot;;import FilterTodos from &quot;@/components/FilterTodos.vue&quot;;export default {  name: &quot;app&quot;,  components: {    Todos,    AddTodo,    FilterTodos,  },};&lt;/script&gt;</code></pre><h3 id="到-module-gt-todo-js-來製作-actions"><a href="#到-module-gt-todo-js-來製作-actions" class="headerlink" title="到 module &gt; todo.js 來製作 actions"></a>到 module &gt; todo.js 來製作 actions</h3><ul><li>要傳入 option 的 value<ul><li>第二個參數為事件</li><li>在 axios 的 get 放入 url，接上取得的參數</li><li>commit 直接傳到 setTodos ，將串接到的資料透過 mutations 存到 todos<pre><code class="javascript">import axios from &#39;axios&#39;;</code></pre></li></ul></li></ul><p>const state = {<br>  todos: []<br>};<br>const getters = {<br>  getTodos: (state) =&gt; state.todos,<br>};<br>const actions = {</p><p>  async filterTodos({ commit }, e) {<br>    //取得下拉選單的值<br>    //console.log(e.target.value);<br>    let selected = parseInt(e.target.value);<br>    const res = await axios.get(<code>https://jsonplaceholder.typicode.com/todos?_limit=${selected}</code>);<br>    commit(‘setTodos’, res.data);<br>  }</p><p>};<br>const mutations = {<br>  setTodos: (state, todos) =&gt; {<br>    state.todos = todos;<br>  },<br>  addNewTodo: (state, todo) =&gt; {<br>    state.todos.unshift(todo);<br>  },<br>  removeTodo: (state, id) =&gt; {<br>    state.todos = state.todos.filter((todo) =&gt; todo.id !== id);<br>    //使用filter 將，不是id的篩選出來<br>  }<br>};</p><p>export default {<br>  state,<br>  getters,<br>  actions,<br>  mutations<br>}</p><pre><code>* 將ａction 綁到 FilterTodos.vue```javascript&lt;template&gt;  &lt;div&gt;    Filter todos:    &lt;select @change=&quot;filterTodos($event)&quot;&gt;      &lt;option value=&quot;200&quot;&gt;200&lt;/option&gt;      &lt;option value=&quot;100&quot;&gt;100&lt;/option&gt;      &lt;option value=&quot;50&quot;&gt;50&lt;/option&gt;      &lt;option value=&quot;30&quot;&gt;30&lt;/option&gt;      &lt;option value=&quot;20&quot;&gt;20&lt;/option&gt;      &lt;option value=&quot;10&quot;&gt;10&lt;/option&gt;    &lt;/select&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { mapActions } from &quot;vuex&quot;;export default {  name: &quot;FilterTodos&quot;,  methods: {    ...mapActions([&quot;filterTodos&quot;]),  },};&lt;/script&gt;</code></pre><hr><h2 id="todos-完成與否，狀態的改變"><a href="#todos-完成與否，狀態的改變" class="headerlink" title="todos 完成與否，狀態的改變"></a>todos 完成與否，狀態的改變</h2><ul><li>點擊兩下來更改狀態<ul><li>當要更新資料，要使用put，傳入updTodo物件資料<ul><li>將該資料傳到mutation</li></ul></li><li>接著到 mutation 製作更新的動作</li><li>要取得目前的index</li></ul></li></ul><pre><code class="javascript">import axios from &#39;axios&#39;;const state = {  todos: []};const getters = {  getTodos: (state) =&gt; state.todos,};const actions = {  async updataTodo({ commit }, updTodo) {    const res = await axios.put(`https://jsonplaceholder.typicode.com/todos/${updTodo.id}`,updTodo);    commit(&#39;renewTodo&#39;, res.data);  },};const mutations = {  renewTodo: (state, updTodo) =&gt; {    console.log(updTodo);    //我們是要在同一筆資料上更新    const index = state.todos.findIndex(todo =&gt; todo.id === updTodo.id);    //以下簡單確認 indx 是否有存在    if (index !== -1) {      state.todos.splice(index, 1, updTodo);    }  }};export default {  state,  getters,  actions,  mutations}</code></pre><h3 id="回到-Todos-vue"><a href="#回到-Todos-vue" class="headerlink" title="回到 Todos.vue"></a>回到 Todos.vue</h3><ul><li>template 插入legend</li><li>引入 <code>updataTodo</code>到 methods</li><li><code>onDblclick()</code>建立一個變數，它包含的物件內容為id、title、completed，其中我只要要改變的值是 complete true\false<ul><li>這裡的 id,title 都一樣。complete 則設定狀態的改變</li><li>最後在呼叫一次 <code>updataTodo()</code>  傳入新的物件<pre><code class="html">&lt;template&gt;&lt;h3&gt;Todos&lt;/h3&gt;&lt;div class=&quot;legend&quot;&gt;&lt;span&gt;雙重點擊來標示已完成的事項&lt;/span&gt;&lt;span&gt; &lt;span class=&quot;incomplete-box&quot;&gt;&lt;/span&gt; = 未完成 &lt;/span&gt;&lt;span&gt; &lt;span class=&quot;complete-box&quot;&gt;&lt;/span&gt; = 已完成 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;todos&quot;&gt;&lt;div @dblclick=&quot;onDblclick(todo)&quot; class=&quot;todo&quot; v-for=&quot;todo in getTodos&quot; :key=&quot;todo.id&quot; :class=&quot;{ &#39;is-complete&#39;: todo.completed }&quot;&gt; {{ todo.title }} &lt;i class=&quot;fas fa-trash-alt&quot; @click=&quot;deleteTodo(todo.id)&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;/template&gt;</code></pre></li></ul></li></ul><pre><code>```javascript&lt;script&gt;import { mapGetters, mapActions } from &quot;vuex&quot;;export default {  name: &quot;Todos&quot;,  methods: {    ...mapActions([&quot;fetchTodos&quot;, &quot;deleteTodo&quot;, &quot;updataTodo&quot;]),    onDblclick(todo) {      const updTodo = {        id: todo.id,        title: todo.title,        completed: !todo.completed,      };      this.updataTodo(updTodo);    },  },  computed: mapGetters([&quot;getTodos&quot;]),  created() {    this.fetchTodos();  },};&lt;/script&gt;</code></pre><p>參考資料：<br><a href="https://ithelp.ithome.com.tw/articles/10191225" target="_blank" rel="noopener">[Vue.js] Vuex 學習筆記 (5) - getters 的核心概念</a><br><a href="https://vuex.vuejs.org/zh/guide/getters.html#%E9%80%9A%E8%BF%87%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE" target="_blank" rel="noopener">Vuex</a><br><a href="https://forum.vuejs.org/t/using-this-store-dispatch-vs-using-mapactions/2186/2" target="_blank" rel="noopener">Using <code>this.$store.dispatch</code> vs using mapActions</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 -  組件的拆分</title>
      <link href="/2021/10/19/Vue-setComponent/"/>
      <url>/2021/10/19/Vue-setComponent/</url>
      
        <content type="html"><![CDATA[<p>試想今天有一個網頁，上方的導覽列有不同的分類，帶領你到該項目的分頁中<br>那我們該如何實現，將各個項目的內容一一呈現<br><img src="https://i.imgur.com/7LUqd5I.png" alt=""></p><h2 id="簡單分別製作-component"><a href="#簡單分別製作-component" class="headerlink" title="簡單分別製作 component"></a>簡單分別製作 component</h2><p>首先：component的命名要用大寫<br><img src="https://i.imgur.com/fAOtmM8.png" alt=""></p><ul><li>在 component 中<br><img src="https://i.imgur.com/dgWnvii.png" alt=""></li></ul><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><ul><li>在 App.vue<br>讓vue知道有個component可以被使用，透過ES6的解構放入<br><img src="https://i.imgur.com/4yAMVNw.png" alt=""><br>將引入的component放到template<br><img src="https://i.imgur.com/PO4LhRv.png" alt=""><br><img src="https://i.imgur.com/K0UmvdI.png" alt=""></li></ul><h2 id="將其他組件引入"><a href="#將其他組件引入" class="headerlink" title="將其他組件引入"></a>將其他組件引入</h2><p><img src="https://i.imgur.com/EgWUGfG.png" alt=""></p><p><img src="https://i.imgur.com/qIvkq2l.png" alt=""></p><h2 id="補充說明："><a href="#補充說明：" class="headerlink" title="補充說明："></a>補充說明：</h2><p>修改路徑:<br>用~@來指定圖片路徑：@在vuecli是代表特殊意義，就會直接從src這個資料夾底下開始查找;而波浪符號，代表現在在css之中使用這個功能<br><img src="https://i.imgur.com/NefWOd8.png" alt=""></p><ul><li>也就是在專案中，即便路徑複雜，只要在路徑最前面加上<code>@</code>就會直接進去src<br><img src="https://i.imgur.com/sPhH1rs.png" alt=""></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基本觀念 - 認識 pass by value、pass by reference 、 pass by sharing，Javascript 又是哪一個？</title>
      <link href="/2021/10/09/js-pass/"/>
      <url>/2021/10/09/js-pass/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/zT0UU5c.jpg" alt=""></p><p>之所以會撰寫這篇文，是因為面試過程被考倒的觀念，才發現自己過去從沒注意到這部分啊，那就來寫篇文章來認識它們之中的傳遞方式。</p><h2 id="首先，先從型別的認識開始"><a href="#首先，先從型別的認識開始" class="headerlink" title="首先，先從型別的認識開始"></a>首先，先從型別的認識開始</h2><p>在Javascript分兩大類，一種是基本型別(primitive type)，另一種是物件(Object)。</p><ul><li>Primitive type （以純值的形式存在）<br>Boolean<br>Null<br>Undefined<br>Number<br>BigInt<br>String<br>Symbol（於 ECMAScript 6 新定義）</li><li>Object<br>物件型別指的是可能由零或多種不同型別 (包括純值與物件) 所組合成，例如object,array, function, map</li></ul><p>知道型別後，可以簡易的分類：</p><ul><li>primitive type會是 pass by value，</li><li>object 是 pass by reference。</li></ul><h2 id="接下來來觀察，它們之間不同"><a href="#接下來來觀察，它們之間不同" class="headerlink" title="接下來來觀察，它們之間不同"></a>接下來來觀察，它們之間不同</h2><h3 id="pass-by-value"><a href="#pass-by-value" class="headerlink" title="pass by value"></a>pass by value</h3><p>範例1：</p><pre><code class="javascript">let x=10;let y=x;x=20;console.log(x); //20console.log(y); //10</code></pre><ul><li>注意：x和y是兩個獨立變數 （先記著這點）<ul><li>值會存入該變數<br><code>var y = x;</code> 看起來會像是y的內容要複製x，但可以的話要理解為，變數 y 是去建立了一個新的值，然後將變數 x 的內容複製了一份過來。</li></ul></li><li>因為兩的變數，各自獨立，所以當變數 x 的內容後來經過更新變成 20 之後，變數 y 的內容依舊保持原來的 10 而不受影響。</li></ul><p>範例2</p><pre><code class="javascript">var num=3;console.log(&quot;num start:&quot;,num);function passByValue(func_num){  func_num=5;}passByValue(num);console.log(&quot;num end:&quot;, num);</code></pre><h4 id="結果："><a href="#結果：" class="headerlink" title="結果："></a>結果：</h4><pre><code class="javascript">num start:3num end: 3</code></pre><ul><li>先是宣告新變數</li><li>隨後建立<code>passByValue()</code> 函式</li><li>呼叫<code>passByValue(num)</code> 複製變數num的值，3傳入<code>passByValue(func_num)</code>。<ul><li>一開始 值會是3</li><li>遇到<code>func_num=5;</code> =&gt; 將值改為 5</li></ul></li><li>但因為出去了函式範圍(scope)，最終的值 <code>num end:3</code></li></ul><h3 id="pass-by-refrence"><a href="#pass-by-refrence" class="headerlink" title="pass by refrence"></a>pass by refrence</h3><p>範例</p><pre><code class="javascript">let x={value:10};let y=x;x.value=20;console.log(x); //{value:20}console.log(y); //{value:20}console.log( x === y );  //true</code></pre><h3 id="拆解說明一下"><a href="#拆解說明一下" class="headerlink" title="拆解說明一下"></a>拆解說明一下</h3><ul><li>當宣告一個物件</li><li>JavaScript 會在記憶體的某處建立起一個物件 (圖右側)，然後再將這個 <code>x</code>變數指向新生成的物件</li></ul><p><img src="https://i.imgur.com/LPwkZAg.png" alt=""></p><ul><li>接著，當我們宣告了第二個變數 y ，並且透過 = 將y 指向 x 的位置。</li><li>接著當我們更新了 x.value 的內容後， y.value 的內容也被更新了。</li></ul><p><img src="https://i.imgur.com/vFUhP6X.png" alt=""></p><p>範例2</p><pre><code class="javascript">var obj1={item:&quot;unchanged&quot;};console.log(&quot;obj1 start:&quot;,obj1);function passByReference(ref){  ref.item= &quot;changed&quot;;}passByReference(obj1);console.log(&quot;obj end&quot;, obj1);</code></pre><h4 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h4><pre><code class="javascript">obj1 start:{item: &quot;unchanged&quot;}obj1 end:{item:&quot;changed&quot;}</code></pre><ul><li>當執行passByReference(obj1) 。想像他是個地址(0x0016)，進入函式中將地址複製，傳入。<ul><li>此時他的value 是個地址(0x0016)</li></ul></li><li>進入函式，遇到<code>ref.item</code><ul><li>de-reference ，進入原本的記憶體位置，找到item，並改變他的值</li></ul></li></ul><p><img src="https://i.imgur.com/3Ytn7bk.png" alt=""></p><h4 id="在不一般情況下，基本型別是-pass-by-value，而物件型別是-pass-by-reference的方式，但總有例外的時候。"><a href="#在不一般情況下，基本型別是-pass-by-value，而物件型別是-pass-by-reference的方式，但總有例外的時候。" class="headerlink" title="在不一般情況下，基本型別是 pass by value，而物件型別是 pass by reference的方式，但總有例外的時候。"></a>在不一般情況下，基本型別是 pass by value，而物件型別是 pass by reference的方式，但總有例外的時候。</h4><h3 id="pass-by-sharing"><a href="#pass-by-sharing" class="headerlink" title="pass by  sharing"></a>pass by  sharing</h3><pre><code class="javascript">var obj1={item:&quot;unchanged&quot;};console.log(&quot;obj1 start:&quot;,obj1);function passBySharing(ref){  ref={ item: &quot;changed&quot;};}passBySharing(obj1);console.log(&quot;obj end&quot;, obj1);</code></pre><pre><code class="javascript">obj1 start:{item: &quot;unchanged&quot;}obj1 end:{item:&quot;unchanged&quot;}</code></pre><ul><li>傳入之前start 沒有改變</li><li>呼叫函式，並進入<code>passBySharing()</code>，還是複製地址，傳入</li><li>遇到<code>ref={ item: &quot;changed&quot;};</code>，會直接覆蓋地址(有點類似pass by value)<ul><li>這並不是直接更改物件特性</li></ul></li></ul><p><img src="https://i.imgur.com/Kst3565.png" alt=""></p><h2 id="最後，來說說-JavaScript-屬於？"><a href="#最後，來說說-JavaScript-屬於？" class="headerlink" title="最後，來說說 JavaScript 屬於？"></a>最後，來說說 JavaScript 屬於？</h2><p>看了多篇文章，實在也是有點混亂，該認為三種形式都有呢？還是就是Pass by sharing、Pass by reference呢？ 那例外情形又該如何解釋？</p><p>所以這邊的結尾，直接引用Kuro、Huli老師文章的資訊，供給大家參考。</p><p>從Kuro Hsu 的<a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">文章</a>、<a href="https://www.tenlong.com.tw/products/9789864344130" target="_blank" rel="noopener">書</a><br>提及認為 JavaScript 應該更屬於 Pass by sharing 的形式。</p><ul><li>JavaScript 不屬於單純的傳值或傳址。</li></ul><p>參考 ECMA-262-3 in detail. Chapter 8. Evaluation strategy</p><blockquote><p>Regardless of usage concept of reference in this case, this strategy should not be confused with the “call by reference” discussed above. The value of the argument is not a direct alias, but the copy of the address.<br>由於在 JavaScript 的物件類型是可變的 (mutable)，當物件更新時，會影響到所有引用這個物件的變數與其副本，修改時會變動到原本的參考，但當賦與新值時，會產生新的實體參考。</p></blockquote><p>另外在 Huli 的文章中：</p><blockquote><p>依據細分程度的不同，下面幾句話都是正確的：<br>JavaScript 裡面只有 pass by value<br>JavaScript 的 primitive type 是 pass by value，object 是 pass by sharing</p></blockquote><hr><h2 id="最終來個綜合練習："><a href="#最終來個綜合練習：" class="headerlink" title="最終來個綜合練習："></a>最終來個綜合練習：</h2><p>相信在最後的這個練習，可以更清楚，pass by value，pass by reference，pass by sharing</p><pre><code class="javascript">function changeStuff(num,obj,obj2){  num=num*10;  obj.item=&quot;changed&quot;;  obj={item:&quot;changed&quot;};}var num=10;var obj={item: &quot;unchanged&quot;};var obj2= {item: &quot;unchanged&quot;};changeStuff(num, obj, obj2);console.log(num);console.log(obj.item);console.log(obj.item);</code></pre><pre><code>console=&gt; 10 &quot;changed&quot; &quot;unchanged&quot;</code></pre><p>參考資料：<br><a href="https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc" target="_blank" rel="noopener">JS基本觀念：call by value 還是reference 又或是 sharing?</a><br><a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a><br><a href="https://www.youtube.com/watch?v=1YFss_4B_o4&t=302s" target="_blank" rel="noopener">Tech Talk: Pass By Sharing with Javascript</a><br><a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/" target="_blank" rel="noopener">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>演算法入門 - Sorting-Algorithms</title>
      <link href="/2021/10/08/Sorting-Algorithms/"/>
      <url>/2021/10/08/Sorting-Algorithms/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/glzKE9I.png" alt=""></p><p>延續 Wilson Ren<a href="https://www.udemy.com/course/algorithm-data-structure/?course_id=3819536&fbclid=IwAR3ugnEJMsniBCvoMHthf31EqEQeG9hCL3BQb2gWS7eAFZ4lcixmWOiwNAo" target="_blank" rel="noopener">課程</a>來認識常見的排列方法！</p><h2 id="排列的演算法介紹"><a href="#排列的演算法介紹" class="headerlink" title="排列的演算法介紹"></a>排列的演算法介紹</h2><p><img src="https://i.imgur.com/zeRjPef.png" alt=""></p><ul><li>在JS中，就有內建 <code>array.sort()</code><ul><li>同樣在其他程式語言，都會有內建的 sorting function</li><li>但還是需要知道他們是如何運作</li></ul></li><li>總共有 6 種 sorting</li><li>此篇文章會以前面兩種為主</li></ul><h2 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h2><ul><li>冒泡排序</li><li>會比較相鄰的元素，如果順序不對會互換element</li><li>是相當簡單的演算法，在現實世界很少拿來使用，最常用在教學</li><li>而像在python、java 他們內建的排序演算法，都不是用冒泡排序，多是用 quicksort,merge sort（比較複雜、但有效率）<h3 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明"></a>範例說明</h3><img src="https://i.imgur.com/pDdBK9i.png" alt=""></li><li>比較array的最後兩個數字 =&gt; 發現順序不對就對調<br><img src="https://i.imgur.com/ElpC2qh.png" alt=""></li><li>對調之後，再往下兩個元素<ul><li>發現順序正確，不需更動<br><img src="https://i.imgur.com/mQuFUvU.png" alt=""></li></ul></li><li>不更動之後，再往下兩個<br><img src="https://i.imgur.com/Qk1T9c3.png" alt=""><br>以此類推…</li><li>小結：將找到的最小值，推到最左邊</li></ul><h3 id="要如何做-Bubble-Sort"><a href="#要如何做-Bubble-Sort" class="headerlink" title="要如何做 Bubble Sort"></a>要如何做 Bubble Sort</h3><ul><li><p>先從一個陣列中2個數值比較開始思考</p><pre><code>for j from A.length-1 to 1; if A[j] &lt; A[j-i] ; swap A[j] and A[j-i]</code></pre></li><li><p>虛擬碼<br><img src="https://i.imgur.com/2VFPI3E.png" alt=""></p></li><li><p>i =&gt; sorted elements</p></li><li><p>j =&gt; adjacent elements(j是相對i而來)</p><pre><code class="javascript">function bubbleSort(arr){  for(let i=0;i&lt;arr.length-2;i++){    for(let j=arr.length-1;j&gt;=i+1;j--){      if (arr[j]&lt;arr[j-1]){        //swap arr[j] and arr[j-1]        let temp=arr[j];        arr[j] = arr[j-1];        arr[j-1] = temp;      }    }  }  console.log(arr);}bubbleSort([4,1,5,2,7]);</code></pre></li><li><p>加入隨機的數字，組成新的陣列</p><pre><code class="javascript">function bubbleSort(arr) {let step = 0;for (let i = 0; i &lt;= arr.length - 2; i++) {  for (let j = arr.length - 1; j &gt;= i + 1; j--) {    if (arr[j] &lt; arr[j - 1]) {      // swap arr[j] and arr[j - 1]      let temp = arr[j];      arr[j] = arr[j - 1];      arr[j - 1] = temp;      step++;    }  }}console.log(&quot;It takes &quot; + step + &quot; steps to complete.&quot;);console.log(arr);}</code></pre></li></ul><p>let test = [];</p><p>for (let i = 0; i &lt; 100; i++) {<br>  test.push(Math.floor(Math.random() * 100));<br>}</p><p>bubbleSort(test);</p><pre><code>## Big O of Bubble Sort![](https://i.imgur.com/NSg6FSC.png)* 最糟情況下： 由大到小，要排成 由小到大 =&gt; 他交換的次數會是 (n-1)+(n-2)+(n-3)+...+(n-n)次* 最好的情況： 本身的arr就接近 小到大    * 優化語法    * 發現沒有任何elements被交換，就可以停止迴圈```javascriptfunction bubbleSort(arr){    for(let i=0;i&lt;arr.length-2;i++){      let swapping=false;      for(let j=arr.length-1;j&gt;=i+1;j--){        if (arr[j]&lt;arr[j-1]){          //swap arr[j] and arr[j-1]          let temp=arr[j];          arr[j] = arr[j-1];          arr[j-1] = temp;          swapping=true;        }      }    }    if (swapping==false){      break;    }  }</code></pre><ul><li>平均情況還是用到 nested for loop<ul><li>O(n^2)</li></ul></li></ul><h2 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><p><img src="https://i.imgur.com/NwAm9cW.png" alt=""></p><ul><li>效率比 bubble sort 好一些</li><li>理論上， 都是 O(n^2)</li><li>不斷做插入的動作<h3 id="範例說明-1"><a href="#範例說明-1" class="headerlink" title="範例說明"></a>範例說明</h3><img src="https://i.imgur.com/HtfgFYG.png" alt=""></li><li>先認為這條arr長度是1</li><li>從陣列最前面開始，要將1插入4這個arr上</li></ul><p><img src="https://i.imgur.com/CrYGinm.png" alt=""></p><ul><li><p>數字2，要和左邊的數字作比較<br><img src="https://i.imgur.com/lb7mYhc.png" alt=""></p></li><li><p>數字3去比較<br><img src="https://i.imgur.com/gqnhQYA.png" alt=""></p></li></ul><h3 id="虛擬碼"><a href="#虛擬碼" class="headerlink" title="虛擬碼"></a>虛擬碼</h3><p><img src="https://i.imgur.com/lNSbpjL.png" alt=""></p><pre><code>index 0,1,2,3,4value 1,2,3,4,0</code></pre><ul><li>檢查這條arr的 index=1</li><li>設定<code>key=A[j]</code>，並將key插入 sorted sequence <ul><li>j 的前一格為 i</li></ul></li><li>確認 i 有沒有大於key =&gt; 也就是對於key而言，要不斷地和它左邊的值比較<ul><li>如果左邊的值比key大，就要讓他們互換</li></ul></li></ul><pre><code>index 0,1,2,3,4value 1,2,3,4 (i),0 (j key)while i&gt;0 &amp;&amp; A[i] &gt; key  A[i+1] = A[i]  i -= 1</code></pre><ul><li>語法</li></ul><pre><code class="javascript">let unsorted = [14, -4, 17, 6, 22, 1, -5];insertionSort(unsorted);function insertionSort(arr) {  for (let j = 1; j &lt;= arr.length - 1; j++) {    let key = arr[j];    i = j - 1;    while (i &gt;= 0 &amp;&amp; arr[i] &gt; key) {      arr[i + 1] = arr[i];      i -= 1;    }    arr[i + 1] = key;  }  console.log(arr);  return arr;}</code></pre><p><img src="https://i.imgur.com/E8xWtkL.png" alt=""></p><h2 id="Big-O"><a href="#Big-O" class="headerlink" title="Big O"></a>Big O</h2><p><img src="https://i.imgur.com/OVF4VRl.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>演算法入門</title>
      <link href="/2021/10/02/Algorithm/"/>
      <url>/2021/10/02/Algorithm/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/LHDcmBI.png" alt=""></p><p>常常看到 YouTube 演算法造成頻道經營的難度、或是facebook演算法而使得行銷曝光度的改變，但始終對演算法這個名詞沒有認識。<br>藉由 Wilson Ren<a href="https://www.udemy.com/course/algorithm-data-structure/?course_id=3819536&fbclid=IwAR3ugnEJMsniBCvoMHthf31EqEQeG9hCL3BQb2gWS7eAFZ4lcixmWOiwNAo" target="_blank" rel="noopener">課程</a></p><h2 id="什麼是演算法？"><a href="#什麼是演算法？" class="headerlink" title="什麼是演算法？"></a>什麼是演算法？</h2><p>用以解決問題而可以逐步執行的步驟或程序。</p><h4 id="來看看現實生活中的演算法"><a href="#來看看現實生活中的演算法" class="headerlink" title="來看看現實生活中的演算法"></a>來看看現實生活中的演算法</h4><ul><li>Google Map 如何找到最短路徑</li><li>YouTube 推薦給你，認為你有興趣的影片</li><li>FB\IG 的加好友、追蹤推薦</li></ul><h2 id="演算法比較"><a href="#演算法比較" class="headerlink" title="演算法比較"></a>演算法比較</h2><p>有兩個演算法都可以完成目標任務，那我們會如何取決誰比較好？</p><ul><li>哪個演算法執行速度快？</li><li>所佔用電腦的記憶體資源少？<h3 id="時間"><a href="#時間" class="headerlink" title="時間?"></a>時間?</h3>首先，在計時演算法所耗時的部分：</li><li>幫演算法做計時，是不實際的事情<ul><li>同一台電腦在執行同一任務，所執行的時間會不同</li><li>不同電腦、CPU處理速度不一樣<h4 id="應該考慮，複雜度-Complexity"><a href="#應該考慮，複雜度-Complexity" class="headerlink" title="應該考慮，複雜度 Complexity"></a>應該考慮，複雜度 Complexity</h4></li></ul></li><li>複雜度分為兩種：時間複雜度、空間複雜度 （在本文多是討論時間複雜度）</li><li>要如何計算時間複雜度?<ul><li>加、減、乘、除、comparison ，這些每一個都可以被算作一個 operation</li><li>Complexity: 在所寫的演算法中，總共用到多少 operations(運算子)</li><li>使用 function 來顯示 Complexity 和 input size 的關係。</li></ul></li></ul><h2 id="Big-O-Notation"><a href="#Big-O-Notation" class="headerlink" title="Big O Notation"></a>Big O Notation</h2><ol><li>是一個工具，用來描述當你的值不斷擴大時，f(n)值會去哪裡</li><li>為最壞情況的打算。他會展示一個演算法複雜度的趨勢</li></ol><h3 id="計算-Big-O-的值"><a href="#計算-Big-O-的值" class="headerlink" title="計算 Big O 的值"></a>計算 Big O 的值</h3><ol><li>Constant doesn’t matter : 常數它並不重要<ul><li>f(n)=3n ：3為常數、n為變數</li></ul></li><li>Small Terms don’t matter<ul><li>fn= 3n^2 + 6n + 4 =&gt; 只需保留到fn= 3n^2</li></ul></li><li>Logarithm Base doesn’t matter<br><img src="https://i.imgur.com/dNM08rx.png" alt=""><h2 id="範例："><a href="#範例：" class="headerlink" title="範例："></a>範例：</h2></li><li>f(n)=3n<br>答案：O(n)</li><li>f(n)=13n^3 + 6n +7<br>答案：O(n^3)</li><li>f(n)=4log₂n<br>答案：O(logn)</li><li>f(n)=5<br>答案：O(1)</li></ol><h2 id="演算法常見-Big-O-的值"><a href="#演算法常見-Big-O-的值" class="headerlink" title="演算法常見 Big O 的值"></a>演算法常見 Big O 的值</h2><p>由好至差</p><ol><li>O(1)</li><li>O(logn)</li><li>O(n)</li><li>O(nlogn)</li><li>O(n^2)</li><li>O(n^3)</li></ol><ul><li>很多sorting值會是 O(nlogn)</li><li>盡量讓演算法可以達到3、4的值</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 -  資料傳遞 emit</title>
      <link href="/2021/09/21/vue-emit/"/>
      <url>/2021/09/21/vue-emit/</url>
      
        <content type="html"><![CDATA[<p>圖示：<br><img src="https://i.imgur.com/PxIIobu.png" alt=""></p><h2 id="emit-實作練習"><a href="#emit-實作練習" class="headerlink" title="emit 實作練習"></a>emit 實作練習</h2><p><img src="https://i.imgur.com/7guYdVb.png" alt=""></p><ul><li>透過點擊add按鈕，觸發外層元件數值的改變<ul><li>先定義外層接收資料方式</li><li>定義內層的 $emit 觸發方法</li><li>使用 v-on 的方式觸發外層方法（口訣：前內、後外）</li></ul></li></ul><h3 id="外層元件"><a href="#外層元件" class="headerlink" title="外層元件"></a>外層元件</h3><ul><li><p>定義接收方法：當內層傳給你的時候，要做什麼事</p><ul><li><p><code>addNumber()</code>使num 增加1</p><pre><code class="javascript">const app = Vue.createApp({      data() {        return {          num: 0,          text: &#39;&#39;        };      },      methods: {        addNumber() {          console.log(&#39;addnumber&#39;);          this.num++;        },      }    });</code></pre></li></ul></li></ul><h3 id="內層元件"><a href="#內層元件" class="headerlink" title="內層元件"></a>內層元件</h3><ul><li>在方法內建立函式，來觸發資料傳遞</li><li>並將<code>click</code>綁到內部元件的按鈕上。使點擊時候，會觸發$emit<ul><li>emit 名稱<code>emit-num</code><pre><code class="javascript">app.component(&#39;button-counter&#39;, {      methods: {        click() {          console.log(&#39;inner,click&#39;);          this.$emit(&#39;emit-num&#39;);        }      },      template: `&lt;button type=&quot;button&quot; @click=&quot;click&quot;&gt;add&lt;/button&gt;`    });</code></pre></li></ul></li></ul><p><img src="https://i.imgur.com/W1s9mhp.png" alt=""></p><h2 id="建立內外層元件的溝通橋樑"><a href="#建立內外層元件的溝通橋樑" class="headerlink" title="建立內外層元件的溝通橋樑"></a>建立內外層元件的溝通橋樑</h2><ul><li>使用 v-on 的方式觸發外層方法（口訣：前內、後外）<ul><li>在 div內放入子元件<code>button-counter</code></li><li><code>:emit-num=&quot;addNumber&quot;</code></li></ul></li></ul><pre><code class="javascript">&lt;div id=&quot;app&quot;&gt;          {{ num }}    &lt;button-counter v-on:emit-num=&quot;addNumber&quot;&gt;&lt;/button-counter&gt;     &lt;/div&gt;</code></pre><h2 id="練習二，資料接收"><a href="#練習二，資料接收" class="headerlink" title="練習二，資料接收"></a>練習二，資料接收</h2><h3 id="外層元件-1"><a href="#外層元件-1" class="headerlink" title="外層元件"></a>外層元件</h3><ul><li><p>接收方法為 <code>getData</code> 接收 text</p><pre><code class="javascript">const app = Vue.createApp({          data() {            return {              text: &#39;&#39;            };          },          methods: {            getData(value) {              console.log(&#39;getData&#39;, text);              this.text = value;            }          }        });</code></pre></li></ul><h3 id="內層元件-1"><a href="#內層元件-1" class="headerlink" title="內層元件"></a>內層元件</h3><ul><li>建立觸發傳遞的方式<ul><li>將內層元件<code>text: &#39;內部資料&#39;</code> 傳遞到外層<pre><code class="javascript">app.component(&#39;button-text&#39;, {data() {  return {  text: &#39;內部資料&#39;,   }},methods: {emitText() {this.emit(&#39;emit-text&#39;, this.text)   }},template: `&lt;button type=&quot;button&quot; @click=&quot;emitText&quot;&gt;emit data&lt;/button&gt;`});</code></pre><h3 id="建立內外橋樑"><a href="#建立內外橋樑" class="headerlink" title="建立內外橋樑"></a>建立內外橋樑</h3><pre><code class="javascript">&lt;h3&gt;傳遞資料狀態&lt;/h3&gt;內部傳來的文字：{{ text }}&lt;br&gt;&lt;button-text @emit-text=&quot;getData&quot;&gt;&lt;/button-text&gt;</code></pre><img src="https://i.imgur.com/avhMirS.png" alt=""></li></ul></li></ul><h2 id="emit-命名"><a href="#emit-命名" class="headerlink" title="emit 命名"></a>emit 命名</h2><p>與 props 命名一樣需要注意：</p><ul><li>在內層若以駝峰命名 <code>emitText</code><ul><li>也可以一開始內層就是用<code>-</code> 來命名即可，如<code>emit-text</code><pre><code class="javascript">emitText() { this.emit(&#39;emitText&#39;, this.text)}</code></pre></li></ul></li><li>到了要綁定的 template 上，<code>emit-text</code><pre><code class="javascript">&lt;button-text @emit-text=&quot;getData&quot;&gt;&lt;/button-text&gt;</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 -  資料傳遞 props</title>
      <link href="/2021/09/21/vue-props/"/>
      <url>/2021/09/21/vue-props/</url>
      
        <content type="html"><![CDATA[<p>因為Vue每個元件都是各自獨立，所以我們無法在各自元件去調整資料，而直接修改另一個元件的資料。<br>所以，要使元件之間可以相互溝通，就需要使用資料傳遞方式。<br>在傳遞方式：</p><ul><li>外層傳遞內層 : props</li><li>內層向外傳遞 : emit<br>當外層元件，要將資料往內層元件丟時，此過程就是使用props。</li></ul><p><img src="https://i.imgur.com/FTbHDPk.png" alt=""></p><h2 id="傳遞資料的方式："><a href="#傳遞資料的方式：" class="headerlink" title="傳遞資料的方式："></a>傳遞資料的方式：</h2><h3 id="靜態資料傳入"><a href="#靜態資料傳入" class="headerlink" title="靜態資料傳入"></a>靜態資料傳入</h3><ul><li>預期將外層傳入一個url的變數，傳進給內層使用<ul><li>photo為內部元件，在template 我希望能夠取得外層傳入的圖片(urlimg)</li><li>故在 props 以此命名，並將它綁到 template<pre><code class="javascript">app.component(&#39;photo&#39;, {  props: [&#39;url&#39;],  template: `&lt;img :src=&quot;url&quot; class=&quot;img-thumbnail&quot; alt&gt;`});</code></pre></li></ul></li><li>將上方的元件資料，加到外層元件：像是加入html屬性一樣<pre><code class="javascript">&lt;photo  url=&quot;https://images.unsplash.com/photo-1605784401368-5af1d9d6c4dc?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=80&quot;&gt;&lt;/photo&gt;</code></pre></li></ul><p><img src="https://i.imgur.com/f079ziY.png" alt=""></p><h3 id="動態資源"><a href="#動態資源" class="headerlink" title="動態資源"></a>動態資源</h3><ul><li>使用 <code>v-bind</code>，綁定內部元件的props ，使資料可以跟外層元件連動</li><li>記得使用口訣： 前內、後外 =&gt;前面就是props內的名稱，後面就是外層元件的名稱<br><img src="https://i.imgur.com/BMVZtkn.png" alt=""><pre><code class="htmlembedded">&lt;h3&gt;動態資源&lt;/h3&gt;&lt;p&gt;技巧：前內、後外&lt;/p&gt;&lt;photo v-bind:urlimg=&quot;imgUrl&quot;&gt;&lt;/photo&gt;</code></pre></li></ul><h2 id="資料傳遞為-單向數據流"><a href="#資料傳遞為-單向數據流" class="headerlink" title="資料傳遞為 單向數據流"></a>資料傳遞為 單向數據流</h2><ul><li>外部所定義的資料，當往內層傳遞，是單向性</li><li>不能試圖使用v-model或各種方式，來改變props傳入的內容<ul><li>以下範例：在子元件 <code>photo2</code> 放入 <code>input</code>綁定 <code>v-model</code></li><li>當嘗試在輸入框修改網址，會出現錯誤</li></ul></li></ul><pre><code class="javascript">//外層元件綁定 url&lt;photo2 :url=&quot;imgUrl&quot;&gt;&lt;/photo2&gt;</code></pre><pre><code class="javascript">const app = Vue.createApp({    data() {    return {      imgUrl: &#39;https://images.unsplash.com/photo-1605784401368-5af1d9d6c4dc?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=80&#39;,         };     },}); app.component(&#39;photo2&#39;, {    props: [&#39;url&#39;],    template: `&lt;img :src=&quot;url&quot; class=&quot;img-thumbnail&quot; alt&gt;&lt;br&gt;    &lt;input type=&quot;text&quot; v-model=&quot;url&quot;&gt; {{ url }}`     })</code></pre><p><img src="https://i.imgur.com/OmmIxpi.png" alt=""></p><p><img src="https://i.imgur.com/2BqCNTp.png" alt=""></p><h2 id="在內部元件，要為props來命名"><a href="#在內部元件，要為props來命名" class="headerlink" title="在內部元件，要為props來命名"></a>在內部元件，要為props來命名</h2><p>在命名上有些要注意的地方</p><ul><li>首字母大寫: PostData、SetItems</li><li>駝峰命名法: postData、setItems<br>要注意：在 HTML 中使用時必須使用 kebab-case (短橫線分隔)且應該為小寫。</li></ul><pre><code class="javascript">&lt;div id=&quot;app&quot;&gt; &lt;photo3 :super-url=&quot;imgUrl&quot; &gt;&lt;/photo3&gt;&lt;/div&gt;&lt;script&gt;Vue.component(&quot;photo3&quot;, {  props: [&quot;superUrl&quot;],  template: `&lt;img :src=&quot;superUrl&quot; class=&quot;img-thumbnail alt &gt;&quot;`});&lt;/script&gt;</code></pre><p><img src="https://i.imgur.com/57P1JDW.png" alt=""></p><h2 id="定義-Props-型別驗證"><a href="#定義-Props-型別驗證" class="headerlink" title="定義 Props 型別驗證"></a>定義 Props 型別驗證</h2><ul><li><p>使用型別驗證，會改用大括號，裡面放入props名稱，並用物件形式加入設定的內容</p><ul><li><code>props:{  propC: {  type: String,  required: true,  }}</code></li></ul></li><li><p>其中，可以針對該props 來設定：</p><ul><li><p><code>type</code>型別 ： 可以是 String、Number、Boolean、Array、Object、Date、Function、Symbol</p></li><li><p><code>default</code> ：如果該 prop 沒有接收到傳入的值，就會使用 default 的值作為預設值。</p></li><li><p><code>required</code> ： 是否為必填項，如果設為 true 則表示必須要有值傳入，若沒有，就會出現錯誤提示。</p><pre><code class="javascript">app.component(&#39;props-validation&#39;, {props: {// 單一型別檢查，可接受的型別 String, Number, Object, Boolean, Function(在 Vue 中可使用 Function 驗證型別)// null, undefined 會直接通過驗證propA: Function,// 多個型別檢查propB: [String, Number],// 必要值propC: {  type: String,  required: true,},// 預設值propD: {  type: Number,  default: 300},// 自訂函式propE: {  type: Object,  default() {    return {      money: 300    }  }},// 自訂驗證propF: {  validator(value) {    return value &gt; 1000  }}, },</code></pre><p><a href="https://www.hexschool.com/courses/vue3.html" target="_blank" rel="noopener">六角學院</a><br><a href="https://ithelp.ithome.com.tw/articles/10254050" target="_blank" rel="noopener">[DAY12]跟 Vue.js 認識的30天 - Vue 模組資料傳遞(<code>props</code>)</a></p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 - v-on 修飾符</title>
      <link href="/2021/09/20/Vue-modify/"/>
      <url>/2021/09/20/Vue-modify/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><p>修飾符有分為：<br>1.按件修飾符<br>2.滑鼠修飾符<br>3.事件修飾符</p><p><a href="https://codepen.io/Eva-go/pen/RwgMXGN" target="_blank" rel="noopener">codepen</a></p><h2 id="按鍵修飾符"><a href="#按鍵修飾符" class="headerlink" title="按鍵修飾符"></a>按鍵修飾符</h2><h3 id="1-1-別名修飾"><a href="#1-1-別名修飾" class="headerlink" title="1-1. 別名修飾"></a>1-1. 別名修飾</h3><ul><li>在特定按鍵，按下去的時候觸發<ul><li><code>.enter</code>, <code>.tab</code>, <code>.delete</code>, <code>.esc</code>, <code>.space</code>, <code>.up</code>, <code>.down</code>, <code>.left</code>, <code>.righ</code></li></ul></li><li>使用<code>.enter</code>只有再按下 enter 鍵才會觸發</li></ul><pre><code class="html">  &lt;div id=&quot;app&quot;&gt;   &lt;h6 class=&quot;mt-3&quot;&gt;別名修飾&lt;/h6&gt;  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot; @keyup.enter=&quot;trigger(&#39;enter&#39;)&quot;&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {    }  },  methods: {   trigger: function(name) {      console.log(name, &#39;此事件被觸發了&#39;)    },  }}).mount(&#39;#app&#39;)</code></pre><h3 id="1-2-相應按鍵時才觸發的監聽器"><a href="#1-2-相應按鍵時才觸發的監聽器" class="headerlink" title="1-2. 相應按鍵時才觸發的監聽器"></a>1-2. 相應按鍵時才觸發的監聽器</h3><ul><li>僅在按下相應按鍵時才觸發鼠標或鍵盤事件的監聽器</li><li><code>.ctrl</code>, <code>.alt</code>, <code>.shift</code>, <code>.meta</code></li><li>此範例為 <code>@keyup.shift.enter</code><pre><code class="html">&lt;h6 class=&quot;mt-3&quot;&gt;相應按鍵時才觸發的監聽器&lt;/h6&gt;&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot; @keyup.shift.enter=&quot;trigger(&#39;shift + Enter&#39;)&quot;&gt;</code></pre><img src="https://i.imgur.com/gQjWYVy.png" alt=""></li></ul><ol start="2"><li>滑鼠修飾符<br><code>.left</code> 只當點擊鼠標左鍵時觸發。<br><code>.right</code> 只當點擊鼠標右鍵時觸發。<br><code>.middle</code> 只當點擊鼠標中鍵時觸發。</li></ol><ul><li>按下滑鼠右鍵<br><code>&lt;span class=&quot;box&quot; @click.right=&quot;trigger(&#39;right button&#39;)&quot;&gt;</code></li></ul><pre><code class="html">          &lt;h4&gt;滑鼠修飾符&lt;/h4&gt;          &lt;h6 class=&quot;mt-3&quot;&gt;滑鼠修飾符&lt;/h6&gt;          &lt;div class=&quot;p-3 bg-primary&quot;&gt;            &lt;span class=&quot;box&quot; @click.right=&quot;trigger(&#39;right button&#39;)&quot;&gt;            &lt;/span&gt;          &lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/lddG6zT.png" alt=""></p><ol start="3"><li>事件修飾符</li></ol><ul><li>不會限定，是使用滑鼠還是鍵盤，是針對事件本身來進行修飾<br><code>.stop</code> - 調用 <code>event.stopPropagation()</code>。<br><code>.prevent</code> - 調用 <code>event.preventDefault()</code>。<br><code>.capture</code> - 添加事件偵聽器時使用 capture 模式。<br><code>.self</code> - 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調。<br><code>.once</code> - 只觸發一次回調。</li><li>常用的是 <code>&lt;a&gt;</code>外部連結：移除預設事件<pre><code class="html">     &lt;h4&gt;事件修飾符&lt;/h4&gt;        &lt;ul&gt;          &lt;li&gt;.stop - 調用 event.stopPropagation()。&lt;/li&gt;          &lt;li&gt;&lt;strong&gt;.prevent - 調用 event.preventDefault()。&lt;/strong&gt;&lt;/li&gt;          &lt;li&gt;.capture - 添加事件偵聽器時使用 capture 模式。&lt;/li&gt;          &lt;li&gt;.self - 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調。&lt;/li&gt;          &lt;li&gt;.once - 只觸發一次回調。&lt;/li&gt;        &lt;/ul&gt;        &lt;a href=&quot;https://www.google.com/&quot; @click.prevent=&quot;trigger(&#39;prevent&#39;)&quot;&gt;加入 Prevent&lt;/a&gt;</code></pre></li></ul><p>資料來源：<br>六角學院 - Vue 3.js</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>認識 Node.js</title>
      <link href="/2021/06/11/node-1/"/>
      <url>/2021/06/11/node-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  之前在安裝套件時，就有先安裝過 Node.js 但從沒有特別去注意，它是應用在哪一塊、可以做什麼？就找了之前 udemy 全端課程，特意拉此部分來認識一下。</p><p>Node.js，讓我們可以將js檔案拿出瀏覽器，並直接和電腦硬件互動</p><ul><li>js: 進行網頁中的實作、函式、行為的建立。動畫的執行、下拉選單</li><li>Node.js: 允許我們用JS 直接與電腦的硬體互動。例如建立桌面應用程式</li><li>此外，還能在別人的電腦或server用Node.js來用行JS。例如：使用者登入 google 並輸入詢問，而你的瀏覽器會發出請求給google servers，而在這些servers 可以真的執行JS程式碼來執行發出的請求</li></ul><p><img src="https://i.imgur.com/49D3LbW.png" alt=""></p><h2 id="如何使用Node"><a href="#如何使用Node" class="headerlink" title="如何使用Node"></a>如何使用Node</h2><ol><li>首先，建立一個資料夾 <code>intro-to-node</code>，在資料夾內建立檔案<code>index.js</code></li><li>在該資料夾位置，運行<code>node index.js</code></li></ol><p><img src="https://i.imgur.com/fsgHKd8.png" alt=""></p><ul><li>印出檔案內的console<br><img src="https://i.imgur.com/bptXcfu.png" alt=""><br><img src="https://i.imgur.com/QQ1BXXI.png" alt=""></li></ul><h2 id="node-REPL"><a href="#node-REPL" class="headerlink" title="node REPL"></a>node REPL</h2><ul><li>Read Evaluation Print Loop</li><li>要進入：就是在終端機下node<br><img src="https://i.imgur.com/gomqsjQ.png" alt=""></li><li>和google 的console有點類似<br><img src="https://i.imgur.com/hOMWtn5.png" alt=""></li><li>取得些提示 con+ tab 會列出相關的可能性<br><img src="https://i.imgur.com/ijg4eJg.png" alt=""><br><img src="https://i.imgur.com/36ZOTYu.png" alt=""><h3 id="離開"><a href="#離開" class="headerlink" title="離開"></a>離開</h3></li><li><code>.exit</code></li><li>control+c 兩次</li><li><code>clear</code> 可以清除終端機的資料<h2 id="native-node-module"><a href="#native-node-module" class="headerlink" title="native node module"></a>native node module</h2></li><li>當安裝node，他就會包含許多建立好的模組<h3 id="使用node-js-進入電腦本地端的資料"><a href="#使用node-js-進入電腦本地端的資料" class="headerlink" title="使用node.js 進入電腦本地端的資料"></a>使用node.js 進入電腦本地端的資料</h3></li><li>nodejs.org/api 可以查到所有native node module，以及使用方式說明的文件</li><li>當要使用 modual<br><img src="https://i.imgur.com/eIDZjer.png" alt=""></li></ul><p><img src="https://i.imgur.com/DDWBxTn.png" alt=""></p><ul><li>警告 jshint esversion:6<br><img src="https://i.imgur.com/zdRpkQ4.png" alt=""></li></ul><h3 id="實際應用練習：複製檔案"><a href="#實際應用練習：複製檔案" class="headerlink" title="實際應用練習：複製檔案"></a>實際應用練習：複製檔案</h3><ul><li>在原本的資料夾內建立新的檔案<br><img src="https://i.imgur.com/ndvRf3A.png" alt=""><br><img src="https://i.imgur.com/24EYw4k.png" alt=""></li><li>在index.jd 輸入該語法<br><img src="https://i.imgur.com/0oGOWsV.png" alt=""></li><li>輸入後要運行 <code>node index.js</code><br><img src="https://i.imgur.com/hCsZbOF.png" alt=""><ul><li>運行之後會看到 <code>file2</code> 建立完成<br><img src="https://i.imgur.com/YR3MLWP.png" alt=""></li></ul></li><li>若是已經建立好的檔案</li><li>在檔案內輸入資訊<code>I am file2</code><br><img src="https://i.imgur.com/9ODoKY5.png" alt=""></li><li>執行 <code>copyFileSync</code><br><img src="https://i.imgur.com/Jae1spC.png" alt=""></li></ul><hr><h2 id="NPM-package-manager"><a href="#NPM-package-manager" class="headerlink" title="NPM package manager"></a>NPM package manager</h2><ul><li>即為 Node Package Manager 的縮寫，他是套件管理工具</li><li>在安裝node 的同時，就已經裝有 NPM<br><a href="https://tw.alphacamp.co/blog/npm-node-package-manager" target="_blank" rel="noopener">NPM是什麼？了解Node Package Manager套件管理機制</a></li><li>npm init<br><img src="https://i.imgur.com/75YtfQR.png" alt=""></li><li>建立一個 package.json<br><img src="https://i.imgur.com/HdtTW6p.png" alt=""><br><img src="https://i.imgur.com/eHkTGKZ.png" alt=""></li></ul><h2 id="如何使用真實npm"><a href="#如何使用真實npm" class="headerlink" title="如何使用真實npm"></a>如何使用真實npm</h2><p><img src="https://i.imgur.com/OQ0764J.png" alt=""></p><ul><li>在要進行安裝的資料夾內，<code>npm install superheroes</code><br><img src="https://i.imgur.com/05qxzDJ.png" alt=""><br><img src="https://i.imgur.com/XOlgK2J.png" alt=""></li><li>參考文件的說明<br><img src="https://i.imgur.com/6xrdtZG.png" alt=""><ul><li>在js檔案中輸入<br><img src="https://i.imgur.com/87emqhz.png" alt=""></li><li>運行 <code>node index.js</code><br><img src="https://i.imgur.com/F9f6Qzj.png" alt=""></li></ul></li></ul><p><a href="https://blog.hiskio.com/what-is-node-js/" target="_blank" rel="noopener">什麼是 Node.js？Node.js 完整介紹懶人包！</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 -  多筆資料渲染 v-for</title>
      <link href="/2021/05/17/Vue-v-for/"/>
      <url>/2021/05/17/Vue-v-for/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><h2 id="v-for-呈現多筆陣列"><a href="#v-for-呈現多筆陣列" class="headerlink" title="v-for 呈現多筆陣列"></a><code>v-for</code> 呈現多筆陣列</h2><ul><li><code>v-for= item in peopleArr</code> ， item 為 自定義名稱，後面(peopleArr)填入要迴圈的資料<ul><li>item是表示 peopleArr 陣列中每個單一物件</li></ul></li><li>key ：為帶入陣列的 key 值</li></ul><pre><code class="html">  &lt;div id=&quot;app&quot;&gt;   &lt;h3&gt;v-for 與 key&lt;/h3&gt;  &lt;p&gt; 人員介紹&lt;/p&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(item, key) in peopleArr&quot;&gt;      {{ key }} - {{ item.name}} / {{ item.age }} 歲    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {     peopleArr: [        {          name: &#39;Ken&#39;,          age: 30,          vegan: false        },        {          name: &#39;Wong&#39;,          page: 35,          vegan: false        },        {          name: &#39;Merry&#39;,          age: 60,          vegan: false        },        {          name: &#39;Tom&#39;,          age: 30,          vegan: true        },      ],    }  },}).mount(&#39;#app&#39;)</code></pre><p><a href="https://codepen.io/Eva-go/pen/powVYmN" target="_blank" rel="noopener">codepen</a><br><img src="https://i.imgur.com/TebHrmC.png" alt=""></p><h2 id="物件迴圈"><a href="#物件迴圈" class="headerlink" title="物件迴圈"></a>物件迴圈</h2><ul><li>每個item 就是每個物件的資料</li><li>key值為物件的屬性名稱</li></ul><pre><code class="html">  &lt;div id=&quot;app&quot;&gt;   &lt;h3&gt;v-for 與 key&lt;/h3&gt;  &lt;p&gt; 人員介紹&lt;/p&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(item, key) in peopleObj&quot;&gt;      {{ key }} - {{ item.name}} / {{ item.age }} 歲    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {     peopleObj:{        Salse: {           name: &#39;Ken&#39;,          age: 30,          vegan: false        },        Manager: {          name: &#39;Wong&#39;,          page: 35,          vegan: false        },        HumanResource: {          name: &#39;Merry&#39;,          age: 60,          vegan: false        },        Crew: {           name: &#39;Tom&#39;,          age: 30,          vegan: true        }      },    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/tzjh6Ah.png" alt=""></p><h2 id="v-for-與-key"><a href="#v-for-與-key" class="headerlink" title="v-for 與 key"></a>v-for 與 key</h2><h3 id="v-for-可以使用-index-當作-key-嗎？"><a href="#v-for-可以使用-index-當作-key-嗎？" class="headerlink" title="v-for 可以使用 index 當作 key 嗎？"></a>v-for 可以使用 index 當作 key 嗎？</h3><p>以六角課程為範例說明</p><pre><code class="html">&lt;h3&gt;v-for 與 key &lt;/h3&gt;  &lt;p&gt;菜單&lt;/p&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(item, key) in products&quot;&gt;      {{ key }} - {{ item.name}} / {{ item.price }} 元      &lt;input type=&quot;text&quot;&gt;    &lt;/li&gt;  &lt;/ul&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){    return {     products: [        {          name: &#39;蛋餅&#39;,          price: 30,          vegan: false        },        {          name: &#39;飯糰&#39;,          price: 35,          vegan: false        },        {          name: &#39;小籠包&#39;,          price: 60,          vegan: false        },        {          name: &#39;蘿蔔糕&#39;,          price: 30,          vegan: true        },      ],    },  method:{    reverseArray: function () {      this.products.reverse();    },  }  }}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/GKjdBGd.png" alt=""></p><ul><li><p>反轉之後，並沒有跟著<br><img src="https://i.imgur.com/ALe8vst.png" alt=""></p></li><li><p>綁定key之後</p><pre><code class="html">&lt;li v-for=&quot;(item, key) in products&quot; v-bind:key=&#39;item.name&#39;&gt;</code></pre></li></ul><p><img src="https://i.imgur.com/kbtUwy1.png" alt=""></p><h3 id="v-for-可以使用-index-當作-key-嗎？-1"><a href="#v-for-可以使用-index-當作-key-嗎？-1" class="headerlink" title="v-for 可以使用 index 當作 key 嗎？"></a><code>v-for</code> 可以使用 index 當作 key 嗎？</h3><p>索引是依照位置來判定，所以當資料的位置修改，索引值也會跟著變動，導致後續的渲染錯誤。<br>如果key是會變動的話，可能會導致資料的渲染錯誤</p><h3 id="如果後端提供的資料，沒有唯一索引要如何處理？"><a href="#如果後端提供的資料，沒有唯一索引要如何處理？" class="headerlink" title="如果後端提供的資料，沒有唯一索引要如何處理？"></a>如果後端提供的資料，沒有唯一索引要如何處理？</h3><p>  1.與後端溝通，為何前端要用到key的值<br>  2.拿到資料後，自己產生key，並放入該物件資料中</p><pre><code>使用v-for時，一定要用key 使用v-for時，不要拿索引當作key請使用唯一的值當作key的值</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> v-for </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 -  資料雙向綁定 v-model</title>
      <link href="/2021/05/17/Vue-v-model/"/>
      <url>/2021/05/17/Vue-v-model/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><p>使用<code>v-model</code>來進行資料的「雙向」綁定， v-model 會根據不同的表單類別來更新元素的內容。<br>主要應用在表單類型進行綁定，常見的表單元素像是 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 以及 <code>&lt;select&gt;</code> 等。</p><h2 id="v-model-可以與-input-、textarea-綁定"><a href="#v-model-可以與-input-、textarea-綁定" class="headerlink" title="v-model 可以與 input 、textarea 綁定"></a>v-model 可以與 input 、textarea 綁定</h2><pre><code class="html">  &lt;h3&gt;input&lt;/h3&gt;     &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;name&quot;&gt;          {{ name }}</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      name: &quot;小明&quot;    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/fuPfWXo.png" alt=""></p><p><img src="https://i.imgur.com/Vyon4w6.png" alt=""></p><pre><code class="html">&lt;h3&gt;textarea&lt;/h3&gt;          &lt;textarea cols=&quot;30&quot; rows=&quot;3&quot; class=&quot;form-control&quot; v-model=&quot;text&quot;&gt;&lt;/textarea&gt;          {{ text }}</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      text: &quot;一段文字敘述&quot;    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/T7AMqwY.png" alt=""></p><p><img src="https://i.imgur.com/fxYLTcU.png" alt=""></p><h2 id="checkbox-單選框"><a href="#checkbox-單選框" class="headerlink" title="checkbox 單選框"></a>checkbox 單選框</h2><ol><li>checkbox與p段落連動</li></ol><ul><li>在input加入<code>v-model=&quot;checkAnswer&quot;</code></li><li>P段洛，放入三元運算：用來判斷當checkAnswer為true，顯示’吃飽了’;反之，’還沒’<ul><li>透過選單的勾選，來顯示 checkAnswer 是 true \ false</li></ul></li></ul><pre><code class="html">     &lt;h3&gt;checkbox 單選框&lt;/h3&gt;     &lt;p&gt;小明，你是吃飽沒？&lt;/p&gt;     &lt;p&gt;{{ checkAnswer ? '吃飽了' : '還沒'}}&lt;/p&gt;     &lt;div class=&quot;form-check&quot;&gt;     &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check1&quot; v-model=&quot;checkAnswer&quot;&gt;    &lt;label class=&quot;form-check-label&quot; for=&quot;check1&quot;&gt;小明回覆&lt;/label&gt;          &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      checkAnswer: false,    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/wBR8ESD.png" alt=""></p><p><img src="https://i.imgur.com/cRDgctR.gif" alt=""></p><ol start="2"><li>checkbox 單選延伸</li></ol><ul><li>回傳單一的值，相對使用三元運算比較直觀</li><li><code>checkAnswer2</code> 是空字串，在 input 綁定後，設定false-value、true-value</li><li>將文字綁入：<code>true-value=&quot;吃飽了&quot; false-value=&quot;還沒&quot;</code>，就可以放入資料欄位上</li></ul><pre><code class="html"> &lt;h3&gt;checkbox 單選延伸&lt;/h3&gt;     &lt;p&gt;小明，你是吃飽沒？&lt;/p&gt;     &lt;p&gt;{{ checkAnswer2 }}&lt;/p&gt;     &lt;div class=&quot;form-check&quot;&gt;     &lt;input type=&quot;checkbox&quot; v-model=&quot;checkAnswer2&quot; true-value=&quot;吃飽了&quot; false-value=&quot;還沒&quot; class=&quot;form-check-input&quot;              id=&quot;check2&quot;&gt;     &lt;label class=&quot;form-check-label&quot; for=&quot;check2&quot;&gt;小明回覆&lt;/label&gt;     &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      checkAnswer2: &#39;&#39;,    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/x4aeut8.png" alt=""></p><p><img src="https://i.imgur.com/qvyj7dH.png" alt=""></p><h2 id="checkbox-複選框"><a href="#checkbox-複選框" class="headerlink" title="checkbox 複選框"></a>checkbox 複選框</h2><ul><li><p>資料格式為陣列</p></li><li><p>覆選框的input裡面要有value</p></li><li><p>當綁定v-model，於畫面點選該項目時，會將 input 中的 value，放入的陣列中</p><ul><li>最後將資料渲染於畫面<pre><code class="html">&lt;h3&gt;checkbox 複選框&lt;/h3&gt;&lt;p&gt;你還要吃什麼？&lt;/p&gt;&lt;p&gt;{{ checkAnswer3.join('') }}&lt;/p&gt;&lt;div class=&quot;form-check&quot;&gt;   &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check3&quot; value=&quot;蛋餅&quot; v-model=&quot;checkAnswer3&quot;&gt;   &lt;label class=&quot;form-check-label&quot; for=&quot;check3&quot;&gt;蛋餅&lt;/label&gt;         &lt;/div&gt;&lt;div class=&quot;form-check&quot;&gt;    &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check4&quot; value=&quot;蘿蔔糕&quot; v-model=&quot;checkAnswer3&quot;&gt;    &lt;label class=&quot;form-check-label&quot; for=&quot;check4&quot;&gt;蘿蔔糕&lt;/label&gt;&lt;/div&gt;&lt;div class=&quot;form-check&quot;&gt;  &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check5&quot; value=&quot;豆漿&quot; v-model=&quot;checkAnswer3&quot;&gt;  &lt;label class=&quot;form-check-label&quot; for=&quot;check5&quot;&gt;豆漿&lt;/label&gt; &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({</code></pre></li></ul><p>data(){<br>   return {</p><pre><code>checkAnswer3: [],</code></pre><p>  }<br>},</p></li></ul><p>}).mount(‘#app’)</p><pre><code>![](https://i.imgur.com/V6RUoEF.png)## v-model 修飾符修飾符為畫面上，v-model的資料和實際data中的資料在綁定之間，額外處理的小方法。1. 延遲 Lazy* 輸入文字後，要點擊外面或是按下enter，才會出現* 綁定到html的change事件：當完成輸入框的事件之後，才會綁定到資料集```html   &lt;h3&gt;修飾符&lt;/h3&gt;   &lt;h4 class=&quot;mt-3&quot;&gt;延遲 Lazy&lt;/h4&gt;     {{ lazyMsg }}   &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model.lazy=&quot;lazyMsg&quot;&gt;</code></pre><p><img src="https://i.imgur.com/1Jp0XWl.png" alt=""></p><h2 id="純數值-Number"><a href="#純數值-Number" class="headerlink" title="純數值 Number"></a>純數值 Number</h2><p>需要用戶輸入數值，可先將type改為number,並加入修飾符</p><ul><li><code>&lt;input type=&quot;number&quot;&gt;</code>:輸入框無法輸入文字，只能輸入數字，但型別依然是string</li></ul><pre><code class="html">   &lt;h4 class=&quot;mt-3&quot;&gt;純數值 Number&lt;/h4&gt;     {{ numberMsg }}{{ typeof numberMsg }}   &lt;input type=&quot;number&quot; class=&quot;form-control&quot; v-model=&quot;numberMsg&quot;&gt;</code></pre><p><img src="https://i.imgur.com/48WNFq2.png" alt=""></p><ul><li>要確保輸入的內容為純數字型別：要加修飾符</li></ul><pre><code class="html">   &lt;h4 class=&quot;mt-3&quot;&gt;純數值 Number&lt;/h4&gt;       {{ numberMsg }}{{ typeof numberMsg }}   &lt;input type=&quot;number&quot; class=&quot;form-control&quot; v-model.number=&quot;numberMsg&quot;&gt;</code></pre><p><img src="https://i.imgur.com/ANESock.png" alt=""></p><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>將資料內容的前後空白鍵，刪除</p><ul><li>應用於要輸入e-mail帳號，避免用戶不小心在前後加入空白，而造成資料錯誤<pre><code class="html"> &lt;h4 class=&quot;mt-3&quot;&gt;修剪 Trim&lt;/h4&gt;        這是一段{{ trimMsg }}緊黏的文字 &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model.trim=&quot;trimMsg&quot;&gt;</code></pre><img src="https://i.imgur.com/SCJddsn.png" alt=""></li></ul><p>參考資料：<br><a href="https://book.vue.tw/CH1/1-4-directive.html" target="_blank" rel="noopener">重新認識 Vue.js | Kuro Hsu</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 - 綁定方式多變化</title>
      <link href="/2021/05/16/Vue-bind2/"/>
      <url>/2021/05/16/Vue-bind2/</url>
      
        <content type="html"><![CDATA[<h2 id="動態屬性綁定-注意大小寫"><a href="#動態屬性綁定-注意大小寫" class="headerlink" title="動態屬性綁定(注意大小寫)"></a>動態屬性綁定(注意大小寫)</h2><ul><li>宣告變數dynamic，將 dynamic 綁定於點擊事件上 <code>:click=&quot;dynamic = dynamic === &#39;disabled&#39; ? &#39;readonly&#39;:&#39;disabled&#39;&quot;</code><ul><li>如果變數結果是 disable 的話就會切換成 readonly，反之，就會切換為 disabled</li></ul></li><li>接著可以將值動態地加入 HTML 屬性上 <code>:[dynamic]</code><ul><li>綁定後，就會發現輸入框隨著切換，有不同效果<pre><code class="html">&lt;h3&gt;動態屬性綁定(注意大小寫)&lt;/h3&gt;&lt;button type=&quot;button&quot;v-on:click=&quot;dynamic = dynamic === &#39;disabled&#39; ? &#39;readonly&#39;:&#39;disabled&#39;&quot;&gt;切換為 {{ dynamic }}&lt;/button&gt;&lt;br&gt;&lt;input type=&quot;text&quot; :[dynamic] :value=&quot;name&quot;&gt;</code></pre><pre><code class="javascript">//JS</code></pre></li></ul></li></ul><p>Vue.createApp({</p><p>  data(){<br>     return {<br>      dynamic: ‘disabled’,<br>      breakfastShop: {<br>      name: ‘奇蹟早餐’,<br>        imgUrl: ‘<a href="https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&#39;" target="_blank" rel="noopener">https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&#39;</a>,<br>        resizeImg: ‘<a href="https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;q=80&#39;" target="_blank" rel="noopener">https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;q=80&#39;</a><br>      },<br>    }<br>  }<br>}).mount(‘#app’)</p><pre><code>`readony`:可以選擇輸入框，但無法輸入值`disabled`:無法點選輸入框![](https://i.imgur.com/GfAhQJk.png)![](https://i.imgur.com/YUf3XZk.png)</code></pre><p>再次補充說明：<br>    1. dynamic = 【這邊是最前面的變數，用來存放後面回傳回來的值】<br>    2. dynamic === ‘disabled’ ? 【這邊就是中間判斷式的部分，判斷 dynamic 變數是否為 ‘disabled’】<br>    3. ‘readonly’:’disabled’ 【這邊就是最後面的值，會依照前方的判斷式來決定回傳 ‘readonly’ 還是 ‘disabled’，如果判斷式結果為 True 則回傳 ‘readonly’ ，反之回傳 ‘disabled’】</p><pre><code>## HTML 樣式綁定樣式綁定是時常使用到的效果，能透過此方式，使顏色改變、增加一點簡易動畫的效果。## 範例解說* 替 box 增加旋轉效果* 綁定class可以用陣列方式、或物件方式來添加，以下範例為物件方式  * 物件key值對應 className，物件的值是對應 true\false(判斷式)  * 若className 有 `-` ， 注意要 &quot;bg-danger&quot;* 事件的綁定 `change()` 透過函式來切換 true\false` this[key] = !this[key];`* 切換是否旋轉、切換背景色 ```html&lt;style&gt;.box {  background-color: var(--bs-light);  border: 1px solid var(--bs-gray);  width: 80px;  height: 80px;}.box {  transition: all .5s;}.box.rotate {  transform: rotate(45deg)}&lt;/style&gt; &lt;h2&gt;切換 Class&lt;/h2&gt;          &lt;h3&gt;物件寫法&lt;/h3&gt;          &lt;!-- 物件key值對應 className，物件的值是對應 true\false --&gt;          &lt;div class=&quot;box&quot; :class=&quot;{ rotate: isTransform ,&#39;bg-danger&#39;:boxColor}&quot;&gt;&lt;/div&gt;          &lt;hr&gt;          &lt;button class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;change(&#39;isTransform&#39;)&quot;&gt;選轉物件&lt;/button&gt;          &lt;button class=&quot;btn btn-outline-primary ms-1&quot; v-on:click=&quot;change(&#39;boxColor&#39;)&quot;&gt;切換色彩&lt;/button&gt;</code></pre><pre><code class="javascript">const App = {  data() {    return {      isTransform: true,      boxColor: false,    };  },  methods: {    change: function (key) {      this[key] = !this[key];    },    addClass(arr) {      this.arrayClass.push(...arr);    }  },};Vue.createApp(App).mount(&#39;#app&#39;);</code></pre><p><img src="https://i.imgur.com/KFqN9hz.png" alt=""></p><p><img src="https://i.imgur.com/b9OCub3.gif" alt=""></p><h3 id="整合為一個物件"><a href="#整合為一個物件" class="headerlink" title="整合為一個物件"></a>整合為一個物件</h3><p>將上個範例的兩個class樣式，整合成一個物件</p><pre><code class="html"> &lt;hr class=&quot;mt-4&quot;&gt;   &lt;h3&gt;物件寫法 2&lt;/h5&gt;         &lt;div class=&quot;box&quot; :class=&#39;classObj&#39;&gt;&lt;/div&gt;</code></pre><pre><code class="javascript">const App = {  data() {    return {      isTransform: true,      boxColor: false,      classObj:{        rotata: true,        &quot;bg-danger&quot;: true,      }    };  },  methods: {    change: function (key) {      this[key] = !this[key];    },    addClass(arr) {      this.arrayClass.push(...arr);    }  },};Vue.createApp(App).mount(&#39;#app&#39;);</code></pre><p><img src="https://i.imgur.com/41AKFc8.png" alt=""></p><p><img src="https://i.imgur.com/StALtsi.png" alt=""></p><h2 id="綁定樣式，陣列寫法"><a href="#綁定樣式，陣列寫法" class="headerlink" title="綁定樣式，陣列寫法"></a>綁定樣式，陣列寫法</h2><ul><li>針對單一元素，加入多個class<ul><li>此方式就不用 true\false 的判斷動作，只要綁定在陣列之中的樣式，就會套入效果</li><li>像是範例，就是使按鈕背景色彩為紅色(‘btn-danger’)、無法點擊(‘disabled’)<pre><code class="html">&lt;h4&gt;陣列寫法&lt;/h4&gt;        &lt;button class=&quot;btn&quot; :class=&quot;[&#39;disabled&#39;,&#39;btn-danger&#39;]&quot;&gt;請操作本元件&lt;/button&gt;        &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;addClass([&#39;btn-primary&#39;, &#39;active&#39;])&quot;&gt;為陣列加入          Class&lt;/button&gt;</code></pre><img src="https://i.imgur.com/RZFOrdK.png" alt=""></li></ul></li></ul><ul><li>另一種，製作陣列，並將陣列放入<ul><li>將arrayClass，綁定在標籤的class上</li><li>在點擊按鈕，綁定點擊事件，<code>addClass(arr)</code>，在該函式傳入參數，將陣列內容加入arrayClass，並套入綁定的標籤上</li><li>相對應的方法：<br><img src="https://i.imgur.com/VFfDXPY.png" alt=""></li></ul></li></ul><pre><code class="html">&lt;h4&gt;陣列寫法&lt;/h4&gt;  &lt;button class=&quot;btn&quot; :class=&quot;arrayClass&quot;  &gt;請操作本元件&lt;/button&gt;  &lt;button type=&quot;button&quot;    class=&quot;btn btn-outline-primary&quot;    v-on:click=&quot;addClass([&#39;btn-primary&#39;, &#39;active&#39;])&quot;&gt;為陣列加入 Class&lt;/button&gt;</code></pre><pre><code class="javascript">const App = {  data() {    return {       // Array 操作      arrayClass: [&#39;&#39;],    };  },  methods: {    addClass(arr) {      this.arrayClass.push(...arr);    }  },};Vue.createApp(App).mount(&#39;#app&#39;);</code></pre><p><img src="https://i.imgur.com/PZd0sKO.png" alt=""></p><ul><li><code>btn-primary</code>:背景色為綠色<br><img src="https://i.imgur.com/S0zLJKb.png" alt=""></li></ul><h4 id="補充：混合寫法"><a href="#補充：混合寫法" class="headerlink" title="補充：混合寫法"></a>補充：混合寫法</h4><ul><li>將bootstrap的class放入，且加入arrayClass<ul><li><code>:class=&quot;[arrayClass,&#39;text-danger&#39;]</code>，也就是除了放入 arrayClass 這個變數之外，我們還可以放入新的class給予不同樣式<pre><code class="html">&lt;h4&gt;陣列寫法&lt;/h4&gt;&lt;button class=&quot;btn&quot; :class=&quot;[arrayClass,&#39;text-danger&#39;]&quot;&gt;請操作本元件&lt;/button&gt;  &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;addClass([&#39;btn-primary&#39;, &#39;active&#39;])&quot;&gt;為陣列加入          Class&lt;/button&gt;</code></pre></li></ul></li></ul><p><img src="https://i.imgur.com/d3dqSTj.png" alt=""></p><h2 id="行內樣式style"><a href="#行內樣式style" class="headerlink" title="行內樣式style"></a>行內樣式style</h2><h4 id="要綁定style的時候"><a href="#要綁定style的時候" class="headerlink" title="要綁定style的時候"></a>要綁定style的時候</h4><ul><li>key會帶入style的屬性(注意要以駝峰式)，如background-color，要改為backgroundColor</li><li>值則是帶入style相對應的值</li></ul><pre><code class="html">&lt;h2&gt;行內樣式&lt;/h2&gt;            &lt;h4&gt;綁定行內樣式&lt;/h4&gt;            &lt;div class=&quot;box&quot; :style=&quot;{backgroundColor:&#39;red&#39;}&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></pre><h3 id="加入準備好的資料格式"><a href="#加入準備好的資料格式" class="headerlink" title="加入準備好的資料格式"></a>加入準備好的資料格式</h3><ul><li><p>將設定好的物件，裡面有包含數個樣式，直接綁定至style<br><img src="https://i.imgur.com/z93Jmam.png" alt=""></p></li><li><p>背景色彩，紅色，邊框5px<br><img src="https://i.imgur.com/lWYdxIi.png" alt=""></p></li></ul><h3 id="同時多個樣式"><a href="#同時多個樣式" class="headerlink" title="同時多個樣式"></a>同時多個樣式</h3><ul><li>以陣列裡面包多個物件<pre><code class="html">&lt;div class=&quot;box&quot; :style=&quot;[styleObject,styleObject2]&quot;&gt;&lt;/div&gt;</code></pre><img src="https://i.imgur.com/11h8F7J.png" alt=""></li></ul><p><img src="https://i.imgur.com/62sDl0J.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 - 事件綁定</title>
      <link href="/2021/05/16/Vue-v-on/"/>
      <url>/2021/05/16/Vue-v-on/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><ul><li>建立add、minus兩個按鈕<ul><li>點選add增加數字、點選minus減少數字</li></ul></li><li>讓add按鈕綁定<code>addFn</code>函式：<code>v-on:click=&quot;addFn&quot;</code> <code>on</code> <code>click</code>事件，執行<code>addFn</code>函式</li><li>綁定後，在<code>methods</code>撰寫<code>addFn</code>函式內容，要取得 data 中的 num 才能進行運算 =&gt;<code>this.num++</code></li><li>同理，在minus的按鈕，函式內運算<code>this.num++</code>，並將點擊事件放入<code>button</code><ul><li>v-on:Event 事件綁定，有兩種撰寫方式<br><img src="https://i.imgur.com/IUUcznh.png" alt=""></li></ul></li></ul><pre><code class="html"> &lt;div id=&quot;app&quot;&gt;   &lt;h1&gt;{{num}}&lt;/h1&gt;    &lt;button v-on:click=&quot;addFn&quot;&gt;Add&lt;/button&gt;    &lt;!-- v-on 改為@ --&gt;    &lt;button @click=&quot;MinusFun&quot;&gt;Minus&lt;/button&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {       num: 0    }  },  methods: {    addFn() {       //num.value = num.value + 1;          this.num ++;    },     MinusFun(){        this.num--;     },  }}).mount(&#39;#app&#39;)</code></pre><p><a href="https://codepen.io/Eva-go/pen/bGRLXNW" target="_blank" rel="noopener">codepen</a></p><h2 id="事件與class的綁定"><a href="#事件與class的綁定" class="headerlink" title="事件與class的綁定"></a>事件與class的綁定</h2><ul><li><p>於 box 綁定旋轉的效果 <code>:class=&quot;{ rotate: isTransform }</code></p></li><li><p>在button綁定觸發旋轉的事件</p><pre><code class="html">&lt;style&gt;.box { margin:0 auto;background-color: #fff;border: 1px solid #ccc;width: 80px;height: 80px;}.box {transition: all .5s;}.box.rotate {transform: rotate(45deg)}&lt;/style&gt;&lt;div id=&quot;app&quot;&gt; &lt;h3&gt;觸發事件 與 縮寫*&lt;/h3&gt;&lt;div class=&quot;box&quot; :class=&quot;{ rotate: isTransform }&quot;&gt;&lt;/div&gt;&lt;hr&gt;&lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;changeClass&quot; &gt;選轉物件&lt;/button&gt;&lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({data() {  return {     isTransform: true,  };},methods: {   changeClass() {    this.isTransform =!this.isTransform;  },}};</code></pre></li></ul><p>}).mount(‘#app’)</p><pre><code>## 帶入參數* 建立 `change()` 函式以帶入參數方式，來變化 isTransform 的 true\false```html&lt;h3&gt;帶入參數*&lt;/h3&gt;  &lt;div class=&quot;box&quot; :class=&quot;{ rotate: isTransform }&quot;&gt;&lt;/div&gt;  &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;change(&#39;isTransform&#39;)&quot;&gt;選轉物件&lt;/button&gt;</code></pre><pre><code class="javascript">Vue.createApp({ data() {    return {       isTransform: true,    };  },  methods: {     changeClass() {      this.isTransform =!this.isTransform;    },    change(key) {      this[key] = !this[key];    },  }};}).mount(&#39;#app&#39;)</code></pre><h2 id="動態物件方法"><a href="#動態物件方法" class="headerlink" title="動態物件方法 {}"></a>動態物件方法 {}</h2><ul><li><p>在一個元素上，加入多個事件</p></li><li><p>注意：此方式無法傳入參數</p><pre><code class="html">&lt;h3&gt;動態物件方法 {}&lt;/h3&gt;        &lt;!-- 此方法無法傳入參數 --&gt;&lt;button class=&quot;box&quot; @=&quot;{    mousedown:down,    mouseup:up }&quot;&gt;&lt;/button&gt;</code></pre><pre><code class="javascript">Vue.createApp({data() {  return {     isTransform: true,  };},methods: {   changeClass() {    this.isTransform =!this.isTransform;  },  change(key) {    this[key] = !this[key];  },  down() {    console.log(&quot;按下&quot;);  },  up() {    console.log(&quot;放開&quot;);  }}};</code></pre></li></ul><p>}).mount(‘#app’)</p><pre><code>![](https://i.imgur.com/qO3AcxL.gif)[codepen](https://codepen.io/Eva-go/pen/abwYwPa)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 - 屬性綁定</title>
      <link href="/2021/05/16/Vue-bind/"/>
      <url>/2021/05/16/Vue-bind/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><p>  屬性綁定可以輕鬆的將data中的資料，與HTML的標籤屬性綁定，這樣一來可以動態的變更資料。</p><h2 id="原本-HTML-的樣子"><a href="#原本-HTML-的樣子" class="headerlink" title="原本 HTML 的樣子"></a>原本 HTML 的樣子</h2><ul><li>img中原本有個圖片資料</li><li>v-bind是指令，<code>：</code>後接的是HTML的屬性</li></ul><pre><code class="html">  &lt;h3&gt;綁定屬性 v-bind&lt;/h3&gt;  &lt;p&gt;{{ breakfastShop.name }}&lt;/p&gt;  &lt;img src=&quot;https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&quot; class=&quot;square-img&quot; alt=&quot;&quot;&gt;</code></pre><pre><code class="javascript">//JSVue.createApp({  data(){     return {      breakfastShop: {        name: &#39;奇蹟早餐&#39;,        imgUrl: &#39;https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&#39;,        resizeImg: &#39;https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;q=80&#39;      },    }  }}).mount(&#39;#app&#39;)</code></pre><h3 id="修改-gt-綁定JS中-breakfastShop-物件資料內容"><a href="#修改-gt-綁定JS中-breakfastShop-物件資料內容" class="headerlink" title="修改 =&gt; 綁定JS中 breakfastShop 物件資料內容"></a>修改 =&gt; 綁定JS中 breakfastShop 物件資料內容</h3><p><img src="https://i.imgur.com/H3UzhrB.png" alt=""></p><ul><li>將原本<code>src</code> =&gt; <code>v-bind:src=&quot;breakfastShop.imgUrl&quot;</code><ul><li>此外title 屬性，也能照樣綁定喔！  <pre><code class="html">&lt;h3&gt;綁定屬性 v-bind&lt;/h3&gt;      &lt;p&gt;{{ breakfastShop.name }}&lt;/p&gt;      &lt;img v-bind:src=&quot;breakfastShop.imgUrl&quot; class=&quot;square-img&quot; v-bind:title=&quot;breakfastShop.name&quot; alt=&quot;&quot;&gt;</code></pre><img src="https://i.imgur.com/Xhtez9s.png" alt=""></li></ul></li></ul><h3 id="縮寫形式"><a href="#縮寫形式" class="headerlink" title="縮寫形式"></a>縮寫形式</h3><ul><li>留下冒號<pre><code class="html">&lt;h3&gt;縮寫形式 &lt;code&gt;:&lt;/code&gt;&lt;/h3&gt;        &lt;img :src=&quot;breakfastShop.imgUrl&quot; class=&quot;square-img&quot; :title=&quot;breakfastShop.name&quot; alt=&quot;&quot;&gt;</code></pre></li></ul><pre><code>## 其他屬性的綁定* 當他是飽的狀態，就無法按下送出    * 預設是false 所以可以送出表單    * 但當點擊狀態切換(isFull: true)，此時就會無法點擊送出按鈕* 由範例可得知，可以透過 true\false 的狀態切換，製造出不同互動效果```html &lt;h3&gt;更多屬性綁定&lt;/h3&gt;          小明還想點餐：          &lt;form action=&quot;&quot;&gt;            &lt;input type=&quot;text&quot; value=&quot;我要吃蘿蔔糕&quot;&gt;            &lt;button type=&quot;submit&quot; :disabled=&quot;isFull&quot;&gt;送出&lt;/button&gt;          &lt;/form&gt;          &lt;button type=&quot;button&quot; v-on:click=&quot;change(&#39;isFull&#39;)&quot;&gt;狀態切換&lt;/button&gt;</code></pre><p><img src="https://i.imgur.com/GVQXr8f.png" alt=""></p><ul><li>預設是false，所以可以點擊送出<br><img src="https://i.imgur.com/4HmkD5f.png" alt=""></li></ul><p><img src="https://i.imgur.com/w91MEBD.png" alt=""></p><p>資料來源：<br>六角學院 - Vue.js 3 課程</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 3 - 起手式</title>
      <link href="/2021/05/16/Vue-basic/"/>
      <url>/2021/05/16/Vue-basic/</url>
      
        <content type="html"><![CDATA[<p>今天要介紹的是 Vue.js3 的起手式，主要參考<a href="https://vuejs.org/v2/guide/#Getting-Started" target="_blank" rel="noopener">官方文件</a>來學習</p><h3 id="載入方式"><a href="#載入方式" class="headerlink" title="載入方式"></a>載入方式</h3><pre><code class="javascript">&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></pre><h3 id="引入之後，在index-html檔案"><a href="#引入之後，在index-html檔案" class="headerlink" title="引入之後，在index.html檔案"></a>引入之後，在<code>index.html</code>檔案</h3><pre><code class="html"> &lt;div id=&quot;app&quot;&gt;    &lt;h1&gt;{{message}}&lt;/h1&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">//JSVue.createApp({  data(){     return {      message: &#39;I am Eva!&#39;    }  }}).mount(&#39;#app&#39;)</code></pre><ul><li>畫面就會出現相應的文字<br><img src="https://i.imgur.com/l7MiTCV.png" alt=""></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCSS- ClothesStore</title>
      <link href="/2021/03/05/scss-ClothesStore/"/>
      <url>/2021/03/05/scss-ClothesStore/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/v5qnxzN.png" alt=""></p><p><a href="https://eva813.github.io/Eva_portfolio/sass-ClothesStore/ClothesStore.html" target="_blank" rel="noopener">成品</a></p><h2 id="scss-檔案的建立"><a href="#scss-檔案的建立" class="headerlink" title="scss 檔案的建立"></a>scss 檔案的建立</h2><p>所建立的各分檔，個別會負責不同的區塊，並透過<code>@import</code>放入主要的sass檔</p><ul><li>main.scss 引入其他分檔<br><img src="https://i.imgur.com/PLNNF5k.png" alt=""></li><li>abstracts<ul><li>/_variables.scss：設定常用的變數，如：顏色、字體大小</li><li>/_mixin.scss：設定某些區段中，重複用到的樣式，並於該區段要使用的時候引用</li></ul></li><li>base<ul><li>/_base.scss：為設定大框架，如html、body、container，等主幹的大小、字型的設定</li></ul></li><li>components:放置部分功能元件<ul><li>/_button.scss：按鈕的設定</li><li>/_heading.scss：標題</li><li>/_logo.scss</li><li>/_dropdown.scss</li></ul></li><li>layout （設計網頁版面配置(Layout)）<ul><li>/_header.scss</li><li>/_navigation.scss</li><li>/_products.scss</li><li>/_slidshow.scss</li><li>/_footer.scss</li></ul></li><li>pages 通常是用來放置其他分頁（網頁內會連結到其他相關分頁）</li><li>venders 放置外部套件</li></ul><p><img src="https://i.imgur.com/GmeHZ7w.png" alt=""></p><h3 id="1-基礎設置"><a href="#1-基礎設置" class="headerlink" title="(1)基礎設置"></a>(1)基礎設置</h3><h4 id="1-1-Grid-練習"><a href="#1-1-Grid-練習" class="headerlink" title="(1.1)Grid 練習"></a>(1.1)Grid 練習</h4><p><code>_base.scss</code></p><ul><li>總共要設置10欄</li><li>列的則是設置4區塊</li><li>並設置每個區塊都有1.6rem的gap<pre><code class="scss">.container{  display: grid;  grid-template-columns:minmax(6rem,1fr) repeat(8,minmax(min-content,16 rem))   minmax(6rem,1fr);//10欄  grid-template-rows: repeat(4,min-content);  grid-row-gap:1.6rem ;</code></pre></li></ul><p>}</p><pre><code>![](https://i.imgur.com/QA3NLgt.png)* `minmax(min, max)``minmax(6rem,1fr)`:設定格線最小6rem，最大1frfr 單位就是為了格線布局而生，fraction，中文意思是分數，當使用在網格軌道上時，可以直接想像成 &quot;我的這個空位要佔有總 fr 數量的幾等份&quot;* `repeat(8,minmax(min-content,16rem))`:重複8個，最小：min-content;最大16rem    * repeat() 重複網格線及間距     * max-content/min-content 最小內容尺寸/最大內容尺寸        * max-content：給予網格區域所需的最大尺寸空間，內容盡可能避免折行。        * min-content：給予網格區域所需的最小尺寸空間，內容盡可能的折行，但不會溢出邊界。[[Day19] grid-template 屬性之 rows/columns](https://ithelp.ithome.com.tw/articles/10248418)[Min &amp; Max Content Sizing in CSS Grid — 1/3 Flexibility](https://www.youtube.com/watch?v=lZ2JX_6SGNI)[CSS Layout很難？用這招30秒就讓你輕鬆生出網頁版面！](http://csscoke.com/2013/10/17/css-layout-generator/)---#### (1.2)常用變數* `` _variable.scss``map與function的搭配使用* 設定不同的顏色，並設置函式，以利後續使用```scss$colors:(  primary:#333,  secondary:#ffe,  tertiary:#f2f0f1,  quaternary:#f5b149);//創造函式//函式名稱為color代入參數為$color-name，使用map代入物件，最為回傳的結果@function color($color-name){  @return map-get($map: $colors, $key:$color-name )}$font-size:(  xl:3rem,  lg:2.5rem,  md:2rem,  sm:1.8rem,  xs:1.6rem);@function size($size){  @return map-get($map: $font-size, $key:$size )}</code></pre><hr><h3 id="2-layout-header-scss"><a href="#2-layout-header-scss" class="headerlink" title="(2)layout/_header.scss"></a>(2)<code>layout/_header.scss</code></h3><p>header的版面</p><ul><li><code>grid-column: 1/-1; (1/11) grid-row: 1/2;</code>表示所佔的區隔<br><img src="https://i.imgur.com/C1W2Urq.png" alt=""></li><li>而在header這區，在設置grid劃分區塊<ul><li>有9欄</li><li>列設置3區塊<pre><code class="scss">.header{grid-column: 1/-1; //1/11grid-row: 1/2;display: grid;grid-template-columns: 1fr repeat(7,minmax(min-content,16rem)) 1fr;grid-template-rows: repeat(3,min-content);grid-gap: 2rem;}</code></pre></li></ul></li><li><code>grid-column: 1/-1; //1/11  ; grid-row: 1/2;</code> <a href="https://stackoverflow.com/questions/49005233/whats-the-difference-between-grid-column-value-1-1-and-1-2" target="_blank" rel="noopener">What’s the difference between grid-column value 1/1 and 1/2?</a></li></ul><h3 id="3-logo的大小設置"><a href="#3-logo的大小設置" class="headerlink" title="(3)logo的大小設置"></a>(3)logo的大小設置</h3><p><code>_logo.scss</code></p><ul><li>注意：設立所設定的欄和列的區塊，是在header設置的grid底下<br><img src="https://i.imgur.com/OEkTxyS.png" alt=""></li></ul><pre><code class="scss">.logo{  grid-column: 1/2;  grid-row: 1/2;  padding: 1rem;  //class=&quot;logo-img&quot;  &amp;-img{      width: 10rem;    height: 100%;  }}</code></pre><h3 id="4-heading"><a href="#4-heading" class="headerlink" title="(4)heading"></a>(4)heading</h3><ul><li>標題的位置一樣利用grid來設定</li><li>在文字的字體、大小、間距進行調整<br><code>_heading.scss</code><pre><code class="scss">.heading{grid-column: 4/7;grid-row: 2/3;text-align: center;&amp;-text{  font-family: &#39;Great Vibes&#39;,cursive;  font-size: size(xl)*2; //結果為6rem  font-weight: lighter;  letter-spacing: 0.5rem;}}</code></pre><img src="https://i.imgur.com/JfkrqEb.png" alt=""></li></ul><h3 id="5-heading中的navigation"><a href="#5-heading中的navigation" class="headerlink" title="(5)heading中的navigation"></a>(5)heading中的navigation</h3><p> <code>layout/_navigation.scss</code></p><ul><li><code>.first-nav</code>為放置右上角</li><li><code>.second-nav</code>為放置下方，中間的位置<pre><code class="scss"></code></pre></li></ul><p>.first-nav{<br>  //放在最後三欄<br>  grid-column: 7/10;<br>  grid-row: 1/2;<br>  @include navigation;<br>}<br>.second-nav{<br>  grid-column: 3/8;<br>  grid-row: 3/4;<br>  @include navigation;<br>}<br>.dropdown{<br>  display: none;<br>}</p><pre><code>![](https://i.imgur.com/PWJoEoH.png)* @mixin，創造navigstion共用樣式    * 使navigation的li-list可以橫向分散排列    * 設定hover效果，使游標摸到顏色變淺`lighten()````scss//.first-nav-list@mixin navigation{  &amp;-list{      display: flex;    justify-content: space-around;    align-items: center;    height: 100%;  }  &amp;-item{    list-style: none;  }  &amp;-link{    color: color(primary);    text-decoration: none;    font-size: size(sm);    transition: all .3s;    &amp;:hover{      color: lighten(color(primary),40%);    }  }}</code></pre><p><img src="https://i.imgur.com/t6KdpJ9.png" alt=""></p><h3 id="6-下拉選項：dropdown-list的箭頭符號"><a href="#6-下拉選項：dropdown-list的箭頭符號" class="headerlink" title="(6)下拉選項：dropdown list的箭頭符號"></a>(6)下拉選項：dropdown list的箭頭符號</h3><p><code>components/_dropdown.scss</code></p><ul><li><code>font-family: &#39;Font Awesome 5 Free&#39;</code>：把icon當作字體使用<br><a href="https://yuwensaf.github.io/6110beb1/" target="_blank" rel="noopener">使用 fontAwesome 動態加入連結 icon</a></li></ul><pre><code class="scss">.dropdown-li{  position: relative; //創造下拉選單的箭頭符號 &amp;::after{   font-family: &#39;Font Awesome 5 Free&#39;;   content: &#39;\f078&#39;;   font-weight:bold ; }}</code></pre><p><img src="https://i.imgur.com/4pg8oNR.png" alt=""></p><ul><li><p>製作下拉式選單的三角形</p><ul><li>先利用border製作出上、下、左、右的三角<pre><code class="scss">.dropdown{&amp;::before{content: &#39;&#39;;display: block;position: absolute;top: -1.5rem;left: 7.3rem;border-top: 15px solid red;border-right: 15px solid green;border-bottom: 15px solid orange;border-left: 15px solid blue;</code></pre></li></ul><p>}<br>}</p><pre><code>![](https://i.imgur.com/chq5TM1.png)</code></pre></li><li><p>調整上方各色的三角形，並留下要保留的一個三角形</p></li></ul><pre><code class="scss">  &amp;::before{    content: &#39;&#39;;    display: block;    position: absolute;    top: -1.5rem;    left: 7.3rem;    // border-top: 15px solid red;    border-right: 15px solid transparent;    border-bottom: 15px solid orange;    border-left: 15px solid transparent;  }</code></pre><p><img src="https://i.imgur.com/YhxKI4C.png" alt=""></p><ul><li><code>right: -2.8rem;</code>:條整位置對齊正方形list</li><li><code>border-bottom: 15px solid darken(color(tertiary),5%);</code>：修改三角形的顏色，使整體為灰色</li></ul><pre><code class="scss">.dropdown{  position: absolute;  top: 3rem;  right: -2.8rem; //使整個往右移動  width: 10rem;  background-color:darken(color(tertiary),5%);  @include navigation;  padding: 1rem;  text-align: center;  border-radius: 0.2rem;  &amp;::before{    content: &#39;&#39;;    display: block;    position: absolute;    top: -1.5rem;    left: 7.3rem;    // border-top: 15px solid red;    border-right: 15px solid transparent;    border-bottom: 15px solid darken(color(tertiary),5%);    border-left: 15px solid transparent;  }</code></pre><p><img src="https://i.imgur.com/JMI2Zgc.png" alt=""></p><ul><li><p>hover使下拉選單消失\出現</p><ul><li>建立游標摸到<code>.dropdown-li</code>，會顯示下拉選單</li><li><code>visibility</code>、<code>opacity</code><pre><code class="scss">.dropdown-li{</code></pre></li></ul><p>&amp;:hover .dropdown{<br>visibility: visible;<br>opacity: 1;<br>}<br>}</p></li></ul><p>.dropdown{<br>visibility: hidden;<br>   opacity: 0;<br>  transition: opicity .3s;<br>}</p><pre><code>![](https://i.imgur.com/vY3cbuj.gif)![](https://i.imgur.com/0zOvMTI.png)## 使slideshow可以跳轉(如幻燈片效果)* 使用`@keyframes`做出動畫位置* Animation Duration(動畫整個完成一次的時間): (fade-in + visible) × images = duration.    * 假設你要讓圖片花1秒fade-in，再讓他顯示1秒。而你共有3張圖片，所以總共所需時間為6秒。* Animation Delay:(fade-in + visible) × (ordinal position − 1) = delay.* Keyframes: 100 ÷ animation duration = percentage for 1 second.(100/20=5%)，5％為1秒，所以4秒大約是20％的位置```scss.slideshow{ &amp;-slide{    //使圖片、文字都放在同一個位置  position: absolute;   top: 0;   left: 0;   width: inherit;   height: inherit;//預設先讓slide消失   visibility: hidden;    opacity: 0;   animation: slideshow 20s linear infinite ;   }}@keyframes slideshow{   //主要是0~20時圖片顯示，之後都消失，讓其他圖片得宜顯示  //0~2%創造fade的效果  0%{    visibility: hidden;    opacity: 0;  };  2%{    visibility: visible;    opacity: 1;  }  //2%~18% slide要顯示  18%{    visibility: visible;    opacity: 1;  }  //18~20要消失  20%{    visibility: hidden;    opacity: 0;  }  100%{    visibility: hidden;    opacity: 0;  }}</code></pre><p><a href="https://snook.ca/archives/html_and_css/simplest-css-slideshow" target="_blank" rel="noopener">Simplest CSS Slideshow</a><br><a href="https://www.smashingmagazine.com/2012/04/pure-css3-cycling-slideshow/#4" target="_blank" rel="noopener">CSS3 Keyframes Animation</a><br><a href="https://pjchender.blogspot.com/2015/12/cssanimation-keyframes.html" target="_blank" rel="noopener">[筆記] CSS動畫Animation — @keyframes</a><br><a href="https://www.oxxostudio.tw/articles/201803/css-animation.html" target="_blank" rel="noopener">完整解析 CSS 動畫 ( CSS Animation )</a></p><ul><li>設置延遲時間(4秒)，使每張圖片呈現(css的撰寫方式)<ul><li><code>:nth-child()</code>選擇第幾張圖片<pre><code class="css">/*設置延遲時間，讓每張slide呈現4秒替換*/.slideshow-slide:nth-child(1){animation-delay: 0s;}.slideshow-slide:nth-child(2){animation-delay: 4s;}.slideshow-slide:nth-child(3){animation-delay: 8s;}.slideshow-slide:nth-child(4){animation-delay: 12s;}.slideshow-slide:nth-child(5){animation-delay: 16s;}</code></pre></li></ul></li></ul><ul><li>將上方轉化為<code>@each</code>的寫法<ul><li>先創造一個列表<code>$animlist</code>，在each迴圈時要但進去的項目</li><li>在each迴圈中<code>.slideshow-slide:nth-child</code>放入slide of number(取得列表中第一個值)，後面接著寫下要執行的動作<code>animation-delay: nth($item,2);</code></li></ul></li></ul><pre><code class="scss">///改寫為=&gt;$animlist:第幾個 延遲秒數,//#{nth($item,1)}: 1表示(2 4s)，第一個值=2$animList:1 0s,2 4s,3 8s,4 12s, 5 16s;@each $item in $animList {   .slideshow-slide:nth-child(#{nth($item,1)}){     animation-delay: nth($item,2);     //2就是指秒數   }}</code></pre><p><a href="https://www.youtube.com/watch?v=O4hPOMX8AaU" target="_blank" rel="noopener">Sass Tutorials #9 - Nth Function In Lists</a></p><h2 id="產品區下方see-more按鈕"><a href="#產品區下方see-more按鈕" class="headerlink" title="產品區下方see more按鈕"></a>產品區下方see more按鈕</h2><ul><li>html part<ul><li>有三個<code>arrow-line</code>，於後續在scss中會運用此三個div製作箭頭符號<pre><code class="html">&lt;div class=&quot;products-btn&quot;&gt;  &lt;a href=&quot;#&quot; class=&quot;btn&quot;&gt;    &lt;div class=&quot;btn-bg&quot;&gt;      &lt;div class=&quot;arrow&quot;&gt;        &lt;div class=&quot;arrow-line arrow-line-1&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;arrow-line arrow-line-2&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;arrow-line arrow-line-3&quot;&gt;&lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;span class=&quot;btn-text&quot;&gt;      See More    &lt;/span&gt;  &lt;/a&gt;&lt;/div&gt;</code></pre></li></ul></li></ul><ul><li><p>創造arrow<br><code>transform: rotateZ</code> :Z軸 (使其斜向旋轉45度)</p><pre><code class="scss">&amp;-line {    height: .2rem;    background-color: color(secondary);    position: absolute;}  &amp;-line-2 {    width: 1rem;    //透過旋轉線2,線3使其成為交叉    transform: rotateZ(45deg);  }  &amp;-line-3 {    width: 1rem;    transform: rotateZ(-45deg);  }</code></pre><p><img src="https://i.imgur.com/s62AXMY.png" alt=""></p></li></ul><p><code>transform-origin去設定物件變形的起始點</code></p><pre><code class="scss">&amp;-line {      height: .2rem;      background-color: color(secondary);      position: absolute;      //將x變成arrow &gt; ;因預設原點是在center，所以須將原點拉到右邊，形成箭頭      transform-origin:right ;  }</code></pre><p><img src="https://i.imgur.com/wbRTSeb.png" alt=""></p><p><a href="https://juejin.cn/post/6844903780937367565" target="_blank" rel="noopener">CSS 属性篇(三)：transform-origin属性</a></p><ul><li>增加橫向直線</li></ul><pre><code class="scss">&amp;-line-1{      width: 2rem;      transform: translateX(-0.7rem);    }</code></pre><p><img src="https://i.imgur.com/sdIdcZI.png" alt=""></p><ul><li>設置動畫，透過摸到箭頭，會延展<ul><li>bg的的寬度進行延展</li></ul></li></ul><pre><code class="scss">.btn{&amp;:hover .btn-bg{    width: 18rem;  }  &amp;-bg{     width: 4rem;     height: 4rem;    background-color: color(primary) ;    //使其變圓形     border-radius: 5rem ;    position: absolute;    left: 0;    transition: width .2s ;  }   &amp;-line-1{       width: 0;      transform: translateX(-0.7rem);    }    //* line-1預設看不到，透過hover出現  }</code></pre><p><img src="https://i.imgur.com/vQjUp05.gif" alt=""></p><ul><li><p>使see more 出現</p><ul><li>先修改see more的顏色</li><li>即便改變顏色，還是會被bg覆蓋，所以要調整z-index<pre><code class="scss">.btn{</code></pre></li></ul><p>&amp;:hover .btn-text{<br>  color: color(secondary);<br> }</p></li></ul><p>  &amp;-text{<br>    font-size: size(xs);<br>    text-transform: uppercase;<br>    color: color(primary);<br>    z-index: 10;<br>  }</p><p>}</p><pre><code>![](https://i.imgur.com/bo8TJLy.gif)* 將箭頭向右移動，並呈現完整箭頭符號    * 設定`.arrow`右移，並讓line-1得宜呈現並延展```scss.btn{   &amp;:hover .arrow{    transform: translateX(1rem);  }   &amp;:hover .arrow-line-1{    width: 2rem;  } .arrow{    @include flexPosition;    transition: transform .2s ;    &amp;-line-1{      width: 0;      transform: translateX(-0.7rem);      transition: width .2s ;      }    }}</code></pre><p><img src="https://i.imgur.com/9pptj0t.gif" alt=""></p><h2 id="表尾區塊"><a href="#表尾區塊" class="headerlink" title="表尾區塊"></a>表尾區塊</h2><p><img src="https://i.imgur.com/yHeHkU8.png" alt=""></p><h3 id="1-footer區塊的樣式"><a href="#1-footer區塊的樣式" class="headerlink" title="(1)footer區塊的樣式"></a>(1)footer區塊的樣式</h3><p> <code>layout/_footer.scss</code></p><ul><li>footer有三區，中間是表單，左右邊分別為資訊連結<pre><code class="scss">.footer{</code></pre></li></ul><p>  grid-column: 1/-1;<br>  grid-row: 4/5;<br>  @include flexPosition(space-around);<br>  padding:5rem 0 ;<br>  border-top: .1rem solid color(primary);<br>}</p><pre><code>![](https://i.imgur.com/tSWtPTW.png)* 透過`＠mixin`一次修改2區的條例項目（`mixin_scss`）    * 其中包含文字大小、樣式、hover效果```scss@mixin footerList {  &amp;-heading{    font-size: size(lg);    color:color(primary);  }  &amp;-item{    list-style: none;    margin: 1rem 0;  }  &amp;-link{    font-size: size(xs);    text-decoration: none;    color: lighten(color(primary),15%);    transition: color .2s ;    &amp;:hover{      color:lighten(color(primary),35%)    }  }}</code></pre><p><img src="https://i.imgur.com/X9BA5K0.gif" alt=""></p><h3 id="2-社群icon"><a href="#2-社群icon" class="headerlink" title="(2)社群icon"></a>(2)社群icon</h3><pre><code class="scss">.social-icons{    display: flex;    justify-content: space-between;    padding: 1rem;    box-sizing: border-box;    &amp;-item{      list-style: none;    }    &amp;-link{      text-decoration: none;      width: 4rem;      height: 4rem;      border:.1rem solid color(primary);    }</code></pre><p><img src="https://i.imgur.com/IZzM7eK.png" alt=""></p><ul><li><code>border-radius: 100%;</code>調整為圓形外框</li><li>a標籤的前放為i的圖示，所以flex的設置，是針對<code>social-icons-lik</code><br><img src="https://i.imgur.com/kd6jbyV.png" alt=""></li><li>利用<code>@each</code>來套入icon的顏色</li></ul><pre><code class="scss">&amp;-link{      text-decoration: none;      width: 4rem;      height: 4rem;      border:.1rem solid color(primary);      //修改icon成圓形      // display: block;      border-radius: 100%;      @include flexPosition;      i{        font-size: size(md);      }    }$socialMediaColors: 1 #3b5998, 2 #b31217, 3 #dc4e41, 4 #55acee, 5 #517fa4, 6 #0077b5;@each $color in $socialMediaColors {  .social-icons-item:nth-child(#{nth(($color),1)}) .social-icons-link{    color:nth($color,2);    border:.1rem solid nth($color,2);  }}    </code></pre><ul><li>轉為css<pre><code class="css">.social-icons-item:nth-child(1) .social-icons-link {color: #3b5998;border: 0.1rem solid #3b5998; }</code></pre></li></ul><p>.social-icons-item:nth-child(2) .social-icons-link {<br>  color: #b31217;<br>  border: 0.1rem solid #b31217; }</p><p>.social-icons-item:nth-child(3) .social-icons-link {<br>  color: #dc4e41;<br>  border: 0.1rem solid #dc4e41; }</p><p>.social-icons-item:nth-child(4) .social-icons-link {<br>  color: #55acee;<br>  border: 0.1rem solid #55acee; }</p><p>.social-icons-item:nth-child(5) .social-icons-link {<br>  color: #517fa4;<br>  border: 0.1rem solid #517fa4; }</p><p>.social-icons-item:nth-child(6) .social-icons-link {<br>  color: #0077b5;<br>  border: 0.1rem solid #0077b5; }</p><pre><code>![](https://i.imgur.com/8aWeLiw.png)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> grid </tag>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 預處理器- Sass/SCSS 基本介紹</title>
      <link href="/2021/03/05/sass-1/"/>
      <url>/2021/03/05/sass-1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/e59PuUk.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CSS預處理器，增加了一些編寫的特性，也可以說是運用程式化的方式寫CSS。</p><ul><li>其中SASS最廣泛使用：Sass包含SASS與SCSS兩種<ul><li>兩者之間不同之處有以下兩點：</li><li>1.文件擴展名不同，Sass 是以“.sass”後綴為擴展名，而SCSS 是以“.scss”後綴為擴展名</li><li>2.語法書寫方式不同，Sass是以嚴格的縮進式語法規則來書寫，不帶大括號({})和分號(;)，而SCSS的語法書寫和我們的CSS語法書寫方式非常類似。<h2 id="安裝sass"><a href="#安裝sass" class="headerlink" title="安裝sass"></a>安裝sass</h2><a href="https://github.com/sass/sass">sass-github</a></li></ul></li><li>在專案底下，安裝<pre><code class="javascript">npm install -g sass</code></pre></li><li>安裝後，建立<code>index.scss</code>檔案<br><img src="https://i.imgur.com/cQtE8T5.png" alt=""></li><li>手動轉擋<br><img src="https://i.imgur.com/6TYjGnV.png" alt=""><ul><li>會出現css檔案<br><img src="https://i.imgur.com/SHoaMLN.png" alt=""></li></ul></li></ul><h2 id="使用node-sass編譯"><a href="#使用node-sass編譯" class="headerlink" title="使用node-sass編譯"></a>使用node-sass編譯</h2><ol><li>先取得package.json檔案<br>安裝語法：<code>npm init --yes</code><br>(要注意安裝的路徑位置)<br><img src="https://i.imgur.com/f9QFcH0.png" alt=""><br><img src="https://i.imgur.com/4B623eU.png" alt=""></li><li>安裝node-sass</li></ol><ul><li><code>npm i -g node-sass</code>  (i -&gt; install)<br><img src="https://i.imgur.com/vgGzk85.png" alt=""></li><li>查尋安裝是否完成<br><img src="https://i.imgur.com/EdeoV1H.png" alt=""></li></ul><ol start="3"><li>將檔案編譯為css<br>建立css(資料夾)<h3 id="使用watch，使每次修改sass檔案時，會自動編譯到css中"><a href="#使用watch，使每次修改sass檔案時，會自動編譯到css中" class="headerlink" title="使用watch，使每次修改sass檔案時，會自動編譯到css中"></a>使用watch，使每次修改sass檔案時，會自動編譯到css中</h3></li></ol><ul><li>在package.jason檔案中的<code>&quot;scripts&quot;</code></li><li>要注意編譯資料的位置<ul><li>css :為資料夾路徑 </li><li>scss/main.scss:建立的css路徑</li></ul></li></ul><pre><code class="javascript"> &quot;scripts&quot;: {    &quot;watch&quot;: &quot;node-sass -o css scss/main.scss -w&quot;  }</code></pre><ul><li>在終端機要輸入<br><code>npm run watch</code>，<code>control+c</code>退出<br><img src="https://i.imgur.com/KNReHQL.png" alt=""></li></ul><h2 id="基本語法實作"><a href="#基本語法實作" class="headerlink" title="基本語法實作"></a>基本語法實作</h2><h3 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h3><ul><li>在變數前加上<code>$</code>，來宣告要使用的變數</li><li>運用抽取變數方式，使運用版面顏色時，可以有一致性，修改版面時也較快速</li><li>變數：數量不要超過10個，自己在記憶上會混亂<pre><code class="scss">// 創造顏色、字大小的變數$white:#fff;$black:#000;.button{text-align:center;background-color:$black;border:1px solid $black;color:$white;}</code></pre></li></ul><p>$font-lg:40px;<br>$font-md:30px;<br>$font-sm:20px;</p><p>.footer h3{<br>  font-size: $font-md;<br>  color: $color-secondary;<br>  text-align: center;</p><p>}</p><pre><code>#### scope of sass variable* 一般常見屬於global scope* 如果將變數設在，標間架構中-&gt;local scope![](https://i.imgur.com/oAeBzah.png)* 在後面加上`！global`就變成全域![](https://i.imgur.com/jbDV03A.png)PS: 還是建議以global 的方式進行修改，才不會造成維護的混亂* 命名中使用`-`以及`_`，在sass中是一樣的    * 如`$font-lg`改為`$font_lg`一樣也會有效### Nested 巢狀#### 1.針對nav下的`ul`、`li````scss.nav{  background-color: $color-primary;  ul li{    list-style: none;  }  a{    text-decoration: none;    font-size: $font-sm;    color: $color-secondary;  }}</code></pre><ul><li>轉換為css<pre><code class="css">.nav {background-color: orange; }.nav ul li {  list-style: none; }.nav a {  text-decoration: none;  font-size: 20px;  color: gray; }</code></pre><img src="https://i.imgur.com/wQXDhMZ.png" alt=""></li></ul><h4 id="2-增加hover的效果"><a href="#2-增加hover的效果" class="headerlink" title="2.增加hover的效果"></a>2.增加hover的效果</h4><ul><li><code>&amp;</code>，來指出<code>parent element</code>：在這便是指<code>&lt;a&gt;</code></li></ul><pre><code class="scss">.nav{  background-color: $color-primary;  ul li{    list-style: none;  }  a{    text-decoration: none;    font-size: $font-sm;    color: $color-secondary;    &amp;:hover{      color: $color-tertiary;    }  }}</code></pre><ul><li>轉換為css<pre><code class="css">.nav {background-color: orange; }.nav ul li {  list-style: none; }.nav a {  text-decoration: none;  font-size: 20px;  color: gray; }  .nav a:hover {    color: royalblue; }</code></pre></li></ul><pre><code>![](https://i.imgur.com/IL4dwvL.png)#### 巢狀層級不可以太多層，否則會出現效率問題### @import 是什麼* import 讓我們可以拉出特定區塊或是根據功能性不同拆成不同區塊，來撰寫scss，並利用@import放入主要的scss檔案，最後彙整到同一個css之中。* 再用一個css引入(@import)，各個功能* 要引入的檔案命名：在要import的檔案要加`_`&gt;六角學院&gt;![](https://i.imgur.com/SRD31V7.png)`_test.scss`為撰寫footer樣式的檔案```scss.footer h3{  font-style:italic ;  border: blue 3px solid;}</code></pre><p><code>main.scss</code> 要引入檔案的主要檔案</p><pre><code class="scss">@import &quot;test&quot;;</code></pre><p>轉譯為css(main.css)</p><pre><code class="css=">.footer h3 {  font-style: italic;  border: blue 3px solid; }</code></pre><h2 id="mixin-與-include"><a href="#mixin-與-include" class="headerlink" title="@mixin 與 @include"></a>@mixin 與 @include</h2><ul><li>當在多個地方想使用同一種style的方式。可以組成一組的樣式，並於scss中重複使用。</li><li>以 <code>@mixin</code> 開頭，並自定義一個名稱</li><li>需要它的時候就用 <code>@include</code>呼叫</li></ul><ol><li>設定對齊方式<pre><code class="scss">@mixin horizontal-list{li{display:inline-block;margin:{left:-2px;right:2em;}}}</code></pre></li></ol><p>/<em>當要引用時</em>/<br>nav ul{<br>  @include horizontal-list<br>}</p><pre><code>2. 調整字體大小（以帶參數的方式）```scss// 發現h1,h3樣式一樣@mixin headingStyles($fontSize){  //以代參數方式來放入不同字體大小的變數設定  font-size: $fontSize; color: $color-secondary;  text-align: center;} .banner h1{ @include headingStyles($font-lg);}.footer h3{  @include headingStyles($font-md);}</code></pre><ul><li>在css的地方，可以看到字的大小不同<pre><code class="css">.banner h1 {font-size: 40px;color: gray;text-align: center; }</code></pre></li></ul><p>.footer h3 {<br>  font-size: 30px;<br>  color: gray;<br>  text-align: center; }</p><pre><code>3. 加入動畫效果* 在`footer h3`加上`hover`* `@mixin transition($param...)`加上設定參數特性    * 當要同時設定特性中的多個值時，要記得在參數後面加上`...````scss// 發現h1,h3樣式一樣@mixin headingStyles($fontSize){  //以代參數方式來放入不同字體大小的變數設定  font-size: $fontSize; color: $color-secondary;  text-align: center;} @mixin transition($param...) {  transition: $param;}.banner h1{ @include headingStyles($font-lg);}.footer h3{  @include headingStyles($font-md);  @include transition(color .5s ,background-color 1s);  &amp;:hover{    color:$color-tertiary;    background-color: $color-primary;  }}</code></pre><ul><li>轉譯為css<pre><code class="css">.footer h3 {font-size: 30px;color: gray;text-align: center;transition: color 0.5s, background-color 1s; }.footer h3:hover {  color: royalblue;  background-color: orange; }</code></pre></li></ul><p><a href="https://ithelp.ithome.com.tw/articles/10197303" target="_blank" rel="noopener">Day27：小事之 Transition 與 Animation</a><br><a href="https://cythilya.github.io/2017/08/27/css-animation/#transition-%E6%BC%B8%E8%AE%8A" target="_blank" rel="noopener">CSS3 Animation</a></p><p><a href="https://5xruby.tw/posts/play-sass-mixin-and-include" target="_blank" rel="noopener">新手也可以輕鬆玩轉 SASS - @mixin and @include</a></p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><ul><li>透過函式的建立，可以在需要使用時，不斷地呼叫使用</li><li><code>@function fontSize($size){ @return $size*2; }</code>建立函式</li></ul><pre><code class="scss">@function fontSize($size){   @return $size*2;} h1{.banner p{  font-size: fontSize($font-sm);  //字的大小會變成 20px*2 =&gt;40px}</code></pre><p>轉譯為css</p><pre><code class="css">.banner p {  font-size: 40px; }</code></pre><ul><li>將文字大小，預先設定預設值</li></ul><pre><code class="scss">//設定預設為25px@function fontSize($size:25px){   @return $size*2;}.footer p{  font-size: fontSize();}</code></pre><p>轉譯為css</p><pre><code class="css">.footer p {  font-size: 50px; }  /* 25*2=&gt;50 */</code></pre><ul><li>若插入數字</li></ul><pre><code class="scss">.footer p{  font-size: fontSize(30px);}</code></pre><ul><li>轉譯為css<pre><code class="css">.footer p {font-size: 60px; }/* 30*2=&gt;50 */</code></pre><h3 id="內建函式介紹"><a href="#內建函式介紹" class="headerlink" title="內建函式介紹"></a>內建函式介紹</h3></li></ul><ol><li><code>lighten()</code><pre><code class="sass=">.nav{background-color: lighten($color-primary,20%);}</code></pre>css<pre><code class="css=">.nav {background-color: #ffc966; }</code></pre></li></ol><ul><li>顏色變淡<br><img src="https://i.imgur.com/WhTLwso.png" alt=""></li></ul><ol start="2"><li><code>darken()</code><pre><code class="scss">.nav{background-color: darken($color-primary,20%);}</code></pre></li></ol><ul><li>編譯為css<pre><code class="css">.nav {background-color: #996300; }</code></pre><img src="https://i.imgur.com/LRzx1fH.png" alt=""></li></ul><p>3.<code>transparentize()</code></p><ul><li>透明度從0-1 (1是完全透明)<pre><code class="scss">.nav{background-color: transparentize($color-primary,0.6);}</code></pre></li><li>編譯為css<pre><code class="css">.nav {background-color: rgba(255, 165, 0, 0.4); }</code></pre><img src="https://i.imgur.com/6ON5Rfk.png" alt=""></li></ul><p>4.<code>mix()</code></p><ul><li>將顏色混合<pre><code class="scss">.nav{ background-color: mix(blue,green);}</code></pre>css<pre><code class="css">.nav {background-color: #004080; }</code></pre><img src="https://i.imgur.com/M9sFOr6.png" alt=""></li></ul><h4 id="加入百分比（利用百分比來調配顏色的比重）"><a href="#加入百分比（利用百分比來調配顏色的比重）" class="headerlink" title="加入百分比（利用百分比來調配顏色的比重）"></a>加入百分比（利用百分比來調配顏色的比重）</h4><ul><li><code>mix(blue,green,10%)</code>表示只有10%的藍色，90%為綠色<pre><code class="scss">.nav{ background-color: mix(blue,green,10%);}</code></pre>css<pre><code class="css">.nav {background-color: #00731a; }</code></pre><img src="https://i.imgur.com/TdUkHSn.png" alt=""></li></ul><hr><h2 id="補充scss檔案編制"><a href="#補充scss檔案編制" class="headerlink" title="補充scss檔案編制"></a>補充scss檔案編制</h2><ul><li>主要視自己專案上的區分來編制<br>vendor:外部套件，放置bootstrap或其他frameworks、liberaries、hover.css<br>utils(helpers):工具類的class，放置字的大小、margin、border顏色設置、hover效果<br>partials:放置一些部分區域的css，如：nav、footer; layout: （共通的佈局）如表頭、表尾，就是每頁都會出現<br>而這幾個檔案，放在main.scss要有順序<br><img src="https://i.imgur.com/tjRLJjK.png" alt=""><br>base:p段落、h1..等的全站設定(css reset)<br>components ：元件，如按鈕、卡片的設定</li></ul><hr><p>參考資料：<a href="https://tw.alphacamp.co/blog/css-preprocessor-sass-scss" target="_blank" rel="noopener">alphacamp-Sass/SCSS 基本語法介紹，搞懂CSS 預處理器</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API-youtube</title>
      <link href="/2021/02/23/API-youtube/"/>
      <url>/2021/02/23/API-youtube/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/HyrwBQl.png" alt=""></p><p><a href="https://eva813.github.io/Eva_portfolio/YoutubeAPI/YoutubeAPI.html" target="_blank" rel="noopener">成品</a></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li>搜尋框，輸入搜尋關鍵字，下方會列出5筆列表<ul><li>有圖片縮圖、影片標題、影片描述</li></ul></li><li>按下next page 會取得下5筆資料</li><li>按下prev page，會取得上5筆資料</li></ul><p>ajax 在同一個頁面，不做刷新就可以改變頁面的內容。<br>q: query</p><h2 id="youtube-API-application-programming-interface-資料查看"><a href="#youtube-API-application-programming-interface-資料查看" class="headerlink" title="youtube API(application programming interface)資料查看"></a>youtube API(application programming interface)資料查看</h2><p><a href="https://developers.google.com/youtube/v3/docs/" target="_blank" rel="noopener">YouTube 資料 API 參考手冊</a></p><p>取得授權：<a href="https://console.developers.google.com/projectselector2/apis/credentials?pli=1&supportedpurview=project" target="_blank" rel="noopener">憑證</a></p><p><img src="https://i.imgur.com/asf7coq.png" alt=""></p><p>API 金鑰:AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M</p><pre><code>jQuery API D ocument =&gt; 表示看官方文件串API =&gt;</code></pre><h4 id="檢視範例，ajax資料的情形"><a href="#檢視範例，ajax資料的情形" class="headerlink" title="檢視範例，ajax資料的情形"></a>檢視範例，ajax資料的情形</h4><p><img src="https://i.imgur.com/wc6VWtV.png" alt=""></p><p><img src="https://i.imgur.com/tSYR4vu.png" alt=""></p><h2 id="JS-部分"><a href="#JS-部分" class="headerlink" title="JS 部分"></a>JS 部分</h2><h3 id="1-嘗試串接Youtube-API"><a href="#1-嘗試串接Youtube-API" class="headerlink" title="1.嘗試串接Youtube API"></a>1.嘗試串接Youtube API</h3><ul><li><p>首先需考量，我們所需要的資料參數有哪些(</p></li><li><p>在抓取成功的部分，要設置抓取五筆搜尋到的五筆資料，並將其呈現於頁面</p><ul><li><p>除了5筆資料外，還需要跳轉上、下頁的按鈕</p><pre><code class="javascript">function getVideo() {let value = $(&#39;#search-field&#39;).val();let youtubeURL = &quot;https://www.googleapis.com/youtube/v3/search&quot;;$.ajax({type: &quot;GET&quot;,url: youtubeURL,data: {//將要放入網址的參數放在這part:  &#39;id,snippet&#39;,// 必填，把需要的資訊列出來q: value,// 查詢文字maxResults: 5,// 預設為五筆資料，可以設定1~50type: &quot;video&quot;,key: &#39;AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M&#39;// 使用 API 只能取得公開的播放清單},dataType: &quot;json&quot;,success: function (data) {//console.log(data);let nextPageToken = data.nextPageToken;let prevPageToken = data.prevPageToken;//試著將收到的資料傳入，並呈現於畫面中insertItems(data);getBtn(data, prevPageToken, nextPageToken)</code></pre></li></ul></li></ul><pre><code>}, error: function (err) {  console.log(&#39;oh no&#39;);}</code></pre><p>  });<br>}</p><pre><code>網址放入參數[[JS] 使用 JavaScript 解析網址與處理網址中的參數（URL Parameters）](https://pjchender.blogspot.com/2018/08/js-javascript-url-parameters.html)### 2.將資料呈現於頁面(insertItems())* 透過迴圈方式將要抓取的資料依序填入* 觀察原本畫面結構，並依據去找尋資料中符合的資料    * videoId、videoTitle、description、channelTitle...```javascriptfunction insertItems(item) {  let output = &#39;&#39;;  $.each(item.items, function (index, value) {    let videoId = item.items[index].id.videoId;    let videoTitle = item.items[index].snippet.title;    let description = item.items[index].snippet.description;    let thumbnailURL = item.items[index].snippet.thumbnails.high.url;//高解析度影片縮圖    let channelTitle = item.items[index].snippet.channelTitle;    let publishedDate = item.items[index].snippet.publishedAt;    // 按鈕    output += `&lt;li&gt;&lt;div class=&quot;list-left&quot;&gt;    &lt;img src=&quot; ${thumbnailURL}&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;list-right&quot;&gt;    &lt;h3&gt;    &lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/${videoId}&quot; &quot;href=&quot;javascript:;&quot;&gt; ${videoTitle} &lt;/a&gt;&lt;/h3&gt; &lt;small&gt;By &lt;span class=&quot;cTitle&quot;&gt; ${channelTitle}&lt;/span&gt; on ${publishedDate}&lt;/small&gt;    &lt;p&gt; ${description} &lt;p&gt;&lt;/div&gt;&lt;/li&gt; &lt;div classs=&quot;clearfix&quot;&gt;&lt;/div&gt;     `    $(&#39;#results&#39;).html(output);  });};</code></pre><h2 id="3-製作上、下頁的按鈕鍵"><a href="#3-製作上、下頁的按鈕鍵" class="headerlink" title="3.製作上、下頁的按鈕鍵"></a>3.製作上、下頁的按鈕鍵</h2><ul><li>注意該函式要帶入的參數有哪些</li><li>我們要判斷為，在第一頁時，只有下一頁的按鈕<ul><li>判斷方式為，<code>(!prevPageToken)</code>沒有上一頁的token</li><li>（截圖）</li></ul></li><li>在判斷之中，我們需要將要插入的標籤與內容，放入，並append到畫面要呈現的位置</li><li>注意：在插入的button之中，加入<code>data-token=&quot;${nextPageToken}&quot; data-query=&quot;${value}&quot;</code>，用於後續抓取屬性內容。</li></ul><pre><code class="javascript">function getBtn(value, prevPageToken, nextPageToken) {  console.log(nextPageToken)  if (!prevPageToken) {    var btnOutput = $(`&lt;div class=&quot;button-container&quot;&gt;    &lt;button id=&quot;next-button&quot; class=&quot;paging-button&quot; data-token=&quot;${nextPageToken}&quot; data-query=&quot;${value}&quot; onclick=&quot;pressNext();&quot;&gt; Next Page&lt;/button&gt;&lt;/div&gt;`    )    $(&quot;#buttons&quot;).append(btnOutput);  } else {    var btnOutput = $(`&lt;div class=&quot;button-container&quot;&gt;&lt;button id=&quot;prev-button&quot; class=&quot;paging-button&quot; data-token=&quot;${prevPageToken}&quot; data-query=&quot;${value}&quot; onclick=&quot;pressPrev();&quot;&gt; Prev Page&lt;/button&gt;      &lt;button id=&quot;next-button&quot; class=&quot;paging-button&quot;  data-token=&quot;${nextPageToken}&quot; data-query=&quot;${value}&quot; onclick=&quot;pressNext();&quot;&gt;Next Page&lt;/button&gt;&lt;/div&gt;`)    $(&quot;#buttons&quot;).append(btnOutput);  }}</code></pre><p><a href="https://developers.google.com/youtube/v3/guides/implementation/pagination" target="_blank" rel="noopener">Youtube:Implementation: Pagination</a></p><h2 id="4-下一頁點下後，下五筆的資料"><a href="#4-下一頁點下後，下五筆的資料" class="headerlink" title="4.下一頁點下後，下五筆的資料"></a>4.下一頁點下後，下五筆的資料</h2><ul><li>同樣以ajax的方式來抓取<ul><li>在參數的地方我們要抓取的是，按取下一頁的token</li></ul></li><li>success之中所應用的函示，同樣為插入5筆的資料，以及上下頁的按鈕</li></ul><pre><code class="javascript">//取得下一頁的資料function pressNext() {  let youtubeURL = &quot;https://www.googleapis.com/youtube/v3/search&quot;;  let token = $(&#39;#next-button&#39;).data(&#39;token&#39;);  let value = $(&#39;#search-field&#39;).val();  $.ajax({    type: &quot;GET&quot;,    url: youtubeURL,    data: {//將要放入網址的參數放在這      part:        &#39;id,snippet&#39;,// 必填，把需要的資訊列出來      q: value,// 查詢文字      pageToken: token,      maxResults: 5,// 預設為五筆資料，可以設定1~50      type: &quot;video&quot;,      key: &#39;AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M&#39;// 使用 API 只能取得公開的播放清單    },    dataType: &quot;json&quot;,    success: function (data) {      console.log(data);      let nextPageToken = data.nextPageToken;      let prevPageToken = data.prevPageToken;      // 清空內容      $(&#39;#results&#39;).html(&#39;&#39;);      $(&#39;#buttons&#39;).html(&#39;&#39;);      //試著將收到的資料傳入，並呈現於畫面中      insertItems(data);      getBtn(data, prevPageToken, nextPageToken)    }, error: function (err) {      console.log(&#39;oh no&#39;);    }  });}</code></pre><h3 id="5-上一頁"><a href="#5-上一頁" class="headerlink" title="5.上一頁"></a>5.上一頁</h3><ul><li><p>同樣的抓取方式，只有要帶入的資料有些差異</p></li><li><p><code>token = $(&#39;#prev-button&#39;).data(&#39;token&#39;);</code></p><pre><code class="javascript">//前一頁function pressPrev() {// 清空內容$(&#39;#results&#39;).html(&#39;&#39;);$(&#39;#buttons&#39;).html(&#39;&#39;);let youtubeURL = new URL(`https://www.googleapis.com/youtube/v3/search?`);let token = $(&#39;#prev-button&#39;).data(&#39;token&#39;);let value = $(&#39;#search-field&#39;).val();$.ajax({  type: &quot;GET&quot;,  url: youtubeURL,  data: {//將要放入網址的參數放在這    part:      &#39;id,snippet&#39;,// 必填，把需要的資訊列出來    q: value,// 查詢文字    pageToken: token,    maxResults: 5,// 預設為五筆資料，可以設定1~50    type: &quot;video&quot;,    key: &#39;AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M&#39;// 使用 API 只能取得公開的播放清單  },  dataType: &quot;json&quot;,  success: function (data) {    console.log(data);    let nextPageToken = data.nextPageToken;    let prevPageToken = data.prevPageToken;    // 清空內容    $(&#39;#results&#39;).html(&#39;&#39;);    $(&#39;#buttons&#39;).html(&#39;&#39;);    //試著將收到的資料傳入，並呈現於畫面中    insertItems(data);    getBtn(data, prevPageToken, nextPageToken)</code></pre></li></ul><pre><code>}, error: function (err) {  console.log(&#39;oh no&#39;);}</code></pre><p>  });</p><p>}</p><pre><code>[HTML5 自定義屬性 data-* 和 jQuery.data 詳解2018.06.20](https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/177833/)[[技術分享] 什麼是 HTML 5 中的資料屬性（data-* attribute）](https://pjchender.blogspot.com/2017/01/html-5-data-attribute.html)### 6.運用fancybox的方式彈出* 使用fancyBox展示影片    * [fancybox Documention](http://fancyapps.com/fancybox/3/docs/#iframe)    * [fancybox-CDN](https://cdnjs.com/libraries/fancybox)* 使用iframe連結欲嵌入的外部影片連結    * iframe 是框架的一種，也稱為內置框架或內聯框架，用來在網頁內嵌入另外一個網頁[](https://fancyapps.com/fancybox/3/docs/#iframe)* 透過CDN方式連結fancybox套件```javascript&lt;!-- fancyBox --&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css&quot; /&gt;  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.5.7/jquery.fancybox.min.js&quot;&gt;&lt;/script&gt;</code></pre><ul><li>在我們點選該影片名稱區，插入影片id<pre><code class="javascript">&lt;h3&gt;&lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/${videoId}&quot; &quot;href=&quot;javascript:;&quot;&gt; ${videoTitle} &lt;/a&gt;&lt;/h3&gt;</code></pre><pre><code class="javascript">$(&#39;[data-fancybox]&#39;).fancybox({toolbar  : false,smallBtn : true,iframe : {  preload : false}})</code></pre><a href="https://orow.github.io/2019/03/16/jQuery-youtube-search/" target="_blank" rel="noopener">[jQuery] - 練習-Youtube Search Engine</a></li></ul><hr><p>補充知識：<br>XMLHttpRequest(XHR):是一種規範，用來發ajax使用</p><p>token(令牌)：唯一的、可以認證身份或取得資料</p><p>GET:向伺服器發request，（伺服器會告訴我們要發伺服器的網址，我們向它請求資訊）</p><h4 id="用瀏覽器debug"><a href="#用瀏覽器debug" class="headerlink" title="用瀏覽器debug"></a>用瀏覽器debug</h4><p><img src="https://i.imgur.com/IlQ8Glx.png" alt=""></p><ul><li>可在watch加上要觀察的變數<br><img src="https://i.imgur.com/7RcELS4.png" alt=""></li></ul><hr><p>參考資料<br><a href="https://ithelp.ithome.com.tw/articles/10194007" target="_blank" rel="noopener">[30apis] Day 7 : YouTube Data API + 基礎 Fetch API</a><br><a href="https://www.c-sharpcorner.com/article/how-to-implement-youtube-video-search-using-youtube-data-api-v3-in-wordpress-web2/" target="_blank" rel="noopener">How To Implement A Youtube Video Search Using Youtube Data API V3</a><br><a href="https://hackmd.io/@c36ICNyhQE6-iTXKxoIocg/S1eYdtA1P" target="_blank" rel="noopener">Youtube Data API 使用手札</a><br><a href="https://a42033.gitbooks.io/api/content/Youtube/youtube_data_api/applicate.html" target="_blank" rel="noopener">Youtube Data API 申請</a><br><a href="https://console.cloud.google.com/iam-admin/quotas?hl=zh-tw&_ga=2.128962188.1087850229.1615615433-929425058.1615373715&orgonly=true&angularJsUrl=%2Fprojectselector%2Fiam-admin%2Fquotas%3Fhl%3Dzh-tw%26_ga%3D2.128962188.1087850229.1615615433-929425058.1615373715%26supportedpurview%3Dproject%26orgonly%3Dtrue%26folder%3Dtrue%26organizationId%3Dtrue&project=my-youtube-api-307211&folder=&organizationId=&supportedpurview=project" target="_blank" rel="noopener">配額</a></p><pre><code class="javascript=">{  &quot;error&quot;: {    &quot;code&quot;: 403,    &quot;message&quot;: &quot;The request cannot be completed because you have exceeded your \u003ca href=\&quot;/youtube/v3/getting-started#quota\&quot;\u003equota\u003c/a\u003e.&quot;,    &quot;errors&quot;: [      {        &quot;message&quot;: &quot;The request cannot be completed because you have exceeded your \u003ca href=\&quot;/youtube/v3/getting-started#quota\&quot;\u003equota\u003c/a\u003e.&quot;,        &quot;domain&quot;: &quot;youtube.quota&quot;,        &quot;reason&quot;: &quot;quotaExceeded&quot;      }    ]  }}</code></pre><hr><p><a href="https://stackoverflow.com/questions/31075893/im-getting-favicon-ico-error" target="_blank" rel="noopener">favicon.ico error</a></p><p>問題：</p><ul><li>script.js: Allow attribute will take precedence over ‘allowfullscreen’.<br><img src="https://i.imgur.com/0JiThlt.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> Ajax 實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串接API- 天氣預報</title>
      <link href="/2021/02/23/API-weather/"/>
      <url>/2021/02/23/API-weather/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/weatherAPI/weatherAPI.html" target="_blank" rel="noopener">成品</a></p><p><img src="https://i.imgur.com/odl0KcP.png" alt=""></p><h1 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h1><ul><li>從公開的氣象資料平台取得氣象資料</li><li>建立下拉式選單，選擇地區，並按下按鈕取得氣象資料</li><li>呈現當日天氣狀況(包含氣溫、圖示、描述)</li><li>呈現未來一週的天氣預報(包含日期、星期;氣溫、圖示、描述)</li></ul><h2 id="了解要串接的資料open-data"><a href="#了解要串接的資料open-data" class="headerlink" title="了解要串接的資料open data"></a>了解要串接的資料open data</h2><p>至中央氣象局-氣象開放資料平台的網站，註冊會員<br>註冊並登入之後，要取得授權碼<br><img src="https://i.imgur.com/KoRQyNL.png" alt=""><br>到<a href="https://opendata.cwb.gov.tw/dist/opendata-swagger.html" target="_blank" rel="noopener">中央氣象局開放資料平臺之資料擷取API</a>，查看要取用的資料<br>我的授權碼：CWB-F0145DA5-2539-4333-BAFD-466910C1EECC</p><p>參考資料：<br><a href="https://www.youtube.com/watch?v=QDdn3yrsyCQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=QDdn3yrsyCQ</a><br><a href="https://ithelp.ithome.com.tw/articles/10222662" target="_blank" rel="noopener">[Day 13 - 即時天氣] 建立一個即時天氣 App - 前置準備</a></p><h2 id="尋找要參考實現畫面呈現的資料"><a href="#尋找要參考實現畫面呈現的資料" class="headerlink" title="尋找要參考實現畫面呈現的資料"></a>尋找要參考實現畫面呈現的資料</h2><p>畫面主要樣式是參考：<br><a href="https://webdesign.tutsplus.com/tutorials/build-a-simple-weather-app-with-vanilla-javascript--cms-33893" target="_blank" rel="noopener">Build a Simple Weather App With Vanilla JavaScript</a></p><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="1-利用Ajax串接資料"><a href="#1-利用Ajax串接資料" class="headerlink" title="1.利用Ajax串接資料"></a>1.利用Ajax串接資料</h3><ul><li>根據平台提供的url作為取得資料的地方</li><li>利用sucess/error，來查看是否有成功取得資料<ul><li>依據console.log()出要串接的資料<br><img src="https://i.imgur.com/Kdm159o.png" alt=""></li></ul></li></ul><pre><code class="javascript">function getCity() {  let url = &quot;https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-D0047-091?Authorization=CWB-F0145DA5-2539-4333-BAFD-466910C1EECC&amp;format=JSON&quot;;  $.ajax({    type: &quot;get&quot;,    url: url,    dataType: &quot;json&quot;,    success: function (data) {      console.log(data);      })    },    error: function (err) {      console.log(&#39;oh no&#39;)    }  });</code></pre><h3 id="2-製作下拉式選單"><a href="#2-製作下拉式選單" class="headerlink" title="2.製作下拉式選單"></a>2.製作下拉式選單</h3><ul><li>當串到想要的資料後，希望能在下拉選單，呈現出各個地區，以供選擇<br><img src="https://i.imgur.com/I2QTip1.png" alt=""></li><li>因為地區有很多，以迴圈方式來填入資料<ul><li><code>i</code>的長度 <code>data.records.locations[0].location.length</code><br><img src="https://i.imgur.com/QaNMU8d.png" alt=""></li><li><code>opt = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;)</code>創立選項標籤</li><li>利用<code>attr</code>,<code>html</code>填入該地區的index，以及地區名稱<br><img src="https://i.imgur.com/xc7bwaP.png" alt=""></li></ul></li></ul><pre><code class="javascript">function getCity() {  let url = &quot;https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-D0047-091?Authorization=CWB-F0145DA5-2539-4333-BAFD-466910C1EECC&amp;format=JSON&quot;;  $.ajax({    type: &quot;get&quot;,    url: url,    dataType: &quot;json&quot;,    success: function (data) {      //console.log(data);      let selectCity = $(&#39;#selector-list&#39;);      for (let i = 0; i &lt; data.records.locations[0].location.length; i++) {        let opt = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;);        opt.attr(&quot;data-index&quot;, i);        opt.html(data.records.locations[0].location[i].locationName);        selectCity.append(opt);      }    },    error: function (err) {      console.log(&#39;oh no&#39;)    }  });};</code></pre><h3 id="3-點選-submit-按鈕時要跳出取得今日天氣以及未來一週的天氣"><a href="#3-點選-submit-按鈕時要跳出取得今日天氣以及未來一週的天氣" class="headerlink" title="3.點選(submit)按鈕時要跳出取得今日天氣以及未來一週的天氣"></a>3.點選(submit)按鈕時要跳出取得今日天氣以及未來一週的天氣</h3><ul><li><p>在sucess:中放入取得今日天氣、週天氣的函式</p><ul><li>在此要宣告<code>selectedCityIndex</code>變數，並取得被選取的city index<code>$(&#39;#selector-list&#39;).get(0).selectedIndex</code><pre><code class="javascript">function getCity() {let url = &quot;https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-D0047-091?Authorization=CWB-F0145DA5-2539-4333-BAFD-466910C1EECC&amp;format=JSON&quot;;</code></pre></li></ul><p>$.ajax({<br>  type: “get”,<br>  url: url,</p><p>  dataType: “json”,<br>  success: function (data) {</p><pre><code>console.log(data);let selectCity = $(&#39;#selector-list&#39;);for (let i = 0; i &lt; data.records.locations[0].location.length; i++) {  let opt = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;);  opt.attr(&quot;data-index&quot;, i);  opt.html(data.records.locations[0].location[i].locationName);  selectCity.append(opt);}$(&#39;button&#39;).click(function (e) {  e.preventDefault();  clear();  let selectedCityIndex = $(&#39;#selector-list&#39;).get(0).selectedIndex;  getWeather(data, selectedCityIndex);  weekWeather(data, selectedCityIndex);})</code></pre><p>  },<br>  error: function (err) {</p><pre><code>console.log(&#39;oh no&#39;)</code></pre><p>  }<br>});</p></li></ul><p>};</p><pre><code>[jQuery獲取Select選擇的Text和Value：](https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/287007/)### 4.取得今日天氣(`getWeather();`)* 傳入參數分別為data\locationIndex:data為串接到的天氣資料,locationIndex，為放入要取的資料中的index* 我們想要取得的氣象資料，分別有地區、溫度(最低溫、最高溫)、天氣描述、icon圖示    * `name`變數就是要取得資料內的地區名稱![](https://i.imgur.com/SZZSUnh.png)    * `weather`變數就是取得氣象資料![](https://i.imgur.com/pVwq3xe.png)    * `weatherDescription`以及`weatherCode`分別就是氣象描述以及給予氣象描述的編號 ![](https://i.imgur.com/qeUH1iw.png)* `let weatherImg = checkImg(weatherCode);`依據天氣描述的分類放入對應圖示* 抓取到所需要的變數資料後，就是將要填入呈現畫面的html標籤以及變數放入* `after()`在該區塊後面在插入想要呈現的其他標籤內容```javascriptfunction getWeather(data, locationIndex) {  //console.log(data, locationIndex)  let name = data.records.locations[0].location[locationIndex].locationName;  let weather = data.records.locations[0].location[locationIndex].weatherElement;  //console.log(name);  //console.log(weather);  // 天氣描述  let weatherDescription = weather[6].time[0].elementValue[0].value;  let weatherCode = weather[6].time[0].elementValue[1].value;  let minTemp = weather[8].time[0].elementValue[0].value;  let maxTemp = weather[12].time[0].elementValue[0].value;  let weatherImg = checkImg(weatherCode);  // 今天日期  // let date = getDate().toUTCString();  console.log(weatherCode);  let li = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;).appendTo(&#39;.cities&#39;);  li.addClass(&quot;city&quot;);  li.html(`  &lt;h2 class=&quot;city-name&quot; data-name=&quot;${name},&quot;&gt;    &lt;span&gt;${name}&lt;/span&gt;    &lt;sup&gt;Today&lt;/sup&gt;  &lt;/h2&gt;  &lt;div class=&quot;city-temp&quot;&gt;${Math.round(minTemp)}&lt;sup&gt;°C&lt;/sup&gt; ~ ${Math.round(maxTemp)}&lt;sup&gt;°C&lt;/sup&gt;  &lt;/div&gt;  &lt;figure class=&#39;weather-icon&#39;&gt;    ${weatherImg}    &lt;figcaption&gt;${weatherDescription}&lt;/figcaption&gt;  &lt;/figure&gt;`);  $(&#39;.cities&#39;).after(`&lt;h2 class=&quot;sec-h2&quot;&gt;未來一週預報&lt;/h2&gt;`)  $(&#39;.cities&#39;).append(li);};</code></pre><h3 id="5-根據weather-code分類，分配的圖示-checkImg"><a href="#5-根據weather-code分類，分配的圖示-checkImg" class="headerlink" title="5.根據weather code分類，分配的圖示(checkImg())"></a>5.根據weather code分類，分配的圖示(<code>checkImg()</code>)</h3><ul><li><p>將分類的代碼區分到各個天氣狀況</p></li><li><p>依分類代碼下判斷，並回傳要放入的圖示</p></li><li><p><code>weatherTypes.isThunderstorm.includes(weatherData)</code></p><ul><li>利用<code>includes()</code>取得 weatherTypes中各天氣情形陣列中，是否有符合參數的數值<pre><code class="javascript">function checkImg(code) {let weatherData = +code;const weatherTypes = {isThunderstorm: [15, 16, 17, 18, 21, 22, 33, 34, 35, 36, 41],isClear: [1],isCloudyFog: [25, 26, 27, 28],isCloudy: [2, 3, 4, 5, 6, 7],isFog: [24],isPartiallyClearWithRain: [8, 9, 10, 11, 12,13, 14, 19, 20, 29, 30,31, 32, 38, 39,],isSnowing: [23, 37, 42],};// console.log(data)// console.log(weatherTypes.isPartiallyClearWithRain)</code></pre></li></ul><p>// let s = weatherTypes.isThunderstorm.includes(weatherData);<br>// console.log(s);</p></li></ul><p>  if (weatherTypes.isThunderstorm.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/thunderstorm.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isClear.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/clear.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isCloudyFog.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/cloudyfog.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isCloudy.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/cloud-and-sun.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isFog.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/fog.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isPartiallyClearWithRain.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/clearwithrainy.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else { return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/snow.png&quot; alt=&quot;weather-img&quot;&gt;</code>; }</p><p>}</p><pre><code>[[Day 21 - 即時天氣] 處理天氣圖示以及 useMemo 的使用](https://ithelp.ithome.com.tw/articles/10225927)[JavaScript Array 陣列操作方法大全 ( 含 ES6 )](https://www.oxxostudio.tw/articles/201908/js-array.html#array_includes)includes(weatherData):[JavaScript 陣列處理：找東西 - indexOf、$.inArray 與 filter](https://cythilya.github.io/2017/05/08/javascript-find-item-in-an-array/)[預報因子欄位中文說明表](https://opendata.cwb.gov.tw/opendatadoc/MFC/D0047.pdf)---### 6.取得未來一週的天氣* 此作法與取的當日天氣有些類似，不過因為要取得未來一週6天的資料，所以須以迴圈的方式來取的並填入資料* `let i = 1; i &lt; 7; i++`從1開始，6天* `timeIndex= 2 * i`是為了抓取一週時間所設置的index![](https://i.imgur.com/xSanS8F.png)* 日期、星期的取得    * 以算出tomorrow為目標，並帶入i，就會執行出往後六天的日期 ![](https://i.imgur.com/ZqSmPOy.png) * 並從上圖，分別擷取出月份、日期、星期的資料```javascriptfunction weekWeather(data, locationIndex) {  // $(&#39;.week-ul&#39;).html(&#39;&#39;);  var weather = data.records.locations[0].location[locationIndex].weatherElement;  for (let i = 1; i &lt; 7; i++) {    let timeIndex = 2 * i;    let weekday = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;).appendTo(&#39;.week-ul&#39;);    weekday.addClass(&#39;day&#39;).attr(&#39;id&#39;, `day-${i}`);    let weatherDescription = weather[6].time[timeIndex].elementValue[0].value;    let weatherCode = weather[6].time[timeIndex].elementValue[1].value;    let minTemp = weather[8].time[timeIndex].elementValue[0].value;    let maxTemp = weather[12].time[timeIndex].elementValue[0].value;    let weatherImg = checkImg(weatherCode);    //console.log(weatherDescription);    //////日期、星期的擷取//////    let today = new Date();    let tomorrow = new Date(today);    tomorrow.setDate(tomorrow.getDate() + i);    let weekDay = tomorrow.getDay();    let weekMonth = tomorrow.getMonth()    let date = tomorrow.getDate();    const dayNamesEn = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;];    const monthNamesEn = [      &#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;,      &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;    ]    let inweekDay = dayNamesEn[weekDay]    let inweekMonth = monthNamesEn[weekMonth];    let indate = date;    ///////////    weekday.html(`&lt;li class=&quot;day&quot;&gt;          &lt;h2 class=&quot;whichDay&quot; data-name=&quot;&quot;&gt;            &lt;span&gt;${indate} ${inweekMonth}&lt;/span&gt;            &lt;sup&gt;${inweekDay}&lt;/sup&gt;          &lt;/h2&gt;          &lt;div class=&quot;week-temp&quot;&gt;${minTemp}&lt;sup&gt;°C&lt;/sup&gt; ~ ${maxTemp}&lt;sup&gt;°C&lt;/sup&gt;          &lt;/div&gt;          &lt;figure class=&#39;weather-icon&#39;&gt;            ${weatherImg}            &lt;figcaption&gt;${weatherDescription}&lt;/figcaption&gt;          &lt;/figure&gt;        &lt;/li&gt;`)    $(&#39;.week-ul&#39;).append(weekday);  }}</code></pre><p><a href="https://flaviocopes.com/how-to-get-tomorrow-date-javascript/" target="_blank" rel="noopener">抓取明天日期:How to get tomorrow’s date using JavaScript</a><br><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/datetime.html" target="_blank" rel="noopener">日期與時間</a></p><h3 id="7-當文件準備好"><a href="#7-當文件準備好" class="headerlink" title="7.當文件準備好"></a>7.當文件準備好</h3><ul><li>先執行要串接的資料</li><li>於選擇地區時，跳出提醒文字</li></ul><pre><code class="javascript">$(document).ready(function (e) {  getCity();  $(&#39;#selector-list&#39;).change(function () {    $(&#39;.msg&#39;).text(&#39;別忘了按下SUBMIT&#39;);  })});</code></pre><h3 id="8-清除資料"><a href="#8-清除資料" class="headerlink" title="8.清除資料"></a>8.清除資料</h3><ul><li>建立在點選submit後，要先執行的步驟，為清除原本頁面的資料<pre><code class="javascript">function clear() {$(&#39;.cities&#39;).html(&#39;&#39;);$(&#39;.sec-h2&#39;).empty(&#39;&#39;);$(&#39;.week-ul&#39;).html(&#39;&#39;);$(&#39;.msg&#39;).text(&#39;&#39;);</code></pre><a href="https://blog.csdn.net/sunpeiyumail/article/details/7665668" target="_blank" rel="noopener">JQuery中html、append、appendTo、after、insertAfter</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Ajax 實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS實作- typingGame</title>
      <link href="/2021/01/22/js-typingGame/"/>
      <url>/2021/01/22/js-typingGame/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/typeGame/typeGame.html" target="_blank" rel="noopener">成品</a><br><img src="https://i.imgur.com/fC1gVUt.png" alt=""></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li>在difficuly地方，有設置難易度，並於重新整理後，仍然儲存選擇的難易度<ul><li>使用到取表格中的值</li><li>localstorage的方式，儲存設置的難易度</li></ul></li><li>創造出隨機的單字，並呈現於畫面<ul><li>輸入的值與隨機出現的值要核對</li></ul></li><li>左上方有倒數計時;右上方有分數的計算<ul><li><code>setInterval</code>設定倒數</li></ul></li><li>設置reload的按鈕<ul><li>在要加入文字內容的容器中，添加<code>location.reload()</code></li></ul></li></ul><h2 id="HTML-部分"><a href="#HTML-部分" class="headerlink" title="HTML 部分"></a>HTML 部分</h2><p>1.icon來源<br><a href="https://www.codegrepper.com/code-examples/c/font-awesome+-+cdnjs.com+-+The+best+FOSS+CDN+for+web" target="_blank" rel="noopener">font-awesome - cdnjs</a></p><ul><li>fa-cog<br><img src="https://i.imgur.com/uN4HVq7.png" alt=""></li></ul><p>1.設置難易度選單</p><ul><li><p>difficulty為<code>label</code></p></li><li><p>下拉選單使用<code>option</code></p><p><img src="https://i.imgur.com/99JhtOs.png" alt=""></p></li></ul><pre><code class="html">&lt;div id=&quot;settings&quot; class=&quot;settings&quot;&gt;    &lt;form id=&quot;settings-form&quot;&gt;      &lt;div&gt;        &lt;label for=&quot;difficulty&quot;&gt;Difficulty&lt;/label&gt;        &lt;select id=&quot;difficulty&quot;&gt;          &lt;option value=&quot;easy&quot;&gt;Easy&lt;/option&gt;          &lt;option value=&quot;medium&quot;&gt;Medium&lt;/option&gt;          &lt;option value=&quot;hard&quot;&gt;Hard&lt;/option&gt;        &lt;/select&gt;      &lt;/div&gt;    &lt;/form&gt;  &lt;/div&gt;</code></pre><h2 id="JS-部分"><a href="#JS-部分" class="headerlink" title="JS 部分"></a>JS 部分</h2><h3 id="1-如何隨機取到已製作好的單字"><a href="#1-如何隨機取到已製作好的單字" class="headerlink" title="1.如何隨機取到已製作好的單字"></a>1.如何隨機取到已製作好的單字</h3><p><code>words[Math.floor(Math.random() * words.length)]</code></p><ul><li><code>$(&#39;#word&#39;).text(randomItem);</code>讓文字呈現於畫面中</li></ul><pre><code class="javascript">const words = [  &#39;sigh&#39;,  &#39;tense&#39;,  &#39;airplane&#39;,  &#39;ball&#39;,  &#39;pies&#39;,  &#39;juice&#39;,  &#39;warlike&#39;,  &#39;bad&#39;,  &#39;north&#39;,  &#39;dependent&#39;,  &#39;steer&#39;,  &#39;silver&#39;,  &#39;highfalutin&#39;,  &#39;superficial&#39;,  &#39;quince&#39;,  &#39;eight&#39;,  &#39;feeble&#39;,  &#39;admit&#39;,  &#39;drag&#39;,  &#39;loving&#39;];</code></pre><pre><code class="javascript">function getRandomword() {  //https://www.codegrepper.com/code-examples/javascript/get+random+word+from+array+javascript  randomItem = words[Math.floor(Math.random() * words.length)];  $(&#39;#word&#39;).text(randomItem);};getRandomword()</code></pre><h3 id="2-單字的核對"><a href="#2-單字的核對" class="headerlink" title="2.單字的核對"></a>2.單字的核對</h3><ul><li>要確認抓到的單字是否一樣</li><li><code>let text = $(&#39;#text&#39;).val(); let Item = randomItem;</code></li><li><code>console.log(Item);</code>查看抓取到的單字</li><li>設定文字核對一樣，就執行分數加一，以及創造另一組新單字  </li><li>每次輸入完，並呈現新單字的同時，要清空輸入框的內容<pre><code class="javascript">//輸入單字核對function checkWord() {let text = $(&#39;#text&#39;).val();let Item = randomItem;//console.log(Item);if (text === Item) {  getRandomword();  updateScore();  $(&#39;#text&#39;).val(&quot;&quot;);}}</code></pre></li></ul><h3 id="3-倒數計時"><a href="#3-倒數計時" class="headerlink" title="3.倒數計時"></a>3.倒數計時</h3><ul><li>設置起始時間為10</li><li><code>setInterval()</code>「不斷循環」地固定延遲了某段時間之後，才去執行對應的程式碼，使用 <code>clearInterval()</code>来終止</li><li>在秒數倒計完之後，終止循環，並呈現結束畫面</li></ul><pre><code class="javascript">// Init timelet time = 10;// 倒數計時//https://jsfiddle.net/satyasrinivaschekuri/y03m54Le/function countTime() {  time--;  $(&#39;#time&#39;).text(`${time}s`)  if (time &lt;= 0) {    clearInterval(downloadTimer);    gameOver();  }  //   } else {  //     time--;  //     $(&#39;#time&#39;).text(`${time}s`)  //   }}var downloadTimer = setInterval(countTime, 1000);</code></pre><h4 id="4-倒數計時結束，終止畫面"><a href="#4-倒數計時結束，終止畫面" class="headerlink" title="4.倒數計時結束，終止畫面"></a>4.倒數計時結束，終止畫面</h4><p><img src="https://i.imgur.com/r9oXFmc.png" alt=""></p><ul><li>在該div容器中，插入要顯示的標籤與內容</li><li>利用<code>display:flex</code>呈現該內容</li></ul><pre><code class="javascript">//遊戲結束//location.reload()function gameOver() {  $(&#39;#end-game-container&#39;).html(`&lt;h1&gt;Time ran out&lt;/h1&gt;  &lt;p&gt;Your final score is ${score}&lt;/p&gt;  &lt;button onclick=&quot;location.reload()&quot;&gt;Reload&lt;/button&gt;  `)  // 顯示指定的flex容器  $(&quot;#end-game-container&quot;).css(&#39;display&#39;, &#39;flex&#39;);}</code></pre><h3 id="5-設置難易度"><a href="#5-設置難易度" class="headerlink" title="5.設置難易度"></a>5.設置難易度</h3><ul><li>設定在表格變動選項後的綁定事件</li><li>抓取難易度選項的值，並以其值作為儲存local storage的內容</li><li>接著將儲存的難易度，呈現於畫面<code>$(&#39;#difficulty&#39;).val()</code></li></ul><pre><code class="javascript">//如果儲存端不是空值(已有選擇)，就以此為主，否則的話就是mediumlet difficulty = localStorage.getItem(&#39;difficulty&#39;) !== null  ? localStorage.getItem(&#39;difficulty&#39;)  : &#39;medium&#39;; //設置select的選擇  $(&#39;form&#39;).change(function () {    difficulty = $(&#39;#difficulty&#39;).val();    localStorage.setItem(&#39;difficulty&#39;, difficulty);  });  //使畫面的難易度選擇，呈現儲存的選項  $(&#39;#difficulty&#39;).val(function () {    let a = $(&#39;#difficulty&#39;).val()    if (localStorage.getItem(&#39;difficulty&#39;) !== null) {      return a = localStorage.getItem(&#39;difficulty&#39;);    } else {      return a = &#39;medium&#39;;    }  }) </code></pre><h3 id="6-調整難易度，每次打對題目可以增加秒數"><a href="#6-調整難易度，每次打對題目可以增加秒數" class="headerlink" title="6.調整難易度，每次打對題目可以增加秒數"></a>6.調整難易度，每次打對題目可以增加秒數</h3><ul><li>在<code>checkWord()</code>函式中，如過答對題目的條件下設置</li><li>判斷如果難易度為高、中、低時，可以添加的秒數分別為多少</li></ul><pre><code class="javascript">//time += 5;    if (difficulty === &#39;hard&#39;) {      time += 2;    } else if (difficulty === &#39;medium&#39;) {      time += 3;    } else {      time += 5;    }//判斷完之後，隨之繼續倒數時間    countTime();</code></pre><h3 id="7-設定結束時，分數-gt-5-，會出現good-job圖示"><a href="#7-設定結束時，分數-gt-5-，會出現good-job圖示" class="headerlink" title="7.設定結束時，分數(&gt;=5)，會出現good job圖示"></a>7.設定結束時，分數(&gt;=5)，會出現good job圖示</h3><p><img src="https://i.imgur.com/2YKGGsw.png" alt=""></p><ul><li>在css檔案加入show的class，並插入該圖示的顯現方式</li><li>於js部分，將判斷式，加入<code>gameOver()a</code></li></ul><pre><code class="javascript">//增加判斷，分數達到一標準，會出現圖示  let s = score  console.log(s)  if (s &gt; = 5) {    $(&quot;#end-game-container&quot;).find(&#39;img&#39;).addClass(&#39;show&#39;);  };</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> jQuery  </tag>
            
            <tag> toggleClass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS實作- 猜數字遊戲</title>
      <link href="/2021/01/22/js-guessNumber/"/>
      <url>/2021/01/22/js-guessNumber/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/guessNumber/guessNumber.html" target="_blank" rel="noopener">成品</a></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li>練習語音辨識的使用： speech recognition API<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition" target="_blank" rel="noopener">SpeechRecognition-MDN</a></li></ul></li><li>根據不同情形，有不一樣的回覆<ul><li>依據猜測數字的情形給予：go higher,go lower</li></ul></li></ul><p><img src="https://i.imgur.com/IjVZV5d.png" alt=""></p><ul><li>數字猜中後，會出現恭喜答對等敘述，並呈現<code>Play Again</code>的按鈕</li></ul><p><img src="https://i.imgur.com/MhtrTrR.png" alt=""></p><h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><h3 id="1-設定隨機數字"><a href="#1-設定隨機數字" class="headerlink" title="1.設定隨機數字"></a>1.設定隨機數字</h3><ul><li><code>Math.floor(Math.random() * 100) + 1</code>取得1-100</li></ul><pre><code class="javascript">// 取得隨1-100隨機數字function theRandomNum() {  return Math.floor(Math.random() * 100) + 1;  //沒有加1，數字會是0-99}let randomNum = theRandomNum();console.log(&#39;randomNum:&#39;, randomNum);</code></pre><h3 id="2-SpeechRecognition"><a href="#2-SpeechRecognition" class="headerlink" title="2.SpeechRecognition"></a>2.SpeechRecognition</h3><ul><li>第一步要先將SpeechRecognition設為全域變數<ul><li>檢查瀏覽器是否有支援不需要 prefix 的 speechRecognition 介面，若沒有則將 webkit 標頭的 webkitSpeechRecognition 指定給該全域變數，</li></ul></li><li>要使用 speechRecognition ，必須透過 SpeechRecognition 建構式建立一個物件實例。</li><li><code>recognition.onresult</code> 設定取得語音辨識的結果</li><li>執行<code>writeMessage(myWord);checkNumber(myWord);</code>兩個函式<pre><code class="javascript">try {var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;var recognition = new SpeechRecognition();//設定辨識語言。recognition.lang = &#39;zh-tw&#39;;}catch (e) {console.error(e);</code></pre></li></ul><p>}</p><p>// 開始語音辨識<br>recognition.start();<br>//取得語音辨識的結果<br>recognition.onresult = function (event) {<br>  //console.log(event);<br>  let myWord = event.results[0][0].transcript<br>  //console.log(‘You said: ‘, myWord);<br>  writeMessage(myWord);<br>  checkNumber(myWord);<br>};</p><pre><code>* 簡易測試，取得得語音辨識 :point_down: ```javascript=//取得語音辨識的結果recognition.onresult = function (event) {  console.log(&#39;You said: &#39;, event.results[0][0].transcript);};</code></pre><p><img src="https://i.imgur.com/QLWaJB0.png" alt=""></p><p><img src="https://i.imgur.com/FfF5Aqv.png" alt=""></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API" target="_blank" rel="noopener">Using the Web Speech API</a><br><a href="https://www.freecodecamp.org/news/how-to-build-a-simple-speech-recognition-app-a65860da6108/" target="_blank" rel="noopener">How to build a simple speech recognition app</a></p><h3 id="3-記錄下使用者所說的話"><a href="#3-記錄下使用者所說的話" class="headerlink" title="3.記錄下使用者所說的話"></a>3.記錄下使用者所說的話</h3><ul><li><p>在<code>msg</code>的div插入辨識語言的結果文字</p><pre><code class="javascript">function writeMessage(myWord) {$(&#39;#msg&#39;).html(`&lt;div&gt;You said:&lt;/div&gt;  &lt;span class=&quot;box&quot;&gt;${myWord}&lt;/span&gt;`)}</code></pre><h3 id="4-核對隨機數字與猜的數字是否一致"><a href="#4-核對隨機數字與猜的數字是否一致" class="headerlink" title="4.核對隨機數字與猜的數字是否一致"></a>4.核對隨機數字與猜的數字是否一致</h3></li><li><p>設定當辨識到的不是數字：This is not a valid number</p></li><li><p>當範圍不在1-100之間：Number must be between 1 and 100</p></li><li><p>猜中數字的結果：Congrats! You have guessed the number!</p></li><li><p>數字猜測GO LOWER,GO HIGHER</p><pre><code class="javascript">function checkNumber(myWord) {let number = +myWord; //轉為數字if (Number.isNaN(number)) {  $(&#39;#msg&#39;).append(`&lt;div&gt;This is not a valid number&lt;/div&gt;`)  return}//設定語句if (number &gt; 100 || number &lt; 1) {  $(&#39;#msg&#39;).append(`&lt;div&gt;Number must be between 1 and 100&lt;/div&gt;`);  return;}if (number === randomNum) {  $(&#39;body&#39;).html(`  &lt;h2&gt;Congrats! You have guessed the number! &lt;br&gt;&lt;br&gt;   It was ${number}&lt;/h2&gt;  &lt;button class=&quot;play-again&quot; id=&quot;play-again&quot; &gt; Play Again &lt;/button&gt;  `);} else if (number &gt; randomNum) {  $(&#39;#msg&#39;).append(`&lt;div&gt;GO LOWER&lt;/div&gt;`);} else {  $(&#39;#msg&#39;).append(`&lt;div&gt;GO HIGHER&lt;/div&gt;`)}</code></pre></li></ul><p>}</p><pre><code>* 透過 Number.isNaN() 語法可以判斷，若回傳 true，則表示值為 NaN，否則為 false[Number.isNaN()](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN)### 5.使猜數字可以持續猜，直到答對為止* `recognition.onend`使用於控制語音識別的服務，並應用在結束語音識別時的情境。* `recognition.start();`每次數字猜完後，都會重新開始語音識別，直到猜中。* 在數字猜中後，會出現`play again`按鈕，所以要設定此按鈕，按下後能夠重新開始遊戲 =&gt;`window.location.reload()````javascript//https://stackoverflow.com/questions/51080738/how-to-make-speech-recognition-continous-for-a-fix-time-periodrecognition.onend = function () {  recognition.start();  //點擊按鈕，重啟遊戲畫面  $(&#39;body&#39;).find(&#39;#play-again&#39;).click(    function () {      window.location.reload();    }  );}</code></pre><p><a href="https://ithelp.ithome.com.tw/articles/10187827" target="_blank" rel="noopener">實戰智慧插座 14 - 我說開燈就開燈 ( 語音辨識 )</a></p><hr><p>其他參考資料:<br><a href="https://tutorialzine.com/2017/08/converting-from-speech-to-text-with-javascript" target="_blank" rel="noopener">Converting from Speech to Text with JavaScript</a><br><a href="https://davidwalsh.name/speech-recognition" target="_blank" rel="noopener">JavaScript Speech Recognition</a><br><a href="https://ithelp.ithome.com.tw/articles/10248999" target="_blank" rel="noopener">Day21 – Speech Recognition (lukechu)</a><br><a href="https://ithelp.ithome.com.tw/articles/10196577" target="_blank" rel="noopener">Day 21 - Speech Detection (Arel)</a><br><a href="https://ithelp.ithome.com.tw/articles/10224891?sc=rss.qu" target="_blank" rel="noopener">DAY20 : Speech Detection (BROWN)</a></p>]]></content>
      
      
      <categories>
          
          <category> JS實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> jQuery  </tag>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS實作- 新年倒數</title>
      <link href="/2021/01/16/js-countDown/"/>
      <url>/2021/01/16/js-countDown/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/countDown/countDown.html" target="_blank" rel="noopener">成品</a></p><p><img src="https://i.imgur.com/et0bQ96.png" alt=""></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li>計算天、小時、分鐘、秒數的倒數</li><li>最下面顯示倒數年份</li><li>page load的圖示(會旋轉1秒鐘)之後顯示倒數</li></ul><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><pre><code class="css">/*增加讓螢幕寬度變化時，字的大小隨之改變如果螢幕寬度為 500px 以下*/@media (max-width: 500px) {  h1 {    font-size: 45px;  }  .time {    margin: 5px;  }  .time h2 {    font-size: 12px;    margin: 0;  }  .time small {    font-size: 10px;  }}</code></pre><p><a href="https://ithelp.ithome.com.tw/articles/10196578" target="_blank" rel="noopener">Day22：小事之 Media Query</a><a href="https://malagege.github.io/blog/2019/05/05/CSS%E8%A8%AD%E5%AE%9A%E9%9F%BF%E6%87%89%E5%BC%8F-RWD-%E6%9C%89%E5%B9%BE%E7%A8%AE%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">CSS設定響應式(RWD)有幾種方法</a></p><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="1-宣告最終日期-新的一年1-1的日期"><a href="#1-宣告最終日期-新的一年1-1的日期" class="headerlink" title="1. 宣告最終日期(新的一年1/1的日期)"></a>1. 宣告最終日期(新的一年1/1的日期)</h3><ul><li>要先宣告取得目前的年份</li><li>再利用此變數帶入，要倒數的最終日期</li></ul><pre><code class="javascript=">//getFullYear(),用來取得日期物件當中本地時間的年份const currentYear = new Date().getFullYear();const newYearTime = new Date(`January 01 ${currentYear + 1} 00:00:00`);</code></pre><p>時間日期<br><a href="https://www.fooish.com/javascript/date" target="_blank" rel="noopener">JavaScript Date 時間和日期</a><br><a href="https://www.w3schools.com/jsref/jsref_getfullyear.asp" target="_blank" rel="noopener">getFullYear() Method</a></p><h3 id="2-倒數計時的日、時、分、秒"><a href="#2-倒數計時的日、時、分、秒" class="headerlink" title="2. 倒數計時的日、時、分、秒"></a>2. 倒數計時的日、時、分、秒</h3><ul><li><p><code>currentTime</code> 取得目前時間<br><img src="https://i.imgur.com/b3sgw3L.png" alt=""></p></li><li><p><code>diff = newYearTime - currentTime;</code>:計算出目前與未來最終日期的時間差異(此相減得出的是毫秒)<br><img src="https://i.imgur.com/ly5elua.png" alt=""></p></li><li><p>計算天數、小時、秒數</p><ul><li><code>const d</code>1天等於24小時，1小時等於60分鐘，1分鐘等於60秒，1秒等於1000毫秒。所以，msec / 1000 / 60 / 60 / 24 保留整數就是天數。</li><li><code>h = Math.floor(diff / 1000 / 60 / 60) % 24</code>:計算小時，並以除以24之後的餘數，來得到剩餘的小時。</li><li>分鐘、以及秒數也是用同樣方式計算取得。</li></ul></li><li><p>將取得的日期帶入畫面</p><ul><li>使用<code>.html()</code>：<code>$(&#39;#days&#39;).html(d);</code></li><li>在小時、分鐘、秒，是以兩位數呈現，需要當數字少於10，要呈現01,02…，所以使用三元運算子<code>$(&#39;#hours&#39;).html(h &lt; 10 ? &#39;0&#39; + h : h);</code>，當數字小於10，要0+h;反之就只要呈現h。</li></ul></li><li><p>最後要設定<code>setInterval(updateCountdown, 1000);</code> ，使其每秒倒數。</p></li></ul><pre><code class="javascript">function updateCountdown() {  const currentTime = new Date();  //console.log(currentTime);  const diff = newYearTime - currentTime;  //diff計算出來是毫秒  //days  const d = Math.floor(diff / 1000 / 60 / 60 / 24);  //取得除以24之後的餘數  const h = Math.floor(diff / 1000 / 60 / 60) % 24;  const m = Math.floor(diff / 1000 / 60) % 60;  const s = Math.floor(diff / 1000) % 60;  $(&#39;#days&#39;).html(d);  //當數字少於10，要呈現01,02...  $(&#39;#hours&#39;).html(h &lt; 10 ? &#39;0&#39; + h : h);  $(&#39;#minutes&#39;).html(m &lt; 10 ? &#39;0&#39; + m : m);  $(&#39;#seconds&#39;).html(s &lt; 10 ? &#39;0&#39; + s : s);}//設定每一秒都會循環倒數setInterval(updateCountdown, 1000);</code></pre><p>參考資料：<br><a href="http://zhi-yuan-chenge.blogspot.com/2015/10/jsjavascript_16.html" target="_blank" rel="noopener">【JS】javascript時間Date()介紹與補零應用的技巧!!!</a><br><a href="https://kknews.cc/zh-tw/code/8g4vo3e.html" target="_blank" rel="noopener">js和vue實現時分秒倒計時的方法</a><br>三元運算子：<br><a href="https://ithelp.ithome.com.tw/articles/10218274" target="_blank" rel="noopener">Day19【ES6 小筆記】三元運算子-以哥哥的擇偶條件為例</a></p><h3 id="3-載入圖示"><a href="#3-載入圖示" class="headerlink" title="3.載入圖示"></a>3.載入圖示</h3><ul><li>設定在載入之後，要隔多久執行功能</li><li>在此設定載入1秒之後，要移除loading畫面，呈現出倒數的時間</li></ul><pre><code class="javascript">setTimeout(function () {  $(&#39;#loading&#39;).remove();  //要在css檔案的countdown，先設置display：none  $(&#39;#countdown&#39;).css(&#39;display&#39;, &#39;flex&#39;);}, 1000);</code></pre><h3 id="4-放入要倒數的年份"><a href="#4-放入要倒數的年份" class="headerlink" title="4.放入要倒數的年份"></a>4.放入要倒數的年份</h3><pre><code class="javascript">$(&#39;#year&#39;).html(currentYear + 1)</code></pre><hr><p><a href="https://ithelp.ithome.com.tw/articles/10238189" target="_blank" rel="noopener">網頁練習 -倒數計時器實作(上)</a><br><a href="https://www.cssscript.com/best-countdown-timer/" target="_blank" rel="noopener">5 Best Countdown Timer JavaScript Libraries (2020 Update)</a><br><a href="https://ithelp.ithome.com.tw/articles/10238547" target="_blank" rel="noopener">網頁練習 -倒數計時器實作(下)</a></p>]]></content>
      
      
      <categories>
          
          <category> JS實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> jQuery </tag>
            
            <tag> setInterval </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS實作- scrollBlog</title>
      <link href="/2021/01/16/js-scrollBlog/"/>
      <url>/2021/01/16/js-scrollBlog/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/scrollBlog/scrollBlog.html" target="_blank" rel="noopener">成品</a></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><p>1.隨著頁面的往下捲動，會載入新的資料</p><ul><li>一開始頁面載入，會呈現5筆資料，捲動往下，會再載入5筆</li><li>使用<a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="noopener">{JSON} Placeholder</a>的資料來串接(運用ajax)</li><li>設定捲動位置，並於該位置時，會呈現載入的圖示</li><li>setTimeout來呈現載入的時間與畫面</li></ul><p>2.網頁的各資料是有順序，資料左上會有編碼</p><ul><li>利用資料本身的id作為序號</li><li>於js時，帶入該變數取值</li></ul><h2 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h2><h3 id="1-製作左上方，數字"><a href="#1-製作左上方，數字" class="headerlink" title="1.製作左上方，數字"></a>1.製作左上方，數字</h3><ul><li>利用<code>position: absolute;</code>定位位置，並利用並利用<code>top</code>、<code>left</code>調整位置</li><li>使用<code>display: flex;</code>調整數字的位置，<code>align-items: center;justify-content: center;</code>使水平、垂直置中<pre><code class="css">.post .number {position: absolute;top: -15px;left: -15px;font-size: 15px;width: 40px;height: 40px;border-radius: 50%;background: #fff;color: #296ca8;display: flex;align-items: center;justify-content: center;padding: 7px 10px;}</code></pre><img src="https://i.imgur.com/FkIcque.png" alt=""></li></ul><h3 id="2-載入畫面的原點圖示"><a href="#2-載入畫面的原點圖示" class="headerlink" title="2.載入畫面的原點圖示"></a>2.載入畫面的原點圖示</h3><ul><li>先製作load的基本設定，如flex的排列、位置固定於下方，以及透明度的顯示</li><li>針對原點訂定背景、原點大小。新增動畫效果，<code>animation: bounce 0.5s ease-in infinite;</code></li><li>動畫名稱<code>@keyframes bounce</code>，設定在某時間點，<code>translateY</code>，的位置。</li><li>為了讓圓點的跳動時間不同，針對2、3的原點，設定延遲時間<code>animation-delay: 0.2s;</code><pre><code class="css">.loader {/* opacity: 0; */display: flex;position: fixed; /*位置固定於最下面*/bottom: 50px;transition: opacity 0.3s ease-in;}</code></pre></li></ul><p>.loader.show {<br>  opacity: 1;<br>}</p><p>/<em>製作圓點</em>/</p><p>.circle {<br>  background-color: #fff;<br>  width: 10px;<br>  height: 10px;<br>  border-radius: 50%;<br>  margin: 5px;<br>  animation: bounce 0.5s ease-in infinite;<br>}</p><p>.circle:nth-of-type(2) {<br>  animation-delay: 0.1s;<br>}</p><p>.circle:nth-of-type(3) {<br>  animation-delay: 0.2s;<br>}</p><p>@keyframes bounce {<br>  0%,<br>  100% {<br>    transform: translateY(0);<br>  }</p><p>  50% {<br>    transform: translateY(-10px);<br>  }<br>}</p><pre><code>![](https://i.imgur.com/RuhdRt7.gif)## js部分### 1.jsonplaceholder:* 為取得資料的位置* 抓取5筆的方式，後面參數的設定而來https://jsonplaceholder.typicode.com/posts?_limit5### 2.使用ajax串接API* [Async/Await 非同步流程控制-筆記](https://hackmd.io/Ciayzu-vQcyrh-WeVNeOPQ?view)* 參考[Using async await with jQuery&#39;s $.ajax](https://petetasker.com/using-async-await-jquerys-ajax)、[How to await the ajax request?](https://stackoverflow.com/questions/27612372/how-to-await-the-ajax-request)，使用jQuery&#39;s`$.ajax`執行async* 在try裡面，放入一般`$.ajax`抓取API資料的方式，如url、type、dataType* 首先，在連結的部分，我們希望每次抓取5筆資料，呈現1頁，所以在外面設置`let limit = 5;let page = 1`於url中加入該變數* 在抓取資料成功時，放入function，並用`$.each`來執行     * 在`$.each`先傳入該資料(data)陣列，其`function (index, value)`放入索引以及值的內容。     * 宣告`postEl`變數，創造名為`post`的`div`=&gt; ``$(&#39;\&lt;div /&gt;&#39;)``     * 加入`post`class     * 加入html     * 最後將此變數，放置呈現文章的容器`postEl.appendTo(&#39;#posts-container&#39;);````javascriptlet limit = 5let page = 1async function doAjax() {  let result;  try {    result = await $.ajax({      url: `https://jsonplaceholder.typicode.com/posts?_limit=${limit}&amp;_page=${page}`,      type: &#39;get&#39;,      dataType: &#39;json&#39;,      success: function (data) {      $.each(data, function (index, value) {          const postEl = $(&#39;&lt;div /&gt;&#39;).addClass(&#39;post&#39;).html(`&lt;div class=&quot;number&quot;&gt;${value.id}&lt;/div&gt; &lt;div class=&quot;post-info&quot;&gt;&lt;h2 class=&quot;post-title&quot;&gt;${value.title}&lt;/h2&gt;&lt;p class=&quot;post-body&quot;&gt;${value.body}&lt;/p&gt;      &lt;/div&gt;`)          //console.log(postEl)          postEl.appendTo(&#39;#posts-container&#39;);          //$(&#39;#posts-container&#39;).append(postEl)        });      }    });    return result;  } catch (error) {    console.error(error);  }}doAjax();</code></pre><p>查看是否有成功取得資料：<code>console.log(data);</code><br><img src="https://i.imgur.com/wJPpdfh.png" alt=""></p><h3 id="使用jQuery創造div"><a href="#使用jQuery創造div" class="headerlink" title="使用jQuery創造div"></a>使用jQuery創造div</h3><p><a href="https://stackoverflow.com/questions/10402567/jquery-div-vs-div" target="_blank" rel="noopener">https://stackoverflow.com/questions/10402567/jquery-div-vs-div</a></p><h4 id="each"><a href="#each" class="headerlink" title="each()"></a><code>each()</code></h4><p><a href="https://api.jquery.com/jquery.each/" target="_blank" rel="noopener">jQuery.each()</a></p><h3 id="3-Infinite-Scroll無限捲動-瀑布流"><a href="#3-Infinite-Scroll無限捲動-瀑布流" class="headerlink" title="3.Infinite Scroll無限捲動(瀑布流)"></a>3.Infinite Scroll無限捲動(瀑布流)</h3><ul><li><code>scrollTop</code>網頁右邊的卷軸到最上端網頁的距離有多少</li><li><code>scrollHeight</code> 取得整個沒被擋住的高、<code>clientHeight</code> 取得元素的高度（含padding 不含 border）</li><li>完整內容高度 (scrollHeight) = 內容頂端與捲軸頂端的距離 (scrollTop) + 捲軸本身高度 (clientHeight) + 內容底端與捲軸底端的距離。</li></ul><p>例子:</p><pre><code class="javascript">$(function () {  $(window).scroll(function () {    var scrollVal = $(this).scrollTop();    $(&quot;span.qScrollTop&quot;).text(scrollVal);  });});if(scrollVal &gt; 500){  /* 如果滾動的物件捲動 &gt; 500 則觸發指定的動作。*/}</code></pre><h4 id="注意：window本身沒有scrollTop-Left這個屬性，所以window-scrollTop是undefined的"><a href="#注意：window本身沒有scrollTop-Left這個屬性，所以window-scrollTop是undefined的" class="headerlink" title="注意：window本身沒有scrollTop/Left這個屬性，所以window.scrollTop是undefined的"></a>注意：window本身沒有scrollTop/Left這個屬性，所以window.scrollTop是undefined的</h4><p>所以可能要從body、document來取得</p><h4 id="本段落語法："><a href="#本段落語法：" class="headerlink" title="本段落語法："></a>本段落語法：</h4><ul><li>上述說明各視窗高度得解釋，在此if判斷式中<code>scrollTop + clientHeight &gt;= scrollHeight - 5</code>來計算，當捲軸捲到該位置時，要呈現載入畫面</li><li>接著根據載入畫面函式，來放入載入以及呈現接續畫面得設定<ul><li>使用<code>setTimeout()</code>，在1秒後消除載入圖示，接著在300毫秒後，馬上換頁執行載入新資料</li></ul></li></ul><pre><code class="javascript">$(window).scroll(function () {  var scrollTop = $(this).scrollTop();  var scrollHeight = $(&#39;body&#39;).prop(&quot;scrollHeight&quot;);  //一樣 var scrollHeight2 = document.documentElement.scrollHeight;  var clientHeight = document.documentElement.clientHeight;  //https://stackoverflow.com/questions/10423759/plain-javascript-to-jquery-clientheight  // console.log(&#39;scrollTop:&#39;, scrollTop);  // console.log(&#39;scrollHeight:&#39;, scrollHeight);  // console.log(&#39;clientHeight:&#39;, clientHeight);  if (scrollTop + clientHeight &gt;= scrollHeight - 5) {    //console.log(&#39;show up 123&#39;)    showLoading();  }})//顯示載入圖示，並取得更多串接資料function showLoading() {  $(&#39;.loader&#39;).addClass(&#39;show&#39;);  setTimeout(function () {    $(&#39;.loader&#39;).removeClass(&#39;show&#39;);    setTimeout(function () {      page++;      doAjax();    }, 300);  }, 1000);  //1秒之後消失}</code></pre><p>參考資料：<br><a href="https://pjchender.blogspot.com/2015/04/jquery.html" target="_blank" rel="noopener">[筆記] 計算網頁底部位置，當網頁達到底部時才產生效果─jQuery</a><br><a href="https://shubo.io/element-size-scrolling/#%E7%84%A1%E9%99%90%E6%8D%B2%E5%8B%95-infinite-scroll" target="_blank" rel="noopener">一次搞懂 clientHeight/scrollHeight/scrollTop的區別</a><br><a href="https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/" target="_blank" rel="noopener">談談 JavaScript 的 setTimeout 與 setInterval</a></p><h3 id="4-篩選輸入框資料"><a href="#4-篩選輸入框資料" class="headerlink" title="4.篩選輸入框資料"></a>4.篩選輸入框資料</h3><ul><li>綁定事件為<code>.keyup</code>指放開鍵盤的那個剎那，觸發該事件</li><li>執行的函式內容為：<ul><li><code>var text</code>取得輸入值並轉為小寫</li><li>利用迴圈，去搜尋關鍵字，判斷，值轉為小寫文字的內容是否符合條件</li><li>-1 ：意指條件不符合</li><li><code>indexOf()</code> 方法用來判斷字串字串變數中是否包含某字串。</li></ul></li></ul><pre><code class="javascript">//輸入框搜尋//https://makitweb.com/jquery-search-text-in-the-element-with-contains-selector/  (=&gt;Loop all .content )  $(&#39;#filter&#39;).keyup(function () {    // Search text    var text = $(&#39;#filter&#39;).val().toLowerCase();    // Hide all content class element    $(&#39;.post&#39;).hide();    // Search     $(&#39;.post&#39;).each(function () {      if ($(this).text().toLowerCase().indexOf(&quot;&quot; + text + &quot;&quot;) != -1) {        $(this).closest(&#39;.post&#39;).show();      }    });</code></pre><p>參考資料：<br><a href="https://medium.com/@yitailin/%E6%AF%94%E8%BC%83-keydown-keypress-keyup-%E7%9A%84%E5%B7%AE%E7%95%B0-4e873ba17e81" target="_blank" rel="noopener">比較 keydown, keypress, keyup 的差異</a><br><a href="https://makitweb.com/jquery-search-text-in-the-element-with-contains-selector/" target="_blank" rel="noopener">jQuery – Search text in the Element with :contains() Selector</a><br><a href="https://www.fooish.com/javascript/string/indexOf.html" target="_blank" rel="noopener">JavaScript String indexOf()</a></p><hr><p>補充參考：<br><a href="https://whien.medium.com/js20min-day-20-ajax-%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%99%95%E7%90%86-asynchronous-javascript-and-xml-e74a059ab639" target="_blank" rel="noopener">JS20min Day — 20 AJAX 非同步處理 (Asynchronous JavaScript and XML)</a><br><a href="https://www.youtube.com/watch?v=NOprCnnjHm0" target="_blank" rel="noopener">回呼函式 Callbacks、Promises 物件、Async/Await 非同步流程控制 - 彭彭直播 at 2019/04/07</a></p>]]></content>
      
      
      <categories>
          
          <category> JS實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ajax  </tag>
            
            <tag> setTimeout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS實作- DOM Array Methods</title>
      <link href="/2021/01/15/js-DOMArrayMethods/"/>
      <url>/2021/01/15/js-DOMArrayMethods/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/ArrayMethods/arrayMethod.html" target="_blank" rel="noopener">成品</a><br><img src="https://i.imgur.com/gtaxVol.png" alt=""></p><h1 id="需求觀察"><a href="#需求觀察" class="headerlink" title="需求觀察"></a>需求觀察</h1><ul><li>使用fetch來串接API</li><li>透過左側按鈕，使用陣列的方法來實現不同事件<ul><li>運用<code>forEach()</code>來將陣列資料呈現到畫面</li><li>運用<code>map()</code>計算金額的倍數</li><li><code>filter()</code>篩選出符合條件的資料</li><li><code>sort()</code>用來排序資料</li><li><code>reduce()</code>計算陣列中資料的累加結果</li></ul></li></ul><h1 id="使用fetch來串接資料"><a href="#使用fetch來串接資料" class="headerlink" title="使用fetch來串接資料"></a>使用fetch來串接資料</h1><ul><li>實作專案的資料來源<code>https://randomuser.me/api</code></li></ul><p>1.原本使用<code>fetch</code></p><ul><li>送出 Request，如果得到回應就會回傳帶有 Response 的 Promise 物件，使用 then 將回傳值傳遞下去。<pre><code class="javascript">function getRandomUser() {fetch(&#39;https://randomuser.me/api&#39;).then(response =&gt;    response.json()).then(data =&gt; data)}</code></pre></li></ul><pre><code>[JavaScript Fetch API 使用教學](https://www.oxxostudio.tw/articles/201908/js-fetch.html)2.Fetch 搭配 async、await* 使用async很容易：在定義function時，開頭加上 async* 用fetch取得資料```javascript  async function getRandomUser() {  const res = await fetch(&#39;https://randomuser.me/api&#39;);  //執行完後發出promise  const data = await res.json();  //查看取得的資料，並從中選擇要用的部分  //console.log(data);  const user = data.results[0];  //創造新的使用者，並建立新的物件  const newUser = {    name: `${user.name.first} ${user.name.last}`,    money: Math.floor(Math.random() * 1000000)  };  console.log(newUser);  addData(newUser);}</code></pre><p>3.函式中的撰寫</p><ul><li>查看取得的<code>data</code><br><img src="https://i.imgur.com/TjYFhjC.png" alt=""></li><li>變數宣告要取用資料的哪個部分，並用以建立新物件的內容<ul><li><code>const user = data.results[0];</code></li><li><code>user.name.first</code><br><img src="https://i.imgur.com/NAmWK88.png" alt=""></li></ul></li></ul><h2 id="將物件傳入陣列"><a href="#將物件傳入陣列" class="headerlink" title="將物件傳入陣列"></a>將物件傳入陣列</h2><ul><li>data 為前面<pre><code class="javascript"></code></pre></li></ul><p>//將新建立的物件(newUser)放入陣列中<br>function addData(newObj) {<br>  //這裡的data是在最前面所宣告的 初始陣列<br>  data.push(newObj);</p><pre><code>//不放入參數，使用預設data</code></pre><p>  updateDOM();</p><p>}</p><pre><code>## 將傳入新物件的陣列，顯示於畫面* 使用`forEach()`來呈現畫面的資料    * 傳入參數為item，為新創的物件資料，內有：name,money    * 創造新的`div`並增加class給他    * 用`innerHTML`插入內容    * 用 appendChild() 把上面新增的內容放入，新增的內容會依序排列在後面，不會被洗掉```javascript//將新創立的物件輸出呈現到畫面上(dom)function updateDOM(provideData = data) {  console.log(provideData);  //清除main區域的div  main.innerHTML = `&lt;h2&gt;&lt;strong&gt;Person&lt;/strong&gt;  Wealth&lt;/h2&gt;`;  provideData.forEach(item =&gt; {    const element = document.createElement(&#39;div&#39;);    //在新div增加class    element.classList.add(&#39;person&#39;);    element.innerHTML = `&lt;strong&gt;${item.name}&lt;/strong&gt; ${item.money}`;    main.appendChild(element);  })}</code></pre><p>注意：如果本來 HTML 某元素有既有的內容，但是又用 innerHTML 在同樣的元素上加上內容的時候，innerHTML 會把原本寫的東西覆蓋掉。</p><p><img src="https://i.imgur.com/xjxIGr7.png" alt=""></p><ul><li>注意參數的回傳<pre><code class="javascript">function updateDOM(provideData) {console.log(provideData);}</code></pre></li></ul><pre><code>![](https://i.imgur.com/0O0629Q.png)```javascriptfunction updateDOM(provideData = data) {  console.log(provideData);}</code></pre><p><img src="https://i.imgur.com/qW5Vqq9.png" alt=""></p><p><a href="https://ithelp.ithome.com.tw/articles/10218607" target="_blank" rel="noopener">JavaScript 初心者筆記: DOM - 如何用 JS 新增 HTML 內容</a></p><h2 id="數字轉金錢格式"><a href="#數字轉金錢格式" class="headerlink" title="數字轉金錢格式"></a>數字轉金錢格式</h2><p><img src="https://i.imgur.com/JKQrEyd.png" alt=""></p><pre><code class="javascript">//將回傳的隨機數字，轉換為金錢格式 -https://stackoverflow.com/questions/149055/how-to-format-numbers-as-currency-stringsfunction formatMoney(Money) {  return &#39;$&#39; + Money.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, &#39;$&amp;,&#39;);;}</code></pre><ul><li><code>formatMoney()</code>要放入剛剛forEach所傳入的金額，從這邊去調整數字的格式<pre><code class="javascript">element.innerHTML = `&lt;strong&gt;${item.name}&lt;/strong&gt;  ${formatMoney(item.money)}`;</code></pre></li></ul><p><img src="https://i.imgur.com/8DLGtgC.png" alt=""></p><h2 id="增加人員事件"><a href="#增加人員事件" class="headerlink" title="增加人員事件"></a>增加人員事件</h2><pre><code class="javascript">//設置點擊事件，按下add user，增加人addUserBtn.addEventListener(&#39;click&#39;, getRandomUser);</code></pre><h2 id="運用map-來，建立-double-money事件"><a href="#運用map-來，建立-double-money事件" class="headerlink" title="運用map()來，建立 double money事件"></a>運用<code>map()</code>來，建立 double money事件</h2><ul><li><p>loop through array 就像forEach，但不同的是他會回傳東西</p><pre><code class="javascript">//double money function doubleMoney() {data = data.map(item =&gt; {  return { ...item }});console.log(data);</code></pre></li></ul><p>}</p><pre><code>![](https://i.imgur.com/PpZ5v7v.png)```javascript//double money function doubleMoney() {  data = data.map(item =&gt; {    return { ...item, money: item.money * 2 }  });  console.log(data);}</code></pre><p><img src="https://i.imgur.com/joXfDXT.png" alt=""></p><p>呈現於畫面</p><pre><code class="javascript">//double money function doubleMoney() {  data = data.map(item =&gt; {    return { ...item, money: item.money * 2 }  });  console.log(data);   updateDOM();}</code></pre><p><img src="https://i.imgur.com/M0R5KV4.png" alt=""></p><p><code>forEach()</code>: 针对每一个元素执行提供的函数(executes a provided function once for each array element)。<br><code>map()</code>: 创建一个新的数组，其中每一个元素由调用数组中的每一个元素执行提供的函数得来(creates a new array with the results of calling a provided function on every element in the calling array)。<br><a href="https://blog.fundebug.com/2018/02/05/map_vs_foreach/" target="_blank" rel="noopener">JavaScript中Map和ForEach的区别</a></p><h2 id="運用sort來建立排名"><a href="#運用sort來建立排名" class="headerlink" title="運用sort來建立排名"></a>運用<code>sort</code>來建立排名</h2><pre><code class="javascript">//sortEventfunction sortEvent() {  data = data.sort((a, b) =&gt; {    return b.money - a.money;  });  //console.log(data);  updateDOM();}</code></pre><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a><code>sort()</code></h4><p><code>sort</code>依據字串的 Unicode 編碼進行排序，會改變原本的陣列。</p><ul><li>排序進行方式：<code>sort()</code>會將所有元素轉成字串後，且以第一個字元為對象，再進行排序。</li><li>比較好的方式：一般會建議，還是以函式傳入參數來當排序條件會比較穩定。</li></ul><pre><code class="javascript">const arr = [5, 9, 1, 3, 2, 6];// 以匿名函式回參數做「升序」排序arr.sort(function(a, b) {  return a - b; // a - b &gt; 0});// [1, 2, 3, 5, 6, 9]// 如果要反過來做「降序」排序arr.sort(function(a, b) {  return b - a;});// [9, 6, 5, 3, 2, 1]</code></pre><p>參考資料：<a href="https://ithelp.ithome.com.tw/articles/10225733" target="_blank" rel="noopener">JS 將陣列 Array 重新排列的 sort()</a>、<a href="https://medium.com/@leokao0726/%E6%B7%BA%E8%AB%87-js-sort-%E5%88%B0%E8%83%8C%E5%BE%8C%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95-1035f5b8cde8" target="_blank" rel="noopener">淺談 JS sort() 到背後排序方法</a></p><h2 id="filter篩選百萬以上的人員"><a href="#filter篩選百萬以上的人員" class="headerlink" title="filter篩選百萬以上的人員"></a><code>filter</code>篩選百萬以上的人員</h2><pre><code class="javascript">function filterMillionaires() {  data = data.filter((item) =&gt; {    return item.money &gt; 1000000;  });  updateDOM();}</code></pre><p>PS:<code>filter()</code>的使用是回傳新陣列，原陣列不改變</p><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>拆解內部參數<br>accumulator<br>用來累積回呼函式回傳值的累加器（accumulator）或 initialValue（若有提供的話，詳如下敘）。累加器是上一次呼叫後，所回傳的累加數值。<br>currentValue<br>原陣列目前所迭代處理中的元素。</p><ul><li><code>console.log(accumulator);</code></li></ul><p><img src="https://i.imgur.com/dGpG42b.png" alt=""></p><ul><li><code>console.log(currentValue);</code></li></ul><p><img src="https://i.imgur.com/P0yQK34.png" alt=""></p><ul><li>console.log(currentValue.money);</li></ul><p><img src="https://i.imgur.com/vNfFozL.png" alt=""></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">MDN</a><br><a href="https://w3c.hexschool.com/blog/a2cb755f" target="_blank" rel="noopener">JavaScript reduce 在做什麼？</a></p><h3 id="理解完reduce-所回傳的參數資料後…"><a href="#理解完reduce-所回傳的參數資料後…" class="headerlink" title="理解完reduce()所回傳的參數資料後…"></a>理解完<code>reduce()</code>所回傳的參數資料後…</h3><ul><li>讓金額加總計算<code>accumulator += currentValue.money</code></li></ul><pre><code class="javascript">//calculateMoneyfunction calculateMoney() {  const reduceArr = data.reduce((accumulator, currentValue) =&gt; {    //console.log(accumulator);   // console.log(currentValue.money);    return accumulator += currentValue.money;  }, 0);  const totalEl = document.createElement(&#39;div&#39;);  totalEl.innerHTML = `&lt;h3&gt;Total Wealth: &lt;strong&gt; ${formatMoney(reduceArr)} &lt;/strong&gt; &lt;/h3&gt; `;  main.appendChild(totalEl);}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS實作- SortableList</title>
      <link href="/2021/01/15/js-SortableList/"/>
      <url>/2021/01/15/js-SortableList/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/K6JyjsG.png" alt=""></p><p><a href="https://eva813.github.io/Eva_portfolio/sortableList/sortableList.html" target="_blank" rel="noopener">成品</a></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li><p>Drag &amp; Drop API</p><ul><li>使元素可以拖放，在 HTML5，只要為它加上 draggable=”true” 屬性，它就能「被拖曳」了</li></ul></li><li><p>拖曳該項目時，會使下方的格子顏色變成灰色</p></li></ul><p><img src="https://i.imgur.com/sZVXh9r.png" alt=""></p><ul><li>拖曳項目到目標位置，會使了者交換</li><li>排序最後會有一個檢查順序正確與否的按鈕</li></ul><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="1-排行榜的設置"><a href="#1-排行榜的設置" class="headerlink" title="1.排行榜的設置"></a>1.排行榜的設置</h3><ul><li>設定熱門旅遊縣市排行榜的陣列</li><li>並宣告一個空陣列，以利後面使用</li></ul><pre><code class="javascript">const bestPlace = [  &#39;台南&#39;,  &#39;台中&#39;,  &#39;高雄&#39;,  &#39;台東&#39;,  &#39;屏東&#39;,  &#39;新北&#39;,  &#39;宜蘭&#39;,  &#39;花蓮&#39;,  &#39;澎湖&#39;,  &#39;桃園&#39;];const listItems = [];</code></pre><h3 id="2-創建排行列表，並將其呈現於頁面上"><a href="#2-創建排行列表，並將其呈現於頁面上" class="headerlink" title="2.創建排行列表，並將其呈現於頁面上"></a>2.創建排行列表，並將其呈現於頁面上</h3><ul><li>宣告新的變數，並利用Fisher-Yates，創造隨機的效果<ul><li>注意新變數，是帶入展開運算元(把陣列中的元素取出)</li></ul></li><li>利用<code>each</code>跑陣列，創造變數填入<code>&lt;li&gt;</code>，並於其中填入html標籤，使畫面呈現列表。</li><li>jquery稱增加屬性<code>listItem.setAttribute(&#39;data-index&#39;, index);</code>,<a href="https://api.jquery.com/attr/" target="_blank" rel="noopener">.attr()</a></li></ul><p><img src="https://i.imgur.com/OqjHMda.png" alt=""></p><ul><li><code>listItems.push(listItem);</code>將列表項目，放入空陣列中</li></ul><pre><code class="javascript">//Fisher-Yates洗牌演算法function fisherYatesShuffle(arr) {  for (var i = arr.length - 1; i &gt; 0; i--) {    var j = Math.floor(Math.random() * (i + 1)); //random index    [arr[i], arr[j]] = [arr[j], arr[i]]; // swap  }}/製作實際可以看到的listfunction creatList() {  let placeArr = [...bestPlace];  fisherYatesShuffle(placeArr);  $.each(placeArr, function (index, place) {    const listItem = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;).appendTo(&#39;#draggable-list&#39;);    // console.log(listItem);    listItem.attr(&quot;data-index&quot;, index);    //listItem.addClass(&#39;wrong&#39;)    listItem.html(`&lt;span class=&quot;number&quot;&gt;${index + 1}&lt;/span&gt;        &lt;div class=&quot;draggable&quot; draggable=&quot;true&quot;&gt;          &lt;p class=&quot;place-name&quot;&gt;${place}&lt;/p&gt;          &lt;i class=&quot;fas fa-grip-lines&quot;&gt;&lt;/i&gt;        &lt;/div&gt;`)    listItems.push(listItem);    //insert into dom    $(&#39;#draggable-list&#39;).append(listItem);  });  addEventListeners()}</code></pre><p>參考資料：<br>push：<br><a href="https://ithelp.ithome.com.tw/articles/10222922" target="_blank" rel="noopener">JS 從陣列 Array 尾端新增元素的 push()</a><br><a href="https://www.oxxostudio.tw/articles/201908/js-array.html" target="_blank" rel="noopener">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a></p><h3 id="3-拖曳的監聽事件"><a href="#3-拖曳的監聽事件" class="headerlink" title="3.拖曳的監聽事件"></a>3.拖曳的監聽事件</h3><ul><li>拖曳開始的監聽，元素是抓取<code>draggables</code>，後續的drop、dragenter、dragover等事件，元素是<code>.draggable-list li</code></li><li>針對要被拖曳的元素（dragSource）監聽事件</li><li>利用forEach方式，允許多個可拖曳的物件</li></ul><ul><li>抓取的元素：<br><img src="https://i.imgur.com/5G60Pmr.png" alt=""><br><img src="https://i.imgur.com/zXR4YWT.png" alt=""></li></ul><pre><code class="javascript">//監聽事件function addEventListeners() {  const draggables = document.querySelectorAll(&#39;.draggable&#39;);  const dragListItems = document.querySelectorAll(&#39;.draggable-list li&#39;);  //Dragable dot 增加監聽事件  draggables.forEach(draggable =&gt; {    draggable.addEventListener(&#39;dragstart&#39;, dragStart);  });  dragListItems.forEach(item =&gt; {    item.addEventListener(&#39;dragover&#39;, dragOver);    item.addEventListener(&#39;drop&#39;, dragDrop);    item.addEventListener(&#39;dragenter&#39;, dragEnter);    item.addEventListener(&#39;dragleave&#39;, dragLeave);  });}</code></pre><p><a href="https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html" target="_blank" rel="noopener">[筆記] 製作可拖曳的元素（HTML5 Drag and Drop API）</a></p><h3 id="4-針對監聽事件，設置各執行的函式"><a href="#4-針對監聽事件，設置各執行的函式" class="headerlink" title="4.針對監聽事件，設置各執行的函式"></a>4.針對監聽事件，設置各執行的函式</h3><ul><li>為了能夠追蹤抓取項目，所以一開始先宣告一個索引變數。</li><li><code>dragStart()</code>:宣告<code>dragStartIndex</code>變數為抓取到的<code>li</code>-&gt;<code>data-index</code></li></ul><p><img src="https://i.imgur.com/6tMHuYr.png" alt=""></p><ul><li>有拖曳的開始，就會有結束，也就是放置(<code>dragDrop()</code>)：<code>dragEndIndex</code>同樣也是以索引來作為依據，並在設置一個交換的函式</li></ul><pre><code class="javascript">//要能夠持續追蹤每個項目的index，所以要有個初始變數let dragStartIndex;//拖拉的各函式function dragStart() {  //console.log(&#39;Event: &#39;, &#39;dragstart&#39;);  dragStartIndex = +$(this).closest(&#39;li&#39;).attr(&#39;data-index&#39;);  console.log(dragStartIndex);};function dragOver(e) {  // console.log(&#39;Event: &#39;, &#39;dragover&#39;);  e.preventDefault();}//設定開始的index,以及結束的index是為了交換function dragDrop() {  // console.log(&#39;Event: &#39;, &#39;dragdrop&#39;);  const dragEndIndex = +$(this).attr(&#39;data-index&#39;);  swapItems(dragStartIndex, dragEndIndex);  $(this).removeClass(&#39;over&#39;);}</code></pre><h3 id="5-交換索引，使物件交換位置swapItems"><a href="#5-交換索引，使物件交換位置swapItems" class="headerlink" title="5.交換索引，使物件交換位置swapItems"></a>5.交換索引，使物件交換位置<code>swapItems</code></h3><ul><li>透過抓取到的開始與結束的索引，來填入要交換的變數</li></ul><pre><code class="javascript">function swapItems(fromIndex, toIndex) {  //要設定交換之前，要先到dragover去設定e.preventDefault();（因為dragover會擋到交換的執行）  const itemOne = listItems[fromIndex].find(&#39;.draggable&#39;);  const itemTwo = listItems[toIndex].find(&#39;.draggable&#39;);  //console.log(itemOne, itemTwo)  listItems[fromIndex].append(itemTwo);  listItems[toIndex].append(itemOne);}</code></pre><h3 id="6-延續拖曳監聽事件，所要執行的其他函式"><a href="#6-延續拖曳監聽事件，所要執行的其他函式" class="headerlink" title="6.延續拖曳監聽事件，所要執行的其他函式"></a>6.延續拖曳監聽事件，所要執行的其他函式</h3><ul><li><p><code>dragEnter()</code>拖曳元素進入要放置的目標位置，所觸發的事件。在此是設定要放入目標位置時，增加一個<code>class</code>的效果</p></li><li><p>進入目標位置，其相互搭配的事件就是離開<code>dragLeave()</code>，當拖曳元素離開放置位置時，所發生的事件。在此為設定，去除於原本<code>class</code>的效果。</p></li></ul><pre><code class="javascript">function dragEnter() {  // console.log(&#39;Event: &#39;, &#39;dragenter&#39;);  $(this).addClass(&#39;over&#39;);}function dragLeave() {  // console.log(&#39;Event: &#39;, &#39;dragleave&#39;);  $(this).removeClass(&#39;over&#39;);}</code></pre><h3 id="7-核對順序"><a href="#7-核對順序" class="headerlink" title="7.核對順序"></a>7.核對順序</h3><ul><li>抓取listItems，來跑forEach，其要參照的參數是，項目、索引。</li><li>宣告<code>placeName</code>為參數<code>listItem</code>，draggable的文字字串。<ul><li>trim()用來去除字串前後的空白</li></ul></li><li>判斷句<code>placeName !== bestPlace[index]</code></li><li><code>console.log(bestPlace[index])</code>會印出，正確的順序。</li></ul><p><img src="https://i.imgur.com/xIR3X98.png" alt=""></p><ul><li><p>核對結果：就是分別加入<code>wrong</code>、<code>&#39;right&#39;</code>。</p><pre><code class="javascript">//核對排名順序function checkOrder() {listItems.forEach((listItem, index) =&gt; {  const placeName = listItem.find(&#39;.draggable&#39;).text().trim();  if (placeName !== bestPlace[index]) {    listItem.addClass(&#39;wrong&#39;);  } else {    listItem.removeClass(&#39;wrong&#39;);    listItem.addClass(&#39;right&#39;);  }});}</code></pre></li></ul><hr><h2 id="以下為補充資料："><a href="#以下為補充資料：" class="headerlink" title="以下為補充資料："></a>以下為補充資料：</h2><h3 id="拖曳補充資料："><a href="#拖曳補充資料：" class="headerlink" title="拖曳補充資料："></a>拖曳補充資料：</h3><p><a href="https://ourcodeworld.com/articles/read/664/top-5-best-sortable-and-draggable-list-javascript-and-jquery-plugins" target="_blank" rel="noopener">Top 5: Best Sortable &amp; Draggable List JavaScript and jQuery Plugins</a><br><a href="https://ithelp.ithome.com.tw/articles/10120587" target="_blank" rel="noopener">實用網頁工具庫 - jQuery UI (上) 元件篇</a></p><h3 id="使陣列隨機排序"><a href="#使陣列隨機排序" class="headerlink" title="使陣列隨機排序"></a>使陣列隨機排序</h3><ul><li><p>使用<code>map</code>將陣列轉換為新陣列，創造vale、以及加上sort排序值(利用<code>Math.random()</code>來產生亂數)</p></li><li><p>使用sort隨機排序，剛剛的sort值是隨機產生，再一次使用sort，來使排的順序也隨機。</p></li><li><p>最後，因為排序後陣列中的物件是<code>{ value: , sort:  }</code>，而我們要讓畫面只顯示<code>value:</code>，所以再使用<code>map</code>將新陣列轉回只有該資料的陣列。</p><pre><code class="javascript">function createList() {[...richestPeople]  .map(a =&gt; ({ value: a, sort: Math.random() }))  .sort((a, b) =&gt; a.sort - b.sort)  .map(a =&gt; a.value)  .forEach((person, index) =&gt; {    const listItem = document.createElement(&#39;li&#39;);    listItem.setAttribute(&#39;data-index&#39;, index);    listItem.innerHTML = `      &lt;span class=&quot;number&quot;&gt;${index + 1}&lt;/span&gt;      &lt;div class=&quot;draggable&quot; draggable=&quot;true&quot;&gt;        &lt;p class=&quot;person-name&quot;&gt;${person}&lt;/p&gt;        &lt;i class=&quot;fas fa-grip-lines&quot;&gt;&lt;/i&gt;      &lt;/div&gt;    `;    listItems.push(listItem);    draggable_list.appendChild(listItem);  });addEventListeners();}</code></pre><p><a href="https://shubo.io/javascript-random-shuffle/" target="_blank" rel="noopener">[筆記] 如何正確實作 JavaScript Array Random Shuffle 亂數排序演算法</a><br><a href="https://www.delftstack.com/zh-tw/howto/javascript/shuffle-array-javascript/" target="_blank" rel="noopener">在 JavaScript 中對一個陣列進行隨機化或洗牌</a></p></li></ul><hr><h3 id="jquery-ui"><a href="#jquery-ui" class="headerlink" title="jquery ui"></a>jquery ui</h3><pre><code class="javascript">//https://stackoverflow.com/questions/6426795/what-is-disableselection-used-for-in-jquery-uifunction dragdrop() {  $(&quot;#draggable-list&quot;).sortable({    //connectWith: &quot;ul&quot;,    delay: 300,    distance: 15,    //number: &quot;span:not(.number)&quot;,    iframeFix: true,  }).disableSelection();}</code></pre><hr><h3 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h3><p><a href="https://www.0to255.com/f2e8cf" target="_blank" rel="noopener">0-255</a><br><a href="https://webgradients.com/" target="_blank" rel="noopener">漸層顏色</a><br><a href="https://coolors.co/palettes/trending" target="_blank" rel="noopener">colors</a><br><a href="https://stackoverflow.com/questions/34494873/why-is-my-jquery-selector-returning-a-n-fn-init0-and-what-is-it" target="_blank" rel="noopener">Why is my JQuery selector returning a n.fn.init[0], and what is it?</a></p>]]></content>
      
      
      <categories>
          
          <category> JS實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> drag&amp;drop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS實作- musicPlayer</title>
      <link href="/2021/01/15/js-musicPlayer/"/>
      <url>/2021/01/15/js-musicPlayer/</url>
      
        <content type="html"><![CDATA[<h2 id="觀察須製作的功能"><a href="#觀察須製作的功能" class="headerlink" title="觀察須製作的功能"></a>觀察須製作的功能</h2><p><a href="https://eva813.github.io/Eva_portfolio/musicPlayer/musicPlayer.html" target="_blank" rel="noopener">成品</a></p><ol><li>播放器API的樣式</li></ol><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio" target="_blank" rel="noopener">&lt;audio&gt;: The Embed Audio element</a></p><ol start="2"><li>播放時，左方的圓型圖示會旋轉。</li></ol><ul><li>先於css檔案製作符合動畫的class</li><li>在js時，依照符合的情況加入該class</li></ul><p><img src="https://i.imgur.com/3LBdMiU.png" alt=""></p><ol start="3"><li>播放時，上方會跳出播放歌曲的名稱。</li></ol><ul><li>先於css檔案製作符合動畫的class，設定<code>opacity</code>1或0，<code>translateY</code>位置的移動</li><li>在js時，依照符合的情況加入該class</li></ul><p><img src="https://i.imgur.com/U3dx7yG.png" alt=""></p><ol start="4"><li>左右按鍵可以更換曲目，同時圖片會更換</li></ol><ul><li>設定陣列，使歌曲與圖片相符</li><li>並讓前後的跳轉鍵，依照順序或條件來變化</li></ul><p><img src="https://i.imgur.com/NuxfsOb.png" alt=""></p><hr><h2 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h2><h3 id="跳轉按鍵"><a href="#跳轉按鍵" class="headerlink" title="跳轉按鍵"></a>跳轉按鍵</h3><ul><li>播放鍵、前/後跳轉的按鈕 </li></ul><pre><code class="html">&lt;div class=&quot;nav&quot;&gt;        &lt;button id=&quot;prev&quot; class=&quot;action-btn&quot;&gt;          &lt;i class=&quot;fas fa-backward&quot;&gt;&lt;/i&gt;        &lt;/button&gt;        &lt;button id=&quot;play&quot; class=&quot;action-btn  action-btn-big&quot;&gt;          &lt;i class=&quot;fas fa-play&quot;&gt;&lt;/i&gt;        &lt;/button&gt;        &lt;button id=&quot;next&quot; class=&quot;action-btn&quot;&gt;          &lt;i class=&quot;fas fa-forward&quot;&gt;&lt;/i&gt;        &lt;/button&gt;&lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/w1bpDjr.png" alt=""></p><h2 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h2><h3 id="背景顏色"><a href="#背景顏色" class="headerlink" title="背景顏色"></a>背景顏色</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient()" target="_blank" rel="noopener">linear-gradient()</a></p><pre><code class="css">/* 傾斜度\顏色、從哪個位置開始 */  background-image:linear-gradient(0deg  ,rgb(247, 247, 247,1) 23.8%,  rgba(252,221,221,1) 92% );</code></pre><p><img src="https://i.imgur.com/Xb5PpmY.png" alt=""></p><h2 id="圖片圓形以及旋轉"><a href="#圖片圓形以及旋轉" class="headerlink" title="圖片圓形以及旋轉"></a>圖片圓形以及旋轉</h2><pre><code class="css">.img-container{  position: relative;  width: 110px;}/*圖片圓形*/.img-container img{  border-radius: 50%;  object-fit: cover;/*填滿元素的寬度及高度(維持原比例)，通常會剪掉部分的物件*/ height: 110px; width: inherit; /*繼承自父層的寬度屬性值。*/ position:absolute; bottom: 0; left: 0; animation: rotate 3s linear infinite; animation-play-state: paused;}/* 播放class的製作 */.music-container.play .img-container img{ animation-play-state:running;}@keyframes rotate{  from{    transform: rotate(0deg);  }  to {    transform: rotate(360deg);  }}</code></pre><ul><li>使用animation@keyframe<br><a href="https://wcc723.github.io/development/2020/10/11/img-cover/" target="_blank" rel="noopener">新手前端也不該犯的錯：圖片變形</a></li></ul><p><img src="https://i.imgur.com/RfUz8Pk.png" alt=""></p><ul><li>在圖片中間加入圓形點，以看起來像光碟樣式</li></ul><pre><code class="css">.img-container::after{  content: &#39;&#39;;  border-radius: 50%;  background-color: #fff;  position: absolute;  left: 50%;  bottom: 100%;  width: 25px;  height: 25px;  transform: translate(-50%,50%);}</code></pre><p><img src="https://i.imgur.com/HlnWKJb.png" alt=""></p><h3 id="播放進度條的製作"><a href="#播放進度條的製作" class="headerlink" title="播放進度條的製作"></a>播放進度條的製作</h3><ol><li>標題<pre><code class="css">.music-info{background-color: rgba(255,255,255,.5);border-radius:15px 15px 0 0 ;position: absolute;top: 0;left: 20px;opacity: 0;transform: translateY(0%);transition: transform 0.3s ease-in,opacity 0.3s ease-in;z-index: 0;}</code></pre></li></ol><p>.music-container.play .music-info{<br>  opacity: 1;<br>   transform: translateY(-100%);<br>}</p><pre><code>* 將曲目標題設置背景、圓角* 利用 transfor、opacity來呈現位置的變化![](https://i.imgur.com/icBK0qt.png)* 修改標題位置```css= /*放入.music-info之中*/ width: calc(100% - 40px);  padding: 10px 10px 10px 150px;</code></pre><h4 id="calc"><a href="#calc" class="headerlink" title="calc()"></a><code>calc()</code></h4><p>calc() 的運算式一樣是按照先乘除後加減進行計算<br> width: calc(100% - 40px);<br>/* 意思是 100% 的寬度 - 去 40px */<br><a href="https://5xruby.tw/posts/css-calc/" target="_blank" rel="noopener">CSS： calc() 數值運算</a></p><p><img src="https://i.imgur.com/er3G6Wd.png" alt=""></p><pre><code class="css">.music-info h4{margin: 0;}</code></pre><p><img src="https://i.imgur.com/qiWmxmu.png" alt=""></p><p>2.進度條（progress）</p><pre><code class="css">.progress-container{  background-color: #fff;  border-radius: 5px;  height: 4px;  width: 100%;  margin: 10px 0;  cursor: pointer;}.progress{  background-color: #fe8daa; border-radius: 5px;  height: 4px;  width: 0%;  transition: width .1s linear ;}</code></pre><p><img src="https://i.imgur.com/uPUHWcM.png" alt=""></p><h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><h3 id="1-音樂播放鍵-播放與停止"><a href="#1-音樂播放鍵-播放與停止" class="headerlink" title="1.音樂播放鍵(播放與停止)"></a>1.音樂播放鍵(播放與停止)</h3><ul><li>分別有兩個函式：<code>playMusic()</code> 、<code>pauseMusic()</code></li><li>在css設定<code>.play</code>的css，並於js綁定事件，加入css的效果(使圖片如同轉盤，會旋轉)</li><li>在icon的部分：在播放時：為暫停鍵圖示;在暫停時：為播放鍵的圖示</li><li>透過play()、pause()，讓音源播放與暫停</li></ul><h3 id="play-、pause"><a href="#play-、pause" class="headerlink" title="play()、pause()"></a><code>play()</code>、<code>pause()</code></h3><p>因為play()、pause()是DOM元素，不是jQuery的function，而要用jQuery取得DOM元素<br><code>$(&#39;#audio&#39;).get(0).play()</code> =&gt;<code>$(&#39;#audio&#39;)[0].play()</code><br><code>$(&#39;#audio&#39;).get(0).pause()</code> =&gt;<code>$(&#39;#audio&#39;)[0].pause()</code></p><p>參考資料：<br><a href="https://learn.jquery.com/using-jquery-core/faq/how-do-i-pull-a-native-dom-element-from-a-jquery-object/" target="_blank" rel="noopener">How do I pull a native DOM element from a jQuery object?</a><br><a href="https://stackoverflow.com/questions/4646998/play-pause-html-5-video-using-jquery" target="_blank" rel="noopener">Play/pause HTML 5 video using JQuery</a></p><pre><code class="javascript">//播放音樂function playMusic() {  $(&#39;.music-container&#39;).addClass(&#39;play&#39;);  $(&#39;#play&#39;).find(&#39;i&#39;).removeClass(&#39;fa-play&#39;);  $(&#39;#play&#39;).find(&#39;i&#39;).addClass(&#39;fa-pause&#39;);  $(&#39;#audio&#39;).get(0).play();};</code></pre><pre><code class="javascript">//停止音樂function pauseMusic() {  $(&#39;.music-container&#39;).removeClass(&#39;play&#39;);  $(&#39;#play&#39;).find(&#39;i&#39;).addClass(&#39;fa-play&#39;);  $(&#39;#play&#39;).find(&#39;i&#39;).removeClass(&#39;fa-pause&#39;);  $(&#39;#audio&#39;).get(0).pause();}</code></pre><ul><li><h4 id="綁定事件："><a href="#綁定事件：" class="headerlink" title="綁定事件："></a>綁定事件：</h4>如果音樂是播放狀態的話，就執行<code>pauseMusic()</code>，反之，音樂不處於波方時，執行<code>playMusic()</code><pre><code class="javascript">$(&#39;#play&#39;).click(function (e) {  var hasPlay = $(&#39;#music-container&#39;).hasClass(&#39;play&#39;);  //var a = $(&#39;#audio&#39;).paused;  if (hasPlay) {    pauseMusic();  } else {    playMusic();  }});</code></pre></li></ul><pre><code>### 2.載入音樂* 將歌曲名稱建立陣列，並將此回傳到建立的函式中* 設定預設的索引`let songIndex = 1`* 使用 attr( 屬性名, 屬性值 )，獲取屬性的值，在這部分，透過歌曲名稱來取得歌曲與照片```javascriptvar songs_name = [&#39;hey&#39;, &#39;summer&#39;, &#39;ukulele&#39;];let songIndex = 1;function loadSongs(song) {  //console.log(song);  $(&#39;#title&#39;).text(song);  $(&#39;#audio&#39;).attr(&#39;src&#39;, `music/${song}.mp3`);  $(&#39;#cover&#39;).attr(&#39;src&#39;, `img/${song}.jpg`);}// Initially load song details into DOMloadSongs(songs_name[songIndex]);</code></pre><h4 id="綁定於下一首、前一首的圖示被點擊時"><a href="#綁定於下一首、前一首的圖示被點擊時" class="headerlink" title="綁定於下一首、前一首的圖示被點擊時"></a>綁定於下一首、前一首的圖示被點擊時</h4><pre><code class="javascript">$(&#39;#next&#39;).click(nextSong)  $(&#39;#prev&#39;).click(function () { prevSong();  });</code></pre><ul><li><p>查看函式回傳</p><pre><code class="javascript">loadSongs(songs_name);</code></pre><p><img src="https://i.imgur.com/je9hXJY.png" alt=""></p></li><li><p>要抓取到該索引</p><pre><code class="javascript">loadSongs(songs_name[songIndex]);</code></pre><p><img src="https://i.imgur.com/5not1Ji.png" alt=""><br>此段落執行時，出現問題：<br><img src="https://i.imgur.com/dj4H5hb.png" alt=""></p></li><li><p>搜尋到的處理方式：在html的<code>head</code><link rel="shortcut icon" href="#"><br><a href="https://stackoverflow.com/questions/31075893/im-getting-favicon-ico-error/31329574" target="_blank" rel="noopener">I’m getting favicon.ico error</a></p></li></ul><p>參考資料：<br><a href="https://iter01.com/470327.html" target="_blank" rel="noopener">jquery prop和attr的區別</a><br><a href="https://cythilya.github.io/2017/09/10/jquery-attr-vs-prop/" target="_blank" rel="noopener">jQuery .attr() vs .prop()</a></p><h3 id="3-左右鍵的跳轉"><a href="#3-左右鍵的跳轉" class="headerlink" title="3.左右鍵的跳轉"></a>3.左右鍵的跳轉</h3><ul><li>下一首歌曲，與跳至前一首歌曲，兩個函式的撰寫有異曲同工之妙，只有在設條條件上的差異。</li><li><code>nextSong()</code>:設定條件為歌曲索引<code>songIndex</code>比 歌曲陣列長度-1<code>songs_name.length - 1</code>還要小，我們就要將索引+1。<ul><li>例如這裏預設的索引為1，所以在點擊當下，判斷&lt;<code>songs_name.length - 1</code>，所以需加1，索引變成2，跳至下一首 ‘ukulele’</li></ul></li><li>prevSong()：設定條件為歌曲索引<code>songIndex</code>比0大，就要索引-1，跳轉至上一首歌曲。若沒符合的話，索引就等於<code>songs_name.length - 1</code></li></ul><pre><code class="javascript">//歌曲的索引，如果比歌曲總數-1還小，就將索引加1，跳轉下一首function nextSong() {  if (songIndex &lt; songs_name.length - 1) { songIndex += 1; } else {    songIndex = 0  };  loadSongs(songs_name[songIndex]);  playMusic();}//跳轉前一首function prevSong() {  //如果索引沒有大於0。就會播索引[2]  if (songIndex &gt; 0) { songIndex -= 1; } else {    songIndex = songs_name.length - 1;  };  loadSongs(songs_name[songIndex]);  playMusic();}</code></pre><p>參考資料：<br><a href="https://www.geeksforgeeks.org/create-a-music-player-using-javascript/" target="_blank" rel="noopener">Create a Music Player using JavaScript</a></p><h3 id="4-點擊進度條，可以跳轉音樂位置"><a href="#4-點擊進度條，可以跳轉音樂位置" class="headerlink" title="4.點擊進度條，可以跳轉音樂位置"></a>4.點擊進度條，可以跳轉音樂位置</h3><h4 id="1-顯示粉色進度條"><a href="#1-顯示粉色進度條" class="headerlink" title="(1).顯示粉色進度條"></a>(1).顯示粉色進度條</h4><ul><li>duration：音源的時間(一樣是使用get方式取得)</li><li>currentTime：音樂播放的當前位置（以秒計）</li><li>progressBar：進度條</li><li>計算百分比：<code>(currentTime / duration) * 100</code></li></ul><pre><code class="javascript">//顯示進度條//為何取[0]function handleProgress() {  var duration = $(&#39;#audio&#39;).get(0).duration;  //console.log(duration)  var currentTime = $(&#39;#audio&#39;)[0].currentTime;  //console.log(currentTime)  const progressBar = $(&#39;#progress&#39;);  const progressPercent = (currentTime / duration) * 100;  //currentTime目前播放時間去與影片長度duration轉換成百分比，即可得到目前播放時間的百分比  progressBar.css(&#39;width&#39;, `${progressPercent}%`);};</code></pre><h4 id="2-點擊進度條，會跳轉到該位置播放"><a href="#2-點擊進度條，會跳轉到該位置播放" class="headerlink" title="(2).點擊進度條，會跳轉到該位置播放"></a>(2).點擊進度條，會跳轉到該位置播放</h4><ul><li>width:獲取該進度條容器的寬度</li><li>抓取點擊位置：<ul><li>e.pageX:取得滑鼠在頁面裡的位置</li><li>elm.offset().left:絕對座標X軸</li></ul></li><li>將（點擊位置除以進度條的總長）乘以 音樂的時間長度，就可以取得點擊的時間位置<code>theTime = ((xPos / width))* duration;</code></li><li>最後現在時間設為，計算好的點擊時間</li></ul><pre><code class="javascript">//點擊進度條//https://ithelp.ithome.com.tw/articles/10194871//https://tools.wingzero.tw/article/sn/102$(&#39;#progress-container&#39;).click(function (e) {  const width = $(&#39;#progress-container&#39;).width(); //216.25  //console.log(width);  //取得點擊位置  var elm = $(this);  var xPos = e.pageX - elm.offset().left;  //console.log(xPos);  var duration = $(&#39;#audio&#39;)[0].duration;  var theTime = ((xPos / width))    * duration;  //console.log(theTime);  $(&#39;#audio&#39;)[0].currentTime = theTime;});</code></pre><p>執行過程，利用console來查看</p><pre><code class="javascript">console.log(e.pageX);console.log(elm.offset().left);console.log(xPos)</code></pre><p>參考資料：<br><a href="https://tools.wingzero.tw/article/sn/102" target="_blank" rel="noopener">取得滑鼠位置、元素位置與區塊內的相對位置</a></p><h3 id="5-歌曲播完後，換下一首"><a href="#5-歌曲播完後，換下一首" class="headerlink" title="5.歌曲播完後，換下一首"></a>5.歌曲播完後，換下一首</h3><pre><code class="javascript">  $(&#39;#audio&#39;).on(&#39;ended&#39;,nextSong);</code></pre><p>參考資料：<br><a href="https://stackoverflow.com/questions/39325637/audio-auto-play-next-song-when-previous-is-finished/52228798" target="_blank" rel="noopener">audio auto play next song when previous is finished</a></p><h2 id="6-增加隨機的變換背景色彩"><a href="#6-增加隨機的變換背景色彩" class="headerlink" title="6.增加隨機的變換背景色彩"></a>6.增加隨機的變換背景色彩</h2><ul><li>色彩為0-256;而因為想取的較亮的色系，所以取64-256<ul><li><code>Math.random()</code> 會回傳一個偽隨機小數 (pseudo-random) 介於0到1之間(包含 0，不包含1) </li><li><code>Math.floor()</code>會將所有的小數無條件捨去到比自身小的最大整數</li><li><code>Math.floor(Math.random() * 255) + 64</code>就會取得64 to 256</li></ul></li><li>宣告變數<code>bgColor</code>為rdba(red,green,blue,a)</li><li>最後將此函式，放入<code>loadSongs()</code>函式當中，每次播放、跳轉歌曲，同時背景顏色也會改變<br><img src="https://i.imgur.com/piYCbc5.png" alt=""></li></ul><pre><code class="javascript">function random_bg_color() {  // Get a random number between 64 to 256   // (for getting lighter colors)   let red = Math.floor(Math.random() * 255) + 64;  let green = Math.floor(Math.random() * 255) + 64;  let blue = Math.floor(Math.random() * 255) + 64;  let a = 0.5  // Construct a color withe the given values   let bgColor = &quot;rgba(&quot; + red + &quot;, &quot; + green + &quot;, &quot; + blue + &quot;, &quot; + a + &quot;)&quot;;  var bg = $(document.body).css(&#39;background&#39;, `${bgColor}`);  // Set the background to the new color   bg = bgColor;  console.log(bg)} </code></pre><p>參考資料：<br><a href="https://www.geeksforgeeks.org/create-a-music-player-using-javascript/" target="_blank" rel="noopener">Create a Music Player using JavaScript</a><br><a href="https://stackoverflow.com/questions/20790579/wont-math-floormath-random-255-generate-uneven-probabilities" target="_blank" rel="noopener">Won’t Math.floor(Math.random() * 255) generate uneven probabilities?</a><a href="https://ithelp.ithome.com.tw/articles/10197904" target="_blank" rel="noopener">[筆記][JavaScript]用Math.random()取得亂數的技巧</a></p>]]></content>
      
      
      <categories>
          
          <category> JS實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> append </tag>
            
            <tag> jQuery  </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS實作- 表單驗證</title>
      <link href="/2021/01/13/form-validator/"/>
      <url>/2021/01/13/form-validator/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/Vhxlk8D.png" alt=""></p><h2 id="觀察功能"><a href="#觀察功能" class="headerlink" title="觀察功能"></a>觀察功能</h2><ol><li>製作一個會員申請的表單<ul><li>帳號</li><li>email</li><li>密碼</li></ul></li><li>輸入框的顏色變化</li><li>判斷條件的設置</li></ol><h2 id="任務拆解"><a href="#任務拆解" class="headerlink" title="任務拆解"></a>任務拆解</h2><h3 id="抓出要互動的元素"><a href="#抓出要互動的元素" class="headerlink" title="抓出要互動的元素"></a>抓出要互動的元素</h3><pre><code class="javascript">const form = document.querySelector(&#39;#form&#39;);const username = document.querySelector(&#39;#username&#39;);const email = document.querySelector(&#39;#email&#39;);const password = document.querySelector(&#39;#password&#39;);const password2 = document.querySelector(&#39;#password2&#39;);</code></pre><ul><li>獲取物件層次中的父物件</li><li>針對指定元素取得或設置指定的class</li></ul><pre><code class="javascript">//show input error messagefunction showError(input, message) {  const formControl = input.parentElement;  formControl.className = &#39;form-control error&#39;;}form.addEventListener(&#39;submit&#39;, function (e) {  e.preventDefault();  if (username.value === &#39;&#39;) {    showError(username, &#39;Username is required&#39;);  } else {    showSuccess(username);  }})</code></pre><pre><code class="javascript">const small = formControl.querySelector(&#39;small&#39;);  small.innerText = &#39;Username is required&#39;;</code></pre><ul><li>修改顯示文字</li></ul><p><img src="https://i.imgur.com/NvhXJk8.png" alt=""></p><h4 id="成功輸入"><a href="#成功輸入" class="headerlink" title="成功輸入"></a>成功輸入</h4><pre><code class="javascript">//show success outlinefunction showSuccess(input) {  const formControl = input.parentElement;  formControl.className = &#39;form-control success&#39;;}</code></pre><h3 id="複製相同條件判斷"><a href="#複製相同條件判斷" class="headerlink" title="複製相同條件判斷"></a>複製相同條件判斷</h3><ul><li>事件為點擊送出之後，會進行條件判斷</li></ul><pre><code class="javascript">//event listenerform.addEventListener(&#39;submit&#39;, function (e) {  e.preventDefault();  if (username.value === &#39;&#39;) {    showError(username, &#39;Username is required&#39;);  } else {    showSuccess(username);  };  if (email.value === &#39;&#39;) {    showError(email, &#39;Email is required&#39;);  } else {    showSuccess(email);  };  if (password.value === &#39;&#39;) {    showError(password, &#39;Password is required&#39;);  } else {    showSuccess(password);  };  if (password2.value === &#39;&#39;) {    showError(password2, &#39;Password 2 is required&#39;);  } else {    showSuccess(password2);  };})</code></pre><p><img src="https://i.imgur.com/shKtSSS.png" alt=""></p><h3 id="設定符合的驗證"><a href="#設定符合的驗證" class="headerlink" title="設定符合的驗證"></a>設定符合的驗證</h3><ul><li>email的輸入應有規範樣式</li><li>使用正則表達式</li></ul><p><img src="https://i.imgur.com/vVVWyGG.png" alt=""></p><pre><code class="javascript">//check email is valid//js email regex//https://ithelp.ithome.com.tw/articles/10094951function isValiEmail(email) {  const re = /^(([^&lt;&gt;()[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;  return re.test(String(email).toLowerCase());}// if (email.value === &#39;&#39;) {    showError(email, &#39;Email is required&#39;);  } else if (!isValiEmail(email.value)) {    showError(email, &#39;Email is not valid&#39;);  }  else {    showSuccess(email);  };</code></pre><p><img src="https://i.imgur.com/gdkHO9O.png" alt=""></p><h4 id="整合簡化-gt-forEach"><a href="#整合簡化-gt-forEach" class="headerlink" title="整合簡化 =&gt;forEach"></a>整合簡化 =&gt;forEach</h4><pre><code class="javascript">//Check required fieldsfunction checkRequired(inputArr) {  inputArr.forEach(function (input) {    if (input.value.trim() === &#39;&#39;) {      showError(input, &#39;is required&#39;);    } else {      showSuccess(input);    }  });}</code></pre><ul><li>修改showError，套入名稱</li></ul><pre><code class="javascript">if (input.value.trim() === &#39;&#39;) {      //console.log(input.id);//會顯示input的所有id      showError(input, `${input.id}is required`);</code></pre><h3 id="將getFieldName-function拉出"><a href="#將getFieldName-function拉出" class="headerlink" title="將getFieldName() function拉出"></a>將getFieldName() function拉出</h3><ul><li>製作訊息的第一個字母大寫</li></ul><pre><code class="javascript">//Check required fieldsfunction checkRequired(inputArr) {  inputArr.forEach(function (input) {    if (input.value.trim() === &#39;&#39;) {      //console.log(input.id);//會顯示input的所有id      showError(input, `${getFieldName(input)} is required`);    } else {      showSuccess(input);    }  });}//getFieldNamefunction getFieldName(input) {  return input.id.charAt(0).toUpperCase() + input.id.slice(1);  //將第一個字charAt(0)，變大寫，並再接續後面的字slice(1)}</code></pre><ul><li>charAt()从一个字符串中返回指定的字符,<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank" rel="noopener">String.prototype.charAt()</a></li></ul><h2 id="長度檢查"><a href="#長度檢查" class="headerlink" title="長度檢查"></a>長度檢查</h2><pre><code class="javascript">// Check input lengthfunction checkLength(input, min, max) {  if (input.value.length &lt; min) {    showError(      input,      `${getFieldName(input)} must be at least ${min} characters`    );  } else if (input.value.length &gt; max) {    showError(      input,      `${getFieldName(input)} must be less than ${max} characters`    );  } else {    showSuccess(input);  }}</code></pre><p><img src="https://i.imgur.com/sAvU95T.png" alt=""></p><h3 id="密碼檢查"><a href="#密碼檢查" class="headerlink" title="密碼檢查"></a>密碼檢查</h3><pre><code class="javascript">// check password matchfunction checkPasswordMatch(input1, input2) {  if (input1.value !== input2.value) {    showError(input2, &#39;Password do not match&#39;)  }}</code></pre><p><img src="https://i.imgur.com/62UwLS7.png" alt=""></p><p>參考資料：<br><a href="https://medium.com/change-or-die/javascript%E5%88%9D%E5%AD%B8-dom%E5%B8%B8%E7%94%A8%E5%B1%AC%E6%80%A7%E8%88%87%E6%96%B9%E6%B3%95-ef851afdb65a" target="_blank" rel="noopener">JavaScript初學：DOM常用屬性與方法</a></p>]]></content>
      
      
      <categories>
          
          <category> JS實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>認識什麼是LocalStorage</title>
      <link href="/2021/01/10/localstorage/"/>
      <url>/2021/01/10/localstorage/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/qCvmh4b.png" alt=""></p><h2 id="認識-Web-Storage："><a href="#認識-Web-Storage：" class="headerlink" title="認識 Web Storage："></a>認識 Web Storage：</h2><p>HTML5 的 Web Storage 是一種可讓網頁將資料儲存於本地端的技術，其作用如同 cookie。</p><p>Cookie 儲存空間很小，最多僅能儲存4KB的資料。<br>HTML5 Web Storage 的儲存空間則大得多(儲存資料容量至少5MB以上)。</p><p><img src="https://i.imgur.com/tq8wugy.png" alt=""></p><h2 id="localStorage-與-sessionStorage"><a href="#localStorage-與-sessionStorage" class="headerlink" title="localStorage 與  sessionStorage"></a>localStorage 與  sessionStorage</h2><p>Web Storage 提供兩個物件可以將資料存在 client 端，一種是 localStorage，另一種是 sessionStorage</p><ul><li>localStorage:可以跨瀏覽器分頁（tab）存取，且資料存取沒有期限，除非手動從本地端清除。</li><li>sessionStorage:生命週期較短，每次分頁或瀏覽器關掉後就會清除。</li></ul><p>基本操作：</p><ul><li>設置資料：<code>localStorage.setItem(key, value)</code></li><li>取得資料：<code>let storageValue = localStorage.getItem(key, value)</code></li><li>清除資料：<code>localStorage.removeItem(key)</code></li><li>清除全部資料：<code>localStorage.clear()</code><blockquote><p>只要將localStorage替換sessionStorage即可</p></blockquote></li></ul><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>儲存在本地端的資料，格式為 key : value，需注意的是「value 的型態只有 String」!</p><h2 id="找到儲存的資料"><a href="#找到儲存的資料" class="headerlink" title="找到儲存的資料"></a>找到儲存的資料</h2><ul><li>在 DevTools console </li></ul><p><img src="https://i.imgur.com/jZNIas5.png" alt=""></p><p><img src="https://i.imgur.com/7SkvJ8q.png" alt=""></p><p><img src="https://i.imgur.com/ZoLQ4yV.png" alt=""></p><h2 id="JSON-字串轉換"><a href="#JSON-字串轉換" class="headerlink" title="JSON 字串轉換"></a>JSON 字串轉換</h2><pre><code class="javascript=">var arr = [&#39;1&#39;,&#39;2&#39;,&#39;c&#39;];console.log( arr + &quot; is &quot; + typeof(arr));// 1,2,c is object</code></pre><h4 id="1-轉換成字串-JSON-stringify"><a href="#1-轉換成字串-JSON-stringify" class="headerlink" title="1.轉換成字串 JSON.stringify"></a>1.轉換成字串 JSON.stringify</h4><pre><code class="javascript=">var arrToStr = JSON.stringify(arr);</code></pre><p><img src="https://i.imgur.com/0lfiqLV.png" alt=""></p><h4 id="2-轉換回原本格式-JSON-parse"><a href="#2-轉換回原本格式-JSON-parse" class="headerlink" title="2.轉換回原本格式 JSON.parse"></a>2.轉換回原本格式 JSON.parse</h4><ul><li>會把一個JSON字串轉換成 JavaScript的數值或是物件</li></ul><pre><code class="javascript">var parse = JSON.parse(arrToStr);</code></pre><p><img src="https://i.imgur.com/3chwLJF.png" alt=""></p><p>參考資料：<br><a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/javascript-localstorage-%E7%9A%84%E4%BD%BF%E7%94%A8-e0da6f402453" target="_blank" rel="noopener">[JavaScript] localStorage 的使用</a><br><a href="https://yakimhsu.com/project/project_w7_storage.html" target="_blank" rel="noopener">[第七週] 瀏覽器資料儲存 - Cookie、LocalStorage、SessionStorage</a><br><a href="https://ithelp.ithome.com.tw/articles/10223253" target="_blank" rel="noopener">[Day16] JavaScript - 前端資料存</a><br><a href="https://tools.wingzero.tw/article/sn/28" target="_blank" rel="noopener">HTML5 的 Web Storage- local storage 與 session storage</a><br><a href="https://ithelp.ithome.com.tw/articles/10203525" target="_blank" rel="noopener">Day20 localStorage、sessionStorage</a><br><a href="https://medium.com/itsems-frontend/javascript-json-stringify-and-json-parse-7a1251d3824c" target="_blank" rel="noopener">[JavaScript] JSON.stringify() and JSON.parse()：變 JSON 和變物件</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> LocalStorage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS實作- expense tracker 記帳簿</title>
      <link href="/2021/01/10/js-expenseTracker/"/>
      <url>/2021/01/10/js-expenseTracker/</url>
      
        <content type="html"><![CDATA[<p>完成後的<a href="https://eva813.github.io/Eva_portfolio/expenseTracker/expenseTracker.html" target="_blank" rel="noopener">成品</a><br><img src="https://i.imgur.com/VSjpRSa.png" alt=""></p><h1 id="觀察須製作的功能"><a href="#觀察須製作的功能" class="headerlink" title="觀察須製作的功能"></a>觀察須製作的功能</h1><ol><li>重新整理網頁後，保有過去執行的狀態：localstorage<ul><li>實作內有使用:</li><li>localstorage:setItem,getItem</li><li>jason.stringfy/jason.parse</li></ul></li></ol><p><img src="https://i.imgur.com/abUVHGM.png" alt=""></p><p><img src="https://i.imgur.com/c53IDMj.png" alt=""></p><ol start="2"><li>在new transation輸入資料後，會將資料傳入history中<ul><li>add transation之後，頁面不會刷新(spa)(e.preventdefault)</li></ul></li><li>摸到history中的項目，會出現刪除符號，點擊後刪除</li></ol><p><img src="https://i.imgur.com/X06EsA4.png" alt=""></p><ol start="4"><li>輸入的金額，會顯示於上方income、expense，並且計算總額<ul><li>有正負值</li><li>計算收入、花費<br><img src="https://i.imgur.com/uofQVuf.png" alt=""></li></ul></li></ol><hr><h1 id="呈現完整語法"><a href="#呈現完整語法" class="headerlink" title="呈現完整語法"></a>呈現完整語法</h1><pre><code class="javascript">$(document).ready(function () {  //預設值的設置，取得存在本地的資料或是空陣列  var transactions = JSON.parse(localStorage.getItem(&#39;Transactions&#39;)) || [];  //陣列初始  if (transactions.length &gt; 0) {    initHistory(transactions);  }  //點擊按鈕的事件  $(&#39;.btn&#39;).click(function (e) {    e.preventDefault();    //console.log(&#39;click&#39;);    //取得表格中的值    const text_val = $(&#39;#text&#39;).val();    const amount_val = $(&#39;#amount&#39;).val();    let id = generateID();    addTransactions(id, text_val, amount_val, transactions);    //推入陣列    transactions.push({      id: id,      name: text_val,      amount: amount_val    })    localStorage.setItem(&#39;Transactions&#39;, JSON.stringify(transactions));  })  updateValue(transactions);});//在list中插入function addTransactions(id, name, amount, transactions) {  console.log(&#39;amount:&#39;, amount);  const Transaction_str = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;).appendTo(&#39;#list&#39;);  Transaction_str.addClass(amount &lt; 0 ? &#39;minus&#39; : &#39;plus&#39;);  Transaction_str.html(`${name}&lt;span&gt; ${amount}&lt;/span&gt;&lt;button class=&quot;delete-btn&quot;  data-id=&quot;${id}&quot;&gt;x&lt;/button&gt;`);  $(&#39;#list&#39;).append(Transaction_str);  $(&#39;#text&#39;).val(&#39;&#39;);  $(&#39;#amount&#39;).val(&#39;&#39;);  //刪除鈕 要交易交出後再綁事件  $(&#39;.delete-btn&#39;).last().click(function () {    $(this).parent().remove();    let id = $(this).data(&#39;id&#39;);    //console.log(id);    deleteFromLocalstorage(transactions, id); //要記得傳入id  });}//從localstorage刪除//要記得在參數放入idfunction deleteFromLocalstorage(transactions, id) {  transactions.forEach(function (item, index, arr) {    //console.log(&#39;item&#39;, item);    //console.log(&#39;index&#39;, index);    //console.log(&#39;arr&#39;, arr);    if (item.id === id) {      arr.splice(index, 1);    }  });  //迴圈刪除後，要儲存到localStorage才有確實刪去  localStorage.setItem(&#39;Transactions&#39;, JSON.stringify(transactions));}// Generate random IDfunction generateID() {  return Math.floor(Math.random() * 100000000);}//數值更新計算function updateValue(transactions) {  const amounts_arr = transactions.map(function (transaction) {    return transaction.amount  })  console.log(amounts_arr);  //計算加總   var total = 0;  $.each(amounts_arr, function () { total += parseFloat((this)) || 0; });  //傳回YOUR BALANCE  $(&#39;#balance&#39;).text(`$${total}`);  console.log(total);  //*************************** */  //從陣列找出&gt;0的值，放置income  //console.log(amounts)  var income = amounts_arr.filter(    function (item) {      return item &gt; 0    }  )  console.log(income);  var totalIncome = 0;  $.each(income, function () { totalIncome += parseFloat((this)) || 0; });  console.log(totalIncome); //回傳220  //傳回到income  $(&#39;#money-plus&#39;).text(`$${totalIncome}`);  //***************************** */  //從陣列找出&lt;0的值，放置income  var expense = amounts_arr.filter(    function (item) {      return item &lt; 0    }  )  console.log(expense);  var totalExpense = 0;  $.each(expense, function () { totalExpense += parseFloat((this)) || 0; });  console.log(totalExpense);  //傳回到expense  $(&#39;#money-minus&#39;).text(`$${totalExpense}`)}//initfunction initHistory(transactions) {  transactions.forEach(transaction =&gt; {    addTransactions(transaction.id, transaction.name, transaction.amount, transactions);  });  updateValue(transactions);}</code></pre><h1 id="各項目拆解："><a href="#各項目拆解：" class="headerlink" title="各項目拆解："></a>各項目拆解：</h1><h2 id="add-transations按下去之後，頁面不刷新，直接將資料傳入紀錄中"><a href="#add-transations按下去之後，頁面不刷新，直接將資料傳入紀錄中" class="headerlink" title="add transations按下去之後，頁面不刷新，直接將資料傳入紀錄中"></a><code>add transations</code>按下去之後，頁面不刷新，直接將資料傳入紀錄中</h2><pre><code class="javascript">$(document).ready(function () {  $(&#39;.btn&#39;).click(function () {    console.log(&#39;click&#39;);  })});//點擊後，有印出click，但很快的刷新頁面</code></pre><ul><li>加入<code>e.preventDefault();</code> 用來阻止預設動作的發生</li></ul><p><img src="https://i.imgur.com/4y0J1vA.png" alt=""></p><h2 id="讓transation輸入後顯示"><a href="#讓transation輸入後顯示" class="headerlink" title="讓transation輸入後顯示"></a>讓transation輸入後顯示</h2><pre><code class="javascript">$(document).ready(function () {  $(&#39;.btn&#39;).click(function (e) {    e.preventDefault();    console.log(&#39;click&#39;);    addTransactions(&#39;cash&#39;, &#39;200&#39;);  })});function addTransactions(name, amount) {  var Transaction_str = `&lt;li class=&#39;plus&#39; &gt;${name}&lt;span&gt; ${amount}&lt;/span&gt;&lt;button class=&quot;delete-btn&quot;&gt;x&lt;/button&gt;&lt;/li&gt;`  $(&#39;#list&#39;).append(Transaction_str);}//</code></pre><p><img src="https://i.imgur.com/Vh9uPvJ.png" alt=""></p><ul><li>提交之後清空<ul><li>選擇該輸入框，並利用<code>val()</code>，使內部的值清空</li></ul></li></ul><pre><code class="javascript"> $(&#39;#text&#39;).val(&#39;&#39;);  $(&#39;#amount&#39;).val(&#39;&#39;);</code></pre><p><img src="https://i.imgur.com/uKnX7fd.png" alt=""></p><h2 id="從表格中取得值"><a href="#從表格中取得值" class="headerlink" title="從表格中取得值"></a>從表格中取得值</h2><ul><li><p>製作按鈕的點擊事件，取得表格中的值</p></li><li><p>將值傳入函式的參數<code>addTransactions(text_val, amount_val);</code></p><pre><code class="javascript">$(document).ready(function () {$(&#39;.btn&#39;).click(function (e) {  e.preventDefault();  console.log(&#39;click&#39;);  //取得表格中的值  const text_val = $(&#39;#text&#39;).val();  const amount_val = $(&#39;#amount&#39;).val();  addTransactions(text_val, amount_val);})</code></pre></li></ul><p>});</p><pre><code>## 製作刪除紐* 原本的撰寫方式，為選到最後一個刪除鈕，並點擊加以刪除* 此方式造成，無法確實刪除資料```javascript$(&#39;.delete-btn&#39;).last().click(function () {    console.log(&#39;del&#39;);  })}</code></pre><p><img src="https://i.imgur.com/v7n8t3L.png" alt=""></p><ul><li><p>修改方式，只能綁定一筆transatin或是綁定最後一筆<br><img src="https://i.imgur.com/lhqdwYA.png" alt=""></p></li><li><p>查看若實現點擊後刪除，是會刪除什麼？</p><pre><code class="javascript">$(&#39;.delete-btn&#39;).last().click(function () {  console.log(this);})}</code></pre><p><img src="https://i.imgur.com/9dYre8g.png" alt=""></p></li><li><p>要刪除的是整筆資料，所以要去尋找他鄰近的元素</p><pre><code class="javascript">$(&#39;.delete-btn&#39;).last().click(function () {  $(this).parent().remove();})</code></pre></li></ul><h2 id="localstorage-執行"><a href="#localstorage-執行" class="headerlink" title="localstorage 執行"></a>localstorage 執行</h2><p>筆記補充：<a href="https://eva813.github.io/2021/01/10/localstorage/" target="_blank" rel="noopener">LocalStorage介紹</a></p><p>從此實作，可以看到它是一個陣列，裡面是物件</p><ul><li>設置一個空陣列</li><li>並將物件push進去</li></ul><pre><code class="javascript">//預設值的設置，取得存在本地的資料或是空陣列  var transactions = JSON.parse(localStorage.getItem(&#39;Transactions&#39;)) || [];   //推入陣列    transactions.push({      name: text_val,      amount: amount_val    })    localStorage.setItem(&#39;Transactions&#39;, JSON.stringify(transactions));</code></pre><p><img src="https://i.imgur.com/HC2XCpT.png" alt=""></p><p><img src="https://i.imgur.com/0b4mWW6.png" alt=""></p><ul><li>增加初始function<pre><code class="javascript">//initfunction initHistory(transactions) {transactions.forEach(transaction =&gt; {  addTransactions(transaction.name, transaction.amount);});</code></pre></li></ul><p>}</p><p>//將此函式放於 $(document).ready()之中</p><p>//陣列初始<br>  if (transactions.length &gt; 0) {<br>    initHistory(transactions);<br>  }</p><pre><code>![](https://i.imgur.com/dH3nJ6K.png)## 將transation刪除後，並沒有完全從localstorage刪除運用id來刪除* 從此段落：[localstorage 執行](#localstorage-執行)，圖片中的存取陣列可以看到，沒有設置id* id是在addTransactions使用```javascript// Generate random IDfunction generateID() {  return Math.floor(Math.random() * 100000000);}//floor：無條件捨去//ceil：無條件進位</code></pre><ul><li><p>在創造的陣列中\物件，都加入id</p><pre><code class="javascript"> const id = generateID();  addTransactions(id, text_val, amount_val);  //推入陣列  transactions.push({    id: id,    name: text_val,    amount: amount_val  })</code></pre></li></ul><pre><code>* 在addTransactions的函式中也要加入id```javascriptfunction addTransactions(id, name, amount) {  console.log(id, name, amount);}</code></pre><p><img src="https://i.imgur.com/sMtoogJ.png" alt=""></p><ul><li>在button加入data-id</li></ul><p>和資料有關的時候：data-原來欄位名稱</p><pre><code class="javascript">const Transaction_str = `&lt;li class=&#39;plus&#39; &gt;${name}&lt;span&gt; ${amount}&lt;/span&gt;&lt;button class=&quot;delete-btn&quot;  data-id=&quot;${id}&quot;&gt;x&lt;/button&gt;&lt;/li&gt;`</code></pre><p><img src="https://i.imgur.com/cmamimU.png" alt=""></p><p><img src="https://i.imgur.com/v8TQspA.png" alt=""></p><ul><li><p>確定點擊刪除鈕的時後，是有抓到該id</p><pre><code class="javascript">$(&#39;.delete-btn&#39;).last().click(function () {  $(this).parent().remove();  let id = $(this).data(&#39;id&#39;);  console.log(id);})</code></pre></li><li><p><code>let id = $(this).data(); 查看id時</code> 取得的是物件<br><img src="https://i.imgur.com/BeBkXAN.png" alt=""></p></li><li><p>應改為<br><img src="https://i.imgur.com/snvF7AX.png" alt=""></p></li></ul><p>此時還沒有真正刪除id，只是確定有抓到id :point_up_2: </p><p>jquery <code>data()</code>： 自定義屬性 (data attributes)，讓我們可以任意讀寫資料在元素上，而且不會影響頁面的 layout<br><a href="https://www.fooish.com/jquery/data.html" target="_blank" rel="noopener">jQuery Data</a></p><ul><li><h4 id="利用forEach、splice-刪除陣列內的資料"><a href="#利用forEach、splice-刪除陣列內的資料" class="headerlink" title="利用forEach、splice()刪除陣列內的資料"></a>利用forEach、splice()刪除陣列內的資料</h4><pre><code class="javascript">function deleteFromLocalstorage(transactions, id) {transactions.forEach(function (item, index, arr) {  //console.log(&#39;item&#39;, item);  //console.log(&#39;index&#39;, index);  //console.log(&#39;arr&#39;, arr);  if (item.id === id) {    arr.splice(index, 1);  }});//迴圈刪除後，要儲存到localStorage才有確實刪去localStorage.setItem(&#39;Transactions&#39;, JSON.stringify(transactions));}</code></pre></li></ul><ul><li>查看迴圈的資料<br><img src="https://i.imgur.com/FexS5lt.png" alt=""></li></ul><ul><li>確實刪除存在localstorage的資料<pre><code class="javascript">localStorage.setItem(&#39;Transactions&#39;, JSON.stringify(transactions));</code></pre></li></ul><h3 id="判斷輸入的數字大小，並給予class"><a href="#判斷輸入的數字大小，並給予class" class="headerlink" title="判斷輸入的數字大小，並給予class"></a>判斷輸入的數字大小，並給予class</h3><ul><li>放在addTransactions()函式之中</li></ul><pre><code class="javascript">const Transaction_str = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;).appendTo(&#39;#list&#39;);  Transaction_str.addClass(amount &lt; 0 ? &#39;minus&#39; : &#39;plus&#39;);  Transaction_str.html(`${name}&lt;span&gt; ${amount}&lt;/span&gt;&lt;button class=&quot;delete-btn&quot;  data-id=&quot;${id}&quot;&gt;x&lt;/button&gt;`);  $(&#39;#list&#39;).append(Transaction_str);</code></pre><p><img src="https://i.imgur.com/NYXCDtS.png" alt=""></p><h3 id="數值的更新"><a href="#數值的更新" class="headerlink" title="數值的更新"></a>數值的更新</h3><p><img src="https://i.imgur.com/EdCN1cd.png" alt=""></p><pre><code class="javascript">function updateValue(transactions) {  const amounts_arr = transactions.map(function (transaction) {    return transaction.amount  })  console.log(amounts_arr);  //計算加總   var total = 0;  $.each(amounts_arr, function () { total += parseFloat((this)) || 0; });  //傳回YOUR BALANCE  $(&#39;#balance&#39;).text(`$${total}`);  console.log(total);  //*************************** */  //從陣列找出&gt;0的值，放置income  //console.log(amounts)  var income = amounts_arr.filter(    function (item) {      return item &gt; 0    }  )  console.log(income);  var totalIncome = 0;  $.each(income, function () { totalIncome += parseFloat((this)) || 0; });  //console.log(totalIncome); //回傳220  //傳回到income  $(&#39;#money-plus&#39;).text(`$${totalIncome}`);  //***************************** */  //從陣列找出&lt;0的值，放置income  var expense = amounts_arr.filter(    function (item) {      return item &lt; 0    }  )  console.log(expense);  var totalExpense = 0;  $.each(expense, function () { totalExpense += parseFloat((this)) || 0; });  console.log(totalExpense);  //傳回到expense  $(&#39;#money-minus&#39;).text(`$${totalExpense}`)}</code></pre><ul><li>創造一個amount的陣列</li></ul><pre><code class="javascript">  const amounts_arr = transactions.map(function (transaction) {    return transaction.amount  })  console.log(amounts_arr);</code></pre><p><img src="https://i.imgur.com/sG0YS9J.png" alt=""></p><ul><li>計算加總數值<pre><code class="javascript">var total = 0;$.each(amounts_arr, function () { total += parseFloat((this)) || 0; });//傳回YOUR BALANCE$(&#39;#balance&#39;).text(`$${total}`);console.log(total);</code></pre></li></ul><pre><code>![](https://i.imgur.com/7c2MqFo.png)![](https://i.imgur.com/CCXAirK.png)* income 收入加總計算```javascript//從陣列找出&gt;0的值，放置income  //console.log(amounts)  var income = amounts_arr.filter(    function (item) {      return item &gt; 0    }  )  console.log(income);  var totalIncome = 0;  $.each(income, function () { totalIncome += parseFloat((this)) || 0; });  //console.log(totalIncome); //回傳220  //傳回到income  $(&#39;#money-plus&#39;).text(`$${totalIncome}`);</code></pre><p><img src="https://i.imgur.com/9d8Hx3Y.png" alt=""></p><p><img src="https://i.imgur.com/KXRi18A.png" alt=""></p><ul><li>expense支出加總</li></ul><pre><code class="javascript">//從陣列找出&lt;0的值，放置expense  var expense = amounts_arr.filter(    function (item) {      return item &lt; 0    }  )  console.log(expense);  var totalExpense = 0;  $.each(expense, function () { totalExpense += parseFloat((this)) || 0; });  console.log(totalExpense);  //傳回到expense  $(&#39;#money-minus&#39;).text(`$${totalExpense}`)</code></pre><p><img src="https://i.imgur.com/AaIZORC.png" alt=""></p><p><img src="https://i.imgur.com/TM4EQrH.png" alt=""></p><hr><p>錯誤修正：</p><ul><li>調換推入陣列以及<code>addTransactions</code>的順序<br><img src="https://i.imgur.com/7jdJ7kO.png" alt=""></li></ul><pre><code class="javascript">//點擊按鈕的事件  $(&#39;.btn&#39;).click(function (e) {    e.preventDefault();    //console.log(&#39;click&#39;);    //取得表格中的值    const text_val = $(&#39;#text&#39;).val();    const amount_val = $(&#39;#amount&#39;).val();    let id = generateID();    //推入陣列    transactions.push({      id: id,      name: text_val,      amount: amount_val    });    addTransactions(id, text_val, amount_val, transactions);    localStorage.setItem(&#39;Transactions&#39;, JSON.stringify(transactions));    updateValue(transactions);  })</code></pre><ul><li>將updateValue()放入事件中</li></ul><pre><code class="javascript">//刪除鈕 要交易交出後再綁事件  $(&#39;.delete-btn&#39;).last().click(function () {    $(this).parent().remove();    let id = $(this).data(&#39;id&#39;);    //console.log(id);    deleteFromLocalstorage(transactions, id); //要記得傳入id    updateValue(transactions);  });</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> local storage </tag>
            
            <tag> forEach </tag>
            
            <tag> append </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS實作- exchangeRate匯率轉換器</title>
      <link href="/2021/01/10/js-exchangeRate/"/>
      <url>/2021/01/10/js-exchangeRate/</url>
      
        <content type="html"><![CDATA[<h2 id="實作需求分析"><a href="#實作需求分析" class="headerlink" title="實作需求分析"></a>實作需求分析</h2><p><img src="https://i.imgur.com/cu80NjP.png" alt=""></p><ul><li>抓取api提供的匯率資料：使用jQuery,ajax</li><li>選擇不同幣別，進行匯率換算</li><li>swap按鈕，使幣別交換</li></ul><h4 id="完成後的成品"><a href="#完成後的成品" class="headerlink" title="完成後的成品"></a>完成後的<a href="https://eva813.github.io/Eva_portfolio/exchangeRate/exchangeRate.html" target="_blank" rel="noopener">成品</a></h4><h2 id="jQuery-ajax-使用"><a href="#jQuery-ajax-使用" class="headerlink" title="jQuery.ajax 使用"></a>jQuery.ajax 使用</h2><ul><li>參考資料：<a href="https://api.jquery.com/jquery.ajax/" target="_blank" rel="noopener">jQuery.ajax()</a></li></ul><pre><code class="javascript">$.ajax({  method: &quot;get&quot;,  url: &quot;https://v6.exchangerate-api.com/v6/06f04b805743079a1966771a/latest/USD&quot;,})  .done(function( some_data ) {    console.log(data);    //成功抓到值的話，就會印出抓取到的資料  }).fail(function(){  })</code></pre><p><img src="https://i.imgur.com/S1kOYmH.png" alt=""></p><ul><li>應用於exchangeRate:<pre><code class="javascript">$.ajax({  url: `https://v6.exchangerate-api.com/v6/06f04b805743079a1966771a/latest/${currency_one}`,  //注意符號  method: &#39;get&#39;,//get,post,put  dataType: &#39;json&#39;,  success: function (data) {    //console.log(data);    const rate = data.conversion_rates[currency_two];    //console.log(rate);    $(&#39;#rate&#39;).text(`1 ${currency_one} = ${rate} ${currency_two}`);    $(&#39;#amount-two&#39;).val((amountOne * rate).toFixed(2));  }})</code></pre></li></ul><pre><code>* #### 詳細說明可以參照內文：[計算匯率calculate函式](#計算匯率calculate-函式)#### 其他參考資料：[[ Alex 宅開發 ] 👨‍💻從 jQuery 入門到認識 JavaScript #5 Ajax 與非同步功能操作與原始碼探索](https://www.youtube.com/watch?v=z-hN7GY5K7g)</code></pre><ul><li><code>url</code>:來源，api的位置在哪裏</li><li><code>type</code>:api的呼叫方式</li><li><code>dataType</code>:它回給你的資料類型</li><li><code>data</code>:你要傳給它什麼<pre><code></code></pre></li></ul><pre><code class="javascript">$.ajax({  url: data.json,  type: &#39;get&#39;,//get,post,put,path,delete  dataType: &#39;json&#39;, //html,xml,text,jsonp  data: {}}).then(function (res) {  //response &lt;-&gt; request  console.log(res);  return def.resolve();}), function (err) {  console.log(err);  return def.reject();}</code></pre><h2 id="計算匯率calculate-函式"><a href="#計算匯率calculate-函式" class="headerlink" title="計算匯率calculate 函式"></a>計算匯率calculate 函式</h2><ul><li>此函式為抓取匯率api的資料並帶入計算匯率</li></ul><pre><code class="javascript">function calculate() {  var currency_one = $(&quot;#currency-one&quot;).val();  var currency_two = $(&#39;#currency-two&#39;).val();  var amountOne = $(&#39;#amount-one&#39;).val();  var amountTwo = $(&#39;#amount-two&#39;).val();  //https://app.exchangerate-api.com/dashboard/confirmed  $.ajax({    url: `https://v6.exchangerate-api.com/v6/06f04b805743079a1966771a/latest/${currency_one}`,//注意符號    method: &#39;get&#39;,//抓取值    dataType: &#39;json&#39;,    success: function (data) {      //console.log(data);  //查看抓到的物件      const rate = data.conversion_rates[currency_two];      //console.log(rate);      $(&#39;#rate&#39;).text(`1 ${currency_one} = ${rate} ${currency_two}`);      //將值帶入      $(&#39;#amount-two&#39;).val((amountOne * rate).toFixed(2));    }  })}</code></pre><h3 id="函式說明"><a href="#函式說明" class="headerlink" title="函式說明:"></a>函式說明:</h3><h4 id="1-先將要抓取的值，宣告變數-分別有選擇的國家幣別、兌換的數量"><a href="#1-先將要抓取的值，宣告變數-分別有選擇的國家幣別、兌換的數量" class="headerlink" title="1.先將要抓取的值，宣告變數;分別有選擇的國家幣別、兌換的數量"></a>1.先將要抓取的值，宣告變數;分別有選擇的國家幣別、兌換的數量</h4><h4 id="2-串接資料"><a href="#2-串接資料" class="headerlink" title="2.串接資料"></a>2.串接資料</h4><p> (1). 抓取資料的位置<br><code>url: https://v6.exchangerate-api.com/v6/06f04b805743079a1966771a/latest/${currency_one}</code></p><p>注意網址：<br><code>&quot;https://v6.exchangerate-api.com/v6/06f04b805743079a1966771a/latest/USD&quot;</code><br>注意網址後面有修改，要抓取會變動的變數： ${currency_one}</p><p> (2) 檢查是否有抓到要的資料：</p><ul><li>宣告：<code>const rate = data.conversion_rates[currency_two];</code></li><li>console.log(rate); </li></ul><p><img src="https://i.imgur.com/LKGiCmN.png" alt=""></p><ul><li>確定抓取的值是否正確：<code>console.log($(&#39;#amount-two&#39;).val());</code></li></ul><p><img src="https://i.imgur.com/r9Nx25o.png" alt=""></p><ul><li>將計算匯率帶入<br><code>$(&#39;#amount-two&#39;).val((amountOne * rate).toFixed(2));</code></li></ul><p><img src="https://i.imgur.com/oMBuNFV.png" alt=""></p><h2 id="其他輸入值的抓取與連動"><a href="#其他輸入值的抓取與連動" class="headerlink" title="其他輸入值的抓取與連動"></a>其他輸入值的抓取與連動</h2><ul><li><h4 id="currency-one的改變，會連動上面的函式計算結果"><a href="#currency-one的改變，會連動上面的函式計算結果" class="headerlink" title="#currency-one的改變，會連動上面的函式計算結果"></a><code>#currency-one的改變</code>，會連動上面的函式計算結果</h4></li></ul><pre><code class="javascript">$(&quot;#currency-one&quot;).change(function () {  $(&quot;#rate&quot;).html(&quot;&quot;);   calculate();})</code></pre><pre><code class="javascript">//抓取amountone$(&quot;#amount-one&quot;).on(&quot;input&quot;, function () {  $(&quot;#rate&quot;).html(&quot;&quot;);  calculate();})$(&quot;#currency-two&quot;).change(function () {  $(&quot;#rate&quot;).html(&quot;&quot;);  calculate();})//抓取amountTwo$(&quot;#amount-two&quot;).on(&quot;input&quot;, function () {  $(&quot;#rate&quot;).html(&quot;&quot;);  calculate();})</code></pre><ul><li><h4 id="發現使用-append-，會出現累積div文字的問題"><a href="#發現使用-append-，會出現累積div文字的問題" class="headerlink" title="發現使用.append()，會出現累積div文字的問題"></a>發現使用<code>.append()</code>，會出現累積div文字的問題</h4></li><li><p>(1) 清除函式<code>.append()</code>，累積div文字呈現的問題<br><code>$(&quot;#rate&quot;).html(&quot;&quot;);</code></p></li><li><p>(2) 將原本使用<code>.append()</code>的地方，修改為<code>.text()</code>, <code>$(&#39;#rate&#39;).text(`1 ${currency_one} = ${rate} ${currency_two}`);</code></p><ul><li>位置：<a href="#計算匯率calculate-函式">計算匯率calculate函式</a></li></ul></li></ul><p><img src="https://i.imgur.com/GTMuXY0.png" alt=""></p><p><img src="https://i.imgur.com/TvspVAq.png" alt=""></p><h2 id="swap按鈕-（使幣別交換）"><a href="#swap按鈕-（使幣別交換）" class="headerlink" title="swap按鈕 （使幣別交換）"></a>swap按鈕 （使幣別交換）</h2><ul><li>宣告一個變數，紀錄交換前的幣別<code>let temp = $(&quot;#currency-one&quot;).val();</code></li><li>確認是否宣告正確：<code>console.log(temp);</code></li></ul><p><img src="https://i.imgur.com/gkYsHxQ.png" alt=""></p><p><img src="https://i.imgur.com/fAZmC0Q.png" alt=""></p><pre><code class="javascript">//swap按鈕$(&#39;#swap&#39;).click(function () {  let temp = $(&quot;#currency-one&quot;).val();//設一個變數來存放currency-one  $(&quot;#currency-one&quot;).val($(&quot;#currency-two&quot;).val());  $(&quot;#currency-two&quot;).val(temp);  calculate();})calculate(); //放於最後</code></pre><ul><li><code>console.log($(&quot;#currency-one&quot;).val());</code></li><li><code>console.log($(&quot;#currency-two&quot;).val());</code></li></ul><p><img src="https://i.imgur.com/o4JLcIF.png" alt=""></p><hr><p>參考資料：<br><a href="https://ithelp.ithome.com.tw/articles/10192175" target="_blank" rel="noopener">重新認識 JavaScript: Day 16 那些你知道與不知道的事件們</a></p>]]></content>
      
      
      <categories>
          
          <category> JS實作練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ajax </tag>
            
            <tag> input </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-browser</title>
      <link href="/2020/12/28/js-browser/"/>
      <url>/2020/12/28/js-browser/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NdO4OR5.png" alt=""></p><h2 id="1-DOM-與樹狀結構"><a href="#1-DOM-與樹狀結構" class="headerlink" title="1. DOM 與樹狀結構"></a>1. DOM 與樹狀結構</h2><p><img src="https://i.imgur.com/uZDTql8.png" alt=""></p><ul><li>DOM: document:網頁內部<blockquote><p>KURO 老師:<br>DOM 是一個將 HTML 文件以樹狀的結構來表示的模型，而組合起來的樹狀圖，我們稱之為「DOM Tree」。</p></blockquote></li></ul><blockquote><p>Huli 老師:瀏覽器提供該橋樑，讓我們用js去改面畫面的東西<br> <img src="https://i.imgur.com/tPHGSL4.png" alt=""></p></blockquote><h3 id="API-Application-Programming-Interface"><a href="#API-Application-Programming-Interface" class="headerlink" title="API (Application Programming Interface)"></a>API (Application Programming Interface)</h3><ul><li><p>應用程式 編程 介面</p><h2 id="document-物件-API-文件"><a href="#document-物件-API-文件" class="headerlink" title="document 物件 API 文件"></a>document 物件 API 文件</h2></li><li><h4 id="getElementsByTagName-抓取html中某tag的元素"><a href="#getElementsByTagName-抓取html中某tag的元素" class="headerlink" title="getElementsByTagName : 抓取html中某tag的元素"></a><code>getElementsByTagName</code> : 抓取html中某tag的元素</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;body&gt;&lt;div&gt;  hello~&lt;/div&gt;&lt;div&gt;  yo!&lt;/div&gt;&lt;script&gt;  const elements = document.getElementsByTagName(&#39;div&#39;);  console.log(elements);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.imgur.com/hSmfZ9u.png" alt=""></p></li></ul><p><img src="https://i.imgur.com/yNOOK2m.png" alt=""></p><ul><li><h4 id="getElementsByClassName-抓取html中某class元素-有好幾個相同名稱的class，會一並抓取"><a href="#getElementsByClassName-抓取html中某class元素-有好幾個相同名稱的class，會一並抓取" class="headerlink" title="getElementsByClassName: 抓取html中某class元素(有好幾個相同名稱的class，會一並抓取)"></a><code>getElementsByClassName</code>: 抓取html中某class元素(有好幾個相同名稱的class，會一並抓取)</h4></li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;h1&gt;DOM  &lt;/h1&gt;  &lt;div class=&quot;block1&quot;&gt;    hello~  &lt;/div&gt;  &lt;div&gt;    yo!  &lt;/div&gt;  &lt;script&gt;    const elements = document.getElementsByClassName(&#39;block1&#39;);    console.log(elements);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.imgur.com/d7ZlZnr.png" alt=""></p><ul><li><h4 id="getElementById-注意：getElement-沒有加s！這是用來抓取指定ID"><a href="#getElementById-注意：getElement-沒有加s！這是用來抓取指定ID" class="headerlink" title="getElementById : 注意：getElement 沒有加s！這是用來抓取指定ID"></a><code>getElementById</code> : 注意：getElement 沒有加s！這是用來抓取指定ID</h4><pre><code class="html">&lt;body&gt;&lt;h1&gt;DOM&lt;/h1&gt;&lt;div class=&quot;block1&quot;&gt;  hello~&lt;/div&gt;&lt;div id=&quot;myyo&quot;&gt;  yo!&lt;/div&gt;&lt;script&gt;  const elements = document.getElementById(&#39;myyo&#39;);  console.log(elements);&lt;/script&gt;&lt;/body&gt;</code></pre></li></ul><pre><code>![](https://i.imgur.com/1ouq4WA.png)* #### `querySelector`: 後面接的是css選擇器* 只會針對元素的第一筆資料，其他並不會被選入這時候可以使用    * 選擇tag標籤：(&#39;div&#39;)：注意：使用此方式當html有多個div，他只會選擇到第一個符合的    * 選擇cass : (&#39;.calssName&#39;)    * 選擇id : (&#39;#idName&#39;)![](https://i.imgur.com/QzoOo6r.png)![](https://i.imgur.com/pSMPFCJ.png)* 也可以選區某一tag下的tag    * `querySelector(&#39;div &gt; a&#39;)````html&lt;body&gt;  &lt;h1&gt;DOM  &lt;/h1&gt;  &lt;div class=&quot;block1&quot;&gt;    hello~  &lt;/div&gt;  &lt;div id=&quot;myyo&quot;&gt;    yo!    &lt;a href=&quot;#&quot;&gt;hello&lt;/a&gt;  &lt;/div&gt;  &lt;script&gt;    const elements = document.querySelector(&#39;div &gt; a&#39;);    console.log(elements);  &lt;/script&gt;&lt;/body&gt;</code></pre><p><img src="https://i.imgur.com/I9qr8LD.png" alt=""></p><ul><li><h4 id="querySelectorAll-可以選取多個元素"><a href="#querySelectorAll-可以選取多個元素" class="headerlink" title="querySelectorAll: 可以選取多個元素"></a><code>querySelectorAll</code>: 可以選取多個元素</h4></li></ul><pre><code class="html">&lt;body&gt;  &lt;h1&gt;DOM  &lt;/h1&gt;  &lt;div class=&quot;block1&quot;&gt;    hello~  &lt;/div&gt;  &lt;div id=&quot;myyo&quot;&gt;    yo!    &lt;a href=&quot;#&quot;&gt;hello&lt;/a&gt;  &lt;/div&gt;  &lt;script&gt;    const elements = document.querySelectorAll(&#39;div&#39;);    console.log(elements);  &lt;/script&gt;</code></pre><p><img src="https://i.imgur.com/jFPYIO0.png" alt="Eloquent JavaScript, 3rd Edition"></p><h3 id="順利選則元素之後，嘗試做些改變"><a href="#順利選則元素之後，嘗試做些改變" class="headerlink" title="順利選則元素之後，嘗試做些改變"></a>順利選則元素之後，嘗試做些改變</h3><p>可以看看，js如何與瀏覽器互動 -&gt;<a href="https://hackmd.io/yGiTI8qVRLWmDCpD1w7HcA?view" target="_blank" rel="noopener">JavaScript 與瀏覽器的溝通</a></p><h3 id="BOM-與-window-物件"><a href="#BOM-與-window-物件" class="headerlink" title="BOM 與 window 物件"></a>BOM 與 window 物件</h3><ul><li>BOM (Browser Object Model，瀏覽器物件模型)，是瀏覽器所有功能的核心，與網頁的內容無關。<ul><li>window是瀏覽器的根物件，也是BOM的瀏覽器模型</li></ul></li><li>window.location.hrrf =&gt; 可以知道現在網址<br><img src="https://i.imgur.com/8EeLLGQ.png" alt=""></li><li>window.history.back(); =&gt; 回到網頁瀏覽的上一頁<br><img src="https://i.imgur.com/kBtDslP.png" alt=""></li></ul><p><img src="https://i.imgur.com/jyPOjvH.png" alt=""></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://ithelp.ithome.com.tw/articles/10202689" target="_blank" rel="noopener">Day03-深入理解網頁架構：DOM</a><br><a href="https://hsuchihting.github.io/javascript/20200615/1316819935/" target="_blank" rel="noopener">JS 筆記 - 認識 DOM 文件物件模型</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Document" target="_blank" rel="noopener">MDN-Document</a><br><a href="https://www.w3schools.com/jsref/dom_obj_document.asp" target="_blank" rel="noopener">The HTML DOM Document Object</a><br><a href="https://ithelp.ithome.com.tw/articles/10211614" target="_blank" rel="noopener">JavaScript 基礎知識-querySelectorAll</a><br><a href="https://eloquentjavascript.net/14_dom.html" target="_blank" rel="noopener">The Document Object Model</a><br><a href="https://www.happycoding.today/posts/43" target="_blank" rel="noopener">JavaScript入門系列：BOM和DOM筆記</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> DOM&quot; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基本功- 物件與陣列</title>
      <link href="/2020/12/27/js-array/"/>
      <url>/2020/12/27/js-array/</url>
      
        <content type="html"><![CDATA[<blockquote><p>程式柴<br><img src="https://i.imgur.com/44kqCRM.png" alt=""></p><h3 id="Function、array都屬於物件"><a href="#Function、array都屬於物件" class="headerlink" title="Function、array都屬於物件"></a>Function、array都屬於物件</h3><p><img src="https://i.imgur.com/1bYo7eM.png" alt=""></p></blockquote><h2 id="物件的例子"><a href="#物件的例子" class="headerlink" title="物件的例子"></a>物件的例子</h2><pre><code class="javascript">var person = {      name: [&#39;Bob&#39;, &#39;Smith&#39;],      age: 32,      gender: &#39;male&#39;,      interest: [&#39;music&#39;, &#39;movie&#39;],      greeting: function () {        console.log(&#39;hi I\&#39;m&#39; + this.name[0] + &#39;.&#39;);      }    }</code></pre><h2 id="物件的創建"><a href="#物件的創建" class="headerlink" title="物件的創建"></a>物件的創建</h2><p><code>var x={}</code></p><ul><li><p>有一隻狗,其名字、年齡，函式</p><pre><code class="javascript">var dog = {    name: &#39;tracy&#39;,    age: 20,    bow: function () {      console.log(&#39;bow!bow!&#39;);    }  }</code></pre></li><li><p>用.呼叫屬性，或是dog[‘key’] :point_down:<br><img src="https://i.imgur.com/OgrYwjF.png" alt=""></p></li><li><p>物件內的函式<br><img src="https://i.imgur.com/jOWuwxQ.png" alt=""></p></li></ul><h2 id="添加屬性至物件上"><a href="#添加屬性至物件上" class="headerlink" title="添加屬性至物件上"></a>添加屬性至物件上</h2><ul><li><h4 id="增加值的方式"><a href="#增加值的方式" class="headerlink" title="增加值的方式"></a>增加值的方式</h4><ul><li><code>dog.color = &#39;white&#39;;</code></li><li><code>dog[&#39;size&#39;] = &#39;small&#39;;</code> =&gt;較常用</li></ul></li><li><h4 id="增加函式-gt-一樣用-的方式"><a href="#增加函式-gt-一樣用-的方式" class="headerlink" title="增加函式 =&gt; 一樣用.的方式"></a>增加函式 =&gt; 一樣用.的方式</h4><ul><li><code>dog.bowbow = function () {console.log(&#39;bow!bow!～～&#39;) }</code></li></ul></li></ul><pre><code class="javascript"> var dog = {      name: &#39;tracy&#39;,      age: 7,      bow: function () {        console.log(&#39;bow!&#39;);      }    }    //增加值的方式    //1    dog.color = &#39;white&#39;;    dog.eyes = &#39;big&#39;;    //2    dog[&#39;size&#39;] = &#39;small&#39;;    //增加函式    dog.bowbow = function () {      console.log(&#39;bow!bow!～～&#39;)    }</code></pre><p><img src="https://i.imgur.com/4qqgZRy.png" alt=""></p><h2 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h2><blockquote><p>程式柴<br><img src="https://i.imgur.com/FdH3fty.png" alt=""></p></blockquote><ul><li><p>陣列用 中括號<code>[ ]</code></p></li><li><p>陣列的計算是從零開始（取陣列的索引）</p><ul><li>呼應for 迴圈，從0開始，從索引第一個<pre><code class="javascript">arr = [111, 222, 333]console.log(arr);console.log(arr[1]); //222//呼應for 迴圈，從0開始，從索引第一個</code></pre></li></ul></li><li><p>陣列中的東西都是相同屬性，比較好操作</p><pre><code class="javascript">arr2 = [&#39;dog&#39;, &#39;cat&#39;, &#39;sth&#39;]  console.log(arr.length); //3arr3 = [111, &#39;cat&#39;, &#39;sth&#39;]</code></pre><p><img src="https://i.imgur.com/2WztSsO.png" alt=""></p></li><li><p>練習：要紀錄10位學生的分數，並加總</p><pre><code class="javascript=">var score = [1, 3, 4, 5, 100];  console.log(score);</code></pre><h3 id="陣列基本操作-gt-pop-與push-較常用"><a href="#陣列基本操作-gt-pop-與push-較常用" class="headerlink" title="陣列基本操作 -&gt; pop 與push 較常用"></a>陣列基本操作 -&gt; <code>pop</code> 與<code>push</code> 較常用</h3></li><li><p><code>score.push(1000)</code> -&gt; 新增元素到現有陣列中，加入尾端</p></li><li><p><code>score.unshift(888)</code> -&gt; 加入陣列最前面</p></li><li><p>pop:從最末端抽走元素<br><img src="https://i.imgur.com/e55Oxbz.png" alt=""></p></li></ul><pre><code class="javascript">var myHeros=[&#39;孫悟空&#39;, &#39;佐助&#39;, &#39;女超人&#39;, &#39;美國隊長&#39;];//從最末端抽走元素myHeros.pop();//從頭抽走元素myHeros.shift();console.log(myHeros);</code></pre><h3 id="陣列替換元素"><a href="#陣列替換元素" class="headerlink" title="陣列替換元素"></a>陣列替換元素</h3><ul><li>在原本陣列中，選取要取代的該元素，後面加=，並輸入內容</li></ul><p><img src="https://i.imgur.com/gnVybmt.png" alt=""></p><h2 id="陣列取得最後一個元素"><a href="#陣列取得最後一個元素" class="headerlink" title="陣列取得最後一個元素"></a>陣列取得最後一個元素</h2><ul><li>該陣列長度-1，就可以取得最後一個元素<ul><li>長度為七，最後一個的索引是6 :point_down:<br><img src="https://i.imgur.com/Ytlzihy.png" alt=""></li></ul></li></ul><h2 id="用-indexOf-取得元素的索引"><a href="#用-indexOf-取得元素的索引" class="headerlink" title="用 indexOf 取得元素的索引"></a>用 indexOf 取得元素的索引</h2><ul><li>Of的o要大寫</li></ul><pre><code class="javascript">var myHeros=[&#39;孫悟空&#39;, &#39;佐助&#39;, &#39;女超人&#39;, &#39;美國隊長&#39;];//檢查誰誰誰有在陣列中嗎console.log(myHeros.indexOf(&#39;達爾&#39;)); //印出-1，意指此元素不存在陣列中console.log(myHeros.indexOf(&#39;美國隊長&#39;)); //印出3（在陣列中第幾個索引</code></pre><h3 id="切片-slice-與方法"><a href="#切片-slice-與方法" class="headerlink" title="切片 slice 與方法"></a>切片 slice 與方法</h3><p><img src="https://i.imgur.com/h3ltQ3Q.png" alt=""></p><pre><code class="javascript"> var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;];    //用索引    console.log(arr.slice(2, 4));//不包含最後一個    console.log(arr.slice(2, 5));</code></pre><p><img src="https://i.imgur.com/bzKmwQi.png" alt=""></p><ul><li>複製陣列<pre><code class="javascript">var shallowCopy = fruits.slice(); // 這就是複製陣列的方式// [&quot;Strawberry&quot;, &quot;Mango&quot;]</code></pre></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">MDN slice</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">MDN array</a><br><a href="https://www.oxxostudio.tw/articles/201908/js-array.html" target="_blank" rel="noopener">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a></p><h2 id="陣列與物件"><a href="#陣列與物件" class="headerlink" title="陣列與物件"></a>陣列與物件</h2><ul><li><p>例子：被老師要求要記錄，學生的名字,分數,地址…</p></li><li><p>以陣列的想法，會將各類別分類，放入同屬性的結果</p><ul><li>學生的分數,名字個一個陣列<br><img src="https://i.imgur.com/6DP47iL.png" alt=""></li><li>要取得同一位學生的所有資料，要個別從矩陣中拿取<br><img src="https://i.imgur.com/5q4VitE.png" alt=""></li></ul></li><li><p>一個資料集合，就能代表一個學生 –&gt;物件</p><ul><li>以下面的資料結構來代表學生的一些屬性<br><img src="https://i.imgur.com/Gk5T01w.png" alt=""></li></ul></li></ul><hr><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><ul><li>物件與陣列，與等號的關係,理解<ul><li>下方的結果都是false<br><img src="https://i.imgur.com/6L0AI2n.png" alt=""></li></ul></li></ul><p>因為：</p><ul><li><code>var obj=[a:1]</code>，會將它放在某一個記憶體位置</li><li><code>var obj2=[a:1]</code>，會將它放在另一個記憶體位置</li></ul><p>PS:即便內容,數值一樣，但js判斷的是記憶體位置不一樣</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Array </tag>
            
            <tag> Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基本功- function函式</title>
      <link href="/2020/12/27/js-function/"/>
      <url>/2020/12/27/js-function/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/qRxqi5e.png" alt=""></p><h3 id="使用函式可以讓我們執行效率提升，不用重複撰寫，只需幾行語法便可以達到快速的運算、或是功能的執行。以下範例為數羊計數，透過函式以及迴圈，以幫助設定計數的起始以及終點，並快速的執行範圍內的計數。"><a href="#使用函式可以讓我們執行效率提升，不用重複撰寫，只需幾行語法便可以達到快速的運算、或是功能的執行。以下範例為數羊計數，透過函式以及迴圈，以幫助設定計數的起始以及終點，並快速的執行範圍內的計數。" class="headerlink" title="使用函式可以讓我們執行效率提升，不用重複撰寫，只需幾行語法便可以達到快速的運算、或是功能的執行。以下範例為數羊計數，透過函式以及迴圈，以幫助設定計數的起始以及終點，並快速的執行範圍內的計數。"></a>使用函式可以讓我們執行效率提升，不用重複撰寫，只需幾行語法便可以達到快速的運算、或是功能的執行。以下範例為數羊計數，透過函式以及迴圈，以幫助設定計數的起始以及終點，並快速的執行範圍內的計數。</h3><pre><code class="javascript">//為什麼我們需要function    //DRY -&gt; Don&#39;t repeat yourself    function echoSheep(index) {      console.log(&#39;第&#39; + i + &#39;隻綿羊&#39;)    }    for (var i = 1; i &lt; 11; i++) {      echoSheep(i)    }</code></pre><ul><li><h4 id="與過去所學結合"><a href="#與過去所學結合" class="headerlink" title="與過去所學結合"></a>與過去所學結合</h4></li></ul><p><img src="https://i.imgur.com/O6BuNU9.png" alt=""></p><ul><li>也可以return後面接物件 <ul><li>回傳結果為20<br><img src="https://i.imgur.com/ln90sd9.png" alt=""></li></ul></li></ul><h3 id="簡單練習題"><a href="#簡單練習題" class="headerlink" title="簡單練習題"></a>簡單練習題</h3><ul><li>創建空陣列，並於陣列中放數1,2,3,…10</li></ul><p><img src="https://i.imgur.com/9tTJ3uL.png" alt=""><br>要放入return，否則會出現undefined<br><img src="https://i.imgur.com/TGCWt71.png" alt=""><br><img src="https://i.imgur.com/lRysWNO.png" alt=""></p><ul><li>也可以將參數改成兩個數</li></ul><pre><code class="javascript">function generateArray(a, b) {  //a,b 可以改為 from,to      var result = [];      for (var i = a; i &lt;= b; i++) {        result.push(i);      }      return result;    }    console.log(generateArray(3, 10))</code></pre><p><img src="https://i.imgur.com/12sURMh.png" alt=""></p><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><ul><li><p>函式中一放進return，在函式，return後面的部分就不會運行了</p></li><li><p>不需要知道結果<br><img src="https://i.imgur.com/4oPINY3.png" alt=""></p></li><li><p>需要回傳值<br><img src="https://i.imgur.com/yb0arjk.png" alt=""></p></li></ul><ul><li>參數：函式後面要傳入的值</li><li>引數：真正傳進去的東西</li></ul><p><img src="https://i.imgur.com/n66mD1K.png" alt=""></p><ul><li>Arguments:為類陣列，屬於物件</li></ul><h2 id="表達式-Expression-與陳述句-Statement-的差異"><a href="#表達式-Expression-與陳述句-Statement-的差異" class="headerlink" title="表達式(Expression)與陳述句(Statement)的差異"></a>表達式(Expression)與陳述句(Statement)的差異</h2><ul><li>表達式：會回傳值</li><li>陳述句：不會回傳值 (if…else,switch，等控制流程)</li></ul><h2 id="使用函式陳述式-Function-Statement-與函式表達式-Function-Expression"><a href="#使用函式陳述式-Function-Statement-與函式表達式-Function-Expression" class="headerlink" title="使用函式陳述式(Function Statement)與函式表達式(Function Expression)"></a>使用函式陳述式(Function Statement)與函式表達式(Function Expression)</h2><ul><li>函式陳述式(Function Statement):在使用函式之前，放入helloFunctionStatement();是可以執行</li></ul><pre><code class="javascript">//helloFunctionStatement();  放在前面沒關係function helloFunctionStatement() {      console.log(&#39;this is Function Statement &#39;);    }    helloFunctionStatement();</code></pre><ul><li><p>函式表達式(Function Expression):反之，要放在宣告之後</p><pre><code class="javascript">//helloFunctionExpression(); 放前面，會出現錯誤var helloFunctionExpression = function () {    console.log(&#39;this is Function Expression &#39;);  }  helloFunctionExpression();</code></pre><p>:::warning<br>因為hoisting(變數提升)的關係<br>:::</p></li></ul><p><a href="https://ithelp.ithome.com.tw/articles/10218937" target="_blank" rel="noopener">JS 原力覺醒 Day07 - 陳述式 表達式</a></p><h2 id="變數能夠影響的範圍作用域-Scope-作用域：變數可以影響的範圍"><a href="#變數能夠影響的範圍作用域-Scope-作用域：變數可以影響的範圍" class="headerlink" title="變數能夠影響的範圍作用域( Scope 作用域：變數可以影響的範圍 )"></a>變數能夠影響的範圍作用域( Scope 作用域：變數可以影響的範圍 )</h2><ul><li>在function中，所宣告的 var a = 50;，範圍就只有涵蓋在函式中，不會影響到外面</li></ul><pre><code class="javascript"> var a = 100;    function helloWorld() {      var a = 50;      console.log(a);    }    helloWorld();    console.log(a);</code></pre><p><img src="https://i.imgur.com/16xE1No.png" alt=""></p><ul><li>如果函式中，宣吿某變數，沒有加var/let，該變數就會影響外部<pre><code class="javascript">var a = 100;  function helloWorld() {    a = 50;    console.log(&#39;function:&#39;, a);  }  helloWorld();  console.log(&#39;外部:&#39;, a);</code></pre><img src="https://i.imgur.com/tJTnR9W.png" alt=""></li></ul><h3 id="全域變數與區域變數"><a href="#全域變數與區域變數" class="headerlink" title="全域變數與區域變數"></a>全域變數與區域變數</h3><ul><li><h4 id="使用var-let-const，來宣告"><a href="#使用var-let-const，來宣告" class="headerlink" title="使用var,let,const，來宣告"></a>使用var,let,const，來宣告</h4></li><li><h4 id="全域變數：在瀏覽器中，沒有在fuction裡，直接進行宣告"><a href="#全域變數：在瀏覽器中，沒有在fuction裡，直接進行宣告" class="headerlink" title="全域變數：在瀏覽器中，沒有在fuction裡，直接進行宣告"></a>全域變數：在瀏覽器中，沒有在fuction裡，直接進行宣告</h4><ul><li>也可以用window來存取</li><li>window，是瀏覽器上的根物件<br><img src="https://i.imgur.com/TNAMSWA.png" alt=""></li></ul></li></ul><pre><code class="javascript="> var y = 1;  //在外面宣告為 全域變數    function abc() {      //var,let,const      var x = 1    }</code></pre><ul><li><h4 id="區域變數：在function中進行宣告"><a href="#區域變數：在function中進行宣告" class="headerlink" title="區域變數：在function中進行宣告"></a>區域變數：在function中進行宣告</h4><pre><code class="javascript=">function abc() {    //var,let,const    var x = 1  }</code></pre></li><li><h4 id="不是變數-gt-全域的屬性"><a href="#不是變數-gt-全域的屬性" class="headerlink" title="不是變數 =&gt; 全域的屬性"></a>不是變數 =&gt; 全域的屬性</h4><ul><li>z=1;</li><li>也可以用window來存取</li></ul></li></ul><p><img src="https://i.imgur.com/eMBkGKy.png" alt=""></p><h2 id="回呼函數-Callback-Function"><a href="#回呼函數-Callback-Function" class="headerlink" title="回呼函數 Callback Function"></a>回呼函數 Callback Function</h2><ul><li>把函數做為參數傳遞</li><li>當檔案讀取完畢時，請來執行這個 function，並且把結果傳進來</li><li>heyFunc(console.log)-&gt;console.log 可以替換別的</li></ul><pre><code class="javascript"> function heyFunc(myFunction) {      myFunction(&#39;hi&#39;);      myFunction(&#39;hi&#39;);    }    heyFunc(console.log);</code></pre><p><img src="https://i.imgur.com/imMi0vS.png" alt=""></p><ul><li>非同步（Asynchronous）:回呼常用來延續非同步行動完成後的程式執行</li></ul><h3 id="其他介紹-超入門-JavaScript-教學-13-回呼函式-callback"><a href="#其他介紹-超入門-JavaScript-教學-13-回呼函式-callback" class="headerlink" title="其他介紹 超入門 JavaScript 教學 13 - 回呼函式 callback"></a>其他介紹 <a href="https://www.youtube.com/watch?v=U0YbyCaG93k" target="_blank" rel="noopener">超入門 JavaScript 教學 13 - 回呼函式 callback</a></h3><ul><li><p>以下範例：讓cb接到shout這個函式<br><img src="https://i.imgur.com/zMT2p0j.png" alt=""></p><pre><code class="javascript">function shout() {   console.log(&#39;hello,i am done&#39;) } function countToSeven(cb) {   for (var i = 1; i &lt;= 7; i++) {     console.log(i);   }   if (typeof cb === &#39;fuction&#39;)     cb(); //啟動shout函式 } countToSeven(); //會數1-7 //要數完七之後，說&#39;hello,i am done countToSeven(shout); countToSeven(1);//1不是函式，所以在if判斷句終止 //每隔一段時間，幫我做一次 setInterval(shout, 2 * 1000);//每隔兩秒執行sout //在多少時間之後，幫我執行 setTimeout(shout, 1 * 1000)</code></pre><h3 id="js內建函式"><a href="#js內建函式" class="headerlink" title="js內建函式"></a>js內建函式</h3><ul><li>每隔一段時間，幫我做一次<br><code>setInterval(shout, 2 * 1000);</code>//每隔兩秒執行sout</li><li>在多少時間之後，幫我執行<br><code>setTimeout(shout, 1 * 1000)</code></li></ul></li></ul><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><p><a href="https://ithelp.ithome.com.tw/articles/10192739" target="_blank" rel="noopener">重新認識 JavaScript: Day 18 Callback Function 與 IIFE</a><br><a href="https://blog.techbridge.cc/2019/10/05/javascript-async-sync-and-callback/" target="_blank" rel="noopener">JavaScript 中的同步與非同步（上）：先成為 callback 大師吧！</a><br><a href="https://whien.medium.com/js20min-day-18-%E9%97%9C%E6%96%BC%E5%9B%9E%E5%91%BC%E7%94%9F%E6%B4%BB%E5%8C%96-callback-1a112db1a788" target="_blank" rel="noopener">JS20min Day — 18 關於回呼生活化 (Callback)</a></p><h2 id="匿名函式"><a href="#匿名函式" class="headerlink" title="匿名函式"></a>匿名函式</h2><ul><li><p>heyFunc裡面的function沒有名稱</p><pre><code class="javascript">function heyFunc(myFunction) {    myFunction(&#39;hi&#39;);  }  heyFunc(function (message) {    console.log(&#39;message is:&#39;, message);  });//message is:hi&lt;/script&gt;</code></pre></li></ul><h2 id="立即函式-IIFE"><a href="#立即函式-IIFE" class="headerlink" title="立即函式(IIFE)"></a>立即函式(IIFE)</h2><blockquote><p>Luka<br><img src="https://i.imgur.com/sriaR2r.png" alt=""></p></blockquote><ul><li>它是沒有名字的函式，要立即調用<ul><li>不讓函式內的變數污染到外面的東係</li><li>讓jquery的＄＄變成是jquery使用<pre><code class="javascript">(function (name) {  var str = &#39;Hi &#39; + name + &#39;!&#39;;  console.log(str);})(&#39;Sam&#39;);</code></pre></li></ul></li></ul><pre><code>* 一般常見寫法```javascript    var sayHi = function (name) {      var str = &#39;Hi &#39; + name + &#39;!&#39;;      console.log(str);    }(&#39;Peter&#39;)//在後面立即執行      // sayHi(&quot;Peter&quot;);</code></pre><p><a href="https://pjchender.blogspot.com/2016/05/javascriptiifesimmediately-invoked.html" target="_blank" rel="noopener">[筆記] 談談JavaScript中的IIFEs(Immediately Invoked Functions Expressions)</a><br><a href="https://pjchender.blogspot.com/2016/05/iifesimmediately-invoked-functions.html" target="_blank" rel="noopener">[筆記] 為什麼我們要用IIFEs(Immediately Invoked Functions Expressions)</a></p><h2 id="hoisting-變數提升淺談"><a href="#hoisting-變數提升淺談" class="headerlink" title="hoisting 變數提升淺談"></a>hoisting 變數提升淺談</h2><ul><li><p>js的變數與函式的宣告提升</p></li><li><p>不管在哪一行使用了變數，都視為第一行宣告</p><blockquote><p>比較好的流程 By 彭彭<br><img src="https://i.imgur.com/DcnsGsL.png" alt=""></p></blockquote></li></ul><p>但在js有hoisting 變數提升</p><ul><li>就算把變數宣告放在後面，依然可以運作(會將<code>var x</code>提升到最前面)<blockquote><p><img src="https://i.imgur.com/VmUcFV3.png" alt=""></p></blockquote></li></ul><p>進一步細節…</p><blockquote><p><img src="https://i.imgur.com/vBfQGUk.png" alt=""><br>電腦解讀如下 </p></blockquote><ul><li><code>var x</code>會提升<blockquote><p><img src="https://i.imgur.com/0qjf9j8.png" alt=""><br>結果會印出undefined</p></blockquote></li></ul><h3 id="在函示fuction的變數提升"><a href="#在函示fuction的變數提升" class="headerlink" title="在函示fuction的變數提升"></a>在函示fuction的變數提升</h3><ul><li>先宣告函式，在能呼叫函式執行<blockquote><p><img src="https://i.imgur.com/jSAAaWN.png" alt=""></p></blockquote></li><li>在js先呼叫，依然可以運作<blockquote><p><img src="https://i.imgur.com/vKZ9eXh.png" alt=""></p></blockquote></li></ul><p>其他狀況…(把函式裝到變數中當作資料)</p><ul><li>在此情形，它會出現錯誤，回報test不是一個函式<blockquote><p><img src="https://i.imgur.com/k2ANLPn.png" alt=""></p></blockquote></li><li>程式的解讀 :point_down: </li><li>只有var test被提升<blockquote><p><img src="https://i.imgur.com/ZOasHkk.png" alt=""></p></blockquote></li></ul><blockquote><p>程式柴<br><img src="https://i.imgur.com/WuqIKWR.png" alt=""></p></blockquote><blockquote><ul><li>沒有宣告</li><li><img src="https://i.imgur.com/tlctwnQ.png" alt=""></li></ul></blockquote><h2 id="常用的內建函式"><a href="#常用的內建函式" class="headerlink" title="常用的內建函式"></a>常用的內建函式</h2><h3 id="Number類型"><a href="#Number類型" class="headerlink" title="Number類型"></a>Number類型</h3><ul><li><h4 id="字串轉數字"><a href="#字串轉數字" class="headerlink" title="字串轉數字"></a>字串轉數字</h4></li></ul><p><img src="https://i.imgur.com/SKn9IWm.png" alt=""></p><ul><li>parseInt 是取整數，若遇到如20.35，就只會取到20</li></ul><p><img src="https://i.imgur.com/MwOQLxK.png" alt=""></p><ul><li>遇到小數點且要保留的時候，使用parseFloat<ul><li>結果為30.35</li></ul></li></ul><p><img src="https://i.imgur.com/fVqNBhR.png" alt=""></p><p><img src="https://i.imgur.com/xct9oPf.png" alt=""></p><ul><li><code>Math.ceil()</code>=&gt; 無條件進位</li><li><code>Math.floor()</code>=&gt; 無條件捨去</li><li><code>Math.round()</code> =&gt; 四捨五入</li><li><code>Math.sqrt()</code> =&gt; 開根號</li><li><code>Math.pow()</code> =&gt; 次方</li><li><code>Math.radom()</code> =&gt; 產生隨機數(0-1，不包含1)</li><li><code>toString()</code> =&gt; 數字轉字串<ul><li>或是加空字串</li></ul></li></ul><p><img src="https://i.imgur.com/3TGrI7J.png" alt=""></p><p><img src="https://i.imgur.com/u9axhKX.png" alt=""></p><h3 id="String類型"><a href="#String類型" class="headerlink" title="String類型"></a>String類型</h3><ul><li><p><code>toUpperCase</code>=&gt; 轉大寫</p></li><li><p><code>toLowerCase</code> =&gt; 轉小寫</p></li><li><p><code>indexOf</code> =&gt; 找出字串中，單字的索引（用於檢查某字是否存在字串中）<br><img src="https://i.imgur.com/u51AqqO.png" alt=""></p></li><li><p><code>replace()</code> =&gt; 取代</p><ul><li>用正規表達式來選擇 某些字<br><img src="https://i.imgur.com/AboC56u.png" alt=""><br><img src="https://i.imgur.com/JQ5KHBI.png" alt=""></li></ul></li><li><p><code>split()</code> =&gt; 切字串</p><pre><code class="javascript">//split較常使用的情形  //當資料為一連串字串，利用逗號切割 變成陣列，比較好運用  var str = &#39;data1,data2,data3,data4&#39;;  console.log(str.split(&#39;,&#39;));</code></pre><p><img src="https://i.imgur.com/XA193Oc.png" alt=""></p></li><li><p><code>trim()</code> =&gt;從一個字符串的两端刪除空白字符</p><pre><code class="javascript">const greeting = &#39;   Hello world!   &#39;;</code></pre></li></ul><p>console.log(greeting);<br>// expected output: “   Hello world!   “;</p><p>console.log(greeting.trim());<br>// expected output: “Hello world!”;</p><pre><code>### Array 類型* [Array.prototype.join()](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/join) * 方法會將陣列（或一個類陣列（array-like）物件）中所有的元素連接、合併成一個 &#39;字串&#39;，並回傳此字串(在陣列中每個元素間插入設定的東西)```javascriptconst elements = [&#39;Fire&#39;, &#39;Air&#39;, &#39;Water&#39;];console.log(elements.join());// expected output: &quot;Fire,Air,Water&quot; //會變成字串console.log(elements.join(&#39;&#39;));// expected output: &quot;FireAirWater&quot;console.log(elements.join(&#39;-&#39;));// expected output: &quot;Fire-Air-Water&quot;</code></pre><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">Array.prototype.map()</a></li><li>建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。<pre><code class="javascript">var arr = [1, 2, 3];  console.log(    arr.map(function (x) {      return x * -1    })  )</code></pre><img src="https://i.imgur.com/0FKeOro.png" alt=""></li></ul><pre><code class="javascript=">//也可以接著寫下去    var arr = [1, 2, 3];    console.log(      arr        .map(function (x) {          return x * -1        })        .map(function (x) {          return x * 2        })    )</code></pre><p><img src="https://i.imgur.com/FrkeTMZ.png" alt=""></p><ul><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">Array.prototype.filter()</a></p></li><li><p>過濾</p><pre><code class="javascript">var arr = [1, 2, 3, -5, 3, -2];  console.log(    arr      .map(function (x) {        return x * 2      })      .filter(function (x) {        return x &gt; 0      })      //把負數過濾掉，留下正數  )</code></pre><p><img src="https://i.imgur.com/G8TKP1k.png" alt=""></p></li><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">Array.prototype.slice()</a></p></li><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">Array.prototype.splice()</a></p><ul><li>splice 1.插入元素<pre><code class="javascript">const months = [&#39;Jan&#39;, &#39;March&#39;, &#39;April&#39;, &#39;June&#39;];months.splice(1, 0, &#39;Feb&#39;);// inserts at index 1console.log(months);// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</code></pre></li></ul></li></ul><p>months.splice(4, 1, ‘May’);<br>// replaces 1 element at index 4<br>console.log(months);<br>// expected output: Array [“Jan”, “Feb”, “March”, “April”, “May”]</p><pre><code>* splice 2.刪除元素```javascriptvar myFish = [&#39;angel&#39;, &#39;clown&#39;, &#39;drum&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];var removed = myFish.splice(3, 1);// removed 為 [&quot;mandarin&quot;]// myFish 為 [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;sturgeon&quot;]</code></pre><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener">Array.prototype.sort()</a><pre><code class="javascript">const months = [&#39;March&#39;, &#39;Jan&#39;, &#39;Feb&#39;, &#39;Dec&#39;];months.sort();console.log(months);// expected output: Array [&quot;Dec&quot;, &quot;Feb&quot;, &quot;Jan&quot;, &quot;March&quot;] //按照第一個字母順序排列</code></pre></li></ul><p>const array1 = [1, 30, 4, 21, 100000];<br>array1.sort();<br>console.log(array1);<br>// expected output: Array [1, 100000, 21, 30, 4] //是一字串，以第一個數字來排列</p><pre><code>* 依照數字大小排列```javascript   var arr = [1, 30, 4, 2];    arr.sort(function (a, b) {      if (a === b) return 0;      if (b &gt; a) return -1; //不換      return 1; //正數，換位置    })    console.log(arr);</code></pre><p><img src="https://i.imgur.com/dMAXe66.png" alt=""></p><h4 id="「回傳」與「印出」的差異"><a href="#「回傳」與「印出」的差異" class="headerlink" title="「回傳」與「印出」的差異"></a>「回傳」與「印出」的差異</h4><ul><li>函式可以透過 return 回傳函式運算完的結果<blockquote><p> 述程式碼的執行：</p></blockquote></li></ul><p>1.<code>console.log(add(1, 2))</code> =&gt; 帶入functoin，<code>console.log(a, b);</code> =&gt; 印出1,2<br>2.往下，到return undefined; 然後進入add(1, 2)的回傳值，就會是undefined</p><pre><code class="javascript">function add(a, b) {      console.log(a, b);      return undefined;  //不加return，預設會是undefined    }    console.log(add(1, 2))</code></pre><ul><li>以為 <code>add(1, 2)</code> 的回傳值是 3，但不是，那是因為它在裡面 console.log() 所以把結果印出來了。  <pre><code class="javascript">function add(a, b) { console.log(a + b)}add(1, 2)</code></pre></li><li>如果真的要有回傳值的話要這樣寫：<pre><code class="javascript">function add(a, b) { return a + b}console.log(add(1, 2))</code></pre></li></ul><p>參考資料： <a href="https://ithelp.ithome.com.tw/articles/10214256" target="_blank" rel="noopener">JavaScript 初心者筆記: 函式實際運作 - 回傳值與函式間互相傳遞</a><br>,<a href="https://ithelp.ithome.com.tw/articles/10214364" target="_blank" rel="noopener">後設鐵人 Day4：請幫我簽個名好嗎？</a></p><h3 id="Immutable-觀念-不可變"><a href="#Immutable-觀念-不可變" class="headerlink" title="Immutable 觀念 (不可變)"></a>Immutable 觀念 (不可變)</h3><ul><li><p>除了物件、陣列以外，其他都是不可變的</p></li><li><p>沒辦法改它，就只能回傳新的</p><pre><code class="javascript">var a = &#39;hello&#39;;  a.toUpperCase;  console.log(a);  //印出：hello，沒有改變原本變數的內容</code></pre><pre><code class="javascript"> var a = &#39;hello&#39;;  a = a.toUpperCase(); //要回傳給a，把原本的a值蓋掉  console.log(a);  //或是增設一個新變數  var a = &#39;hello&#39;;  var b = a.toUpperCase();   console.log(b);</code></pre></li></ul><pre><code></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> parseInt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基本功- 控制流程 Control Flow</title>
      <link href="/2020/12/26/js-Control-Flow/"/>
      <url>/2020/12/26/js-Control-Flow/</url>
      
        <content type="html"><![CDATA[<h2 id="簡易控制流程的撰寫"><a href="#簡易控制流程的撰寫" class="headerlink" title="簡易控制流程的撰寫"></a>簡易控制流程的撰寫</h2><pre><code class="javascript">var str = &#39;只被當一科&#39;;    if (str === &#39;all pass&#39;) {      console.log(&#39;帶你去歐洲玩&#39;);    } else if (str === &#39;只被當一科&#39;) {      console.log(&#39;帶你去宜蘭玩&#39;);    } else {      console.log(&#39;禁足&#39;);    }    //帶你去宜蘭玩</code></pre><h2 id="使用switch來撰寫-太多如果的話可以改用switch"><a href="#使用switch來撰寫-太多如果的話可以改用switch" class="headerlink" title="使用switch來撰寫(太多如果的話可以改用switch)"></a>使用switch來撰寫(太多如果的話可以改用switch)</h2><ul><li><p>使用break，是用來跳出swich迴圈（換句話說，沒有寫break的話會使程式一直往下跑）</p><pre><code class="javascript">//用switch 改寫 if else  var key = &#39;all pass&#39;;  switch (key) {    case &#39;all pass&#39;:      console.log(&#39;帶你去歐洲玩&#39;);      break;    case &#39;只被當一科&#39;:      console.log(&#39;帶你去宜蘭玩&#39;);      break;    default:      console.log(&#39;禁足&#39;);      break;  } // 帶你去歐洲玩</code></pre></li></ul><h2 id="迴圈基本介紹"><a href="#迴圈基本介紹" class="headerlink" title="迴圈基本介紹"></a>迴圈基本介紹</h2><p>loop：一直做一樣的事情<br>無窮迴圈，發生的情形：沒有設終止條件，或是終止條件設錯 （<code>control+c</code> 終止它）</p><ul><li>可在程式最前面，加入debugger<br><img src="https://i.imgur.com/kpTOWx4.png" alt=""></li></ul><h2 id="1-迴圈for"><a href="#1-迴圈for" class="headerlink" title="1.迴圈for"></a>1.迴圈for</h2><blockquote><p>彭彭的課程<br><img src="https://i.imgur.com/JYayJeg.png" alt=""></p></blockquote><h3 id="用-for-迴圈數綿羊數到一百隻，直到睡著"><a href="#用-for-迴圈數綿羊數到一百隻，直到睡著" class="headerlink" title="用 for 迴圈數綿羊數到一百隻，直到睡著"></a>用 for 迴圈數綿羊數到一百隻，直到睡著</h3><ul><li><p><code>var</code>後面宣告的變數，可以替換不同字母</p><pre><code class="javascript">// for(初始值;終止條件;每次執行的語句)  for (var i = 0; i &lt; 100; i++) {    console.log(&quot;第&quot; + (i + 1) + &quot;隻綿羊&quot;);  }  //會印出1~9  //i++ 意思指 i+=1 ，也是i=i+1</code></pre><h3 id="用-for-迴圈倒著數綿羊"><a href="#用-for-迴圈倒著數綿羊" class="headerlink" title="用 for 迴圈倒著數綿羊"></a>用 for 迴圈倒著數綿羊</h3><pre><code class="javascript">for (var k = 100; k &gt; 0; k--) {    console.log(&quot;第&quot; + k + &quot;隻綿羊&quot;);    if (k === 1) {      console.log(&#39;睡著了!&#39;);    }  }</code></pre><h3 id="用-for-迴圈-數到第-31-隻綿羊就睡著了！-break"><a href="#用-for-迴圈-數到第-31-隻綿羊就睡著了！-break" class="headerlink" title="用 for 迴圈 數到第 31 隻綿羊就睡著了！ (break)"></a>用 for 迴圈 數到第 31 隻綿羊就睡著了！ (break)</h3><pre><code class="javascript">for (var i = 1; i &lt;= 100; i++) {    console.log(&quot;第&quot; + i + &quot;隻綿羊&quot;);    if (i === 31) {      console.log(&#39;睡著了！&#39;);      break;    }     if (i === 10) {      console.log(&#39;覺得想睡了！&#39;); //到10不會停止    }  }</code></pre><h3 id="用-for-迴圈-跳著數"><a href="#用-for-迴圈-跳著數" class="headerlink" title="用 for 迴圈 跳著數"></a>用 for 迴圈 跳著數</h3></li><li><h4 id="奇數-gt-對2取於數為1者"><a href="#奇數-gt-對2取於數為1者" class="headerlink" title="奇數 -&gt; 對2取於數為1者"></a>奇數 -&gt; 對2取於數為1者</h4><pre><code class="javascript">for (var i = 1; i &lt;= 10; i++) {    if (i % 2 === 1) {      console.log(&quot;第&quot; + i + &quot;隻綿羊&quot;);    }  }</code></pre></li><li><h4 id="印出1-4-7-10"><a href="#印出1-4-7-10" class="headerlink" title="印出1,4,7,10"></a>印出1,4,7,10</h4><pre><code class="javascript">for (var i = 1; i &lt;= 10; i++) {    if (i % 3 === 1)      console.log(&quot;第&quot; + i + &quot;隻綿羊&quot;);  }</code></pre></li></ul><h3 id="用-for-迴圈-我只想跳過第四隻綿羊"><a href="#用-for-迴圈-我只想跳過第四隻綿羊" class="headerlink" title="用 for 迴圈 我只想跳過第四隻綿羊"></a>用 for 迴圈 我只想跳過第四隻綿羊</h3><ul><li>使用<code>continue</code>:會跳過一次(跳過設定的條件)，然後繼續下一次迴圈</li><li>注意語法的順序，如果console.log()在if..continue之前，會變成先讀取所有的i，不會跳過指定位置</li></ul><pre><code class="javascript">for (var i = 1; i &lt;= 10; i++) {      if (i === 4) {        continue      }      console.log(&quot;第&quot; + i + &quot;隻綿羊&quot;);    }</code></pre><p><img src="https://i.imgur.com/1lzSCxs.png" alt=""></p><h3 id="for與陣列的搭配"><a href="#for與陣列的搭配" class="headerlink" title="for與陣列的搭配"></a>for與陣列的搭配</h3><ul><li>i是依照索引來計算，故應該是要0,1,2,3,4 =&gt; &lt;5<ul><li>最後一個索引值是4(第5個沒有值)</li></ul></li></ul><p><img src="https://i.imgur.com/HgTnl9r.png" alt=""></p><p><img src="https://i.imgur.com/UHUvq5n.png" alt=""></p><h2 id="2-迴圈while"><a href="#2-迴圈while" class="headerlink" title="2.迴圈while"></a>2.迴圈while</h2><h4 id="透過彭彭的課程來認識迴圈while"><a href="#透過彭彭的課程來認識迴圈while" class="headerlink" title="透過彭彭的課程來認識迴圈while"></a>透過彭彭的課程來認識迴圈while</h4><p><img src="https://i.imgur.com/pJbuHEp.png" alt=""></p><h3 id="迴圈思考方式："><a href="#迴圈思考方式：" class="headerlink" title="迴圈思考方式："></a>迴圈思考方式：</h3><blockquote><p>彭彭的課程</p><pre><code class="javascript">//1+2+...+50 的運算流程 var sum=0;var n=1;while (n&lt;=50){sum=sum+n; n++}alert(sum);</code></pre></blockquote><h3 id="方式："><a href="#方式：" class="headerlink" title="方式："></a>方式：</h3><p>和迴圈相關的變數追蹤(sum,n)</p><p>第0次迴圈:先判斷n是否&lt;=50<br>   sum:0 ,n:1<br>第1次迴圈：<br>   sum:1,n:2<br>第2次迴圈：先判斷n是否&lt;=50 (根據上一個n是2)<br>   sum:(1+2)=3,n:3<br>第3次迴圈：<br>   sum:(3+3)=6,n:4<br>…<br>…</p><p>第50次迴圈：<br>   sum:1275,n:51<br>第51次迴圈：因大於50，故跳離回圈結束</p><h3 id="延續上面的思考，加入continue"><a href="#延續上面的思考，加入continue" class="headerlink" title="延續上面的思考，加入continue"></a>延續上面的思考，加入continue</h3><pre><code> ```javascript var x=0;  for(var i=0;i&lt;100;i++){  if(1%2= = =0){continue}  x++ } alert(x) ```</code></pre><pre><code>變數追蹤(x,i)0:  x:0,i:01:   x:0 (i為0，對2取餘數為0，進入continue，然後重新開始回圈，沒有進入x++), i:12:   x:1(i為1，對2取餘數不為0，所以沒有執行continue，直接進入x++),i:23:  x:1,i:34:  x:2,i:4...100:  x:50,i:100</code></pre><h3 id="用-while-也可以達到相同的屬羊效果"><a href="#用-while-也可以達到相同的屬羊效果" class="headerlink" title="用 while 也可以達到相同的屬羊效果"></a>用 while 也可以達到相同的屬羊效果</h3><ul><li>印出0~10</li><li>相對for囉唆一點</li></ul><pre><code class="javascript">  let x = 0;    while (x &lt; 10) {      console.log(x);      x++;    }</code></pre><p><img src="https://i.imgur.com/dl0l82W.png" alt=""></p><ul><li><h4 id="利用console來debug"><a href="#利用console來debug" class="headerlink" title="利用console來debug"></a>利用console來debug</h4><pre><code class="javascript">let x = 0;  while (x &lt; 10) {    //利用console來debug    console.log(x)    x++;    console.log(&quot;第&quot; + x + &quot;隻綿羊&quot;);  }</code></pre><p><img src="https://i.imgur.com/f347W4t.png" alt=""></p></li><li><h4 id="搭配continue"><a href="#搭配continue" class="headerlink" title="搭配continue"></a>搭配continue</h4><pre><code class="javascript">let x = 0;  while (x &lt; 10) {    //利用console來debug    console.log(x)    x++;    if (x == 4)      continue;    console.log(&quot;第&quot; + x + &quot;隻綿羊&quot;);  }</code></pre></li><li><h4 id="搭配break"><a href="#搭配break" class="headerlink" title="搭配break"></a>搭配break</h4><pre><code class="javascript">let k = 0;  while (k &lt; 10) {    k++;    console.log(&quot;第&quot; + k + &quot;隻綿羊&quot;);    if (k == 5)      break;</code></pre></li></ul><pre><code>}</code></pre><pre><code>## 3.迴圈 do..while* `()`放條件，`{}`放區塊```javascriptlet i = 0;    do {      i++      console.log(&#39;第&#39; + i + &#39;隻綿羊&#39;)    } while (i &lt; 10)</code></pre><h3 id="與while的不同"><a href="#與while的不同" class="headerlink" title="與while的不同"></a>與while的不同</h3><ul><li><p>因為<code>i&lt;10</code>的條件在最後面，所以他會先跑完do，再到while終止</p><ul><li>i++完之後，跑到<code>while(11&gt;10)</code>，跳出迴圈，執行console.log<pre><code class="javascript">let i = 10;do {i++console.log(&#39;第&#39; + i + &#39;隻綿羊&#39;)} while (i &lt; = 10);console.log(&#39;i=&#39;,i); //i=11</code></pre></li></ul></li><li><p>另一種寫法</p><pre><code class="javascript">let i = 10;  do {    i++    console.log(&#39;第&#39; + i + &#39;隻綿羊&#39;)    if (i&gt;10){       break    //同等於終止條件    }  } while (true);  //如果沒有if條件，這裡又設true，此狀況下會形成無限迴圈  console.log(&#39;i=&#39;,i); //11</code></pre></li></ul><p><img src="https://i.imgur.com/31WqBwO.png" alt=""></p><ul><li>同樣放入while回圈，結果就不會顯示，因為一開始k=10，進入比較，就不符合條件<pre><code class="javascript=">let k = 10;  while (k &lt; 10) {    k++;    console.log(&#39;第&#39; + k + &#39;隻綿羊&#39;)  }</code></pre></li></ul><h2 id="雙層回圈"><a href="#雙層回圈" class="headerlink" title="雙層回圈"></a>雙層回圈</h2><h3 id="用-99-乘法表學雙層迴圈"><a href="#用-99-乘法表學雙層迴圈" class="headerlink" title="用 99 乘法表學雙層迴圈"></a>用 99 乘法表學雙層迴圈</h3><pre><code class="javascript">//有兩層，需數2次    for (i = 1; i &lt; 10; i++) {      for (k = 1; k &lt; 10; k++) {        console.log(&quot;i:&quot; + i, &quot;k:&quot; + k);        // console.log(i + &#39;*&#39; + k + &#39;=&#39; + (i * k));        let result = i * k;        let str = i + &quot;x&quot; + k + &quot;=&quot; + result;        console.log(str);      }    }</code></pre><hr><p>參考資料：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/continue" target="_blank" rel="noopener">MDN continue</a><br><a href="https://ithelp.ithome.com.tw/articles/10191453" target="_blank" rel="noopener">重新認識 JavaScript: Day 09 流程判斷與迴圈</a><br><a href="https://blog.csdn.net/XXJ19950917/article/details/78310346" target="_blank" rel="noopener">JS跳出循环的三种方法(break, return, continue)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> switch </tag>
            
            <tag> 迴圈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基本功- 運算元與運算子</title>
      <link href="/2020/12/26/js-operator/"/>
      <url>/2020/12/26/js-operator/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/42eMxRa.png" alt=""></p><h2 id="比較運算子"><a href="#比較運算子" class="headerlink" title="比較運算子"></a>比較運算子</h2><ul><li>運算符號，使用<code>&gt;</code>,<code>&lt;</code>,<code>=</code>來做判斷</li></ul><p><img src="https://i.imgur.com/XPfa6QC.png" alt=""></p><h3 id="三個等於與兩個等於-有什麼不一樣"><a href="#三個等於與兩個等於-有什麼不一樣" class="headerlink" title="三個等於與兩個等於 有什麼不一樣"></a>三個等於與兩個等於 有什麼不一樣</h3><ul><li>只有一個等於：<code>var x=1;</code> -&gt; 賦值運算子</li><li>所以比較運算值的時候，會使用兩個等於以上</li></ul><h4 id="兩個等於"><a href="#兩個等於" class="headerlink" title="兩個等於"></a>兩個等於</h4><ul><li>不是嚴格的比較</li><li>轉換過的值是相同的，就會符合</li></ul><p><img src="https://i.imgur.com/aXRMO9v.png" alt=""></p><h4 id="三個等於"><a href="#三個等於" class="headerlink" title="三個等於"></a>三個等於</h4><ul><li>實務常用，且較為嚴謹</li><li>字串需經過轉換為數值，進行比較  </li></ul><p><img src="https://i.imgur.com/qFnbPBt.png" alt=""></p><h2 id="算數運算子"><a href="#算數運算子" class="headerlink" title="算數運算子"></a>算數運算子</h2><ul><li><code>+</code>,<code>-</code>, <code>*</code> ,<code>/</code></li><li>先乘除後加減</li><li><code>parseInt(10/3)</code> -&gt;取整數<ul><li>除了取整數外，也將文字轉數值</li></ul></li></ul><p><img src="https://i.imgur.com/GDNiVIa.png" alt=""></p><h3 id="餘數與被除數"><a href="#餘數與被除數" class="headerlink" title="餘數與被除數"></a>餘數與被除數</h3><ul><li>取餘數：<code>5%3</code> –&gt;2 指5對3取餘數為2</li><li><a href="https://ithelp.ithome.com.tw/articles/10191180" target="_blank" rel="noopener">重新認識 JavaScript: Day 06 運算式與運算子</a> | <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators" target="_blank" rel="noopener">MDN運算式與運算子</a></li></ul><h2 id="邏輯運算子"><a href="#邏輯運算子" class="headerlink" title="邏輯運算子"></a>邏輯運算子</h2><ul><li><h4 id="用於結合流程判斷：兩件事同時發生，要兩個都符合、或是達成其中之一"><a href="#用於結合流程判斷：兩件事同時發生，要兩個都符合、或是達成其中之一" class="headerlink" title="用於結合流程判斷：兩件事同時發生，要兩個都符合、或是達成其中之一"></a>用於結合流程判斷：兩件事同時發生，要兩個都符合、或是達成其中之一</h4></li></ul><h3 id="AND-amp-amp"><a href="#AND-amp-amp" class="headerlink" title="AND (&amp;&amp;)"></a>AND (&amp;&amp;)</h3><p>運算式1 <code>&amp;&amp;</code> 運算式2</p><ul><li>假如 運算式1 可以被轉換成 false的話，回傳 運算式1; 否則，回傳 運算式2。 因此，<code>&amp;&amp;</code>只有在 兩個運算元都是True 時才會回傳 True，否則回傳 false。</li></ul><h3 id="OR"><a href="#OR" class="headerlink" title="OR(||)"></a>OR(<code>||</code>)</h3><p>運算式1 || 運算式2</p><ul><li>假如 運算式1 可以被轉換成 true的話，回傳 運算式1; 否則，回傳 運算式2。 因此，||在 兩個運算元有任一個是True 時就會回傳 True，否則回傳 false。</li></ul><ul><li>以布林值為例<br>在OR中，只要有其中一個為true，就會回傳true</li></ul><p><img src="https://i.imgur.com/MVdrWHD.png" alt=""></p><ul><li>運算子的判斷 </li></ul><p><img src="https://i.imgur.com/QrVIaVk.png" alt=""></p><ul><li><code>x-y</code> 是正確的，再往下執行<code>(y-1)</code> 回傳1<code>(2-1)</code></li></ul><p><img src="https://i.imgur.com/ePTB51j.png" alt=""></p><ul><li>執行<code>x-y</code>時，就確定它有值了，所以先行回傳3 </li></ul><p><img src="https://i.imgur.com/jDgoWtM.png" alt=""></p><ul><li>在運算式中第一個值為false，於<code>&amp;&amp;</code>,<code>||</code></li></ul><p><img src="https://i.imgur.com/ozAgEpK.png" alt=""></p><ul><li>其他範例： </li></ul><p>z沒有設定值，就會被設定一個預設值 -&gt;變數沒有值的時候，給他預設值<br>n已經有值，就會回傳他自己的值</p><p><img src="https://i.imgur.com/GCQrL1J.png" alt=""></p><h3 id="NOT"><a href="#NOT" class="headerlink" title="NOT (!)"></a>NOT (!)</h3><p><img src="https://i.imgur.com/AgVDowW.png" alt=""></p><p>清楚介紹：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97%E5%AD%90" target="_blank" rel="noopener">MDN</a></p><h2 id="三元運算子"><a href="#三元運算子" class="headerlink" title="三元運算子"></a>三元運算子</h2><ul><li>有三個運算元</li><li>如果 ？ 我就 ： 不然 (如果我有1千萬 ? 我就 ： 否則)<ul><li><code>1&gt;=3</code>是false，所以回傳b </li></ul></li></ul><p><img src="https://i.imgur.com/zx1ABJ0.png" alt=""></p><p><img src="https://i.imgur.com/kWSDA5Q.png" alt=""></p><ul><li>也同等於if else</li></ul><p><img src="https://i.imgur.com/e4e2VMo.png" alt=""></p><h2 id="賦值運算子與次方-系列"><a href="#賦值運算子與次方-系列" class="headerlink" title="賦值運算子與次方(+= 系列)"></a>賦值運算子與次方(+= 系列)</h2><ul><li><h3 id="運算"><a href="#運算" class="headerlink" title="+=運算"></a>+=運算</h3></li></ul><pre><code class="javascript"> console.log(&#39;賦值運算子&#39;)    var x = 1;    console.log(&#39;x=&#39;, x); //1    x += 1;    console.log(&#39;x+=1 等於&#39;, x); //2    //x=x+1    var y = 10;    y -= 2;    //y=y-2    console.log(y);    x *= 5;    console.log(&#39;x*=5 等於&#39;, x); //10    x /= 2;    //x=x/2    console.log(&#39;x/=2等於&#39;, x) //5    ////////////////////////    var z = 35;    z %= 10;    // z = z % 10;    console.log(&#39;z %=10&#39;, z);</code></pre><ul><li><h3 id="次方運算"><a href="#次方運算" class="headerlink" title="次方運算"></a>次方運算</h3></li></ul><pre><code class="javascript">   //次方    /////////    var a = 2;    console.log(&#39;a **5&#39;, a ** 5); //2的5次方＝32</code></pre><ul><li><h3 id="給預設值"><a href="#給預設值" class="headerlink" title="給預設值"></a>給預設值</h3><pre><code class="javascript">var b;  b ||= 10;  console.log(&#39;給預設值 b&#39;, b); //回傳10  var c = 555;  c ||= 10;  console.log(&#39;給預設值 c&#39;, c); //回傳555 ; 因為c有宣告，所以c適用原本給的值</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> parseInt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基本功- 變數與型別</title>
      <link href="/2020/12/26/js-variable/"/>
      <url>/2020/12/26/js-variable/</url>
      
        <content type="html"><![CDATA[<h2 id="使用var來宣告變數"><a href="#使用var來宣告變數" class="headerlink" title="使用var來宣告變數"></a>使用var來宣告變數</h2><h4 id="如果var沒有給予任何值，會呈現undefine"><a href="#如果var沒有給予任何值，會呈現undefine" class="headerlink" title="如果var沒有給予任何值，會呈現undefine"></a>如果var沒有給予任何值，會呈現undefine</h4><p><img src="https://i.imgur.com/ZV4O7gJ.png" alt=""></p><h4 id="給予值之後"><a href="#給予值之後" class="headerlink" title="給予值之後"></a>給予值之後</h4><p><img src="https://i.imgur.com/b916Z2B.png" alt=""></p><p>程式語言中 等於符號<code>=</code> 不是比較的意思，是-&gt;指派值的意思<br>上圖：1是一個值，它指派給x這個變數</p><h3 id="要比較值的大小"><a href="#要比較值的大小" class="headerlink" title="要比較值的大小"></a>要比較值的大小</h3><ul><li>true,false（布林值）</li><li>宣告x為1,y=2;利用 <code>===</code>來判斷<br><img src="https://i.imgur.com/0jhw1fi.png" alt=""></li></ul><h3 id="型別"><a href="#型別" class="headerlink" title="型別"></a>型別</h3><ul><li>剛剛把1給x這個變數</li><li>當查看型別時，如下圖<br><img src="https://i.imgur.com/y0o91bX.png" alt=""></li></ul><hr><h2 id="在VS-code-來撰寫-JS"><a href="#在VS-code-來撰寫-JS" class="headerlink" title="在VS code 來撰寫 JS"></a>在VS code 來撰寫 JS</h2><ul><li>與剛剛在chrom一樣的方式來輸入x,y</li><li>利用console.log來印出資料</li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;title&gt;使用 VS code 來撰寫 JS，講解變數，值與型別&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;h1&gt;EX 01&lt;/h1&gt;  &lt;script&gt;    console.log(&#39;hello world&#39;)    var x;    console.log(x);  // 出現undefined    var y = 10;    console.log(y);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.imgur.com/pFvGU90.png" alt=""></p><h2 id="型別介紹："><a href="#型別介紹：" class="headerlink" title="型別介紹："></a>型別介紹：</h2><h3 id="Number-數值"><a href="#Number-數值" class="headerlink" title="Number 數值"></a>Number 數值</h3><ul><li>通常程式語言會分成，如：python’java’c…<ul><li>整數 integer：只需紀錄完整數字</li><li>浮點數 float：小數點</li></ul></li><li>而javascript 不區分 -&gt; 只有 數值number（具有浮點數能力）</li><li>以下宣告 <code>b=1.1</code>，查看型別發現是<code>typeof</code></li></ul><p><img src="https://i.imgur.com/AdcRhnM.png" alt=""></p><ul><li>另外以python為例：可以發現有區分顯示整數、浮點數</li></ul><blockquote><p>程式柴課程：<br><img src="https://i.imgur.com/MWfjXxS.png" alt=""></p></blockquote><h3 id="浮點數的陷阱"><a href="#浮點數的陷阱" class="headerlink" title="浮點數的陷阱"></a>浮點數的陷阱</h3><ul><li>因為js運算是依循IEEE754的規範，在運算時會轉換成<code>二進制</code>，而浮點數在轉成<code>二進制</code>時會造成無窮迴圈，進而產生運算誤差</li><li>由於js採用64位雙精度浮點數編碼，實際儲存時為了節省空間，採用科學計數法表示</li></ul><p>參考資料：<br><a href="https://dotblogs.com.tw/WillianHsiaoDotNetBLog/2020/01/15/JavascriptFloatCaculateBug" target="_blank" rel="noopener">[JavaScript]浮點數運算出現一堆小數位數</a> <a href="https://www.itread01.com/content/1545644704.html" target="_blank" rel="noopener">JavaScript 浮點數陷阱及解法</a><br><a href="https://www.mdeditor.tw/pl/pqGp/zh-tw" target="_blank" rel="noopener">js浮點數計算精度問題</a><br><a href="https://medium.com/@ad57475747/javascript%E6%B5%AE%E9%BB%9E%E6%95%B8%E9%81%8B%E7%AE%97-1691eefe3ea7" target="_blank" rel="noopener">JavaScript-Number的各種地雷–浮點數運算</a></p><h2 id="String-字串"><a href="#String-字串" class="headerlink" title="String 字串"></a>String 字串</h2><blockquote><p>程式柴課程：<br><img src="https://i.imgur.com/xO6SmsP.png" alt=""></p></blockquote><ul><li><h3 id="以chrome開發者工具示範"><a href="#以chrome開發者工具示範" class="headerlink" title="以chrome開發者工具示範"></a>以chrome開發者工具示範</h3><img src="https://i.imgur.com/81RfQ39.png" alt=""></li><li><h4 id="單雙混用"><a href="#單雙混用" class="headerlink" title="單雙混用"></a>單雙混用</h4><img src="https://i.imgur.com/0yIN8rY.png" alt=""></li><li><h4 id="ES6使用-此符號也能用來處理斷行問題"><a href="#ES6使用-此符號也能用來處理斷行問題" class="headerlink" title="ES6使用  (此符號也能用來處理斷行問題)"></a>ES6使用  (此符號也能用來處理斷行問題)</h4><img src="https://i.imgur.com/NSAe3A0.png" alt=""></li><li><h4 id="字串連接"><a href="#字串連接" class="headerlink" title="字串連接"></a>字串連接</h4><img src="https://i.imgur.com/bqpGAjI.png" alt=""></li></ul><p><code>clear()</code>  清除頁面</p><h2 id="Boolean-布林值"><a href="#Boolean-布林值" class="headerlink" title="Boolean 布林值"></a>Boolean 布林值</h2><p><img src="https://i.imgur.com/fcMnCjC.png" alt=""><br>二進位：<br>0的時候-&gt;false<br>1的時候-&gt;true</p><ul><li><h3 id="搭配if、else使用，以控制或判斷流程"><a href="#搭配if、else使用，以控制或判斷流程" class="headerlink" title="搭配if、else使用，以控制或判斷流程"></a>搭配if、else使用，以控制或判斷流程</h3><img src="https://i.imgur.com/uQ00Bgh.png" alt=""></li></ul><h2 id="「null-空值」與-「undefined-未定義」"><a href="#「null-空值」與-「undefined-未定義」" class="headerlink" title="「null 空值」與 「undefined 未定義」"></a>「null 空值」與 「undefined 未定義」</h2><ul><li>宣吿了x變數，卻沒有給它值（還沒有指派給它值） -&gt;未定義的變數</li></ul><p><img src="https://i.imgur.com/wCX0pBt.png" alt=""></p><ul><li>期待它是一個空值，是由使用者指派給b變數（指定給它為空值）</li></ul><p><img src="https://i.imgur.com/GkIkdYT.png" alt=""></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> variable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS練習- Hamburger 漢堡表單</title>
      <link href="/2020/12/13/Hamburger/"/>
      <url>/2020/12/13/Hamburger/</url>
      
        <content type="html"><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p><a href="https://eva813.github.io/Eva_portfolio/hamburger-menu/hamburger-menu.html" target="_blank" rel="noopener">成品</a><br>運用css可以做出許多意想不到的效果，有立體的呈現、動畫的改變等等…</p><ul><li>漢堡表單的製作，以及點選時頁面的跳轉、動畫的改變</li><li>nav按鈕，立體翻轉</li><li>中間icon圖示的排版，以及旋轉的效果</li></ul><p><img src="https://i.imgur.com/PYZZI5K.png" alt=""></p><h2 id="banner區的架構"><a href="#banner區的架構" class="headerlink" title="banner區的架構"></a>banner區的架構</h2><pre><code class="html">&lt;div class=&quot;banner&quot;&gt;            &lt;div class=&quot;logo&quot;&gt;                &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;./hamburger-images/logo.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;            &lt;/div&gt;            &lt;div class=&quot;btn-wrapper&quot;&gt;                &lt;button class=&quot;banner-btn&quot;&gt;Explore More&lt;/button&gt;            &lt;/div&gt;        &lt;/div&gt;</code></pre><ul><li><h3 id="導覽列"><a href="#導覽列" class="headerlink" title="導覽列"></a>導覽列</h3></li></ul><pre><code class="html">&lt;nav class=&quot;top-nav&quot;&gt;                &lt;ul class=&quot;nav-list&quot;&gt;                    &lt;li&gt;                        &lt;a href=&quot;#&quot; class=&quot;nav-link&quot; data-text=&#39;Home&#39;&gt;Home&lt;/a&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;a href=&quot;#&quot; class=&quot;nav-link&quot; data-text=&#39;About As&#39;&gt;About As&lt;/a&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;a href=&quot;#&quot; class=&quot;nav-link&quot; data-text=&#39;Our Team&#39;&gt;                            Our Team                        &lt;/a&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;a href=&quot;#&quot; class=&quot;nav-link&quot; data-text=&#39;Services&#39;&gt;                            Services                        &lt;/a&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;a href=&quot;#&quot; class=&quot;nav-link&quot; data-text=&#39;Contanct&#39;&gt;                            Contanct                        &lt;/a&gt;                    &lt;/li&gt;                &lt;/ul&gt;            &lt;/nav&gt;</code></pre><p><img src="https://i.imgur.com/SFLZx31.png" alt=""></p><ul><li><h3 id="加入社群媒體icon"><a href="#加入社群媒體icon" class="headerlink" title="加入社群媒體icon"></a>加入社群媒體icon</h3></li></ul><pre><code class="html">&lt;nav class=&quot;bottom-nav&quot;&gt;                &lt;ul class=&quot;icons&quot;&gt;                    &lt;li class=&quot;icon-item&quot;&gt;                        &lt;a href=&quot;#&quot; class=&quot;icon-link&quot;&gt;&lt;i class=&quot;fab fa-facebook-f&quot;&gt;&lt;/i&gt;&lt;/a&gt;                    &lt;/li&gt;                    &lt;li class=&quot;icon-item&quot;&gt;                        &lt;a href=&quot;#&quot; class=&quot;icon-link&quot;&gt;&lt;i class=&quot;fab fa-youtube&quot;&gt;&lt;/i&gt;&lt;/a&gt;                    &lt;/li&gt;                    &lt;li class=&quot;icon-item&quot;&gt;                        &lt;a href=&quot;#&quot; class=&quot;icon-link&quot;&gt;&lt;i class=&quot;fab fa-twitter&quot;&gt;&lt;/i&gt;&lt;/a&gt;                    &lt;/li&gt;                    &lt;li class=&quot;icon-item&quot;&gt;                        &lt;a href=&quot;#&quot; class=&quot;icon-link&quot;&gt;&lt;i class=&quot;fab fa-google-plus-g&quot;&gt;&lt;/i&gt;&lt;/a&gt;                    &lt;/li&gt;                &lt;/ul&gt;            &lt;/nav&gt;</code></pre><p><img src="https://i.imgur.com/DDKx6sq.png" alt=""></p><ul><li><h3 id="先讓nav列hidden起來"><a href="#先讓nav列hidden起來" class="headerlink" title="先讓nav列hidden起來"></a>先讓nav列hidden起來</h3><ul><li>再html的class後面，增加hidden，瀏覽器就不會顯示該隱藏的部分</li></ul></li></ul><pre><code class="html">&lt;nav class=&quot;top-nav&quot; hidden&gt;                &lt;ul class=&quot;nav-list&quot;&gt;                    &lt;li&gt;                        &lt;a href=&quot;#&quot; class=&quot;nav-link&quot;&gt;Home&lt;/a&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;a href=&quot;#&quot; class=&quot;nav-link&quot;&gt;About As&lt;/a&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;a href=&quot;#&quot; class=&quot;nav-lik&quot;&gt;                            Our Team                        &lt;/a&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;a href=&quot;#&quot; class=&quot;nav-link&quot;&gt;                            Services                        &lt;/a&gt;                    &lt;/li&gt;                    &lt;li&gt;                        &lt;a href=&quot;#&quot; class=&quot;nav-link&quot;&gt;                            Contanct                        &lt;/a&gt;                    &lt;/li&gt;                &lt;/ul&gt;            &lt;/nav&gt;        &lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/UdQIyRA.png" alt=""></p><ul><li>讓兩個a連結的nav都hidden</li></ul><h1 id="右上選單"><a href="#右上選單" class="headerlink" title="右上選單"></a>右上選單</h1><p>先製作三個<code>div</code><br><img src="https://i.imgur.com/vLXU6ny.png" alt=""></p><pre><code class="html">&lt;div class=&quot;hamburger-menu&quot;&gt;                &lt;div class=&quot;line line-1&quot;&gt;&lt;/div&gt;                &lt;div class=&quot;line line-2&quot;&gt;&lt;/div&gt;                &lt;div class=&quot;line line-3&quot;&gt;&lt;/div&gt;            &lt;/div&gt;</code></pre><ul><li><h3 id="在hamburger-menu這裏的寬度、高度、位置先設定好"><a href="#在hamburger-menu這裏的寬度、高度、位置先設定好" class="headerlink" title="在hamburger-menu這裏的寬度、高度、位置先設定好"></a>在hamburger-menu這裏的寬度、高度、位置先設定好</h3></li><li><h3 id="針對div的line設定"><a href="#針對div的line設定" class="headerlink" title="針對div的line設定"></a>針對div的line設定</h3><pre><code class="css">.hamburger-menu{width: 35px;height: 30px;background-color: #fff;position: fixed;top: 40px;right: 50px;}</code></pre></li></ul><p>.line{<br>  width: inherit;<br>  height: 5px;</p><p>  background-color: #16c3cf;<br>  border-radius: 25px;<br>}<br>.line-2{<br>  background-color: #000;<br>}</p><pre><code>* 他是三個div組合的* 這裏故意把2設為黑色![](https://i.imgur.com/62XCqGg.png)* 讓他分三條線可以分散對齊* 把白色去掉```css.hamburger-menu{ display: flex;  flex-direction: column;  justify-content: space-between;  cursor: pointer;}</code></pre><p><img src="https://i.imgur.com/yPLLtSs.png" alt=""></p><hr><h1 id="3D按鈕"><a href="#3D按鈕" class="headerlink" title="3D按鈕"></a>3D按鈕</h1><pre><code class="css">/* 3d按鈕 */.banner-btn{  width: 350px;  height: 100px;  background: linear-gradient(#16c3cf,#156459);}</code></pre><p><img src="https://i.imgur.com/hs2ZbW8.png" alt=""></p><ul><li><code>text-shadow: 0 10px 10px #000;</code></li></ul><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><ul><li><h4 id="3D-btn-wrapper-gt-perspective-1000px-banner-btn-gt-transform-style-preserve-3d"><a href="#3D-btn-wrapper-gt-perspective-1000px-banner-btn-gt-transform-style-preserve-3d" class="headerlink" title="3D .btn-wrapper-&gt;perspective: 1000px; .banner-btn -&gt; transform-style: preserve-3d;"></a>3D <code>.btn-wrapper-&gt;perspective: 1000px;</code> <code>.banner-btn -&gt; transform-style: preserve-3d;</code></h4></li><li><a href="https://eyesofkids.gitbooks.io/css3/content/contents/transform3d.html" target="_blank" rel="noopener">變形(transform) 3D基本使用</a><br><a href="https://www.w3schools.com/css/css3_3dtransforms.asp" target="_blank" rel="noopener">w3schools</a><br><a href="https://3dtransforms.desandro.com/3d-transform-functions" target="_blank" rel="noopener">3dtransforms</a><br><a href="https://www.puritys.me/docs-blog/article-354-CSS-%E5%AF%A6%E5%81%9A-3D-%E7%AB%8B%E9%AB%94%E6%AD%A3%E6%96%B9%E5%BD%A2.html" target="_blank" rel="noopener">CSS 實做 3D 立體正方形</a><br><a href="https://www.puritys.me/docs-blog/article-353-CSS-3D-%E6%97%8B%E8%BD%89-rotate3d-%E8%88%87-translate3d.html" target="_blank" rel="noopener">CSS 3D 旋轉 rotate3d 與 translate3d</a></li></ul><p>:::success<br>我們會在要進行3D變形的外層容器元素來定義perspective，這樣包含在其內的子元素(物件)都可以按照這個深度來進行變形。<br>perspective設定為300px或更少時，會有強烈的失真，500px到1000px的失真較為中等，2000px以上的失真就很輕微。<br>:::</p><ul><li><h3 id="要在該按鈕前面增加一個偽元素"><a href="#要在該按鈕前面增加一個偽元素" class="headerlink" title="要在該按鈕前面增加一個偽元素"></a>要在該按鈕前面增加一個偽元素</h3></li></ul><pre><code class="css=">.banner-btn::before{  content: &#39;&#39;;  width: 100%;  height: 15px;  background-color: red;  position: absolute;}</code></pre><p><img src="https://i.imgur.com/uRCxqlS.png" alt=""></p><pre><code class="css">.banner-btn::before{  content: &#39;&#39;;  width: 100%;  height: 15px;  background-color: #156469;  position: absolute;  bottom: 0px; right: 0px;  transform: rotateX(90deg);  /*會使他消失 */  transform-origin:bottom ;}</code></pre><p><img src="https://i.imgur.com/eAfVcwr.png" alt=""></p><ul><li><code>transform-style: preserve-3d;</code></li></ul><p><img src="https://i.imgur.com/NxcSBfC.png" alt=""></p><ul><li><code>transform-origin:bottom ;</code></li></ul><p><img src="https://i.imgur.com/pDZA4Mf.png" alt=""></p><ul><li><code>.banner-btn::after</code></li></ul><p><img src="https://i.imgur.com/loDXaL2.png" alt=""></p><pre><code class="css">.banner-btn::after{  content: &#39;&#39;;  width: 15px;  height: 100%;  background-color: #16c3cf;  position: absolute;  top: 0px; right: 0px;  transform: rotateY(-90deg);  /*會使他消失 */  transform-origin:right;}</code></pre><p><img src="https://i.imgur.com/zG40Jfg.png" alt=""></p><hr><h1 id="nav列"><a href="#nav列" class="headerlink" title="nav列"></a>nav列</h1><ul><li>z-index:100<br><img src="https://i.imgur.com/IpB3rfs.png" alt=""></li></ul><p><img src="https://i.imgur.com/copdVTv.png" alt=""></p><ul><li><h3 id="在上層導覽列，先設定灰色的背景，以方便看清楚大小"><a href="#在上層導覽列，先設定灰色的背景，以方便看清楚大小" class="headerlink" title="在上層導覽列，先設定灰色的背景，以方便看清楚大小"></a>在上層導覽列，先設定灰色的背景，以方便看清楚大小</h3></li><li><h3 id="使用flex排列"><a href="#使用flex排列" class="headerlink" title="使用flex排列"></a>使用flex排列</h3></li></ul><pre><code class="css">.nav-list{  background-color: #ccc;list-style: none;width: 80%;margin: auto;height: inherit;/* 使他水平 */display: flex;justify-content: space-evenly;align-items:center;}</code></pre><p><img src="https://i.imgur.com/z2eFyRV.png" alt=""></p><h2 id="上層導覽列，連結的3d按鈕製作"><a href="#上層導覽列，連結的3d按鈕製作" class="headerlink" title="上層導覽列，連結的3d按鈕製作"></a>上層導覽列，連結的3d按鈕製作</h2><ul><li>在他們的html 設定data-text<pre><code class="htmlembedded">&lt;li&gt; &lt;a href=&quot;#&quot; class=&quot;nav-link&quot; data-text=&#39;Home&#39;&gt;Home&lt;/a&gt; &lt;/li&gt;</code></pre></li></ul><pre><code>```css.nav-link::after{ content: attr(data-text); position: absolute; left:0; bottom:-100%; background-color: #000; padding: inherit;}</code></pre><p><img src="https://i.imgur.com/5Qw1iCD.png" alt=""></p><ul><li><p>將after創造出的rotate到父層元素的下方</p></li><li><h4 id="transform-rotateX-90deg"><a href="#transform-rotateX-90deg" class="headerlink" title="transform: rotateX(-90deg);"></a><code>transform: rotateX(-90deg);</code></h4><pre><code class="css">.nav-link:hover{transform: rotateX(90deg);}</code></pre></li></ul><p><img src="https://i.imgur.com/dpyaO6e.png" alt=""></p><h3 id="位置不對："><a href="#位置不對：" class="headerlink" title="位置不對："></a>位置不對：</h3><p><img src="https://i.imgur.com/auUp49u.png" alt=""></p><ul><li>transform-origin: top;</li></ul><p><img src="https://i.imgur.com/LpBcL0D.png" alt=""></p><hr><h1 id="icon-button"><a href="#icon-button" class="headerlink" title="icon button"></a>icon button</h1><p><img src="https://i.imgur.com/rv84ID4.png" alt=""></p><pre><code class="css">.icons{  position: absolute;  /* 父層已經有設定fixed */ top: 50%; left: 50%; transform: translate(-50%,-50%);</code></pre><p><img src="https://i.imgur.com/cXJ8VVD.png" alt=""></p><p><img src="https://i.imgur.com/ieKQMjU.png" alt=""></p><pre><code class="css">.icons{display: flex; width: 60%; justify-content: space-between;}</code></pre><p><img src="https://i.imgur.com/FjGcoHj.png" alt=""></p><p><img src="https://i.imgur.com/LG9TVCS.png" alt=""></p><ul><li><h4 id="上面因為原本為inline元素，-display-block-或display-flex"><a href="#上面因為原本為inline元素，-display-block-或display-flex" class="headerlink" title="上面因為原本為inline元素， display:block 或display:flex"></a>上面因為原本為inline元素， <code>display:block</code> 或<code>display:flex</code></h4></li></ul><p><img src="https://i.imgur.com/expCFZr.png" alt=""></p><ul><li><h4 id="要使icon在中間，使用flex"><a href="#要使icon在中間，使用flex" class="headerlink" title="要使icon在中間，使用flex"></a>要使icon在中間，使用flex</h4></li></ul><pre><code class="css">.icon-link{  width: 200px;  height: 200px;  border:8px solid #fff ;  display: flex;  justify-content:center;  align-items: center;  text-decoration: none;border-radius: 5px; }</code></pre><p><img src="https://i.imgur.com/1LaJiu4.png" alt=""></p><p><img src="https://i.imgur.com/iZsXFCJ.png" alt=""></p><ul><li>調整height</li></ul><p><img src="https://i.imgur.com/ej932dL.png" alt=""></p><pre><code class="css">.icon-link::before{content: &#39;&#39;;height:25px ;width: 5px;background-color: #fff;position: absolute;top: 0;}  .icon-link::after{content: &#39;&#39;;height:25px ;width: 5px;background-color: #fff;position: absolute;bottom: 0;} </code></pre><p><img src="https://i.imgur.com/Yuri7rC.png" alt=""></p><h2 id="背景顏色的動畫"><a href="#背景顏色的動畫" class="headerlink" title="背景顏色的動畫"></a>背景顏色的動畫</h2><h4 id="1-在icon後面增設背景色彩"><a href="#1-在icon後面增設背景色彩" class="headerlink" title="1.在icon後面增設背景色彩"></a>1.在icon後面增設背景色彩</h4><pre><code class="css">.icon-item:nth-child(1) .icon-link i::after{  background-color: #3b5999;}.icon-item:nth-child(2) .icon-link i::after{  background-color: #cd201f;}.icon-item:nth-child(3) .icon-link i::after{  background-color: #55acee;}.icon-item:nth-child(4) .icon-link i::after{  background-color: #dd4b39;}</code></pre><h4 id="2-設定hover之後，位置移動到原本icon的位置"><a href="#2-設定hover之後，位置移動到原本icon的位置" class="headerlink" title="2.設定hover之後，位置移動到原本icon的位置"></a>2.設定hover之後，位置移動到原本icon的位置</h4><pre><code class="css">/* 讓顏色回到原來的位置 */.icon-link:hover i::after{  top: 0;  right: 0;  border-radius: 0;}</code></pre><p><img src="https://i.imgur.com/cdJuIsW.png" alt=""></p><h4 id="3-讓圓形色彩隱藏"><a href="#3-讓圓形色彩隱藏" class="headerlink" title="3.讓圓形色彩隱藏"></a>3.讓圓形色彩隱藏</h4><pre><code class="css">.icon-link i{over-flow:hidden;}</code></pre><p><img src="https://i.imgur.com/tqPlffY.png" alt=""></p><h1 id="漢堡的動畫"><a href="#漢堡的動畫" class="headerlink" title="漢堡的動畫"></a>漢堡的動畫</h1><ul><li>line-1,line-2,line-3 位置改變的設定</li><li>這裏使用js，增加change的class名稱<br><img src="https://i.imgur.com/UNGeilF.png" alt=""></li></ul><p><img src="https://i.imgur.com/trwX0C8.png" alt=""></p><pre><code class="css">.change .line-1{  transform: rotateZ(-45deg);}.change .line-2{  transform: translate(5px,20px);}.change .line-3{transform: rotateZ(45deg);}</code></pre><pre><code class="javascript">document.querySelector(&#39;.hamburger-menu&#39;).addEventListener(&#39;click&#39;, () =&gt; {  document.querySelector(&#39;.nav-wrapper&#39;).classList.toggle(&#39;change&#39;)})</code></pre><hr><h1 id="resposive"><a href="#resposive" class="headerlink" title="resposive"></a>resposive</h1><ul><li>針對螢幕大小，來設定內容為的寬、高與字型大小</li></ul><p><a href="https://ithelp.ithome.com.tw/articles/10196578" target="_blank" rel="noopener">Day22：小事之 Media Query</a></p><p><a href="https://medium.com/%E7%8B%90%E7%8B%B8%E7%9A%84%E8%91%A1%E8%90%84%E9%85%92/css%E5%AA%92%E9%AB%94%E6%9F%A5%E8%A9%A2-css-media-queries-357e2b03b3eb" target="_blank" rel="noopener">響應式網站設計基本觀念(2)：CSS媒體查詢(CSS Media Queries)</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> CSS練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> udemy </tag>
            
            <tag> CSS </tag>
            
            <tag> transform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS練習- portfolio web page 作品集網頁</title>
      <link href="/2020/12/13/portfolio-web-page/"/>
      <url>/2020/12/13/portfolio-web-page/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3DLhHgL.png" alt=""></p><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p><a href="https://eva813.github.io/Eva_portfolio/portfolio01/portfolio01.html" target="_blank" rel="noopener">成品</a></p><ul><li>這是一個展現作品集的一頁式網頁<ul><li>頁面的排版主要使用grid執行</li><li>網頁整的色調，練習<code>:root</code>設定</li><li>練習聯絡欄的排版</li></ul></li><li>另外，有使用到一些些js的部分，如設定滾動的效果、點擊後畫面的變化，但因主要練習排版，所以筆記內容並未多加提及</li></ul><p><img src="https://i.imgur.com/gpZLEE8.png" alt=""></p><h2 id="HEADER"><a href="#HEADER" class="headerlink" title="HEADER"></a>HEADER</h2><pre><code class="html"> &lt;!--===== HEADER =====--&gt;  &lt;header class=&quot;l-header&quot;&gt;    &lt;nav class=&quot;nav bd-grid&quot;&gt;      &lt;div&gt;        &lt;a href=&quot;#&quot; class=&quot;nav__logo&quot;&gt;Jhon Doe&lt;/a&gt;      &lt;/div&gt;      &lt;div class=&quot;nav_manue&quot; id=&quot;nav-menu&quot;&gt;        &lt;ul class=&quot;nav_list&quot;&gt;          &lt;li class=&quot;nav_item&quot;&gt;&lt;a href=&quot;#home&quot; class=&quot;nav_link&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;          &lt;li class=&quot;nav_item&quot;&gt;&lt;a href=&quot;#abour&quot; class=&quot;nav_link&quot;&gt;About&lt;/a&gt;&lt;/li&gt;          &lt;li class=&quot;nav_item&quot;&gt;&lt;a href=&quot;#skills&quot; class=&quot;nav_link&quot;&gt;Skills&lt;/a&gt;&lt;/li&gt;          &lt;li class=&quot;nav_item&quot;&gt;&lt;a href=&quot;#portfolio&quot; class=&quot;nav_link&quot;&gt;Portfolio&lt;/a&gt;&lt;/li&gt;          &lt;li class=&quot;nav_item&quot;&gt;&lt;a href=&quot;#contact&quot; class=&quot;nav_link&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;        &lt;/ul&gt;      &lt;/div&gt;      &lt;div class=&quot;nav__toggle&quot; id=&quot;nav-toggle&quot;&gt;        &lt;i class=&#39;bx bx-menu&#39;&gt;&lt;/i&gt;      &lt;/div&gt;    &lt;/nav&gt;  &lt;/header&gt;</code></pre><h4 id="header的建構"><a href="#header的建構" class="headerlink" title="header的建構"></a>header的建構</h4><p><img src="https://i.imgur.com/NPyM8sR.png" alt=""></p><h3 id="css-變數"><a href="#css-變數" class="headerlink" title="css 變數"></a>css 變數</h3><pre><code class="css">/*建立全域變數*/:root {    --csscoke-red: #f00;}/*套用變數*/.section-item {    color: var( --csscoke-red );}</code></pre><blockquote><p>csscoke<br> <code>:root</code>中使用關鍵符號 –建立了一個 CSS 變數，並且給予該變數名稱叫做 csscoke-red ，然後給予這個變數名稱一個值 <code>#f00</code>，這表示後面要套用這個變數名稱的項目，會直接取得這個 <code>#f00</code>。</p></blockquote><p>參考資料：<a href="https://ithelp.ithome.com.tw/articles/10228111" target="_blank" rel="noopener">:root 根目錄選取器 - 叫你阿爸出來講</a></p><h3 id="grid-template-columns"><a href="#grid-template-columns" class="headerlink" title="grid-template-columns"></a>grid-template-columns</h3><pre><code class="css">.bd-grid{    max-width: 1024px;    display: grid;    grid-template-columns: 100%;    grid-column-gap: 2rem;    width: calc(100% - 2rem);    margin-left: var(--mb-2);    margin-right: var(--mb-2);}</code></pre><blockquote><p>卡伯斯<br>grid-template-columns 定義水平方向的空間，grid-template-rows 定義垂直方向的空間<br><code>.wrap {  grid-template-columns: repeat(2, 1fr 2fr) 100px;       /* grid-template-columns: repeat({次數}, {格線...} | {格線...}) | {格線...}; */}</code><br>fr 這個單位，這個單位能夠將可用的 剩餘空間 做比例分割，以上面的 1fr 2fr 為例，空間將被分割成 1/3、2/3 兩個大小。<br>另一個是 repeat，可以重複隔線。</p></blockquote><p><a href="https://wcc723.github.io/css/2017/03/22/css-grid-layout/" target="_blank" rel="noopener">CSS Grid 屬性介紹</a><br><a href="https://www.mdeditor.tw/pl/pn1h/zh-tw" target="_blank" rel="noopener">一行 CSS 程式碼搞定響應式佈局</a><br><a href="https://ithelp.ithome.com.tw/articles/10130065" target="_blank" rel="noopener">CSS沒有極限 - CSS的神奇Calc運算</a></p><h1 id="home"><a href="#home" class="headerlink" title="home"></a>home</h1><p><img src="https://i.imgur.com/ngnNmzl.png" alt=""></p><pre><code class="css">.home__scroll{    align-self: flex-end;    padding-bottom: var(--mb-4);}/* 直行旋轉 */.home__scroll-link{    writing-mode: vertical-lr;    transform: rotate(-180deg);    color: var(--white-color);}</code></pre><p><img src="https://i.imgur.com/we7sEnu.png" alt=""></p><h1 id="skills"><a href="#skills" class="headerlink" title="skills"></a>skills</h1><p><img src="https://i.imgur.com/0Nsj8gH.png" alt=""></p><pre><code class="html">&lt;!--===== SKILLS =====--&gt;    &lt;section class=&quot;skills section&quot; id=&quot;skills&quot;&gt;      &lt;h2 class=&quot;section-title&quot;&gt;Skills&lt;/h2&gt;      &lt;div class=&quot;skills__container bd-grid&quot;&gt;        &lt;div class=&quot;skills__box&quot;&gt;          &lt;h3 class=&quot;skills__subtitle&quot;&gt;Development&lt;/h3&gt;          &lt;span class=&quot;skills__name&quot;&gt;Html&lt;/span&gt;          &lt;span class=&quot;skills__name&quot;&gt;Css&lt;/span&gt;          &lt;span class=&quot;skills__name&quot;&gt;Javascript&lt;/span&gt;          &lt;span class=&quot;skills__name&quot;&gt;Scss&lt;/span&gt;          &lt;span class=&quot;skills__name&quot;&gt;React&lt;/span&gt;          &lt;span class=&quot;skills__name&quot;&gt;Vue&lt;/span&gt;          &lt;h3 class=&quot;skills__subtitle&quot;&gt;Design&lt;/h3&gt;          &lt;span class=&quot;skills__name&quot;&gt;Figma&lt;/span&gt;          &lt;span class=&quot;skills__name&quot;&gt;Adobe XD&lt;/span&gt;          &lt;span class=&quot;skills__name&quot;&gt;Photoshop&lt;/span&gt;        &lt;/div&gt;        &lt;div class=&quot;skills__img&quot;&gt;          &lt;img src=&quot;./img/skill.jpg&quot; alt=&quot;&quot;&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/section&gt;</code></pre><p><code>.skills__container{    row-gap: 2rem;} 使欄位2rem的空格</code></p><blockquote><p>rem 也是相對的文字尺寸，和 em 使用方法接近，不同的是他僅相對於 root 層級的文字大小(網頁中的 html)。<br><a href="https://iter01.com/23690.html" target="_blank" rel="noopener">如何更愉快地使用rem —— 別說你懂CSS相對單位</a><br><a href="https://www.hexschool.com/2016/01/02/2016-08-08-em-vs-rem/" target="_blank" rel="noopener">實際展示 EM 與 REM 的差異</a></p></blockquote><pre><code class="css">.skills__name{    display: inline-block;    font-size: var(--small-font-size);    margin-right: var(--mb-2);    margin-bottom: var(--mb-3);    padding: .25rem .5rem;    background-color: var(--white-color);    border-radius: .25rem;}</code></pre><ul><li>中間的技能名稱設定</li></ul><p><img src="https://i.imgur.com/YcJoUD6.png" alt=""></p><h1 id="contact"><a href="#contact" class="headerlink" title="contact"></a>contact</h1><p><img src="https://i.imgur.com/FMyeUse.png" alt=""></p><ul><li>輸入框</li></ul><pre><code class="css">/* name,email */.contact__inputs{    display: grid;    grid-template-columns: repeat(2, 1fr);     column-gap: 1rem; }/* 文字輸入框 */.contact__input{    width: 100%;    padding: .8rem;    outline: none;    border: 1.5px solid var(--dark-color);    font-size: var(--normal-font-size);    margin-bottom: var(--mb-4);    border-radius: .5rem;}</code></pre><ul><li>按鈕</li></ul><pre><code class="css">.contact__button{    display: block;    background-color: var(--first-color);    color: var(--white-color);    padding: .75rem 2.5rem;    /* 若用margin-right:auto&lt;會靠左邊 */     margin-left: auto;     border-radius: .5rem;    border: none;    outline: none;    font-size: var(--normal-font-size);    cursor: pointer;}</code></pre><h1 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h1><p><img src="https://i.imgur.com/JH5KLYT.png" alt=""></p><hr><h2 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h2><h3 id="1-z-index"><a href="#1-z-index" class="headerlink" title="1. z-index"></a>1. z-index</h3><p><a href="https://its-okay.medium.com/css-position-z-index-%E7%AD%86%E8%A8%98-%E9%BC%A0%E5%B9%B4%E5%85%A8%E9%A6%AC%E9%90%B5%E4%BA%BA%E6%8C%91%E6%88%B0-13-f7c4159ac5d" target="_blank" rel="noopener">CSS position 、 z-index 筆記│鼠年全馬鐵人挑戰 #13</a><br><a href="https://www.cnblogs.com/starof/p/4424926.html" target="_blank" rel="noopener">合理使用z-index数值</a></p><h3 id="2-滾動"><a href="#2-滾動" class="headerlink" title="2. 滾動"></a>2. 滾動</h3><p>點擊連結之後，自動滾動到適當的位置</p><p>[CSS scroll-behavior和JS scrollIntoView讓頁面滾動平滑](<a href="https://www.itread01.com/fyehkp.html" target="_blank" rel="noopener">https://www.itread01.com/fyehkp.html</a></p><h3 id="3-icon"><a href="#3-icon" class="headerlink" title="3. icon"></a>3. icon</h3><p><img src="https://i.imgur.com/vEVt8qF.png" alt=""></p><h3 id="4-flex"><a href="#4-flex" class="headerlink" title="4. flex"></a>4. flex</h3><p><a href="https://cythilya.github.io/2017/04/04/flexbox-basics/" target="_blank" rel="noopener">圖解 Flexbox 基本屬性</a></p><h2 id="練習來源："><a href="#練習來源：" class="headerlink" title="練習來源："></a>練習來源：</h2><p>youtube：<a href="https://www.youtube.com/watch?v=6cidbUHNZRQ&list=PL4ruhWbyIwi2vvT2y7j45egFSTwz9FHoJ&index=15&t=168s" target="_blank" rel="noopener">Responsive Personal Portfolio Website HTML CSS And JAVASCRIPT | Mobile First</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> udemy </tag>
            
            <tag> CSS </tag>
            
            <tag> grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS練習- omnifood 餐廳網頁</title>
      <link href="/2020/12/13/omnifood/"/>
      <url>/2020/12/13/omnifood/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/JNV0OeO.png" alt=""></p><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p><a href="https://eva813.github.io/Eva_portfolio/Omnifood/omnifood.html" target="_blank" rel="noopener">成品</a><br>使用css來製作一個一頁式的網站，將網站分為表頭、特色區塊、食物照片區、訂餐方法介紹…等，從不同區塊，去操作字型、文字排版、圖片處理。</p><p><img src="https://i.imgur.com/OwpZq8P.png" alt=""></p><h2 id="首先，文字字型的選擇"><a href="#首先，文字字型的選擇" class="headerlink" title="首先，文字字型的選擇"></a>首先，文字字型的選擇</h2><p>先用Normalize.css，下載並連結<br>字型：使用google font &gt; lato<br><img src="https://i.imgur.com/4VSiIEZ.png" alt=""></p><p>text-rendering告訴渲染引擎工作時如何優化顯示文字</p><pre><code class="css">*{  margin: 0;  padding: 0;  box-sizing: border-box;}html{  background-color: #fff;  color: #555;  font-family: &#39;Lato&#39;, &#39;Arial&#39;,sans-serif;  font-weight: 300;  font-size: 20px;  text-rendering: optimizeLegibility;  /* 繪制文本時易讀性優先，會啟用字距調整和連字 */}/* content will be in rows */.row{  /* 只有這邊是用px，之後的margin等設定都會用% */ max-width: 1140px;  margin:0 auto;/* 讓左右的距離能夠平均分散，使其置中 */}</code></pre><h1 id="head區塊"><a href="#head區塊" class="headerlink" title="head區塊"></a>head區塊</h1><p><img src="https://i.imgur.com/pc0jiX3.png" alt=""></p><h2 id="表頭的製作"><a href="#表頭的製作" class="headerlink" title="表頭的製作"></a>表頭的製作</h2><pre><code class="htmlembedded="> &lt;div class=&quot;hero-text-box&quot;&gt;      &lt;h1&gt;Goodbye junk food. Hello super healthy meals.      &lt;/h1&gt;      &lt;a href=&quot;#&quot;&gt;I’m hungry&lt;/a&gt;      &lt;a href=&quot;#&quot;&gt;Show me more&lt;/a&gt;    &lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/ioW5W5p.png" alt=""></p><ul><li>利用background-image插入圖片後，往上滑會出現上方的空白處<ul><li>是因為h1的margin（因設置normalize.css）</li></ul></li><li>此時照片也還沒有填滿、置中</li></ul><p><img src="https://i.imgur.com/dZzd6V7.png" alt=""><br><img src="https://i.imgur.com/pe6AUaN.png" alt=""></p><h3 id="調整背景圖位置"><a href="#調整背景圖位置" class="headerlink" title="調整背景圖位置"></a>調整背景圖位置</h3><p><img src="https://i.imgur.com/zoaaQoB.jpg" alt=""></p><h3 id="讓h1文字置中"><a href="#讓h1文字置中" class="headerlink" title="讓h1文字置中"></a>讓h1文字置中</h3><p>透過使用絕對定位，讓文字可以置中</p><pre><code class="css=">.hero-text-box{  position: absolute;  width: 1140px;  top: 50%;  left:}</code></pre><p><img src="https://i.imgur.com/r4IryMQ.jpg" alt=""></p><ul><li>transform: translate(-50%,-50%);</li></ul><p><img src="https://i.imgur.com/QcgKtPg.jpg" alt=""></p><h3 id="文字放在圖片上使得看不清楚"><a href="#文字放在圖片上使得看不清楚" class="headerlink" title="文字放在圖片上使得看不清楚"></a>文字放在圖片上使得看不清楚</h3><ul><li>將背景圖調成深色<pre><code class="css=">background:linear-gradient(0deg,rgba(0,0,0,.6),rgba(0,0,0,.5)) center center, url(./Omnifood\ Contents/hero.jpg) no-repeat center center/cover ;</code></pre><img src="https://i.imgur.com/NmUA3qy.jpg" alt=""></li></ul><h2 id="h1文字區的細節調整"><a href="#h1文字區的細節調整" class="headerlink" title="h1文字區的細節調整"></a>h1文字區的細節調整</h2><ul><li>調整字的顏色、大小</li><li>字母、單字之間的間距<pre><code class="css=">.hero-text-box h1{margin: 0;color: #fff;/* 這裏的字體大小用百分比，是為了相對於一開始設定font-size: 20px;，以他的百分比來計算 */font-size: 240%;font-weight: 400;letter-spacing: 1px;text-transform: uppercase; /*將字母改為大寫 */word-spacing: 3px;}</code></pre></li></ul><h2 id="文字區下面的按鈕"><a href="#文字區下面的按鈕" class="headerlink" title="文字區下面的按鈕"></a>文字區下面的按鈕</h2><p>html結構是使用<code>&lt;a&gt;</code>來製作連結的點選<br>將型態改為inline-block</p><pre><code class="html">      &lt;a class=&quot;btn btn-full&quot; href=&quot;#&quot;&gt;I’m hungry&lt;/a&gt;      &lt;a class=&quot;btn btn-ghost &quot; href=&quot;#&quot;&gt;Show me more&lt;/a&gt;</code></pre><ul><li>希望連結與被點選的樣式都是一樣</li><li>顏色是到：UI flat color tool ; 要找尋顏色深淺 <a href="https://www.0to255.com/e67e22" target="_blank" rel="noopener">0 to 255</a></li></ul><pre><code class="css">.btn:link,.btn:visited{  display: inline-block;  text-decoration: none;padding: 10px 15px;border-radius: 200px;}.btn-full:link,.btn-full:visited{  /* UI flat color tool */  background-color: #e67e22;  /* border: 1px solid #e67e22 ; */  color: #fff;}.btn-ghost:link,.btn-ghost:visited{  border: 1px solid #e67e22 ;  color:#e67e22;}</code></pre><p><img src="https://i.imgur.com/MuiBMCl.png" alt=""></p><h3 id="按鈕的觸碰與點選"><a href="#按鈕的觸碰與點選" class="headerlink" title="按鈕的觸碰與點選"></a>按鈕的觸碰與點選</h3><p><code>:active</code> 滑鼠按下的樣式; <code>:focus</code> 鍵盤聚焦的樣式 ;<code>:hover</code> 滑鼠滑過</p><ul><li>注意transition此屬性是放在要被摸的元素裡面，不是hover那裡<br><a href="https://www.w3schools.com/howto/howto_css_transition_hover.asp" target="_blank" rel="noopener">How TO - Transition on Hover</a></li></ul><p><code>.btn:link,.btn:visited{}</code></p><pre><code class="css=">  /* transition 放在這裡！ */ transition: background-color 0.5s,border 0.5s,color 0.5s;}.btn:hover,.btn:active{ background-color: #cf6d17;}.btn-full:hover,.btn-full:active{   border: 1px solid #cf6d17 ;  color: #fff;}.btn-ghost:hover,.btn-ghost:active{  border: 1px solid #cf6d17 ;  color:#fff;}</code></pre><p><img src="https://i.imgur.com/3UM8SpB.png" alt=""></p><h2 id="表頭導覽列的製作"><a href="#表頭導覽列的製作" class="headerlink" title="表頭導覽列的製作"></a>表頭導覽列的製作</h2><p><a href="https://ithelp.ithome.com.tw/articles/10219845" target="_blank" rel="noopener">金魚都能懂的這個網頁畫面怎麼切 : 導覽列</a></p><ul><li><p>header裡面的nav，html架構：</p><pre><code class="htmlembedded">  &lt;nav&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;img src=&quot;./Omnifood Contents/logo-white.png&quot; alt=&quot;Omnifood logo&quot; class=&quot;logo&quot;&gt;      &lt;ul class=&quot;main-nav&quot;&gt;        &lt;li&gt; &lt;a href=&quot;#&quot;&gt;Food delivery&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Our cities&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Sign up&lt;/a&gt;&lt;/li&gt;      &lt;/ul&gt;    &lt;/div&gt;  &lt;/nav&gt;</code></pre></li></ul><pre><code>![](https://i.imgur.com/jOySkuH.png)* logo```css=header .logo{height: 100px;width: auto;float: left;  }</code></pre><p><img src="https://i.imgur.com/KMLsFMM.png" alt=""></p><h2 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h2><ul><li>讓nav區靠右</li><li>為了讓四個連結區塊可以橫向排列，設定inline-box</li><li>針對字型、顏色等做調整</li><li>並於連結下方增加線的動畫效果<pre><code class="css"></code></pre></li></ul><p>.main-nav{<br>float: right;<br>margin-top: 55px;</p><p>}<br>.main-nav li{<br>display: inline-block;<br>margin-left: 20px;</p><p>}<br>.main-nav li a:link,.main-nav li a:visited{<br>text-decoration: none;<br>font-weight: 400;<br>font-size: 90%; /<em>想要18px，18px / 20px=0.9</em>/<br>color: #fff;<br>text-transform: uppercase;<br>position: relative;<br>padding-bottom: 5px;</p><p>}</p><p>.main-nav a::after{<br>  content: ‘’;<br>  width: 100%;<br>  position: absolute;<br>  border: solid .5px rgba(230, 126, 34,.6);<br>  left: 0;<br>  bottom:0 ;<br>  margin-top: 5px;<br>  transform: scale(0);<br>  transition: 0.5s;</p><p>}</p><p>.main-nav li:hover a::after,.main-nav li:active a::after{<br>transform: scale(1);</p><p>}</p><pre><code>![](https://i.imgur.com/1su6NCZ.png)---# 特色區塊![](https://i.imgur.com/nl0Z3uS.png)* ``—`` 用html符號 --&gt; `&amp;mdash;`     ![](https://i.imgur.com/kl8kJq1.png)     更多...[HTML Entity List](https://www.freeformatter.com/html-entities.html)* features這部分，使用section標籤來包覆，而其中的不同區塊則使用`.row`來包覆內容(並用來固定寬度)* 這裏的html運用grid來配置欄位```html&lt;section class=&quot;section-features&quot;&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;h2&gt;Get food fast &amp;mdash; not fast food&lt;/h2&gt;      &lt;p class=&quot;long-copy&quot;&gt;Hello, we’re Omnifood, your new premium food delivery service. We know you’re always busy. we promise!&lt;/p&gt;    &lt;/div&gt;&lt;div class=&quot;row&quot;&gt;      &lt;!-- 第二區塊：features，這裏要開始應用grid --&gt;      &lt;div class=&quot;col span-1-of-4&quot;&gt;        &lt;h3&gt;Up to 365 days/year&lt;/h3&gt;        &lt;p&gt;Never cook again! We really mean that. Our subscript &lt;/p&gt;      &lt;/div&gt;      &lt;div class=&quot;col span-1-of-4&quot;&gt;        &lt;h3&gt;Ready in 20 minutes&lt;/h3&gt;        &lt;p&gt;You&#39;re only twenty minutes away from your delicious ant chefs in each town to ensure that you&#39;re 100% happy.        &lt;/p&gt;      &lt;/div&gt;      &lt;div class=&quot;col span-1-of-4&quot;&gt;        &lt;h3&gt;100% organic&lt;/h3&gt;        &lt;p&gt;All our vegetables are fresh, organic and local. Animals are raised without added hormones or antibiotbetter!&lt;/p&gt;      &lt;/div&gt;      &lt;div class=&quot;col span-1-of-4&quot;&gt;        &lt;h3&gt;Order anything&lt;/h3&gt;        &lt;p&gt;We don&#39;t limit your creativity, which means you cacious meals. It&#39;s up to you!&lt;/p&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/section&gt;</code></pre><p><img src="https://i.imgur.com/sg0YUDI.png" alt=""></p><h3 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h3><p>使用ionicon:<a href="https://ionicons.com/" target="_blank" rel="noopener">ionicon</a></p><pre><code class="javascript">&lt;script src=&quot;https://unpkg.com/ionicons@5.2.3/dist/ionicons.js&quot;&gt;&lt;/script&gt;`</code></pre><ul><li>讓他斷行排列使用block</li><li>字的大小適用比例設置</li></ul><pre><code class="css">.section-features .icon-big{display: block;  font-size: 350%;  color: #e67e22;  margin-bottom: 10px;  font-weight: 100;}</code></pre><h2 id="h2的文字與p"><a href="#h2的文字與p" class="headerlink" title="h2的文字與p"></a>h2的文字與p</h2><pre><code class="css">.section-features .long-copy{width: 70%;/* 總寬100%,左邊設置15%，就會平均 */margin-left: 15%;/* line-height: 1.3; */line-height: 145%; /*120-145%最合適 *//* word-spacing: 1px; */}</code></pre><h2 id="欄位col的處理（class-”items”）"><a href="#欄位col的處理（class-”items”）" class="headerlink" title="欄位col的處理（class=”items”）"></a>欄位col的處理（class=”items”）</h2><pre><code class="css">.section-features h3{  font-weight: 300;  font-size: 110%;  text-transform: uppercase;  margin-bottom: 15px;}.section-features .items {  padding:1% ;}.section-features .items p{  line-height: 145%;  font-size:90% ;}</code></pre><p><img src="https://i.imgur.com/Sr0NhBr.png" alt=""></p><hr><h1 id="食物照片區"><a href="#食物照片區" class="headerlink" title="食物照片區"></a>食物照片區</h1><p><img src="https://i.imgur.com/BzV03pk.png" alt=""></p><ul><li>這裏的內容不適用<code>.row</code>來包覆，因為我們希望它的寬度可以站滿橫向的視窗</li></ul><h3 id="html結構"><a href="#html結構" class="headerlink" title="html結構"></a>html結構</h3><pre><code class="html">  &lt;section class=&quot;section-maels&quot;&gt;    &lt;!-- 要製作2列各4格的食物照片，這裏使用ul,li的方式排列 --&gt;    &lt;ul class=&quot;meals-showcase&quot;&gt;      &lt;li&gt;        &lt;figure&gt;          &lt;img src=&quot;./Omnifood Contents/1.jpg&quot; alt=&quot;Korean bibimbap with egg and vegetables&quot;&gt;        &lt;/figure&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;figure&gt;          &lt;img src=&quot;./Omnifood Contents/2.jpg&quot; alt=&quot;Simple italian pizza with cherry tomatoes&quot;&gt;        &lt;/figure&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;figure&gt;          &lt;img src=&quot;./Omnifood Contents/3.jpg&quot; alt=&quot;Chicken breast steak with vegetables&quot;&gt;        &lt;/figure&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;figure&gt;          &lt;img src=&quot;./Omnifood Contents/4.jpg&quot; alt=&quot;Autumn pumpkin soup&quot;&gt;        &lt;/figure&gt;      &lt;/li&gt;    &lt;/ul&gt;    &lt;ul class=&quot;meals-showcase&quot;&gt;      &lt;li&gt;        &lt;figure&gt;          &lt;img src=&quot;./Omnifood Contents/5.jpg&quot; alt=&quot;Paleo beef steak with vegetables&quot;&gt;        &lt;/figure&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;figure&gt;          &lt;img src=&quot;./Omnifood Contents/6.jpg&quot; alt=&quot;Healthy baguette with egg and vegetables&quot;&gt;        &lt;/figure&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;figure&gt;          &lt;img src=&quot;./Omnifood Contents/7.jpg&quot; alt=&quot;Burger with cheddar and bacon&quot;&gt;        &lt;/figure&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;figure&gt;          &lt;img src=&quot;./Omnifood Contents/8.jpg&quot; alt=&quot;Granola with cherries and strawberries&quot;&gt;        &lt;/figure&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/section&gt;</code></pre><p><img src="https://i.imgur.com/zBU6WCx.png" alt=""></p><ul><li>設定此區塊滿版，並讓他們設定為區塊</li><li>讓li，每個設定寬度為25%(4個共100％)，並利用float使他們比鄰排列</li></ul><pre><code class="css">.meals-showcase{  list-style: none; /* 去除ul的預設樣式*/  display: block;  width: 100%;}.meals-showcase li{  float: left;  width: 25%;}</code></pre><p><img src="https://i.imgur.com/jaYired.jpg" alt=""></p><ul><li>上面的照片並未合乎大小，以及置中</li></ul><pre><code class="css">.meals-showcase figure{  width: 100%;}.meals-showcase figure img{  width: 100%;}</code></pre><p><img src="https://i.imgur.com/XNsC9JM.jpg" alt=""></p><ul><li>去除上圖的空隙vertical-align: middle;</li></ul><pre><code class="css">.meals-showcase figure img{  width: 100%;  vertical-align: middle;}</code></pre><p><img src="https://i.imgur.com/QsAwjZx.jpg" alt=""></p><h2 id="加入文字區在圖片上方"><a href="#加入文字區在圖片上方" class="headerlink" title="加入文字區在圖片上方"></a>加入文字區在圖片上方</h2><p>製作圖片被摸到，有圖片縮放的動畫</p><pre><code class="css=">.meals-showcase figure img{  width: 100%;  vertical-align: middle;transform: scale(1.15);transition: transform .5s;}.meals-showcase figure:hover img{  transform: scale(1);}</code></pre><ul><li><h3 id="當圖片的scale被放大，會超出原有容器"><a href="#當圖片的scale被放大，會超出原有容器" class="headerlink" title="當圖片的scale被放大，會超出原有容器"></a>當圖片的scale被放大，會超出原有容器</h3><ul><li>處理方式：在所在的容器，設定overflow: hidden; </li><li><a href="https://juejin.cn/post/6844903650901540872" target="_blank" rel="noopener">CSS深入理解：overflow:hidden——溢出,坍塌,清除浮动</a>,<a href="https://www.itread01.com/content/1524202931.html" target="_blank" rel="noopener">overflow：hidden 失效</a><br><img src="https://i.imgur.com/zBiOKSv.jpg" alt=""></li></ul></li></ul><ul><li><h3 id="讓圖片有黑色透明效果"><a href="#讓圖片有黑色透明效果" class="headerlink" title="讓圖片有黑色透明效果"></a>讓圖片有黑色透明效果</h3><ul><li>在圖片本身img設定透明度，在figure放圖標籤裡設定背景為黑色</li></ul></li></ul><p><img src="https://i.imgur.com/ADUUni8.jpg" alt=""></p><pre><code class="css">.meals-showcase figure{  width: 100%;  overflow: hidden;  background-color:#000;}.meals-showcase figure img{  width: 100%;  vertical-align: middle;transform: scale(1.15);transition: transform .5s ,opicity .5s;opacity: 0.7;}.meals-showcase figure:hover img{  transform: scale(1);  opacity: 1;}</code></pre><p><img src="https://i.imgur.com/okb9F66.jpg" alt=""></p><hr><h1 id="訂餐方法介紹-的介面"><a href="#訂餐方法介紹-的介面" class="headerlink" title="訂餐方法介紹 的介面"></a>訂餐方法介紹 的介面</h1><p><img src="https://i.imgur.com/HxrpNQG.png" alt=""></p><ul><li>html的結構</li></ul><pre><code class="html">&lt;section class=&quot;meal-steps&quot;&gt;    &lt;!-- 在row裡面，放一個h2標題，在增加一個row的div，使用grid兩欄的class --&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;h2&gt;How it works - Simple as 1, 2, 3&lt;/h2&gt;    &lt;/div&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;!-- 左欄 --&gt;      &lt;div class=&quot;col span-2-of-4&quot;&gt;        &lt;img src=&quot;./Omnifood Contents/app-iPhone.png&quot; alt=&quot;Omnifood-app&quot; class=&quot;app-screen&quot;&gt;      &lt;/div&gt;      &lt;!-------- 右欄 ------&gt;      &lt;div class=&quot;col span-2-of-4&quot;&gt;        &lt;div class=&quot;work-step&quot;&gt;          &lt;div&gt;1&lt;/div&gt;          &lt;p&gt;Choose the subscription plan that best fits your needs and sign up today.&lt;/p&gt;        &lt;/div&gt;        &lt;div class=&quot;work-step&quot;&gt;          &lt;div&gt;2&lt;/div&gt;          &lt;p&gt;Order your delicious meal using our mobile app or website. Or you can even call us!&lt;/p&gt;        &lt;/div&gt;        &lt;div class=&quot;work-step&quot;&gt;          &lt;div&gt;3&lt;/div&gt;          &lt;p&gt;Enjoy your meal after less than 20 minutes. See you the next time!&lt;/p&gt;        &lt;/div&gt;&lt;!------- 與步驟同一欄，下載的按鈕使用&lt;a&gt; ------&gt;        &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;./Omnifood Contents/download-app.svg&quot; alt=&quot;apple store button&quot;&gt;&lt;/a&gt;        &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;./Omnifood Contents/download-app-android.png&quot; alt=&quot;play store button&quot;&gt;&lt;/a&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/section&gt;</code></pre><p><img src="https://i.imgur.com/F9MrnmA.png" alt=""></p><ul><li><h3 id="標題調整"><a href="#標題調整" class="headerlink" title="標題調整"></a>標題調整</h3></li></ul><p>:first-child</p><p>圖片靠右：text-align: right;</p><h4 id="右欄文字區"><a href="#右欄文字區" class="headerlink" title="右欄文字區"></a>右欄文字區</h4><p>在數字部分：要讓他與文字區能夠排列，使用inline-block,float<br>    數字的外圈：參考以下css</p><pre><code class="css=">.work-step{  display: inline-block;  margin-bottom: 50px;}  .work-step div{  float: left;  color:#e67e22 ;  border: 2px solid #e67e22;  border-radius: 50%;  }</code></pre><p><img src="https://i.imgur.com/cPpSW9S.png" alt=""></p><h4 id="讓圓形變圓，增加寬高"><a href="#讓圓形變圓，增加寬高" class="headerlink" title="讓圓形變圓，增加寬高"></a>讓圓形變圓，增加寬高</h4><pre><code class="css=">.work-step div{height: 55px;  width: 55px;  text-align: center;  padding: 5px;  font-size: 150%;}</code></pre><p><img src="https://i.imgur.com/odR0Tm5.png" alt=""></p><ul><li>margin-right: 25px;</li></ul><p><img src="https://i.imgur.com/OHIFt8g.png" alt=""></p><h2 id="按鈕的處理"><a href="#按鈕的處理" class="headerlink" title="按鈕的處理"></a>按鈕的處理</h2><p><img src="https://i.imgur.com/NOTJn47.png" alt=""></p><pre><code class="css=">.btn-app img{  height: 50px;  width: auto;  margin-right: 10px;}</code></pre><h1 id="地點資訊"><a href="#地點資訊" class="headerlink" title="地點資訊"></a>地點資訊</h1><p><img src="https://i.imgur.com/zvBsOgb.png" alt=""></p><pre><code class="html">&lt;section class=&quot;section-cities&quot;&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;h2&gt;We&#39;re currently in these cities&lt;/h2&gt;    &lt;/div&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;!-- 第一個地點 --&gt;      &lt;div class=&quot;col span-1-of-4 items&quot;&gt;        &lt;img src=&quot;./Omnifood Contents/lisbon-3.jpg&quot; alt=&quot;&quot;&gt;        &lt;h3&gt;Lisbon&lt;/h3&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;person&quot; class=&quot;person&quot;&gt;&lt;/ion-icon&gt;          1600+ happy eaters        &lt;/div&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;star&quot; class=&quot;star&quot;&gt;&lt;/ion-icon&gt;          60+ top chefs        &lt;/div&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;logo-twitter&quot; class=&quot;logo-twitter&quot;&gt;&lt;/ion-icon&gt;          @omnifood_lx        &lt;/div&gt;      &lt;/div&gt;      &lt;!-- 第二個地點 --&gt;      &lt;div class=&quot;col span-1-of-4 items&quot;&gt;        &lt;img src=&quot;./Omnifood Contents/san-francisco.jpg&quot; alt=&quot;&quot;&gt;        &lt;h3&gt;San Francisco&lt;/h3&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;person&quot; class=&quot;person&quot;&gt;&lt;/ion-icon&gt;          3700+ happy eaters        &lt;/div&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;star&quot; class=&quot;star&quot;&gt;&lt;/ion-icon&gt;          160+ top chefs        &lt;/div&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;logo-twitter&quot; class=&quot;logo-twitter&quot;&gt;&lt;/ion-icon&gt;          @omnifood_sf        &lt;/div&gt;      &lt;/div&gt;      &lt;!-- 第三個地點 --&gt;      &lt;div class=&quot;col span-1-of-4 items&quot;&gt;        &lt;img src=&quot;./Omnifood Contents/berlin.jpg&quot; alt=&quot;&quot;&gt;        &lt;h3&gt;Berlin&lt;/h3&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;person&quot; class=&quot;person&quot;&gt;&lt;/ion-icon&gt;          2300+ happy eaters        &lt;/div&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;star&quot; class=&quot;star&quot;&gt;&lt;/ion-icon&gt;          110+ top chefs        &lt;/div&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;logo-twitter&quot; class=&quot;logo-twitter&quot;&gt;&lt;/ion-icon&gt;          @omnifood_berlin        &lt;/div&gt;      &lt;/div&gt;      &lt;!-- 第四個地點 --&gt;      &lt;div class=&quot;col span-1-of-4 items&quot;&gt;        &lt;img src=&quot;./Omnifood Contents/london.jpg&quot; alt=&quot;&quot;&gt;        &lt;h3&gt;London&lt;/h3&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;person&quot; class=&quot;person&quot;&gt;&lt;/ion-icon&gt;          1200+ happy eaters        &lt;/div&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;star&quot; class=&quot;star&quot;&gt;&lt;/ion-icon&gt;          50+ top chefs        &lt;/div&gt;        &lt;div class=&quot;city-features&quot;&gt;          &lt;ion-icon name=&quot;logo-twitter&quot; class=&quot;logo-twitter&quot;&gt;&lt;/ion-icon&gt;          @omnifood_london        &lt;/div&gt;      &lt;/div&gt;  &lt;/section&gt;</code></pre><p><img src="https://i.imgur.com/gC2Om3f.png" alt=""></p><p><img src="https://i.imgur.com/YzSZlES.jpg" alt=""></p><pre><code class="css=">.section-cities img{  width: 100%;  vertical-align: middle;  margin-bottom: 15px;}</code></pre><pre><code class="css=">.section-cities .icon-small{  color: #e67e22; display: inline-block; text-align: center; font-size: 120%; margin-right: 10px;/*讓icon與文字，置中、對其*/ line-height: 120%; vertical-align: middle; margin-top: -5px;}</code></pre><p><img src="https://i.imgur.com/1s1kBSH.png" alt=""></p><h1 id="顧客回饋區"><a href="#顧客回饋區" class="headerlink" title="顧客回饋區"></a>顧客回饋區</h1><p><img src="https://i.imgur.com/621x3W2.png" alt=""></p><ul><li>區分為三個區塊，一列三欄的方式劃分</li><li>用<code>&lt;blockquote&gt;</code>來包顧客的回饋文字</li><li>並加入顧客的頭像以及姓名</li></ul><pre><code class="html">&lt;section class=&quot;section-testimonials&quot;&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;h2&gt;Our customers can&#39;t live without us&lt;/h2&gt;    &lt;/div&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;div class=&quot;col span-1-of-3&quot;&gt;        &lt;blockquote&gt;          Omnifood is just awesome! I just launched a startup which leaves me with no time for cooking, so Omnifood is a          life-saver. Now that I got used to it, I couldn&#39;t live without my daily meals!          &lt;cite&gt;&lt;img src=&quot;./Omnifood Contents/customer-1.jpg&quot; alt=&quot;&quot;&gt;Alberto Duncan&lt;/cite&gt;        &lt;/blockquote&gt;      &lt;/div&gt;      &lt;div class=&quot;col span-1-of-3&quot;&gt;        &lt;blockquote&gt;          Inexpensive, healthy and great-tasting meals, delivered right to my home. We have lots of food delivery here          in Lisbon,          but no one comes even close to Omifood. Me and my family are so in love!          &lt;cite&gt;&lt;img src=&quot;./Omnifood Contents/customer-2.jpg&quot; alt=&quot;&quot;&gt;Joana Silva&lt;/cite&gt;        &lt;/blockquote&gt;      &lt;/div&gt;      &lt;div class=&quot;col span-1-of-3&quot;&gt;        &lt;blockquote&gt;          I was looking for a quick and easy food delivery service in San Franciso. I tried a lot of them and ended up          with          Omnifood. Best food delivery service in the Bay Area. Keep up the great work!          &lt;cite&gt;&lt;img src=&quot;./Omnifood Contents/customer-3.jpg&quot; alt=&quot;&quot;&gt;Milton Chapman&lt;/cite&gt;        &lt;/blockquote&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/section&gt;</code></pre><p><img src="https://i.imgur.com/LMPlqlx.png" alt=""></p><ul><li>先做背景的處理</li></ul><pre><code class="css=">.section-testimonials {  background:linear-gradient(0deg,rgba(0,0,0,.7),rgba(0,0,0,.7)) center center, url(./Omnifood\ Contents/back-customers.jpg)no-repeat center center/cover ;  color: #fff;  background-attachment: fixed;}</code></pre><p><img src="https://i.imgur.com/ofR8ghb.png" alt=""></p><ul><li>增加相片背景</li><li>可以看到文字與，照片相</li></ul><p><img src="https://i.imgur.com/deniLe4.jpg" alt=""></p><p><img src="https://i.imgur.com/lO5KPTq.jpg" alt=""></p><p><img src="https://i.imgur.com/VBEGepa.png" alt=""></p><ul><li>在.section-testimonials img 增加vertical-align: middle;</li></ul><p><img src="https://i.imgur.com/bifGooB.png" alt=""></p><h3 id="增加上面逗點符號"><a href="#增加上面逗點符號" class="headerlink" title="增加上面逗點符號"></a>增加上面逗點符號</h3><p><a href="https://css-tricks.com/snippets/html/glyphs/" target="_blank" rel="noopener">符號表</a></p><pre><code class="css=">.section-testimonials blockquote:before{ content:&quot;\201C&quot;; font-size:500%; display: block;position: absolute;top: -5px;left: -5px;}}</code></pre><p><img src="https://i.imgur.com/MJpSGz0.png" alt=""></p><h1 id="訂購方案介紹區"><a href="#訂購方案介紹區" class="headerlink" title="訂購方案介紹區"></a>訂購方案介紹區</h1><p><img src="https://i.imgur.com/6tr0o3E.png" alt=""></p><p><img src="https://i.imgur.com/8lTrnUY.png" alt=""></p><ul><li>span標籤的應用</li><li>當全部設定寬度100%，會出現問題<ul><li>要利用篩選器，來選擇指定框</li></ul></li></ul><p><img src="https://i.imgur.com/1XlErXn.png" alt=""></p><p><img src="https://i.imgur.com/YnpnJBc.png" alt=""></p><ul><li>解決方式，在html的標籤增加空行</li></ul><p><img src="https://i.imgur.com/Dke7ilN.png" alt=""></p><p><img src="https://i.imgur.com/oC2aMcy.png" alt=""></p><h1 id="頁尾表單的建構"><a href="#頁尾表單的建構" class="headerlink" title="頁尾表單的建構"></a>頁尾表單的建構</h1><p><img src="https://i.imgur.com/y9sxEXR.png" alt=""></p><p><img src="https://i.imgur.com/VQ5YHHR.png" alt=""></p><h1 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h1><p><img src="https://i.imgur.com/E4C4qY3.png" alt=""></p><ul><li>放入相關連結的icon</li></ul><pre><code class="html">&lt;footer&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;div class=&quot;col span-1-of-2&quot;&gt;        &lt;ul class=&quot;footer-nav&quot;&gt;          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;About us&lt;/a&gt;&lt;/li&gt;          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Press&lt;/a&gt;&lt;/li&gt;          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Android App&lt;/a&gt;&lt;/li&gt;        &lt;/ul&gt;      &lt;/div&gt;      &lt;div class=&quot;col span-1-of-2 &quot;&gt;        &lt;ul class=&quot;socilmedia-link&quot;&gt;          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;              &lt;ion-icon name=&quot;logo-facebook&quot; class=&quot;logo-facebook&quot;&gt;&lt;/ion-icon&gt;            &lt;/a&gt;&lt;/li&gt;          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;              &lt;ion-icon name=&quot;logo-twitter&quot; class=&quot;logo-twitte&quot;&gt;&lt;/ion-icon&gt;            &lt;/a&gt;&lt;/li&gt;          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;              &lt;ion-icon name=&quot;logo-google&quot; class=&quot;logo-google&quot;&gt;&lt;/ion-icon&gt;            &lt;/a&gt;&lt;/li&gt;          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;              &lt;ion-icon name=&quot;logo-instagram&quot; class=&quot;logo-instagram&quot;&gt;&lt;/ion-icon&gt;            &lt;/a&gt;&lt;/li&gt;        &lt;/ul&gt;      &lt;/div&gt;      &lt;div class=&quot;row&quot;&gt;        &lt;p&gt;          copyright &amp;copy; 2020 by Omnifood. All right reserved.        &lt;/p&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/footer&gt;</code></pre><p><img src="https://i.imgur.com/X2b2hfu.png" alt=""></p><ul><li>使用float來使物件放置左右側</li><li>footer-nav li使用inline-block</li></ul><pre><code class="css"> footer{  background-color: #333;  padding: 50px;  font-size: 80%;}footer .footer-nav{  list-style: none;  float: left;}.socilmedia-link{  list-style: none;  float: right;}.footer-nav li,.socilmedia-link li{  display: inline-block;  margin-right: 20px;} </code></pre><p><img src="https://i.imgur.com/Uph2clO.png" alt=""></p><h3 id="連結顏色調整"><a href="#連結顏色調整" class="headerlink" title="連結顏色調整"></a>連結顏色調整</h3><pre><code class="css">.footer-nav li:last-child,.socilmedia-link li:last-child{  margin-right: 0px;}.footer-nav li a:link ,.footer-nav li a:visited, .socilmedia-link li a:link ,.socilmedia-link li a:visited{ text-decoration: none; border: none; color: #888; transition: color .3s;}.footer-nav li a:hover ,.footer-nav li a:active{  color: #ddd;}.socilmedia-link li a:link,.socilmedia-link  li a:visited{ font-size: 160%;}</code></pre><p><img src="https://i.imgur.com/A2Z6Meh.png" alt=""></p><pre><code class="css">footer p{  color:#888;  text-align: center;  margin-top: 20px;}.logo-instagram,.logo-google,.logo-twitte,.logo-facebook{transition: color .3s;}.logo-instagram:hover{  color: #517fa4;}.logo-google:hover{  color: #dd4b39;}.logo-twitte:hover{  color: #00aced;}.logo-facebook:hover{  color: #3b5998;} </code></pre><p><img src="https://i.imgur.com/bLtpdK7.png" alt=""></p><hr><h1 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h1><h2 id="background與background-imge之差別"><a href="#background與background-imge之差別" class="headerlink" title="background與background-imge之差別"></a><code>background</code>與<code>background-imge</code>之差別</h2><pre><code>background属性是整體設置的，background image是background的属性之一，background的屬性包括background-colorbackground-imagebackground-repeatbackground-attachmentbackground-position，你看不到圖片是因为設置錯，不能加no-repeat屬性，應改為：background-image:url(&quot;some.jpg&quot;); background-repeat:no-repeat;分開寫[background和background-image什么区别](https://bbs.csdn.net/topics/310167508)</code></pre><pre><code class="css">.header{background-image:url(./Omnifood\ Contents/hero.jpg) ;background-size: cover;background-position: center;}/********我改為下面這樣*******/.header{background: url(./Omnifood\ Contents/hero.jpg) no-repeat center center/cover;}</code></pre><h2 id="文字框置中（區塊（div）的垂直置中）"><a href="#文字框置中（區塊（div）的垂直置中）" class="headerlink" title="文字框置中（區塊（div）的垂直置中）"></a>文字框置中（區塊（div）的垂直置中）</h2><blockquote><p>pjchender</p><blockquote><p>Position + Transform（常用）:先利用 position: absolute 把 top: 50% 設在 50%；接著再透過 transform: translateY(-50%) 把超過的部分修正回來，達到垂直置中。</p></blockquote></blockquote><pre><code class="css=">.hero-text-box{  display: flex;  width: 1140px;  height: 100%;  flex-direction: column;    align-items: center;   justify-content: center;} </code></pre><p>參考：<br><a href="https://pjchender.blogspot.com/2015/04/css_15.html" target="_blank" rel="noopener">pjchender</a></p><h2 id="使用button-vs-link"><a href="#使用button-vs-link" class="headerlink" title="使用button vs link"></a>使用<code>button</code> vs <code>link</code></h2><p><a href="https://a11y-101.com/design/button-vs-link" target="_blank" rel="noopener">Button versus Link</a></p><pre><code>From a semantics and accessibility viewpoint:Links ``(&lt;a&gt;) ``are for &quot;going someplace&quot; such as &quot;jumping to a different section of a page, going to another URL, etc.WhereasButtons ``&lt;button&gt; ``are for &quot;doing something&quot; such as a function on the page to expand/collapse a menu, submit a form or etc.</code></pre><h2 id="grid參考資料"><a href="#grid參考資料" class="headerlink" title="grid參考資料"></a><code>grid</code>參考資料</h2><p><a href="http://www.responsivegridsystem.com/" target="_blank" rel="noopener">Spectacularly Easy Responsive Design</a><br><a href="https://blog.hinablue.me/css-grid-layout/" target="_blank" rel="noopener">關於 Grid Layout 的使用姿勢</a><br><a href="https://www.youtube.com/watch?v=uZRkVOeRHws" target="_blank" rel="noopener">六角學院 - Bootstrap Grid System 原理介紹</a></p><h3 id="margin-與-paggimg"><a href="#margin-與-paggimg" class="headerlink" title="margin 與 paggimg"></a><code>margin</code> 與 <code>paggimg</code></h3><p>製作steps區塊時，因設定section的margin距離<br>使得想在此區塊多加上背景色彩，有了中間的空白處</p><pre><code class="css">.meal-steps{  background: #f4f4f4;}</code></pre><ul><li>這裏應該改為padding<pre><code class="css">section{padding: 80px 0; /*margin: 80px 0;*/}</code></pre></li></ul><p><img src="https://i.imgur.com/ss2XfZd.png" alt=""></p><h3 id="練習後的小心得："><a href="#練習後的小心得：" class="headerlink" title="練習後的小心得："></a>練習後的小心得：</h3><p>1.在html建構會使用<code>.row</code><br>2.應用grid,css<br>3.內部，字的大小用百分比<br>4.有一些可以共用的區塊，可以放在reuse區塊，並設一樣的class名稱，在建構時，可以更快速</p>]]></content>
      
      
      <categories>
          
          <category> CSS練習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> udemy </tag>
            
            <tag> CSS </tag>
            
            <tag> icon </tag>
            
            <tag> grid </tag>
            
            <tag> 多重背景 </tag>
            
            <tag> opacity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amos金魚都能懂的切版教學影片- csscoke NO013</title>
      <link href="/2020/11/28/csscoke-NO013/"/>
      <url>/2020/11/28/csscoke-NO013/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eva813.github.io/my-projects/coke-NO013(v1).html" target="_blank" rel="noopener">My page</a><br><img src="https://i.imgur.com/BplwB2k.png" alt=""></p><h2 id="HTML架構"><a href="#HTML架構" class="headerlink" title="HTML架構"></a>HTML架構</h2><pre><code class="html">&lt;body&gt;  &lt;div class=&quot;side-menu&quot;&gt;    &lt;form action=&quot;&quot;&gt;      &lt;input type=&quot;search&quot;&gt;      &lt;button&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt;&lt;/button&gt;    &lt;/form&gt;    &lt;nav&gt;      &lt;a href=&quot;#&quot; id=&quot;&quot;&gt;&lt;i class=&quot;fa fa-users&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;鐵人賽&lt;/a&gt;      &lt;a href=&quot;#&quot; id=&quot;&quot;&gt;&lt;i class=&quot;fa fa-gavel&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;暴力班&lt;/a&gt;      &lt;a href=&quot;#&quot; id=&quot;&quot;&gt;&lt;i class=&quot;fa fa-object-group&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;RWD 醬子&lt;/a&gt;      &lt;a href=&quot;#&quot; id=&quot;&quot;&gt;&lt;i class=&quot;fa fa-globe&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;金魚網頁&lt;/a&gt;      &lt;a href=&quot;#&quot; id=&quot;&quot;&gt;&lt;i class=&quot;fa fa-cutlery&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;金魚切版&lt;/a&gt;    &lt;/nav&gt;  &lt;/div&gt;&lt;/body&gt;</code></pre><h2 id="side-menu"><a href="#side-menu" class="headerlink" title=".side-menu"></a>.side-menu</h2><ul><li>設定寬度、背景色彩</li><li>利用flex排列，並設定直向<pre><code class="css">.side-menu {    width: 300px;    height: 100%;    background-image: linear-gradient(0deg, #13547a, #80d0c7);    display: flex;    flex-direction: column;</code></pre></li></ul><pre><code>## 側邊選單裡的選項（nav）```css   nav a {      /* 讓a可以一行一行排列 */      display: block;      padding: 10px;      text-decoration: none;      color: #fff;      position: relative;    }</code></pre><ul><li><h3 id="設定底線，利用＋篩選器"><a href="#設定底線，利用＋篩選器" class="headerlink" title="設定底線，利用＋篩選器"></a>設定底線，利用＋篩選器</h3></li></ul><pre><code class="css">nav a+a {      border-top: 1px solid #fff;    }</code></pre><ul><li>使用此方式，會讓線滿版，無法單獨調整間距<br><img src="https://i.imgur.com/HDrjfjS.png" alt=""></li></ul><pre><code class="css">nav a+a::before {      content: &#39;&#39;;      position: absolute;      border-top: 1px solid rgba(255, 255, 255, .4);      left: 10px;      right: 10px;      top: 0;    }</code></pre><p><img src="https://i.imgur.com/Vj3cZFy.png" alt=""></p><h2 id="form-搜尋表"><a href="#form-搜尋表" class="headerlink" title="form 搜尋表"></a>form 搜尋表</h2><p><img src="https://i.imgur.com/JQygAWh.png" alt=""></p><ul><li>讓inpt與button可以緊密並排</li></ul><pre><code class="css">.side-menu form {      display: flex;      margin: 0 10px 50px;}</code></pre><p><img src="https://i.imgur.com/EGk8tt6.png" alt=""></p><pre><code class="css"> .side-menu form input,    .side-menu form button {      border: none;      padding: 5px 10px;      }</code></pre><p><img src="https://i.imgur.com/I6Ceugc.png" alt=""></p><ul><li><p>讓form增加框線</p><pre><code class="css=">.side-menu form {    /* 設定表單外框形狀有圓弧形 */    border-radius: 100px;    border: 1px solid rgba(255, 255, 255, .4);  }</code></pre></li></ul><p><img src="https://i.imgur.com/iTiqU93.png" alt=""></p><ul><li>調整寬度</li><li>但要注意的是，如此調整後就蓋住了form的框線</li></ul><pre><code class="css">/* 寬度300，左右2邊有10px，剩下280，希望左邊選單大一點點 */    .side-menu form input {      width: 230px;    }    .side-menu form button {      width: 50px;    }</code></pre><p><img src="https://i.imgur.com/5nxR9Ru.png" alt=""></p><ul><li>設背景顏色為透明</li></ul><pre><code class="css">.side-menu form input,    .side-menu form button {      border: none;      padding: 5px 10px;      /* 設定透明才會讓，form表單的框顯示清楚 */      background-color: transparent;      color: #fff;    }</code></pre><p><img src="https://i.imgur.com/HpJUlbq.png" alt=""></p><ul><li>取消focus的外框<br><img src="https://i.imgur.com/jEv9f9o.png" alt=""></li></ul><pre><code class="css">.side-menu form input:focus,    .side-menu form button:focus {      outline: none;    }</code></pre><p><img src="https://i.imgur.com/NrGoGVN.png" alt=""></p><h3 id="動畫"><a href="#動畫" class="headerlink" title="動畫"></a>動畫</h3><pre><code class="css"> /* 動畫：讓icon消失，文字左縮 */    nav a .fa {      margin-right: -1.1em;      transform: scale(0);      transition: .3s;    }    nav a:hover .fa {      margin-right: 0em;      transform: scale(1);    }`</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> icon </tag>
            
            <tag> box-sizing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amos金魚都能懂的切版教學影片-csscoke NO006</title>
      <link href="/2020/11/28/csscoke-NO006/"/>
      <url>/2020/11/28/csscoke-NO006/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eva813.github.io/my-projects/coke-NO006(v1).html" target="_blank" rel="noopener">my_page</a><br><img src="https://i.imgur.com/tYapgm2.png" alt=""></p><p>此切版主要是針對footer區域的切版練習，有四個欄位，最下方有copy right區域。</p><h2 id="我製作時遇到的問題："><a href="#我製作時遇到的問題：" class="headerlink" title="我製作時遇到的問題："></a>我製作時遇到的問題：</h2><ul><li>copyright一直跟左邊的item並行，是因為container的範圍應該只要涵蓋四個item就好</li></ul><p><img src="https://i.imgur.com/sU1bBXb.png" alt=""></p><ul><li>設定nav的display:flex;並讓設定方向為colum</li></ul><p><img src="https://i.imgur.com/CYzhwHq.png" alt=""></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre><code class="html">&lt;body&gt;  &lt;div class=&quot;main-footer&quot;&gt;    &lt;div class=&quot;container&quot;&gt;      &lt;div class=&quot;footer-item&quot;&gt;        &lt;h4&gt;關於暴力課程&lt;/h4&gt;        &lt;nav&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; 課程目標&lt;/a&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; 辦學理念&lt;/a&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; 課程宗旨&lt;/a&gt;        &lt;/nav&gt;      &lt;/div&gt;      &lt;div class=&quot;footer-item&quot;&gt;        &lt;h4&gt;課程列表&lt;/h4&gt;        &lt;nav&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; 暴力網頁入門班&lt;/a&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; RWD網頁深入理解&lt;/a&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; CSS3互動動畫設計&lt;/a&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; Bootstrap框架實務&lt;/a&gt;        &lt;/nav&gt;      &lt;/div&gt;      &lt;div class=&quot;footer-item&quot;&gt;        &lt;h4&gt;服務項目&lt;/h4&gt;        &lt;nav&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; 網站建置顧問&lt;/a&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; 網站設計建置&lt;/a&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; 網站規劃&lt;/a&gt;          &lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt; 企業教育訓練&lt;/a&gt;        &lt;/nav&gt;      &lt;/div&gt;      &lt;div class=&quot;footer-item footer-subs&quot;&gt;        &lt;h4&gt;訂閱電子報&lt;/h4&gt;        &lt;form&gt;          &lt;input type=&quot;text&quot; name=&quot;&quot;&gt;          &lt;input type=&quot;submit&quot; value=&quot;訂閱&quot;&gt;        &lt;/form&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;copyright&quot;&gt;      Copyright &amp;copy; 2019 金魚都能懂得這個網頁畫面怎麼切    &lt;/div&gt;  &lt;/div&gt;&lt;/body&gt;</code></pre><ul><li>在大區塊先訂出寬度，並讓他們橫向排列</li></ul><pre><code class="css="> .main-footer {      /* 讓上面有距離出來 */      padding: 150px 0 0 0;      background: linear-gradient(-20deg, #3f5494, #08c7a5);    }    .main-footer .container {      display: flex;      width: 1200px;      margin: auto;    }</code></pre><p><img src="https://i.imgur.com/jVPxmCS.png" alt=""></p><pre><code class="css=">    .footer-item {      /* 使用flex的排版特性，來進行欄位大小的配置 */      width: 0;      flex-grow: 1;      margin: 0 20px;    }</code></pre><p><img src="https://i.imgur.com/vpFKfJ8.png" alt=""></p><h2 id="copyright"><a href="#copyright" class="headerlink" title="copyright"></a>copyright</h2><pre><code class="css">.copyright {      text-align: center;      /* 這裡也加距離 */      margin: 150px;      padding: 10px 0;      background-color: #3e5293;      color: #70f6df;      width: 100%;      /* 左方有一個空格，沒有填滿 */    }</code></pre><p><img src="https://i.imgur.com/vhMFqSF.png" alt=""></p><h2 id="nav區"><a href="#nav區" class="headerlink" title="nav區"></a>nav區</h2><pre><code class="css="> .footer-item nav {      /* 設定直向排列之後，裡面的小項目就會排列整齊 */      display: flex;      flex-direction: column;    }</code></pre><p><img src="https://i.imgur.com/8joRYrl.png" alt=""></p><h4 id="訂閱電子報的區域"><a href="#訂閱電子報的區域" class="headerlink" title="訂閱電子報的區域"></a>訂閱電子報的區域</h4><ul><li>再給予一個class名稱，在設定css時比較有指向性</li></ul><pre><code class="htmlembedded">&lt;div class=&quot;footer-item footer-subs&quot;&gt;        &lt;h4&gt;訂閱電子報&lt;/h4&gt;        &lt;form&gt;          &lt;input type=&quot;text&quot; name=&quot;&quot;&gt;          &lt;input type=&quot;submit&quot; value=&quot;訂閱&quot;&gt;        &lt;/form&gt;      &lt;/div&gt;</code></pre><h2 id="訂閱電子報的居中"><a href="#訂閱電子報的居中" class="headerlink" title="訂閱電子報的居中"></a>訂閱電子報的居中</h2><p><img src="https://i.imgur.com/2PBp5rH.png" alt=""></p><pre><code class="css=">    /* footer-item是flex的項目，所以他的高度和其他地方等高，但這個訂閱電子報欄位內容，並沒有等高&lt;所以讓footer-item設定flex，設定直排，讓表單上下的距離能夠撐開 */    .footer-subs {      display: flex;      flex-direction: column;    }    .footer-subs form {      /* 這裏的flex是為了讓輸入框與訂閱紐能夠並排 */      display: flex;      /* 這裏的margin與寬度的設定是為了讓輸入框能夠整個居中   */      margin: auto 0;      width: 100%;    }</code></pre><p><img src="https://i.imgur.com/NCJMKxk.png" alt=""></p><h2 id="最後的調整"><a href="#最後的調整" class="headerlink" title="最後的調整"></a>最後的調整</h2><p><img src="https://i.imgur.com/YRqfCso.png" alt=""></p><ul><li>因為copyright的margin:150px; &gt; 應該修改為margin: 150px 0 0 ;(只有上面有margin)</li></ul><p><img src="https://i.imgur.com/Rn0pOpz.png" alt=""></p><p><a href="https://eva813.github.io/my-projects/coke-NO006(v2).html" target="_blank" rel="noopener">t_page</a></p><hr><p><a href="https://ithelp.ithome.com.tw/articles/10208741" target="_blank" rel="noopener">Day24 Flex 空間分配 flex-grow / flex-shrink / flex-basis</a><br><a href="https://www.itread01.com/content/1511769483.html" target="_blank" rel="noopener">HTML中button和input button的區別</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> flex </tag>
            
            <tag> footer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amos金魚都能懂的切版教學影片-csscoke NO017</title>
      <link href="/2020/11/27/csscoke-NO017/"/>
      <url>/2020/11/27/csscoke-NO017/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eva813.github.io/my-projects/coke-NO017(v1).html" target="_blank" rel="noopener">成品</a><br><img src="https://i.imgur.com/h8XYPgY.png" alt=""></p><h2 id="會員登入"><a href="#會員登入" class="headerlink" title="會員登入"></a>會員登入</h2><p>製作會員登入頁面，使用form表單，製作標籤、輸入框，以及登入按鈕。</p><pre><code class="html">&lt;body&gt;  &lt;div class=&quot;login&quot;&gt;    &lt;form class=&quot;form&quot; action=&quot;&quot;&gt;      &lt;h2&gt;會員登入&lt;/h2&gt;      &lt;!-- 用群組來分帳號與密碼 --&gt;      &lt;div class=&quot;group&quot;&gt;        &lt;label for=&quot;user_id&quot;&gt;帳號&lt;/label&gt;        &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;user_id&quot;&gt;        &lt;!-- for,與input的名字設一樣，才能在點到label時，會直接把插入點帶進去 --&gt;      &lt;/div&gt;      &lt;div class=&quot;grop&quot;&gt;        &lt;label for=&quot;user_password&quot;&gt;密碼&lt;/label&gt;        &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;user_password&quot;&gt;      &lt;/div&gt;      &lt;div class=&quot;gtn-group&quot;&gt;        &lt;button class=&quot;btn&quot;&gt;登入&lt;/button&gt;        &lt;button class=&quot;btn&quot;&gt;取消&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;  &lt;/div&gt;&lt;/body&gt;</code></pre><p><img src="https://i.imgur.com/VtS2Juk.png" alt=""></p><h2 id="HTML-body-背景照片"><a href="#HTML-body-背景照片" class="headerlink" title="HTML,body 背景照片"></a>HTML,body 背景照片</h2><p>要讓畫面整個垂直置中，首先需要讓畫面高度是夠高的！（預設的body,html是由內容所撐開，所以預設不是100%的高）</p><pre><code class="css"> html,    body {      height: 100%;    } body {      background: url(&#39;/img/office.jpg&#39;) no-repeat center center/cover;    }</code></pre><p><img src="https://i.imgur.com/2u1BBDa.jpg" alt=""></p><h2 id="登入區"><a href="#登入區" class="headerlink" title="登入區"></a>登入區</h2><pre><code class="css">.login {      width: 600px;      height: 400px;      background-color: rgba(0, 0, 0, .5);      border-radius: 10px;      border: 10px solid #fff;    }</code></pre><p><img src="https://i.imgur.com/IsNlLK5.jpg" alt=""></p><ul><li>讓此login區置中於版面<ul><li>在body設display:flex</li></ul></li></ul><p><img src="https://i.imgur.com/YdGWpUZ.jpg" alt=""></p><h4 id="陰影、模糊"><a href="#陰影、模糊" class="headerlink" title="陰影、模糊"></a>陰影、模糊</h4><pre><code>box-shadow: x y blur spread color inset;常用box-shadow多半用在區塊的光暈，來達成陰影的效果</code></pre><p>補充</p><ul><li>x：水平位移</li><li>y：垂直位移</li><li>blur：模糊程度，預設為0</li><li>spread：擴散程度，預設為0</li><li>color：顏色</li><li>inset：內陰影</li></ul><h5 id="毛玻璃特效-注意：這是透過瀏覽器在處理特效，會比較耗效能"><a href="#毛玻璃特效-注意：這是透過瀏覽器在處理特效，會比較耗效能" class="headerlink" title="毛玻璃特效 (注意：這是透過瀏覽器在處理特效，會比較耗效能)"></a>毛玻璃特效 (注意：這是透過瀏覽器在處理特效，會比較耗效能)</h5><pre><code>backdrop-filter: blur(5px);</code></pre><p>更多相關…<a href="https://wcc723.github.io/development/2020/10/12/frosted-glass/" target="_blank" rel="noopener">純 CSS 毛玻璃特效 - backdrop-filter 屬性介紹</a>,<a href="https://ithelp.ithome.com.tw/articles/10208692" target="_blank" rel="noopener">Secret 18: 毛玻璃效果</a></p><p><img src="https://i.imgur.com/tzdNwg3.png" alt=""></p><h2 id="調整文字、排版細節"><a href="#調整文字、排版細節" class="headerlink" title="調整文字、排版細節"></a>調整文字、排版細節</h2><p><img src="https://i.imgur.com/yYg2Oga.png" alt=""></p><pre><code class="css">  .form input {      /* 讓輸入框設定100%，就會撐開 */      width: 100%;    }</code></pre><p><img src="https://i.imgur.com/hyKUW8d.png" alt=""></p><ul><li>使用line-height，讓輸入框的高度撐開</li></ul><pre><code class="css">.form input {      /* 讓輸入框設定100%，就會撐開 */      width: 100%;      border: 1px solid #aaa;      line-height: 3;    }</code></pre><p><img src="https://i.imgur.com/HSsKhS5.png" alt=""></p><ul><li>將帳號、密碼的間距拉開，以及h2的調整</li></ul><pre><code class="css">.form h2 {      margin-bottom: 20px;      border-bottom: 1px solid #fff;      padding-bottom: 10px;    }    .form .group {      margin-bottom: 20px;    }    .form label {      line-height: 2;    }    .form input {      /* 讓輸入框設定100%，就會撐開 */      width: 100%;      border: 1px solid #aaa;      line-height: 3;      border-radius: 5px;    }</code></pre><p><img src="https://i.imgur.com/0621fhk.png" alt=""></p><h2 id="按鈕的調整"><a href="#按鈕的調整" class="headerlink" title="按鈕的調整"></a>按鈕的調整</h2><ul><li>btn並排中建出現空隙，在父元素div上加上 font-size:0;</li><li>.form .btn+.btn，選取到『緊跟在對象 A 同層後方的 B』</li></ul><pre><code class="css">.form .btn-group {      font-size: 0px;      /* 讓按鈕區塊與上方有些距離，首先將原本wrap，height: 400px;改為500px ，再調整按鈕的margin*/      margin-top: 50px;    }    .form .btn {      font-size: 20px;      border-radius: 5px;      border: none;      background-color: #6ab4fe;      width: 190px;      padding: 10px 0;      color: #fff;    }    .form .btn+.btn {      margin-left: 15px;    }</code></pre><p><a href="https://eva813.github.io/my-projects/coke-NO017(v2).html" target="_blank" rel="noopener">Tutoria page</a></p><hr><p><a href="https://www.w3schools.com/css/css_form.asp" target="_blank" rel="noopener">w3schools</a><br><a href="https://www.itread01.com/p/681002.html" target="_blank" rel="noopener">CSS 實現背景圖尺寸不隨瀏覽器縮放而變化</a><br><a href="https://medium.com/@savemuse/%E5%88%A9%E7%94%A8css-box-shadow%E8%A4%87%E8%A3%BD%E5%9C%96%E5%9E%8B-51e3da4431cf" target="_blank" rel="noopener">應用CSS3 box-shadow複製圖型</a><br><a href="https://www.w3schools.com/css/css3_buttons.asp" target="_blank" rel="noopener">css3_buttons</a><br><a href="https://www.itread01.com/p/647911.html" target="_blank" rel="noopener">input標籤和button放在一行寫:inline元素的空白間隙問題</a><br><a href="https://ithelp.ithome.com.tw/articles/10220656" target="_blank" rel="noopener">親代選取器之妹妹選取器與鞭炮串選取器</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 切版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amos金魚都能懂的切版教學影片-csscoke NO010</title>
      <link href="/2020/11/27/csscoke-NO010/"/>
      <url>/2020/11/27/csscoke-NO010/</url>
      
        <content type="html"><![CDATA[<h2 id="練習使用float排版"><a href="#練習使用float排版" class="headerlink" title="練習使用float排版"></a>練習使用float排版</h2><p><a href="https://eva813.github.io/my-projects/coke-NO010(v2).html" target="_blank" rel="noopener">成品</a><br><img src="https://i.imgur.com/HSxrHVY.jpg" alt=""></p><h2 id="HTML架構"><a href="#HTML架構" class="headerlink" title="HTML架構"></a>HTML架構</h2><pre><code class="html">&lt;div class=&quot;wrap&quot;&gt;    &lt;div class=&quot;item&quot;&gt;        &lt;img src=&quot;https://picsum.photos/500/500?random=10&quot;&gt;        &lt;div class=&quot;txt&quot;&gt;            &lt;h3&gt;金魚都懂切版&lt;/h3&gt;            &lt;p&gt;金魚都懂的這個網頁怎麼切，是 IThome 鐵人賽的主題，主要訴求在簡。&lt;/p&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;        &lt;img src=&quot;https://picsum.photos/500/500?random=20&quot;&gt;        &lt;div class=&quot;txt&quot;&gt;            &lt;h3&gt;金魚也懂CSS&lt;/h3&gt;            &lt;p&gt;金魚都能懂的 CSS 選取器，是 IThome 鐵人賽的主題之一，&lt;/p&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;        &lt;img src=&quot;https://picsum.photos/500/500?random=30&quot;&gt;        &lt;div class=&quot;txt&quot;&gt;            &lt;h3&gt;金魚還會HTML&lt;/h3&gt;            &lt;p&gt;&lt;/p&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;        &lt;img src=&quot;https://picsum.photos/500/500?random=40&quot;&gt;        &lt;div class=&quot;txt&quot;&gt;            &lt;h3&gt;阿你會甚麼?&lt;/h3&gt;            &lt;p&gt;&lt;/p&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;        &lt;img src=&quot;https://picsum.photos/500/500?random=66&quot;&gt;        &lt;div class=&quot;txt&quot;&gt;            &lt;h3&gt;對不起我又嗆人了&lt;/h3&gt;            &lt;p&gt; CSScoke 的直播，趁現在趕快去定閱一波阿!&lt;/p&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><h2 id="調整版面"><a href="#調整版面" class="headerlink" title="調整版面"></a>調整版面</h2><ul><li>1.在wrap來訂出畫面尺寸大小</li><li>2.使用float</li><li>3.在第一個的item去設定，佔畫面的50%;而另外四個則是以25％去放置在畫面中</li><li>4.蚯蚓選取器：『對象 A 同層後方的所有 B』</li></ul><pre><code class="css">/* 先將畫面尺寸定出來 */    .wrap {      width: 960px;      margin: auto;      /* 在父層設置這個，就可以讓父層抓到所有子層的高度 */      overflow: hidden;    }    .item {      float: left;    }    .item img {      width: 100%;      vertical-align: middle;    }    .item:first-child {      width: 50%;    }    .item:first-child~.item {      width: 25%;    }</code></pre><ul><li>設定.item .txt區塊的寬為100%，以及paddimg:15px，這會使得文字區塊超出div。</li><li>要使用 <code>box-sizing: border-box;</code></li></ul><p><img src="https://i.imgur.com/iaIicVC.jpg" alt=""></p><p><img src="https://i.imgur.com/c5BGt1E.jpg" alt=""></p><h2 id="互動效果的設定"><a href="#互動效果的設定" class="headerlink" title="互動效果的設定"></a>互動效果的設定</h2><ul><li><p>設定文字被摸到出現或消失</p><pre><code class="css">.item .txt {    /* 調整兩個段落的垂直居中 */    /* display: flex; */    flex-direction: column;    justify-content: center;    align-items: center;    /* 要設定互動，display: flex;要去掉 */    display: none;  }  .item:hover .txt {    display: flex;  }   /* ******************************/  /* ***或是以透明度的方式來做顯示互動的效果*** */.item .txt {      opacity: 0;    transition: .5s;  }  .item:hover .txt {    opacity: 1;  }</code></pre></li></ul><pre><code>* 也可將互動改唯有縮放效果的方式* `scale()`用於修改元素大小```css= .item .txt {        opacity: 0;      transform: scale(0);      transition: .5s;    }    .item:hover .txt {      opacity: 1;      transform: scale(1);    }</code></pre><h2 id="補充教學-float-浮動"><a href="#補充教學-float-浮動" class="headerlink" title="補充教學-float 浮動"></a>補充教學-float 浮動</h2><ul><li>以圖片與段落文字為例<pre><code class="html"></code></pre></li></ul><img src="https://picsum.photos/500/500?random=6"><p>"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p><pre><code>![](https://i.imgur.com/VkWWZpD.png)![](https://i.imgur.com/jIi69In.png)* 當將img設定浮動之後，他會浮上來一層，在p之上，與裡面的文字同一層（所以會擠壓到文字）* `float:left;` `float:right;` 沒有center示意圖：![](https://i.imgur.com/lUTqlRy.png)形成文繞圖：![](https://i.imgur.com/6NuHHch.png)![](https://i.imgur.com/a8d7ERZ.png)* 讓圖片與文字有些距離，可以在img設定margin![](https://i.imgur.com/4vzaQnJ.png)## float排版* 設定三個欄位* 子物件設定為浮動之後，父層就會抓不到子物件的高度![](https://i.imgur.com/LcieUW2.png)* 物件設定float之後，物件會排排站* 再將三個欄位設定margin，且增加ooxx的div* 並將ooxx，設定`clear：both;` 讓父層抓到高度&gt;父層其實是被ooxx所拉開高度，而不是被內容的float物件所撐開&gt;clear作用是散開浮動物件，跑到所有浮動物件後方(最下方) 圖二，紅色。![](https://i.imgur.com/9kLyaNW.png)![](https://i.imgur.com/dsqmPw6.png)---[Day 19 | 我比較喜歡脆笛酥 - 方塊酥版面 Part 1](https://ithelp.ithome.com.tw/articles/10248813)[親代選取器之妹妹選取器與鞭炮串選取器](https://ithelp.ithome.com.tw/articles/10220656)[【DAY24】transform，進入視覺系的CSS第一步，網頁要動起來了！（一）](https://ithelp.ithome.com.tw/articles/10196979)[Transform變形](https://ithelp.ithome.com.tw/articles/10194395)[[CSS] 浮動 (float) 與清除浮動 (clear)](https://medium.com/%E9%A6%AC%E6%A0%BC%E8%95%BE%E7%89%B9%E7%9A%84%E5%86%92%E9%9A%AA%E8%80%85%E6%97%A5%E8%AA%8C/css-%E6%B5%AE%E5%8B%95%E8%88%87%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8B%95-34d3f49ef817)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 切版 </tag>
            
            <tag> float </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amos金魚都能懂的切版教學影片-csscoke NO011</title>
      <link href="/2020/11/27/csscoke-NO011/"/>
      <url>/2020/11/27/csscoke-NO011/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eva813.github.io/my-projects/coke-NO011(v1).html" target="_blank" rel="noopener">成品</a><br><img src="https://i.imgur.com/4oCdMgG.png" alt=""></p><ul><li><p>基本網頁的架構</p><pre><code class="html">&lt;body&gt;&lt;!-- 大區塊 wrap --&gt;&lt;div class=&quot;wrap&quot;&gt;  &lt;!-- 區塊一 --&gt;  &lt;div class=&quot;item&quot;&gt;    &lt;div class=&quot;icon&quot;&gt;    &lt;/div&gt;    &lt;div class=&quot;txt&quot;&gt;      &lt;h3&gt;&lt;/h3&gt;      &lt;p&gt;&lt;/p&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;!-- 區塊二 --&gt;  &lt;div class=&quot;item&quot;&gt;    &lt;div class=&quot;icon&quot;&gt;    &lt;/div&gt;</code></pre></li></ul><pre><code>  &lt;div class=&quot;txt&quot;&gt;    &lt;h3&gt;&lt;/h3&gt;    &lt;p&gt;&lt;/p&gt;  &lt;/div&gt;&lt;/div&gt;&lt;!-- 區塊三 --&gt;&lt;div class=&quot;item&quot;&gt;  &lt;div class=&quot;icon&quot;&gt;  &lt;/div&gt;  &lt;div class=&quot;txt&quot;&gt;    &lt;h3&gt;&lt;/h3&gt;    &lt;p&gt;&lt;/p&gt;  &lt;/div&gt;&lt;/div&gt;</code></pre>  </div></body>```<h3 id="wrap-的處理"><a href="#wrap-的處理" class="headerlink" title="wrap 的處理"></a><code>wrap</code> 的處理</h3><pre><code class="css">.wrap {      display: flex;      max-width: 1200px;      margin: auto;    }</code></pre><p><img src="https://i.imgur.com/5PBCM6c.png" alt=""></p><h3 id="三個item的處理"><a href="#三個item的處理" class="headerlink" title="三個item的處理"></a>三個item的處理</h3><ul><li>方框的角是圓弧<code>border-radius: 5px;</code>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius" target="_blank" rel="noopener">參考</a></li><li>方框背後有陰影<code>box-shadow</code>，<a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/box-shadow" target="_blank" rel="noopener">參考</a></li></ul><pre><code class="css">.item {      width: 340px;      align-items: center;      text-align: center;      margin: 10px 15px;      padding: 10px;      border: 5px solid #F8D0CD;      border-radius: 5px;      box-shadow: 2px 2px 10px 1px #F8D0CD;    }</code></pre><h3 id="破格"><a href="#破格" class="headerlink" title="破格"></a>破格</h3><ul><li>設置margin凸出去，就設置負的</li></ul><pre><code class="css">.item .icon {      width: 150px;      height: 150px;      /* 將整個div放中間，不是用text-align */      margin: -75px auto 0;      background-color: blue;      font-size: 85px;      color: #f5afac;      line-height: 150px;      /* line-height可以用來做單航文字的垂直居中 */      line-height: 150px;      /* **** */      position: relative;      border-radius: 50%;    }</code></pre><ul><li>先是方形的，後來加了radious</li></ul><p><img src="https://i.imgur.com/vXjT2NR.png" alt=""></p><p><img src="https://i.imgur.com/joOrRwU.png" alt=""></p><h4 id="在icon前加一個物件，"><a href="#在icon前加一個物件，" class="headerlink" title="在icon前加一個物件，"></a>在icon前加一個物件，</h4><pre><code class="css">.item .icon::before {      content: &#39;&#39;;      position: absolute;      border: 10px solid #f5afac;      width: 100%;      height: 100%;      /* left: 0; right: 0;  要注意有border*/      left: -10px;      right: -10px;      border-radius: 50%;      margin: -15px auto 0;      /*下一張圖，加上框線的處理*/      border-top: 10px solid #f9cec2;      border-right: 10px solid #f9cec2;      border-bottom: 10px solid transparent;      border-left: 10px solid transparent;      transform: rotate(-45deg);      margin: -10px auto 0;    }</code></pre><ul><li>先讓外框變原形，給予線條</li><li>設計線的上下左右，顏色與透明度（是以原本正方形的上下左右去看）</li><li>接著選轉，讓它到正上方</li></ul><p><img src="https://i.imgur.com/Vg4Rhg5.png" alt=""></p><p><img src="https://i.imgur.com/9NuBZmd.png" alt=""></p><p><img src="https://i.imgur.com/9UdygSn.png" alt=""></p><ul><li><h4 id="要注意突出去的部分已經超過wrap的範圍，會影響專案後續的呈現"><a href="#要注意突出去的部分已經超過wrap的範圍，會影響專案後續的呈現" class="headerlink" title="要注意突出去的部分已經超過wrap的範圍，會影響專案後續的呈現"></a>要注意突出去的部分已經超過wrap的範圍，會影響專案後續的呈現</h4><img src="https://i.imgur.com/31dbEZZ.png" alt=""></li></ul><ul><li><h4 id="wrap要做調整"><a href="#wrap要做調整" class="headerlink" title="wrap要做調整"></a>wrap要做調整</h4></li></ul><p><img src="https://i.imgur.com/mwELszb.png" alt=""></p><p><img src="https://i.imgur.com/FeeKHp9.png" alt=""></p><h2 id="icon的動畫"><a href="#icon的動畫" class="headerlink" title="icon的動畫"></a>icon的動畫</h2><ul><li><code>@keyframes ＋ 動畫名稱</code> 動畫內容（劇本） 關鍵影格的設定(0-100%(結束) or from-to )一段動畫在一個連續時間軸上進行著</li><li><code>animation</code> ＋ 動畫名稱 播放時間  延遲執行的時間（要等多久才播放） 速度 次數 方向 填充模式(起點狀態)  播放狀態（播放\暫停）</li></ul><h4 id="animation-name-duration-timing-function-delay-iteration-count-direction-fill-mode-play-state"><a href="#animation-name-duration-timing-function-delay-iteration-count-direction-fill-mode-play-state" class="headerlink" title="animation:name duration | timing-function | delay | iteration-count | direction | fill-mode | play-state;"></a><code>animation:name duration | timing-function | delay | iteration-count | direction | fill-mode | play-state;</code></h4><p><a href="https://www.oxxostudio.tw/articles/201803/css-animation.html" target="_blank" rel="noopener">完整解析 CSS 動畫 ( CSS Animation )</a><br><a href="https://www.youtube.com/watch?v=H9xZ9mExrZk&feature=youtu.be" target="_blank" rel="noopener">金魚都能懂網頁設計入門 : Animation 網頁動畫 - 鐵人賽第十九天</a><br><a href="https://dotblogs.com.tw/gra/2018/03/20/222028" target="_blank" rel="noopener">動畫效果</a></p><hr><ul><li>animation-duration:5s;指的是「播放一次」動畫需要的時間</li><li>animation-iteration-count:infinite;表示動畫播放的次數，預設值為 1 次，如果設定為 infinite 動畫就會無止盡的播放下去。</li><li>animation-timing-function 動畫加速度函式:<ul><li>linear:線性，沒有任何加速減速</li><li>ease、ease-in、ease-out、ease-in-out:具有加速減速的動畫   </li></ul></li><li>animation-direction 動畫播放方向<ul><li>normal：正常播放，從 0% 到 100% ( 預設值 )。</li><li>reverse：反轉播放，從 100% 到 0%。</li><li>alternate：正反轉輪流播放，奇數次為 0% 到 100%，偶數次為 100% 到 0%，若動畫播放次數只有一次就只會正常播放。</li><li>alternate-reverse：alternate 的相反，奇數次為 100% 到 0%，偶數次為 0% 到 100%，若動畫播放次數只有一次就只會反轉播放。<br><img src="https://i.imgur.com/X8LBQPn.png" alt=""></li></ul></li></ul><hr><pre><code class="css=">/* item被摸到，然後搖裡面的icon */    .item:hover .fas {      animation: shake .2s linear infinite alternate;    }    @keyframes shake {      0% {        transform: rotate(-10deg);      }      100% {        transform: rotate(10deg);      }    }</code></pre><h2 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h2><ul><li>使用前可以在官網創造帳戶</li><li>點選右上角的 ” Copy Kit Code ”</li><li>將剛剛複製的這串程式碼放入我們網站 HTML 程式碼中的 <code>&lt;head&gt;</code> 之中。</li><li>接下來就可以找自己享用的icon</li></ul><p><img src="https://i.imgur.com/ZZZ5mYn.png" alt=""></p><h2 id="import-“URI”-插入到-CSS-檔中"><a href="#import-“URI”-插入到-CSS-檔中" class="headerlink" title="@import “URI” 插入到 CSS 檔中"></a>@import “URI” 插入到 CSS 檔中</h2><p><a href="https://ithelp.ithome.com.tw/articles/10195612" target="_blank" rel="noopener">@import 開心的結構化 CSS</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 切版 </tag>
            
            <tag> animation </tag>
            
            <tag> icon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amos金魚都能懂的切版教學影片- csscoke NO001</title>
      <link href="/2020/11/27/csscoke-NO001/"/>
      <url>/2020/11/27/csscoke-NO001/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/v5d6H4B.jpg" alt=""></p><h2 id="一開始我的製作方式是"><a href="#一開始我的製作方式是" class="headerlink" title="一開始我的製作方式是"></a>一開始我的製作方式是</h2><ul><li>一個區塊放圖片</li><li>一個區塊放h1,下標</li><li>最後在一個區塊h2,p</li><li>想讓文字與圖的區塊疊住再去做調整，不過失敗…</li></ul><h2 id="Amos老師製作方式"><a href="#Amos老師製作方式" class="headerlink" title="Amos老師製作方式"></a>Amos老師製作方式</h2><ul><li>用一個取名為banner的區塊</li><li>裡面放一個container的容器，作為來設定裝下裡面文字的容器</li><li>此container中，再放一個banner-txt，用來放置文字區塊</li></ul><pre><code class="html">&lt;body&gt;  &lt;div class=&quot;banner&quot;&gt;    &lt;div class=&quot;container&quot;&gt;      &lt;!-- 設定固定寬度的容器 --&gt;      &lt;div class=&quot;banner-txt&quot;&gt;        &lt;h1&gt;金魚都能懂的          &lt;small&gt;這個網頁畫面怎麼切&lt;/small&gt;        &lt;/h1&gt;        &lt;h2&gt;圖文滿版區塊&lt;/h2&gt;        &lt;p&gt;這畫面實在常見，在各種樣版網站可說是設計常客          金魚切不出來實在說不過去阿&lt;/p&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/body&gt;</code></pre><h3 id="1-css的簡單解析"><a href="#1-css的簡單解析" class="headerlink" title="1.css的簡單解析"></a>1.css的簡單解析</h3><ul><li>在banner的地方會去設定填滿整個視窗</li><li>container用來設定所放入文字的容器，他的寬與高，並讓他置中</li><li>banner-txt的地方，將高度設定和container一樣，並設定flex讓內容文字能夠依照想要的方式來進行排列</li></ul><hr><h2 id="將幾個大重點放於下方說明："><a href="#將幾個大重點放於下方說明：" class="headerlink" title="將幾個大重點放於下方說明："></a>將幾個大重點放於下方說明：</h2><h3 id="2-CSS-Reset"><a href="#2-CSS-Reset" class="headerlink" title="2.CSS Reset"></a>2.CSS Reset</h3><p><a href="https://www.youtube.com/watch?v=WtjXBIyxhw8" target="_blank" rel="noopener">金魚都能懂網頁設計入門 : CSS Reset </a><br>meyerweb.com<br>計網頁時重要的起手式，主要是為了讓各家瀏覽器的網頁外觀維持一致。<br>不同瀏覽器，在一開始，會有預設的部分，會導致在做css時和預想的設置會有差異，所以要記得reset。</p><hr><h3 id="3-flex-的使用"><a href="#3-flex-的使用" class="headerlink" title="3.flex 的使用"></a>3.flex 的使用</h3><p><a href="https://www.youtube.com/watch?v=_nCBQ6AIzDU" target="_blank" rel="noopener">玩轉CSS </a></p><pre><code>display: flex;flex-direction: column; 垂直justify-content: center; align-items:flex-start</code></pre><h3 id="此網頁flex排列的過程"><a href="#此網頁flex排列的過程" class="headerlink" title="此網頁flex排列的過程"></a>此網頁flex排列的過程</h3><p><img src="https://i.imgur.com/eMWlawn.png" alt=""></p><ul><li>display: flex;</li></ul><p><img src="https://i.imgur.com/0cDI8Nq.png" alt=""></p><ul><li>.banner-txt small {  display: block;}</li></ul><p><img src="https://i.imgur.com/lWwcqSe.png" alt=""></p><ul><li>.banner-txt {  flex-direction: column;}</li></ul><p><img src="https://i.imgur.com/xHmKCi0.png" alt=""></p><ul><li>.banner-txt {  flex-direction: column;justify-content: center;}</li></ul><p><img src="https://i.imgur.com/ALt0gm2.png" alt=""></p><h3 id="在金魚…此h1下面-加上分隔線"><a href="#在金魚…此h1下面-加上分隔線" class="headerlink" title="在金魚…此h1下面 加上分隔線"></a>在金魚…此h1下面 加上分隔線</h3><ul><li>以邊框來設，線變成滿版一條</li><li>因為我們前面使用了flex的特性，讓他們的排列變成直排（主軸變直的）</li><li>故’次軸’變成橫的，所以在預設情形下，次軸會填滿主軸的寬或高<pre><code>.banner-txt h1 {    font-size: 80px;    border-bottom: 1px solid #333;  }</code></pre></li></ul><p><img src="https://i.imgur.com/VVDVFKG.png" alt=""></p><ul><li>在剛剛設置flex的那邊設置</li></ul><pre><code>.banner-txt{ align-items: flex-start;}</code></pre><p><img src="https://i.imgur.com/eRE9dBP.png" alt=""></p><hr><h2 id="多重背景"><a href="#多重背景" class="headerlink" title="多重背景"></a>多重背景</h2><ul><li>整個版面是將此背景圖放在banner區塊</li><li>用線性方式</li></ul><pre><code class="css">/* 多重背景的使用 */      background: linear-gradient(115deg, darksalmon 50%, transparent 50%)center center /100% 100%, url(https://picsum.photos/seed/picsum/1200/600)right center /auto 100%;</code></pre><p>linear gradient(顏色漸變方向 &lt;開始方向 結束方向&gt;, 色碼1 位置1 ,色碼 2 位置2,….)    fixed (位置：固定)  center center(背景：位置，x軸 y軸) / 100% 100% (背景：尺寸，寬、高)</p><p><a href="https://ithelp.ithome.com.tw/articles/10197136" target="_blank" rel="noopener">Day26：小事之 多重背景與漸層背景 CSS3 Gradients</a><br><a href="https://www.w3cplus.com/css3/do-you-really-understand-css-linear-gradients.html" target="_blank" rel="noopener">你真的理解CSS的linear-gradient？</a></p><hr><h3 id="margin-與-padding"><a href="#margin-與-padding" class="headerlink" title="margin 與 padding"></a>margin 與 padding</h3><p><img src="https://i.imgur.com/HmMAKt5.png" alt=""></p><hr><p>可用假圖產生圖片，尺寸大小或是隨機出圖都可以在網址上設定。<br>假圖產生網址 1：<a href="https://fakeimg.pl/" target="_blank" rel="noopener">https://fakeimg.pl/</a><br>假圖產生網址 2：<a href="https://picsum.photos/" target="_blank" rel="noopener">https://picsum.photos/</a></p><p>參考資料<br><a href="https://medium.com/chloelo925/%E9%87%91%E9%AD%9A%E9%83%BD%E8%83%BD%E6%87%82%E7%9A%84%E7%B6%B2%E9%A0%81%E8%A8%AD%E8%A8%88-%E9%9B%9C%E8%A8%98-1e6068054e4a" target="_blank" rel="noopener">金魚都能懂的網頁設計-雜記</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 切版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tribute-page 切版練習</title>
      <link href="/2020/11/27/tribute-page/"/>
      <url>/2020/11/27/tribute-page/</url>
      
        <content type="html"><![CDATA[<p>在freeCodeCamp上，可以免費學習到程式語言的課程，除了提供基礎的介紹外，也有一些實作範本可以練習，此次，主要練習css切版的基礎，製作一個一頁的頁面</p><h2 id="頁面分析"><a href="#頁面分析" class="headerlink" title="頁面分析"></a>頁面分析</h2><p><img src="https://i.imgur.com/HfmFPC0.png" alt=""></p><p><img src="https://i.imgur.com/hGHbOHb.png" alt=""></p><h4 id="先試著自己動手做"><a href="#先試著自己動手做" class="headerlink" title="先試著自己動手做"></a>先試著自己動手做</h4><h3 id="我區分的："><a href="#我區分的：" class="headerlink" title="我區分的："></a>我區分的：</h3><pre><code class="htmlembedded">&lt;div class=&quot;header&quot;&gt;    &lt;h1&gt;Dr. Norman Borlaug&lt;/h1&gt;    &lt;p&gt;The man who saved a billion lives&lt;/p&gt;  &lt;/div&gt;</code></pre><pre><code class="htmlembedded"> &lt;div class=&quot;container&quot;&gt;    &lt;img src=&quot;https://picsum.photos/500/400?random=1&quot; alt=&quot;&quot;&gt;    &lt;p&gt;Dr. Norman Borease wheat yields - part of his      life-long war on hunger.&lt;/p&gt;      &lt;/div&gt;    &lt;div class=&quot;list&quot;&gt;      &lt;h2&gt;Here&#39;s a time line of Dr. Borlaug&#39;s life:&lt;/h2&gt;      &lt;ul&gt;       li*16--      &lt;/ul&gt;      &lt;p&gt;&quot;Borlaug&#39;s life and achievement are testimony to the far-reaching contribution that one man&#39;s towering        intellect,        persistence and scientific vision can make to human peace and progress.&quot;        &lt;br&gt;        -- Indian Prime Minister Manmohan Singh&lt;/p&gt;      &lt;h3&gt;&lt;strong&gt;If you have time, you should read more about this incredible human being on his a          &lt;a href=&quot;https://en.wikipedia.org/wiki/Norman_Borlaug&quot;&gt;Wikipedia entry&lt;/a&gt; .&lt;/strong&gt;&lt;/h3&gt;    &lt;/div&gt;</code></pre><h2 id="自己切的時候，遇到的問題"><a href="#自己切的時候，遇到的問題" class="headerlink" title="自己切的時候，遇到的問題"></a>自己切的時候，遇到的問題</h2><ul><li>img 在網頁縮放時，沒有好好的跟著容器變化大小，會凸出去。<ul><li>一開始，是設定固定寬度、高度去調整</li><li>解決：使用<code>max-width</code></li><li>另外img的display也要調整為block或inline-block，比較好調整置中<ul><li>在中間很多列表的表頭，上下空間與置中一直沒有調整好</li><li>發現區段沒有設置h3，讓他形成一個區塊</li><li>解決：使用開發者工作，去看margin、padding產生空間</li></ul></li></ul></li></ul><hr><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><h2 id="1-在最上面的區塊，使用main去包"><a href="#1-在最上面的區塊，使用main去包" class="headerlink" title="1.在最上面的區塊，使用main去包"></a>1.在最上面的區塊，使用main去包</h2><pre><code class="htmlembedded=">&lt;main id=&quot;main&quot;&gt; &lt;h1&gt;..&lt;/h1&gt;    &lt;p&gt;Ts&lt;/p&gt;  &lt;/main&gt;</code></pre><h3 id="style的部分要注意置中-字的大小"><a href="#style的部分要注意置中-字的大小" class="headerlink" title="style的部分要注意置中\字的大小"></a>style的部分要注意置中\字的大小</h3><ul><li><p>margin,padding 做了些調整</p><pre><code class="css">h1 {  font-size: 2.5em;} #main {  margin: 30px 8px;  padding: 15px;}</code></pre></li></ul><h2 id="2-圖片區塊"><a href="#2-圖片區塊" class="headerlink" title="2.圖片區塊"></a>2.圖片區塊</h2><p>使用<code>&lt;figure&gt;</code>用來引用任何內容像是文字段落、圖片、圖表或程式碼片段。<code>&lt;figure&gt;</code> 中還可以有一個 <code>&lt;figcaption&gt;</code> 標籤用來說明該 figure 區塊的標題。</p><pre><code class="htmlembedded=">&lt;figure id=&quot;img-div&quot;&gt;&lt;img src=&quot;/img/tribute-cover.jpg&quot; alt=&quot;&quot;&gt;    &lt;figcaption id=&quot;imd-cap&quot;&gt;      ar on hunger.    &lt;/figcaption&gt;  &lt;/figure&gt;</code></pre><h3 id="style的部分"><a href="#style的部分" class="headerlink" title="style的部分"></a>style的部分</h3><ul><li>img要記得設最大寬度，讓他置中</li><li>#img-div，是包含照片的容器，注意原本版面左右是有留白,以及灰色，所以設定padding:10px<pre><code class="css=">img {  max-width: 100%;  display: inline-block;  height: auto;  margin: 0 auto;}#img-div {  background: white;  padding: 10px;  margin: 0;}</code></pre><h2 id="3-u1資訊的部分"><a href="#3-u1資訊的部分" class="headerlink" title="3.u1資訊的部分"></a>3.u1資訊的部分</h2></li><li>以section做區塊</li><li>使用blockquote，用來引用段落文字，如果引用的內容來自於網路，還可以用 cite 屬性指定引用來源 (URL)。</li></ul><pre><code class="htmlembedded">&lt;section id=&quot;tribute-info&quot;&gt;&lt;h3 id=&quot;headline&quot;&gt;&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;&lt;/li&gt;  &lt;li&gt;&lt;/li&gt;  &lt;li&gt;&lt;/li&gt;  &lt;li&gt;&lt;/li&gt;  &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;/p&gt;  &lt;cite&gt;&lt;/cite&gt;&lt;/blockquote&gt;</code></pre><pre><code class="css">#headline {    margin: 50px 0;    text-align: center;  }  ul {    max-width: 550px;    margin: 0 auto 50px auto;    text-align: left;    line-height: 1.6;  }  li {    margin: 16px 0;  }</code></pre><h2 id="4-最下面一段"><a href="#4-最下面一段" class="headerlink" title="4.最下面一段"></a>4.最下面一段</h2><ul><li>以h3作為最後一段文字的區塊</li></ul><pre><code class="htmlembedded">&lt;h3&gt;&lt;a&gt;&lt;/a&gt;&lt;/h3&gt;</code></pre><pre><code class="css="> a {    color: #477ca7;  }  a:visited {    color: #74638f;  }blockquote {    font-style: italic;    max-width: 545px;    margin: 0 auto 50px auto;    text-align: left;  }</code></pre><h2 id="完成的網址"><a href="#完成的網址" class="headerlink" title="完成的網址"></a>完成的網址</h2><p><a href="https://eva813.github.io/my-projects/tribute-page.html" target="_blank" rel="noopener">我製作的網頁</a><br><a href="https://eva813.github.io/my-projects/tribute-page(v2).html" target="_blank" rel="noopener">codpen的解法</a></p><hr><p>參考資料：</p><p><a href="https://chupainotebook.blogspot.com/2019/02/blog-post.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:+blogspot/SMcpvm+(+%E7%AB%B9%E7%99%BD%E8%A8%98%E4%BA%8B%E6%9C%AC)&m=1" target="_blank" rel="noopener">假圖</a><br><a href="https://medium.com/chloelo925/%E9%87%91%E9%AD%9A%E9%83%BD%E8%83%BD%E6%87%82%E7%9A%84%E7%B6%B2%E9%A0%81%E8%A8%AD%E8%A8%88-%E9%9B%9C%E8%A8%98-1e6068054e4a" target="_blank" rel="noopener">金魚都能懂的網頁設計-雜記</a><br><a href="http://csscoke.com/2018/08/21/css-vertical-align/" target="_blank" rel="noopener">CSS垂直置中技巧，我只會23個，你會幾個</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推送靜態網頁到 GitHub</title>
      <link href="/2020/11/24/push-github-page/"/>
      <url>/2020/11/24/push-github-page/</url>
      
        <content type="html"><![CDATA[<h2 id="1-本地端創建資料夾"><a href="#1-本地端創建資料夾" class="headerlink" title="1.本地端創建資料夾"></a>1.本地端創建資料夾</h2><p>在自己的user底下，mkdir my_projects</p><h2 id="2-GitHub上創建專案-repo"><a href="#2-GitHub上創建專案-repo" class="headerlink" title="2.GitHub上創建專案(repo)"></a>2.GitHub上創建專案(repo)</h2><p><img src="https://i.imgur.com/4uIw6uY.png" alt=""></p><ul><li><h3 id="因為本地端的專案沒有下過git-init，所以選用-…-…or-create-a-new-repository-on-the-command-line-但如果本地端的資料夾已經-git-init過之後，…or-push-an-existing-repository-from-the-command-line"><a href="#因為本地端的專案沒有下過git-init，所以選用-…-…or-create-a-new-repository-on-the-command-line-但如果本地端的資料夾已經-git-init過之後，…or-push-an-existing-repository-from-the-command-line" class="headerlink" title="因為本地端的專案沒有下過git init，所以選用 ….…or create a new repository on the command line;但如果本地端的資料夾已經 git init過之後，…or push an existing repository from the command line"></a>因為本地端的專案沒有下過<code>git init</code>，所以選用 ….…or create a new repository on the command line;但如果本地端的資料夾已經 git init過之後，…or push an existing repository from the command line</h3></li></ul><p><img src="https://i.imgur.com/BINSuXP.png" alt=""></p><h2 id="3-本地端-gt-照著GitHub上的建議複製過去終端機"><a href="#3-本地端-gt-照著GitHub上的建議複製過去終端機" class="headerlink" title="3.本地端&gt;照著GitHub上的建議複製過去終端機"></a>3.本地端&gt;照著GitHub上的建議複製過去終端機</h2><p><img src="https://i.imgur.com/H1N0l14.png" alt=""></p><h2 id="4-GitHub重新整理，出現專案資料夾"><a href="#4-GitHub重新整理，出現專案資料夾" class="headerlink" title="4.GitHub重新整理，出現專案資料夾"></a>4.GitHub重新整理，出現專案資料夾</h2><p><img src="https://i.imgur.com/4mZXgOJ.png" alt=""></p><h2 id="5-建立分支，來存放之後上傳的網頁"><a href="#5-建立分支，來存放之後上傳的網頁" class="headerlink" title="5.建立分支，來存放之後上傳的網頁"></a>5.建立分支，來存放之後上傳的網頁</h2><p><code>git checkout -b gh-pages</code>：創建新分支(gh-pages)並同時移到此新分支上</p><p><code>git branch gh-pages</code>:創建新分支(gh-pages)<br><code>git checkout gh-pages</code>:移到(gh-pages)分支上</p><p><img src="https://i.imgur.com/85Z04Hv.png" alt=""></p><h2 id="6-測試檔案上傳"><a href="#6-測試檔案上傳" class="headerlink" title="6.測試檔案上傳"></a>6.測試檔案上傳</h2><p>開啟Visual Studio Code內建的終端機(Terminal)快速鍵為Ctrl + ~（鍵盤左上角的那顆，在 Esc 下面），或 功能選單-&gt; View -&gt; Integrated Terminal 。</p><ul><li>終端機 <code>git push</code></li><li>第一次push失敗，意指遠端還沒有建立這個branch，所以就依照它的指令操作</li></ul><p><img src="https://i.imgur.com/rmwYC1e.png" alt=""></p><ul><li>重新整理之後～就會看到本地端的檔案傳上去了</li></ul><p><img src="https://i.imgur.com/yOEEHtV.png" alt=""></p><ul><li>並且可以查看網址<br><a href="https://eva813.github.io/my-projects/test-index.html" target="_blank" rel="noopener">https://eva813.github.io/my-projects/test-index.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本介紹-1</title>
      <link href="/2020/11/21/gitIntro-1/"/>
      <url>/2020/11/21/gitIntro-1/</url>
      
        <content type="html"><![CDATA[<p>Ｇit是用來，讓大家對於自己的程式碼做版本控制「Version Control System」</p><blockquote><blockquote><p>也如同：save load 大法<br> S是Save 存檔，L是Load 讀取;如：每天的工作可能都是每天新增、編輯、修改許多檔案，而git會紀錄每次檔案的修改資料</p></blockquote></blockquote><p>另外也是分散式控制系統「Distributed Version Control Systems」</p><blockquote><blockquote><p>可以和不同群組的人使用不同的方式，在同一個專案內協同合作。可讓專案主導者更精準的控制大專案內的小專案。</p></blockquote></blockquote><h2 id="安裝Git圖形介面工具"><a href="#安裝Git圖形介面工具" class="headerlink" title="安裝Git圖形介面工具"></a>安裝Git圖形介面工具</h2><p>透過圖形介面工具（GUI, Graphic User Interface）可以幫助使用者熟悉Git的操作指令。常見的有SourceTree 以及 GitHub Desktop 這兩款。<br>這裏以SourceTree作為範例：<br><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">下載點</a><br><a href="https://ithelp.ithome.com.tw/articles/10206852" target="_blank" rel="noopener">Sourcetree的下載與操作</a><br>  <strong><em>載完後的介面</em></strong><br><img src="https://i.imgur.com/04TzJ0s.png" alt=""></p><h2 id="創建第一個-Git-Repository"><a href="#創建第一個-Git-Repository" class="headerlink" title="創建第一個 Git Repository"></a>創建第一個 Git Repository</h2><p> <strong><em>先呈現終端機的指令</em></strong></p><ul><li>先確認狀態 <code>git status</code>(表示還沒有git)</li><li>創建資料夾 <code>mkdir hello_git</code></li><li>進入資料夾(hello_git)，並初始化 <code>git init</code></li><li>初始完成囉，出現 master標籤</li><li>再次確認狀態</li></ul><p><img src="https://i.imgur.com/kneVHZx.png" alt=""><br><img src="https://i.imgur.com/URJ3bOu.png" alt=""></p><h3 id="可以詳細看一下資料夾內部"><a href="#可以詳細看一下資料夾內部" class="headerlink" title="可以詳細看一下資料夾內部"></a><strong><em>可以詳細看一下資料夾內部</em></strong></h3><p><img src="https://i.imgur.com/hT0CUMo.png" alt=""></p><ul><li>透過<code>ls -a</code>可以看到git的隱藏檔</li></ul><h3 id="創建完成的同時，SourceTree也會有圖形介面可以看喔"><a href="#創建完成的同時，SourceTree也會有圖形介面可以看喔" class="headerlink" title="創建完成的同時，SourceTree也會有圖形介面可以看喔"></a>創建完成的同時，SourceTree也會有圖形介面可以看喔</h3><p><img src="https://i.imgur.com/59As6HT.png" alt=""></p><p>以上就是創建Git Repository 的最初步驟</p><hr><h2 id="熟悉-Git-基本指令"><a href="#熟悉-Git-基本指令" class="headerlink" title="熟悉 Git 基本指令"></a>熟悉 Git 基本指令</h2><h4 id="創建hello-git資料夾後，在裡面建立hello-txt"><a href="#創建hello-git資料夾後，在裡面建立hello-txt" class="headerlink" title="創建hello_git資料夾後，在裡面建立hello.txt"></a>創建hello_git資料夾後，在裡面建立hello.txt</h4><p><img src="https://i.imgur.com/SD39uTZ.png" alt=""></p><h4 id="進入vs-code，輸入hello-world"><a href="#進入vs-code，輸入hello-world" class="headerlink" title="進入vs code，輸入hello world"></a>進入vs code，輸入hello world</h4><p>  <strong><em>注意檔案變綠色</em></strong><br><img src="https://i.imgur.com/bdKBKX3.png" alt=""><br> <strong><em>查看git status,會是紅色</em></strong><br> <img src="https://i.imgur.com/vjDWNJh.png" alt=""></p><h3 id="接下來-git-add"><a href="#接下來-git-add" class="headerlink" title="接下來 git add"></a>接下來 <code>git add</code></h3><p> <img src="https://i.imgur.com/PSUh7Zc.png" alt=""></p><ul><li>使用git add ＋檔案，並看狀態後會發現變成綠色</li><li>或git add. 加入資料夾內所有的檔案<br><img src="https://i.imgur.com/dtVWtYp.png" alt=""></li></ul><h3 id="接下來-git-commit"><a href="#接下來-git-commit" class="headerlink" title="接下來 git commit"></a>接下來 <code>git commit</code></h3><p>git commit -m “add new file hello.txt”</p><ul><li>要注意 -m，以免進入vim</li><li>“ “引號內輸入這次要儲存的動作說明，如新增檔案、修改資料等說明</li><li><strong>有一個檔案改變,一行的資料修正*</strong><br><img src="https://i.imgur.com/8O82KJE.png" alt=""></li></ul><p>查看狀態<br> nothing to commit, working tree clean，表示已把檔案加入完成<br><img src="https://i.imgur.com/V8fUljG.png" alt=""></p><h3 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a>Sourcetree</h3><p> <strong><em>可以看到歷史紀錄</em></strong><br><img src="https://i.imgur.com/OUFvghP.png" alt=""></p><hr><h2 id="再來練習一次"><a href="#再來練習一次" class="headerlink" title="再來練習一次"></a>再來練習一次</h2><h4 id="在vs-code裡，輸入hello-linda"><a href="#在vs-code裡，輸入hello-linda" class="headerlink" title="在vs code裡，輸入hello,linda"></a>在vs code裡，輸入hello,linda</h4><p><img src="https://i.imgur.com/IA3JOLy.png" alt=""><br><img src="https://i.imgur.com/Emcv1oF.png" alt=""><br><img src="https://i.imgur.com/gH1cFEV.png" alt=""></p><p><strong><em>同樣sourcetree 也會有紀錄</em></strong><br><img src="https://i.imgur.com/57n8uaP.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基本介紹-1</title>
      <link href="/2020/11/20/html-1/"/>
      <url>/2020/11/20/html-1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/JDE6QZb.png" alt=""></p><ul><li>標記式語言，也就是透過標籤來建立</li><li>目前的規範版本為 HTML 5<h1 id="建立第一個網頁"><a href="#建立第一個網頁" class="headerlink" title="建立第一個網頁"></a>建立第一個網頁</h1></li></ul><p><code>html:5</code>,<code>!</code> 建立HTML雛形</p><ul><li><p>輸入標題</p><p><img src="https://i.imgur.com/rNdXzJ4.png" alt=""></p></li><li><p>將建立的html放到瀏覽器</p></li></ul><p><img src="https://i.imgur.com/rrnJ0Kf.png" alt=""></p><h1 id="HTML的文件架構"><a href="#HTML的文件架構" class="headerlink" title="HTML的文件架構"></a>HTML的文件架構</h1><!DOCTYPE html><blockquote><p>Luka 程式柴教學<br><img src="https://i.imgur.com/eQmD5Qk.png" alt=""></p></blockquote><ul><li>字元集(charset)：UTF-8,Big5<blockquote><p><img src="https://i.imgur.com/BP4V514.png" alt=""></p></blockquote></li></ul><blockquote><p><img src="https://i.imgur.com/W9rljFi.png" alt=""></p></blockquote><h1 id="HTML的元素"><a href="#HTML的元素" class="headerlink" title="HTML的元素"></a>HTML的元素</h1><h2 id="1-h1"><a href="#1-h1" class="headerlink" title="1.h1"></a>1.<code>h1</code></h2><p><img src="https://i.imgur.com/0fymVOx.png" alt=""></p><p><code>&lt;head&gt; &lt;/head&gt;</code>網頁中的頭，它的任務是要容納文件的 metadata</p><p><code>&lt;h1&gt;Heading 1 &lt;/h1&gt;</code>網頁中的標題 headings</p><h2 id="2-lt-p-gt"><a href="#2-lt-p-gt" class="headerlink" title="2.&lt;p&gt;"></a>2.<code>&lt;p&gt;</code></h2><p>一個段落是一個block元素，段落與段落間有距離<br>例如：<br>html有block(<code>&lt;p&gt;</code>,<code>&lt;div&gt;</code>),inline(<code>&lt;span&gt;</code>)元素<br><code>&lt;br&gt;</code>換行，可與文內進行段落的區分</p><p>如圖：<br><img src="https://i.imgur.com/QNi6OuM.png" alt=""></p><h2 id="3-圖片-lt-img-gt"><a href="#3-圖片-lt-img-gt" class="headerlink" title="3.圖片 &lt;img&gt;"></a>3.圖片 <code>&lt;img&gt;</code></h2><p><code>&lt;img src=&quot;pic_trulli.jpg&quot; alt=&quot;Italian Trulli&quot;&gt;</code></p><p><code>src=</code>圖片的網址<br><code>alt</code> 圖片代表的意思，特別對SEO優化有幫助，且在圖片無法顯示時，能呈  現基本資訊</p><p><img src="https://i.imgur.com/NAkLq9P.png" alt=""></p><h2 id="4-連結標籤-lt-a-gt"><a href="#4-連結標籤-lt-a-gt" class="headerlink" title="4.連結標籤 &lt;a&gt;"></a>4.連結標籤 <code>&lt;a&gt;</code></h2><p><code>&lt;a href=&quot;https://www.w3schools.com/&quot;&gt;Visit W3Schools.com!&lt;/a&gt;</code></p><ul><li><code>href=</code> 連結要去的網址位置</li><li><code>&lt;a href=&quot;/html/default.asp&quot;&gt;HTML tutorial&lt;/a&gt;</code><br>-&gt; 也可以連結同一個檔案、目錄下的資料</li><li><code>&lt;a href=&quot;https://www.w3schools.com/&quot; target=&quot;_blank&quot;&gt;Visit W3Schools!&lt;/a&gt;</code></li><li><code>Target=&quot;_blank&quot;</code>開啟一個新的視窗，不會蓋掉前面已開啟的舊視窗，但要注意的是當開了新的視窗後，可能會影響原本視窗的運作<br>建議你要加上 rel=”noreferrer noopener”</li></ul><p><img src="https://i.imgur.com/1sTR3Fv.png" alt=""></p><h2 id="5-表格-lt-table-gt"><a href="#5-表格-lt-table-gt" class="headerlink" title="5.表格 &lt;table&gt;"></a>5.表格 <code>&lt;table&gt;</code></h2><p>使用的標籤有<code>table</code>,<code>th</code>,<code>td</code>，要使用時再去複製<a href="https://www.w3schools.com/html/html_tables.asp" target="_blank" rel="noopener">語法</a>修改比較快～</p><p>簡易示意圖，清楚標籤所對應的表格位置：<br><img src="https://i.imgur.com/o8WwMSE.png" alt=""></p><h2 id="6-lt-form-gt-如：登入-會員註冊"><a href="#6-lt-form-gt-如：登入-會員註冊" class="headerlink" title="6.&lt;form&gt; 如：登入,會員註冊"></a>6.<code>&lt;form&gt;</code> 如：登入,會員註冊</h2><p>1) <code>action</code> 定義數據的發送位置<br>範例：沒有action 屬性，數據將發送到和表單所在的同一頁面<code>&lt;form&gt;&lt;/form&gt;</code><br>範例：數據將發送到指定的URL位置(也就是web server位置)<code>&lt;form action=&quot;http://foo.com&quot;&gt;&lt;/form&gt;</code></p><p>2) <code>&lt;input&gt; &lt;/input&gt;</code>表單輸入的設定<br>其中：<br><code>name</code> 屬性用來指定送出去的該筆資料要用什麼名稱<br><code>type</code> 建立表單元件，”text”文字,”password”密碼輸入,”checkbox”核取方塊,”submit” 表單的送出按鈕<br><code>placeholder</code>  輸入的提示訊息<br><code>value</code> 指定初始值 (default value)</p><p><img src="https://i.imgur.com/Zr7IFsA.png" alt=""></p><hr><p>參考資料<br><a href="https://www.w3schools.com/html/default.asp" target="_blank" rel="noopener">W3SCHOOL</a><br><a href="https://pjchender.blogspot.com/2020/05/relnoreferrer-targetblank.html" target="_blank" rel="noopener">Target=”_blank”的安全性風險</a><br><a href="https://www.itread01.com/iieq.html" target="_blank" rel="noopener">你不曾察覺的隱患：危險的 target=”_blank” 與 “opener”</a><br><a href="https://ithelp.ithome.com.tw/articles/10206661" target="_blank" rel="noopener"> JS - <code>&lt;form&gt;</code> 表單</a><br><a href="https://www.fooish.com/html/input-tag.html" target="_blank" rel="noopener">HTML 表單元件 - <code>&lt;input&gt;</code> 標籤 (tag)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基本介紹-2</title>
      <link href="/2020/11/18/html-2/"/>
      <url>/2020/11/18/html-2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/JDE6QZb.png" alt=""></p><p> 此篇文章主要再介紹HTML的元素、屬性，以及簡介在前端開發中常使用的css和javascript是如何和HTML搭配使用。</p><h2 id="HTML-元素-Element"><a href="#HTML-元素-Element" class="headerlink" title="HTML 元素 (Element)"></a>HTML 元素 (Element)</h2><pre><code class="html"> &lt;p&gt;This is paragraph.&lt;/p&gt;</code></pre><ul><li>完整的標籤會有開始、結尾：<code>&lt;p&gt;</code>,<code>&lt;/p&gt;</code>:分別為opening tag以及closing tag</li><li>標籤中間包圍的This is paragraph.是內容</li><li>起始標籤 + 內容 + 結束標籤:表示一個 HTML元素。</li></ul><h2 id="HTML-標籤屬性-Attribute"><a href="#HTML-標籤屬性-Attribute" class="headerlink" title="HTML 標籤屬性 (Attribute)"></a>HTML 標籤屬性 (Attribute)</h2><ul><li><code>&lt;p class=&quot;myP&quot;&gt;This is paragraph.&lt;/p&gt;</code></li><li>有些Attribute是HTML內建，如：<code>&lt;a href=&quot;./first.html&quot;&gt;</code></li><li>有些是為了用於css或是javascript的部分所加上去。如：class與id的使用。<ul><li>補充： <code>class</code>與<code>id</code><br>是在於 ID 選擇器在一個 HTML 文件中只能被使用一次，而 Class 選擇器在一個 HTML 文件中可以被使用多次;ID 選擇器可以被 Javascript 中的 GetElementByID 函數所運用，而 Class 選擇器無法被 Javascript 運用到。</li></ul></li></ul><h2 id="css-javascript與HTML-搭配"><a href="#css-javascript與HTML-搭配" class="headerlink" title="css, javascript與HTML 搭配"></a>css, javascript與HTML 搭配</h2><h3 id="1-css如何跟-HTML-搭配使用"><a href="#1-css如何跟-HTML-搭配使用" class="headerlink" title="1.css如何跟 HTML 搭配使用"></a>1.css如何跟 HTML 搭配使用</h3><h4 id="1-inline-CSS"><a href="#1-inline-CSS" class="headerlink" title="(1).inline CSS"></a>(1).inline CSS</h4><ul><li>在html中加入style屬性，來撰寫CSS<pre><code class="html">&lt;h1 style=&quot;color:blue;&quot;&gt;A Blue Heading&lt;/h1&gt;&lt;p style=&quot;color:red;&quot;&gt;A red paragraph.&lt;/p&gt;</code></pre>ps:此方式不建議使用，會造成維護的困難</li></ul><h4 id="2-internal-CSS"><a href="#2-internal-CSS" class="headerlink" title="(2).internal CSS"></a>(2).internal CSS</h4><p>在html檔案中，建立<code>&lt;style&gt; &lt;/style&gt;</code>區塊</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;body {background-color: powderblue;}h1   {color: blue;}p    {color: red;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is a heading&lt;/h1&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="3-external-CSS"><a href="#3-external-CSS" class="headerlink" title="(3).external CSS"></a>(3).external CSS</h4><h5 id="用link的方式，連結到另一個css檔案"><a href="#用link的方式，連結到另一個css檔案" class="headerlink" title="用link的方式，連結到另一個css檔案"></a>用link的方式，連結到另一個css檔案</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;  /*This example links to a  style sheet located in the same folder as the current page*/&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is a heading&lt;/h1&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong><code>&lt;link rel=&quot;value&quot;&gt;</code>,”stylesheet”文檔的外部樣式表</strong></p><h3 id="2-HTML-中使用-javascript"><a href="#2-HTML-中使用-javascript" class="headerlink" title="2.HTML 中使用 javascript"></a>2.HTML 中使用 javascript</h3><h4 id="在html的body尾端"><a href="#在html的body尾端" class="headerlink" title="在html的body尾端"></a>在html的body尾端</h4><pre><code class="htmlembedded=">&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;;&lt;/script&gt;</code></pre><h4 id="創立-js檔案，並引入"><a href="#創立-js檔案，並引入" class="headerlink" title="創立.js檔案，並引入"></a>創立.js檔案，並引入</h4><ul><li><strong>放在<code>&lt;head&gt;</code> 前面</strong></li></ul><pre><code class="javascript">//HTML4 與 （x）HTML&lt;script type=&quot;javascript.js&quot;&gt; &lt;/script&gt;//HTML5&lt;script src=&quot;javascript.js&quot;&gt; &lt;/script&gt;</code></pre><hr><p>參考資料:<br><a href="https://www.w3schools.com/html/html_css.asp" target="_blank" rel="noopener">W3school</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link" target="_blank" rel="noopener">MDN</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新手入門必學Command Line</title>
      <link href="/2020/11/17/Line/"/>
      <url>/2020/11/17/Line/</url>
      
        <content type="html"><![CDATA[<p>學習Command Line可以幫助我們呼叫檔案、刪除檔案更加快速，此外也可以很快的查看資料夾內的所有檔案，不用透過電腦圖示一個個點選。透過指令的使用，可以更有效率，操作也可以更加廣泛<br>當然，除了上述的便利性之外，它還能夠有許多操作，下面會介紹一些基本指令。</p><h2 id="Command-Line-常用指令介紹"><a href="#Command-Line-常用指令介紹" class="headerlink" title="Command Line 常用指令介紹"></a>Command Line 常用指令介紹</h2><p>tip: 搜尋：linux cheat sheet，就可以查詢到指令的使用方法。(如：cd:change director (移動到…資料夾))</p><ol><li><p><code>pwd</code> 現在位置<br> pwd –help 會提供詳細使用資訊<br> <img src="https://i.imgur.com/VQgzyhw.png" alt=""></p></li><li><p><code>ls</code> 列出資料夾內的東西<br> <code>ls -l</code> 列出詳細資料<br> <code>ls -s</code><br> <code>ll</code> 列出檔案權限的使用者<br> <img src="https://i.imgur.com/39J68tH.png" alt=""></p></li></ol><ol start="4"><li><p><code>touch</code> 創建檔案<br> <img src="https://i.imgur.com/1WbeaVG.png" alt=""></p></li><li><p><code>cd</code> 移動到..地方</p></li><li><p><code>cd..</code> 回到上個資料夾</p></li><li><p><code>q</code> 離開</p></li><li><p><code>ctrl +c</code> 跳出進行的程序</p></li><li><p><code>mkdir</code>  hello (make dir) 建立目錄(資料夾) 名稱為hello<br> <strong><em>創建好的資料夾會放在..</em></strong><br> <img src="https://i.imgur.com/ZUFmHQs.png" alt=""></p><p><img src="https://i.imgur.com/Jqscc2A.png" alt=""></p><h3 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h3></li><li><p><code>rm</code> index.html (指將整個檔案砍掉 不指是到垃圾桶)</p></li><li><p><code>rmdir</code> 刪除目錄</p></li><li><p><code>rm -rf</code>  強制刪除<br> <img src="https://i.imgur.com/HJeovVl.png" alt=""></p></li></ol><h3 id="複製、命名與移動"><a href="#複製、命名與移動" class="headerlink" title="複製、命名與移動"></a>複製、命名與移動</h3><ol><li><code>cp</code> hello.txt(複製檔案)  </li><li><code>mv</code> hello.txt I_am_dir/  （將hello.txt 移到I_am_dir）<br>也可以用來改名 mv hello_word.txt hello_luka.txt (將hello_word.txt改名為hello_luka.txt)<br><img src="https://i.imgur.com/Wx6oGkI.png" alt=""></li></ol><h3 id="系統管理相關指令"><a href="#系統管理相關指令" class="headerlink" title="系統管理相關指令"></a>系統管理相關指令</h3><ol><li>sudo:使用最高權限（superuser）執行指令</li><li>kill：根據 Process ID 指定要終止程式</li><li><code>open .</code> 可開啟檔案總管</li><li>code.  開啟 vs code<h3 id="其他補充"><a href="#其他補充" class="headerlink" title="其他補充"></a>其他補充</h3></li><li><code>cat</code> 列出檔案內的內容</li><li><code>who</code> 顯示電腦user的名稱</li><li><code>clear</code> 清除終端機畫面的指令</li></ol><h2 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h2><p> 安裝 <code>npm install -g tldr</code><br> 安裝之後，輸入 <code>tldr  ls</code> 就會說明指令的使用</p><p> 參考資料：<br> <a href="https://blog.techbridge.cc/2017/12/23/linux-commnd-line-tutorial/" target="_blank" rel="noopener">https://blog.techbridge.cc/2017/12/23/linux-commnd-line-tutorial/</a><br> <a href="https://medium.com/starbugs/linux-%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E5%BF%85%E8%A3%9D-tldr-%E5%91%BD%E4%BB%A4%E5%88%97%E7%A5%9E%E5%85%B5-9fbba0d4f028" target="_blank" rel="noopener">https://medium.com/starbugs/linux-%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E5%BF%85%E8%A3%9D-tldr-%E5%91%BD%E4%BB%A4%E5%88%97%E7%A5%9E%E5%85%B5-9fbba0d4f028</a><br><a href="https://yakimhsu.com/project/project_w1_CommandLine.html" target="_blank" rel="noopener">Command Line - Terminal、基本指令介紹 | Yakim shu</a><br><a href="https://www.minwt.com/mac/14653.html" target="_blank" rel="noopener">Mac OS X Terminal 終端機常用語法教學 | 梅問題．教學網</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Command Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>將win7 更新到win10</title>
      <link href="/2020/04/20/%E5%B0%87w%E5%B0%87win7-%E6%9B%B4%E6%96%B0%E5%88%B0win10/"/>
      <url>/2020/04/20/%E5%B0%87w%E5%B0%87win7-%E6%9B%B4%E6%96%B0%E5%88%B0win10/</url>
      
        <content type="html"><![CDATA[<p>由於之前電腦是window7,但實在有好多更新無法跑 </p><p>所以！ </p><p>我決定自己嘗試將電腦從window7更新到window10 </p><p>第一步：勾選查看副檔名、顯示隱藏檔案 </p><p>控制台&gt;資料夾選項&gt;將隱藏取消  </p><p>第二步：下載window10 系統安裝光碟之iso映像檔  </p><p>1.至微軟的官方網站下載 windows 10 系統安裝光碟之ISO映像檔&gt;至下載到電腦的exe檔&gt; 點選安裝&gt; 選擇 建立另一部電腦的安裝媒體  </p><p>2.將载好的iso存入usb隨身碟，開機安裝，或燒入光碟  </p><p>USB 開機製作軟體， 教你該如何使用 Rufus 魯弗斯 製作［ Windows 10 作業系統 ］安裝 USB 隨身碟  </p><p>3.到安裝碟內的sources資料夾，將gatherossate.exe複製到win7桌面，點擊，出現Genuine Ticket.xml 文件，此文件需好好保存，未來重灌時需要用到  </p><p>4.成功放入 USB後，就插著電腦上 用BIOS 開啟方式 ACER(關機&gt;開機時 按F2+電源紐)&gt;BOOST&gt;將你的隨身碟 案F5往上移到第一順位，在按F10 儲存/啟動  </p><p>接著就會開始安裝，選擇完中文…等資料&gt;選擇 自訂&gt;下一步&gt; 接著就讓它安裝  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/20/hello-world/"/>
      <url>/2020/04/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
