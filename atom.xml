<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Let&#39;s Code</title>
  
  
  <link href="https://github.com/Eva813/Eva813.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/Eva813/Eva813.github.io.git/"/>
  <updated>2021-11-14T02:28:29.156Z</updated>
  <id>https://github.com/Eva813/Eva813.github.io.git/</id>
  
  <author>
    <name>Eva Chan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>講講幾個 Nuxt.js 重要觀念</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/11/10/Nuxt-2/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/11/10/Nuxt-2/</id>
    <published>2021-11-10T01:58:39.000Z</published>
    <updated>2021-11-14T02:28:29.156Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/4LE0BUW.png" alt=""></p><p>在使用 Nuxt.js 開啟專案後，會自動生成不少文件檔案，今天就來介紹幾樣基礎設定以及檔案的運用吧！</p><h2 id="了解-Nuxt-路徑引用規則"><a href="#了解-Nuxt-路徑引用規則" class="headerlink" title="了解 Nuxt 路徑引用規則"></a>了解 Nuxt 路徑引用規則</h2><ul><li><code>~</code>以及<code>@</code> ：根目錄 <ul><li>(注意：nuxt.conf.js、非 nuxt 結構的 js 檔 除外)</li></ul></li><li>波浪或小老鼠 :從根目錄 搜尋assets 資料夾<br><img src="https://i.imgur.com/CNUlrGz.png" alt=""><br>以下也一樣<br><code>import test from &quot;@/assets/js/test.js&quot;</code></li></ul><ol start="2"><li><code>./</code>：自己的目錄</li></ol><ul><li>nuxt.conf.js、以及非 nuxt 結構要這樣撰寫<br><img src="https://i.imgur.com/2qLJ5te.png" alt=""></li></ul><ol start="3"><li>放在 static 資料夾裡的引用方式(直接斜線)<code>&lt;img src=&quot;/demo.png&quot; alt=&quot;&quot;&gt;</code></li><li>補充：<br><a href="https://docs.google.com/presentation/d/15q4Vsl3I6Bf5F1f2LdNj_OvF5fcrl7aPv5aA1E39Kjw/edit#slide=id.g813fdce503_0_0" target="_blank" rel="noopener">2.4 nuxt 圖片處理 - webpack 相關設定</a></li></ol><ul><li><p>在asset 加入 img 資料夾(將圖片放在這裡)<br><code>&lt;img src=&quot;@/assets/img/demo.png&quot; alt=&quot;&quot;&gt;</code><br><img src="https://i.imgur.com/iSsni0c.png" alt=""></p></li><li><p>放在css作背景圖<br>  *<code>background: url(~assets/img/demo.png);  //nuxt css 引入圖片不能加斜線</code></p><ul><li>也不能將波浪改為@<br>:::info<br>原本波浪斜線方式:<br><code>background: url(~/assets/img/demo.png);</code><br>:::<br><img src="https://i.imgur.com/ekDF3vK.png" alt=""></li></ul></li></ul><h2 id="nuxt-config-js-設定"><a href="#nuxt-config-js-設定" class="headerlink" title="nuxt.config.js 設定"></a>nuxt.config.js 設定</h2><ul><li>vue cli3 設定vue 專案是透過是 main.js/ vue.config.js 這兩隻檔案。<ul><li>main.js 為程式的進入點</li></ul></li><li>nuxt 則統一用 nuxt.conf.js 做為設定。<ul><li>要編輯這份文件達到專案需求</li><li>如 wedpack 是放在 build</li></ul></li></ul><p><img src="https://i.imgur.com/aLpoUcR.png" alt=""></p><ul><li>此外在此檔案可以做標題、引入 CDN 等基礎設置<ul><li>head,meta 可以做表頭的設定</li><li>script 可以引入 JS 的檔案或 CDN 資源</li></ul></li><li>css 全域設定，也同樣放在這裡<ul><li><a href="https://nuxtjs.org/docs/configuration-glossary/configuration-css/" target="_blank" rel="noopener">The css property</a><pre><code class="javascript">css: [&#39;~/assets/scss/demo.scss&#39;],</code></pre></li></ul></li></ul><pre><code>```javascriptexport default {  // Global page headers: https://go.nuxtjs.dev/config-head  head: {    title: &#39;myNuxt&#39;,    htmlAttrs: {      lang: &#39;en&#39;    },    meta: [      { charset: &#39;utf-8&#39; },      { name: &#39;viewport&#39;, content: &#39;width=device-width, initial-scale=1&#39; },      { hid: &#39;description&#39;, name: &#39;description&#39;, content: &#39;&#39; },      { name: &#39;format-detection&#39;, content: &#39;網站前後端、網頁設計、程式語言網站&#39; }    ],    link: [      { rel: &#39;icon&#39;, type: &#39;image/x-icon&#39;, href: &#39;/favicon.ico&#39; }    ],    script:    [      { src: &quot;/jquery.min.js&quot;},      { src: &quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/js/all.js&quot; }    ]  },</code></pre><p><img src="https://i.imgur.com/krqrhq8.png" alt=""></p><h4 id="引用-static-靜態資源的檔案"><a href="#引用-static-靜態資源的檔案" class="headerlink" title="引用 static 靜態資源的檔案"></a>引用 static 靜態資源的檔案</h4><ul><li>static資料夾:靜態資源資料夾<ul><li>其中要連接該檔案路徑要用斜線</li><li>這裡面的檔案不會被打包和優化<br><img src="https://i.imgur.com/46ebZ9F.png" alt=""></li></ul></li></ul><h2 id="套件安裝"><a href="#套件安裝" class="headerlink" title="套件安裝!"></a>套件安裝!</h2><ol><li>最簡單方式是使用打包後的 CDN 或 js 檔案 <ul><li>在head 的 script 放入 CDN</li></ul></li><li>使用 <a href="https://nuxtjs.org/docs/directory-structure/plugins/" target="_blank" rel="noopener">nuxt plugins</a> 自包 js 套件 或 vue 套件 → 較麻煩</li><li>使用 <a href="https://zh.nuxtjs.org/guide/modules/" target="_blank" rel="noopener">nuxt modules</a> 來引入套件<ul><li>套件較少</li></ul></li></ol><ul><li>nuxt module 主要是將 plugin 在封裝一層出來。(就是 nuxt 專有的套件)，如果對安裝 plugins 沒把握，就找有 nuxt modules 的套件來安裝。</li></ul><h3 id="練習1包裝一般的-vue-套件"><a href="#練習1包裝一般的-vue-套件" class="headerlink" title="練習1包裝一般的 vue 套件"></a>練習1包裝一般的 vue 套件</h3><p> <a href="https://www.npmjs.com/package/vuejs-datepicker" target="_blank" rel="noopener">vuejs-datepicker</a></p><p>1、npm install vuejs-datepicker</p><ul><li>若直接依照官網來安裝，並在檔案引入會發生錯誤</li><li>所以 install 完之後要再執行下面動作<br>2、plugins 新增一個檔案：datepicker.js → 撰寫套件</li><li>在 plugins 資料夾，新增檔案<pre><code class="javascript">import Vue from &#39;vue&#39;import Datepicker from &#39;vuejs-datepicker&#39;;</code></pre></li></ul><p>Vue.component(‘Datepicker’, Datepicker)</p><pre><code>![](https://i.imgur.com/l0kYSwT.png)3、nuxt.config.js 安裝 plugin → 可以設定該套件只在 客戶端 運作* 可以將插件安裝在客戶端或是 server 端```javascript{ src: &#39;~/plugins/datepicker.js&#39;, mode: &#39;client&#39; },</code></pre><ul><li>要使用時，再放入頁面<br><img src="https://i.imgur.com/gNNLJ2O.png" alt=""><h3 id="練習2-安裝一般的-js-套件"><a href="#練習2-安裝一般的-js-套件" class="headerlink" title="練習2 安裝一般的 js 套件"></a>練習2 安裝一般的 js 套件</h3><a href="https://greensock.com/docs/v3/Installation" target="_blank" rel="noopener">GSAP</a></li></ul><ol><li>npm install gsap</li><li>plugins 新增一個檔案：gsap.js → 撰寫套件<pre><code class="javascript">import Vue from &#39;vue&#39;import gsap from &quot;gsap&quot;;</code></pre></li></ol><p>Vue.prototype.$gsap = gsap</p><pre><code>![](https://i.imgur.com/t3G7UGN.png)3. nuxt.config.js 安裝 plugin```javascript plugins: [    { src: &#39;~/plugins/gsap.js&#39;, mode: &#39;client&#39; },  ],</code></pre><ul><li><code>create()</code> 會在前端執行\後端執行</li></ul><h3 id="練習3-nuxt-安裝"><a href="#練習3-nuxt-安裝" class="headerlink" title="練習3 nuxt 安裝"></a>練習3 nuxt 安裝</h3><p><a href="https://axios.nuxtjs.org/" target="_blank" rel="noopener">axios modules</a></p><ol><li>npm install @nuxtjs/axios</li><li>plugins 新增一個檔案：axios.js </li></ol><ul><li><p>如同前面的練習，到  nuxt.config.js</p><pre><code class="javascript">modules: [  &#39;@nuxtjs/axios&#39;,],</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4LE0BUW.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在使用 Nuxt.js 開啟專案後，會自動生成不少文件檔案，今天就來介紹幾樣基礎設定以及檔案的運用吧！&lt;/p&gt;
&lt;h2 id=&quot;了解-Nuxt-路徑引用規則&quot;</summary>
      
    
    
    
    
    <category term="Nuxt" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Nuxt/"/>
    
  </entry>
  
  <entry>
    <title>為何要學習 Nuxt.js ？</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/11/10/Nuxt-1/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/11/10/Nuxt-1/</id>
    <published>2021-11-10T01:30:01.000Z</published>
    <updated>2021-11-14T01:59:20.651Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/4LE0BUW.png" alt=""></p><p>製作網站，都會希望自己的網站可以被搜尋引擎找得到，並且可以在使用者輸入關鍵字後，可以在頭幾個項目中就能關注到自己的網站！<br>而在使用 Vue.js 框架，因為是使用 SPA 架構無法做到 SEO (search engine optimization) 的效果，別人無法輕易的找到我們所製作的網站。<br>今天要介紹的 Nuxt.js 是一個基於 Vue.js、用來處理伺服器渲染（Server-side rendering(SSR)）的框架。透過 SSR 我們可以做到更好的 SEO 效果。</p><p>本文首要任務： 認識 SPA 與 SSR 的差異</p><h2 id="SPA-Single-Page-Application-架構"><a href="#SPA-Single-Page-Application-架構" class="headerlink" title="SPA (Single Page Application) 架構"></a>SPA (Single Page Application) 架構</h2><ul><li>讓一些後端的工作，分擔到前端 (如： router 設定)</li><li>流程為：使用者開了瀏覽器 -&gt; 向後端server要資料，因為改為SPA 架構，所以提供的會是SPA 首頁（會載入JS\編譯好的CSS\一頁空殼的HTML網頁），此空殼經過 Vue 編譯產出 DOM 物件，讓瀏覽器印出。</li><li>讓回應速度更快，使用者在轉換頁面時得到更好的體驗。<ul><li>SPA（Single Page Application）意思是僅有一個頁面的應用程式，也就是說網頁不需跳轉頁面就可以達到基本的建立、讀取、修改、刪除資料功能。</li></ul></li><li>後端負責調整API 邏輯\架構<h3 id="SPA-缺點"><a href="#SPA-缺點" class="headerlink" title="SPA 缺點"></a>SPA 缺點</h3></li><li>SEO差(SPA 一開始吐的是空殼)，GOOGLE 爬不到頁面資訊</li><li>SMO差，FB爬不到頁面資訊</li><li>首屏速度慢，一開始畫面會空白或閃爍<ul><li>發出請求資訊到實際上呈現完整頁面時間</li></ul></li></ul><h2 id="SSR-Server-Side-Rendering"><a href="#SSR-Server-Side-Rendering" class="headerlink" title="SSR (Server Side Rendering)"></a>SSR (Server Side Rendering)</h2><p>流程為：使用者開了瀏覽器 -&gt; 向後端server要資料，因為改為SSR，所以會提供一整個頁面(不會是畫面空白閃爍)</p><ul><li>希望頁面可以將網頁整個東西呈現，並讓搜尋引擎查得到</li><li>處理 SEO(針對搜尋引擎)</li></ul><ul><li>title</li><li>meta tag<ul><li>全域 <code>&lt;head&gt;</code> 設定</li><li>單頁 <code>&lt;head&gt;</code> 設定 </li></ul></li><li>description</li></ul><ul><li>處理 SMO (針對 Social media)<ul><li>twitter\youtube\Line…<h3 id="有更多的彈性設定"><a href="#有更多的彈性設定" class="headerlink" title="有更多的彈性設定"></a>有更多的彈性設定</h3><h4 id="Nuxt-有三種模式，可以幫你解決問題"><a href="#Nuxt-有三種模式，可以幫你解決問題" class="headerlink" title="Nuxt 有三種模式，可以幫你解決問題"></a>Nuxt 有三種模式，可以幫你解決問題</h4></li></ul></li></ul><ol><li>Universal: SSR + CSR </li></ol><ul><li>全域設定 mode: ‘Universal’</li></ul><ol start="2"><li>SPA: 不跑SSR </li></ol><ul><li>全域設定 mode: ‘spa’ 或執行 nuxt-spa</li></ul><ol start="3"><li>Static Generated (Pre Rendering): 產生靜態頁面</li></ol><ul><li>nuxt run generate<ul><li>預先將頁面轉成靜態頁面</li><li>如要拉10樣商品，就先拉10個頁面</li></ul></li></ul><p>希望本篇的扼要介紹能夠讓讀者快速知道其中的差異。</p><p>參考資料：<br><a href="https://medium.com/@jackercleaninglab/ssr-nuxt-js-%E8%B6%85%E5%85%A5%E9%96%80-84a0823b45ed" target="_blank" rel="noopener">SSR — Nuxt.js 超入門</a><br><a href="https://www.youtube.com/watch?v=szrRDJBFmvQ" target="_blank" rel="noopener">Vue Nuxt 介紹與實作範例</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4LE0BUW.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;製作網站，都會希望自己的網站可以被搜尋引擎找得到，並且可以在使用者輸入關鍵字後，可以在頭幾個項目中就能關注到自己的網站！&lt;br&gt;而在使用 Vue.js 框架，</summary>
      
    
    
    
    
    <category term="Nuxt" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Nuxt/"/>
    
  </entry>
  
  <entry>
    <title>實作 Vuex - Todo List</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/10/20/vuex-todo/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/10/20/vuex-todo/</id>
    <published>2021-10-20T06:32:01.000Z</published>
    <updated>2021-10-20T09:00:00.871Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/RPoUnyd.png" alt=""></p><p>之前的實作練習都沒有機會使用到 Vuex，總是覺得它的資料存取、取得或是管理，對於剛接觸Vue 的我來說還是相對複雜，而且剛開始接觸 Vue 總要先練習下 props \ emit 資料傳遞才行啊～<br>既然已經會使用基礎的資料傳遞後，那就要近一步實作 Vuex 狀態管理</p><h2 id="實作功能說明"><a href="#實作功能說明" class="headerlink" title="實作功能說明"></a>實作功能說明</h2><ul><li>資料的取得來自 JSONPlaceholder<ul><li>從Vuex來實作資料的取得、刪除、更新</li></ul></li><li>針對目前取得的資料進行筆數的篩選</li><li>區分未完成事項、以及完成事項</li><li>可透過點擊方塊改變色塊</li><li>接下來～會製作 3個 component ，將元件放到 App.vue</li></ul><p><a href="https://eva813.github.io/Vuex-Todo/index.html" target="_blank" rel="noopener">成品</a></p><h4 id="開始前別忘了先建立-module"><a href="#開始前別忘了先建立-module" class="headerlink" title="開始前別忘了先建立 module"></a>開始前別忘了先建立 module</h4><h2 id="Vuex-檔案的處理"><a href="#Vuex-檔案的處理" class="headerlink" title="Vuex 檔案的處理"></a>Vuex 檔案的處理</h2><ul><li>這裡開專案直接有建立 vuex</li><li>進入 store &gt; index.js</li></ul><pre><code class="javascript">import { createStore } from &#39;vuex&#39;;import todos from &#39;./modules/todos&#39;;export default createStore({  state: {  },  mutations: {  },  actions: {  },  modules: {    todos,  }})</code></pre><h2 id="建立-modules-資料夾"><a href="#建立-modules-資料夾" class="headerlink" title="建立 modules 資料夾"></a>建立 modules 資料夾</h2><ul><li>store &gt; modules &gt; todo.js<ul><li>從這裡的資料取得並傳遞到 Todos.vue<pre><code class="javascript">import axios from &#39;axios&#39;;</code></pre></li></ul></li></ul><p>const state = {};<br>const getters = {};<br>const actions = {};<br>const mutations = {};</p><p>export default {<br>  state,<br>  getters,<br>  actions,<br>  mutations<br>}</p><pre><code>#### 接下來要嘗試來串取資料* 取得假資料[jsonplaceholder-todo](https://jsonplaceholder.typicode.com/todos)## 在 todo.js 來製作資料的串接* 首先state這裡要先建立空陣列，getters 則是建立資料取得的函式* 在action 來發出請求，取得回應，並傳給 mutations    * mutations 是改變資料的地方* 引入axios，使用 Asyc await 使用 get 來串接資料   * 將串到的資料 commit 到 mutations，改變原本todos資料內容```javascriptimport axios from &#39;axios&#39;;const state = {  todos: []};const getters = {  getTodos: (state) =&gt; state.todos,};const actions = {  async fetchTodos({ commit }) {    const res = await axios.get(&quot;https://jsonplaceholder.typicode.com/todos&quot;);    // console.log(res.data);    commit(&#39;setTodos&#39;, res.data);  }};const mutations = {  setTodos: (state, todos) =&gt; {    state.todos = todos;  }};export default {  state,  getters,  actions,  mutations}</code></pre><p><img src="https://i.imgur.com/4wmzRwy.png" alt=""></p><h2 id="建立-Todos-vue"><a href="#建立-Todos-vue" class="headerlink" title="建立 Todos.vue"></a>建立 Todos.vue</h2><ul><li><p>此元件主要是呈現所有的 Todo list</p><h3 id="取得-vuex-中的資料"><a href="#取得-vuex-中的資料" class="headerlink" title="取得 vuex 中的資料"></a>取得 vuex 中的資料</h3></li><li><p>引入 mapGetters, mapActions</p></li><li><p>將要從 getters 拿到的陣列，放到computed做資料的取得</p><ul><li>將該陣列<code>getTodos</code> 放到 v-for</li></ul></li><li><p>串接的 action 使用 mapActions，於 methods中執行，而此函式要在<code>created</code>階段運行</p></li><li><p>如此一來就可以，從 Vuex 中得到資料</p></li></ul><pre><code class="javascript">&lt;template&gt;  &lt;h3&gt;Todos&lt;/h3&gt;  &lt;div class=&quot;todos&quot;&gt;    &lt;div class=&quot;todo&quot; v-for=&quot;todo in getTodos&quot; :key=&quot;todo.id&quot;&gt;      {{ todo.title }}    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { mapGetters, mapActions } from &quot;vuex&quot;;export default {  name: &quot;Todos&quot;,  methods:{    ...mapActions([&quot;fetchTodos&quot;])  },  computed: mapGetters([&quot;getTodos&quot;]),  created() {    this.fetchTodos();  },};&lt;/script&gt;</code></pre><p><img src="https://i.imgur.com/4RKUMtJ.png" alt=""></p><p><img src="https://i.imgur.com/IiWla0A.png" alt=""></p><h2 id="製作加入新-todo-功能"><a href="#製作加入新-todo-功能" class="headerlink" title="製作加入新 todo 功能"></a>製作加入新 todo 功能</h2><ul><li>建立一個新的 component =&gt; AddTodo.vue</li><li>在 AddTodo 這個元件，製作 輸入框<pre><code class="javascript">&lt;template&gt;&lt;div&gt;  &lt;h3&gt;Add Todo&lt;/h3&gt;  &lt;div class=&quot;add&quot;&gt;    &lt;form&gt;    &lt;input type=&quot;text&quot; placeholder=&quot;Add Todo...&quot; v-model=&quot;title&quot; /&gt;    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;    &lt;/form&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {name: &quot;AddTodo&quot;,};&lt;/script&gt;</code></pre><h3 id="到-module-gt-todo-js"><a href="#到-module-gt-todo-js" class="headerlink" title="到 module &gt; todo.js"></a>到 module &gt; todo.js</h3></li><li>使用 async 與 axios 傳入資料<ul><li>第二個參數為 title</li><li>post 的網址一樣，後面接的參數為title, complete: false (any new todo that it’s not going to completed)</li></ul></li></ul><pre><code class="javascript">const actions = {  async fetchTodos({ commit }) {    const res = await axios.get(&quot;https://jsonplaceholder.typicode.com/todos&quot;);    // console.log(res.data);    commit(&#39;setTodos&#39;, res.data);  },  async addTodo({ commit }, title) {    const res = await axios.post(&quot;https://jsonplaceholder.typicode.com/todos&quot;, { title, completed: false });    commit(&#39;addNewTodo&#39;, res.data);  }};</code></pre><ul><li>而在action 中使用axios 來新增資料，要將這必新資料 push 到 todo的陣列中<ul><li>存入的該資料要放在，陣列的最前面所以使用 unshift<pre><code class="javascript">const mutations = {setTodos: (state, todos) =&gt; {state.todos = todos;},addNewTodo: (state, todo) =&gt; {state.todos.unshift(todo);}};</code></pre></li></ul></li></ul><h3 id="到-AddTodo-vue-來呼叫此-action"><a href="#到-AddTodo-vue-來呼叫此-action" class="headerlink" title="到 AddTodo.vue 來呼叫此 action"></a>到 AddTodo.vue 來呼叫此 action</h3><ul><li>import <code>mapActions</code></li></ul><pre><code class="html">&lt;template&gt;  &lt;div&gt;    &lt;h3&gt;Add Todo&lt;/h3&gt;    &lt;div class=&quot;add&quot;&gt;      &lt;form @submit=&quot;onSubmit&quot;&gt;        &lt;input type=&quot;text&quot; placeholder=&quot;Add Todo...&quot; v-model=&quot;title&quot; /&gt;        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;      &lt;/form&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><pre><code class="javascript">&lt;script&gt;import { mapActions } from &quot;vuex&quot;;export default {  name: &quot;AddTodo&quot;,  data() {    return {      title: &quot;&quot;,    };  },  method: {    ...mapActions([&quot;addTodo&quot;]),    onSubmit(e) {      e.preventDefault();      //點擊後呼叫action中的加入todo函式，並傳入title資料      this.addTodo(this.title);    },  },};&lt;/script&gt;</code></pre><p><img src="https://i.imgur.com/57j3S5m.png" alt=""></p><h3 id="這裡要特別提出說明"><a href="#這裡要特別提出說明" class="headerlink" title="這裡要特別提出說明"></a>這裡要特別提出說明</h3><p>因為是使用線上的虛擬資料，他不允許我們可以存入新資料到他的API裡面<br>所以可以看到下方的錯誤顯示(重複 id)<br>而此在重新整理之後，存入的資料會消失</p><p><img src="https://i.imgur.com/nNh6AXL.png" alt=""></p><p><img src="https://i.imgur.com/0IZlhhL.png" alt=""></p><hr><h2 id="製作刪除功能"><a href="#製作刪除功能" class="headerlink" title="製作刪除功能"></a>製作刪除功能</h2><ul><li>以id作為參數，來依此刪除</li><li>不用儲存response資料<ul><li>在 async deleteTodo ，製作 by id 刪除</li><li>到 mutations =&gt; 使用 filter 存下資料</li></ul></li></ul><pre><code class="javascript">import axios from &#39;axios&#39;;const state = {  todos: []};const getters = {  getTodos: (state) =&gt; state.todos,};const actions = {  async fetchTodos({ commit }) {    const res = await axios.get(&quot;https://jsonplaceholder.typicode.com/todos&quot;);    // console.log(res.data);    commit(&#39;setTodos&#39;, res.data);  },  async addTodo({ commit }, title) {    const res = await axios.post(&quot;https://jsonplaceholder.typicode.com/todos&quot;, { title, completed: false });    commit(&#39;addNewTodo&#39;, res.data);  },  async deleteTodo({ commit }, id) {    await axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`);    commit(&#39;removeTodo&#39;, id)  }};const mutations = {  setTodos: (state, todos) =&gt; {    state.todos = todos;  },  addNewTodo: (state, todo) =&gt; {    state.todos.unshift(todo);  },  removeTodo: (state, id) =&gt; {    state.todos = state.todos.filter((todo) =&gt; todo.id !== id);    //使用filter 將，不是id的篩選出來  }};export default {  state,  getters,  actions,  mutations}</code></pre><ul><li>回到 Todos.vue</li><li>在 template 放入垃圾桶的 icon<ul><li>執行刪除的功能，在 icon 綁定刪除事件<code>deleteTodo()</code></li><li><code>deleteTodo()</code>就是來自於 methods 取得的事件<pre><code class="html">&lt;template&gt;&lt;h3&gt;Todos&lt;/h3&gt;&lt;div class=&quot;todos&quot;&gt;&lt;div class=&quot;todo&quot; v-for=&quot;todo in getTodos&quot; :key=&quot;todo.id&quot;&gt;{{ todo.title }}&lt;i class=&quot;fas fa-trash-alt&quot; @click=&quot;deleteTodo(todo.id)&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;/template&gt;</code></pre><pre><code class="javascript">&lt;script&gt;import { mapGetters, mapActions } from &quot;vuex&quot;;export default {name: &quot;Todos&quot;,methods: {...mapActions([&quot;fetchTodos&quot;, &quot;deleteTodo&quot;]),},computed: mapGetters([&quot;getTodos&quot;]),created() {this.fetchTodos();},};&lt;/script&gt;</code></pre></li></ul></li></ul><pre><code>---## 製作篩選器功能* 當 FilterTodo.vue 這裡的篩選器執行的時候，會執行 action中的函式，進行篩選```html&lt;style scoped&gt;select {  margin-top: 20px;  padding: 6px;  border: #ef9a9a 1px solid;}&lt;/style&gt;&lt;template&gt;  &lt;div&gt;    Filter todos:    &lt;select&gt;      &lt;option value=&quot;200&quot;&gt;200&lt;/option&gt;      &lt;option value=&quot;100&quot;&gt;100&lt;/option&gt;      &lt;option value=&quot;50&quot;&gt;50&lt;/option&gt;      &lt;option value=&quot;30&quot;&gt;30&lt;/option&gt;      &lt;option value=&quot;20&quot;&gt;20&lt;/option&gt;      &lt;option value=&quot;10&quot;&gt;10&lt;/option&gt;    &lt;/select&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><pre><code class="javascript">&lt;script&gt;export default {  name: &quot;FilterTodos&quot;,};&lt;/script&gt;</code></pre><p>將該元件綁到 App.vue</p><pre><code class="javascript">&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;div class=&quot;container&quot;&gt;      &lt;AddTodo /&gt;      &lt;FilterTodos /&gt;      &lt;Todos /&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;!-- &lt;router-view /&gt; --&gt;&lt;/template&gt;&lt;script&gt;import Todos from &quot;@/components/Todos.vue&quot;;import AddTodo from &quot;@/components/AddTodo.vue&quot;;import FilterTodos from &quot;@/components/FilterTodos.vue&quot;;export default {  name: &quot;app&quot;,  components: {    Todos,    AddTodo,    FilterTodos,  },};&lt;/script&gt;</code></pre><h3 id="到-module-gt-todo-js-來製作-actions"><a href="#到-module-gt-todo-js-來製作-actions" class="headerlink" title="到 module &gt; todo.js 來製作 actions"></a>到 module &gt; todo.js 來製作 actions</h3><ul><li>要傳入 option 的 value<ul><li>第二個參數為事件</li><li>在 axios 的 get 放入 url，接上取得的參數</li><li>commit 直接傳到 setTodos ，將串接到的資料透過 mutations 存到 todos<pre><code class="javascript">import axios from &#39;axios&#39;;</code></pre></li></ul></li></ul><p>const state = {<br>  todos: []<br>};<br>const getters = {<br>  getTodos: (state) =&gt; state.todos,<br>};<br>const actions = {</p><p>  async filterTodos({ commit }, e) {<br>    //取得下拉選單的值<br>    //console.log(e.target.value);<br>    let selected = parseInt(e.target.value);<br>    const res = await axios.get(<code>https://jsonplaceholder.typicode.com/todos?_limit=${selected}</code>);<br>    commit(‘setTodos’, res.data);<br>  }</p><p>};<br>const mutations = {<br>  setTodos: (state, todos) =&gt; {<br>    state.todos = todos;<br>  },<br>  addNewTodo: (state, todo) =&gt; {<br>    state.todos.unshift(todo);<br>  },<br>  removeTodo: (state, id) =&gt; {<br>    state.todos = state.todos.filter((todo) =&gt; todo.id !== id);<br>    //使用filter 將，不是id的篩選出來<br>  }<br>};</p><p>export default {<br>  state,<br>  getters,<br>  actions,<br>  mutations<br>}</p><pre><code>* 將ａction 綁到 FilterTodos.vue```javascript&lt;template&gt;  &lt;div&gt;    Filter todos:    &lt;select @change=&quot;filterTodos($event)&quot;&gt;      &lt;option value=&quot;200&quot;&gt;200&lt;/option&gt;      &lt;option value=&quot;100&quot;&gt;100&lt;/option&gt;      &lt;option value=&quot;50&quot;&gt;50&lt;/option&gt;      &lt;option value=&quot;30&quot;&gt;30&lt;/option&gt;      &lt;option value=&quot;20&quot;&gt;20&lt;/option&gt;      &lt;option value=&quot;10&quot;&gt;10&lt;/option&gt;    &lt;/select&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { mapActions } from &quot;vuex&quot;;export default {  name: &quot;FilterTodos&quot;,  methods: {    ...mapActions([&quot;filterTodos&quot;]),  },};&lt;/script&gt;</code></pre><hr><h2 id="todos-完成與否，狀態的改變"><a href="#todos-完成與否，狀態的改變" class="headerlink" title="todos 完成與否，狀態的改變"></a>todos 完成與否，狀態的改變</h2><ul><li>點擊兩下來更改狀態<ul><li>當要更新資料，要使用put，傳入updTodo物件資料<ul><li>將該資料傳到mutation</li></ul></li><li>接著到 mutation 製作更新的動作</li><li>要取得目前的index</li></ul></li></ul><pre><code class="javascript">import axios from &#39;axios&#39;;const state = {  todos: []};const getters = {  getTodos: (state) =&gt; state.todos,};const actions = {  async updataTodo({ commit }, updTodo) {    const res = await axios.put(`https://jsonplaceholder.typicode.com/todos/${updTodo.id}`,updTodo);    commit(&#39;renewTodo&#39;, res.data);  },};const mutations = {  renewTodo: (state, updTodo) =&gt; {    console.log(updTodo);    //我們是要在同一筆資料上更新    const index = state.todos.findIndex(todo =&gt; todo.id === updTodo.id);    //以下簡單確認 indx 是否有存在    if (index !== -1) {      state.todos.splice(index, 1, updTodo);    }  }};export default {  state,  getters,  actions,  mutations}</code></pre><h3 id="回到-Todos-vue"><a href="#回到-Todos-vue" class="headerlink" title="回到 Todos.vue"></a>回到 Todos.vue</h3><ul><li>template 插入legend</li><li>引入 <code>updataTodo</code>到 methods</li><li><code>onDblclick()</code>建立一個變數，它包含的物件內容為id、title、completed，其中我只要要改變的值是 complete true\false<ul><li>這裡的 id,title 都一樣。complete 則設定狀態的改變</li><li>最後在呼叫一次 <code>updataTodo()</code>  傳入新的物件<pre><code class="html">&lt;template&gt;&lt;h3&gt;Todos&lt;/h3&gt;&lt;div class=&quot;legend&quot;&gt;&lt;span&gt;雙重點擊來標示已完成的事項&lt;/span&gt;&lt;span&gt; &lt;span class=&quot;incomplete-box&quot;&gt;&lt;/span&gt; = 未完成 &lt;/span&gt;&lt;span&gt; &lt;span class=&quot;complete-box&quot;&gt;&lt;/span&gt; = 已完成 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;todos&quot;&gt;&lt;div @dblclick=&quot;onDblclick(todo)&quot; class=&quot;todo&quot; v-for=&quot;todo in getTodos&quot; :key=&quot;todo.id&quot; :class=&quot;{ &#39;is-complete&#39;: todo.completed }&quot;&gt; {{ todo.title }} &lt;i class=&quot;fas fa-trash-alt&quot; @click=&quot;deleteTodo(todo.id)&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;/template&gt;</code></pre></li></ul></li></ul><pre><code>```javascript&lt;script&gt;import { mapGetters, mapActions } from &quot;vuex&quot;;export default {  name: &quot;Todos&quot;,  methods: {    ...mapActions([&quot;fetchTodos&quot;, &quot;deleteTodo&quot;, &quot;updataTodo&quot;]),    onDblclick(todo) {      const updTodo = {        id: todo.id,        title: todo.title,        completed: !todo.completed,      };      this.updataTodo(updTodo);    },  },  computed: mapGetters([&quot;getTodos&quot;]),  created() {    this.fetchTodos();  },};&lt;/script&gt;</code></pre><p>參考資料：<br><a href="https://ithelp.ithome.com.tw/articles/10191225" target="_blank" rel="noopener">[Vue.js] Vuex 學習筆記 (5) - getters 的核心概念</a><br><a href="https://vuex.vuejs.org/zh/guide/getters.html#%E9%80%9A%E8%BF%87%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE" target="_blank" rel="noopener">Vuex</a><br><a href="https://forum.vuejs.org/t/using-this-store-dispatch-vs-using-mapactions/2186/2" target="_blank" rel="noopener">Using <code>this.$store.dispatch</code> vs using mapActions</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RPoUnyd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前的實作練習都沒有機會使用到 Vuex，總是覺得它的資料存取、取得或是管理，對於剛接觸Vue 的我來說還是相對複雜，而且剛開始接觸 Vue 總要先練習下 p</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
    <category term="Vuex" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>JS基本觀念 - 認識 pass by value、pass by reference 、 pass by sharing，Javascript 又是哪一個？</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/10/09/js-pass/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/10/09/js-pass/</id>
    <published>2021-10-09T04:18:41.000Z</published>
    <updated>2021-10-09T09:24:30.373Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/zT0UU5c.jpg" alt=""></p><p>之所以會撰寫這篇文，是因為面試過程被考倒的觀念，才發現自己過去從沒注意到這部分啊，那就來寫篇文章來認識它們之中的傳遞方式。</p><h2 id="首先，先從型別的認識開始"><a href="#首先，先從型別的認識開始" class="headerlink" title="首先，先從型別的認識開始"></a>首先，先從型別的認識開始</h2><p>在Javascript分兩大類，一種是基本型別(primitive type)，另一種是物件(Object)。</p><ul><li>Primitive type （以純值的形式存在）<br>Boolean<br>Null<br>Undefined<br>Number<br>BigInt<br>String<br>Symbol（於 ECMAScript 6 新定義）</li><li>Object<br>物件型別指的是可能由零或多種不同型別 (包括純值與物件) 所組合成，例如object,array, function, map</li></ul><p>知道型別後，可以簡易的分類：</p><ul><li>primitive type會是 pass by value，</li><li>object 是 pass by reference。</li></ul><h2 id="接下來來觀察，它們之間不同"><a href="#接下來來觀察，它們之間不同" class="headerlink" title="接下來來觀察，它們之間不同"></a>接下來來觀察，它們之間不同</h2><h3 id="pass-by-value"><a href="#pass-by-value" class="headerlink" title="pass by value"></a>pass by value</h3><p>範例1：</p><pre><code class="javascript">let x=10;let y=x;x=20;console.log(x); //20console.log(y); //10</code></pre><ul><li>注意：x和y是兩個獨立變數 （先記著這點）<ul><li>值會存入該變數<br><code>var y = x;</code> 看起來會像是y的內容要複製x，但可以的話要理解為，變數 y 是去建立了一個新的值，然後將變數 x 的內容複製了一份過來。</li></ul></li><li>因為兩的變數，各自獨立，所以當變數 x 的內容後來經過更新變成 20 之後，變數 y 的內容依舊保持原來的 10 而不受影響。</li></ul><p>範例2</p><pre><code class="javascript">var num=3;console.log(&quot;num start:&quot;,num);function passByValue(func_num){  func_num=5;}passByValue(num);console.log(&quot;num end:&quot;, num);</code></pre><h4 id="結果："><a href="#結果：" class="headerlink" title="結果："></a>結果：</h4><pre><code class="javascript">num start:3num end: 3</code></pre><ul><li>先是宣告新變數</li><li>隨後建立<code>passByValue()</code> 函式</li><li>呼叫<code>passByValue(num)</code> 複製變數num的值，3傳入<code>passByValue(func_num)</code>。<ul><li>一開始 值會是3</li><li>遇到<code>func_num=5;</code> =&gt; 將值改為 5</li></ul></li><li>但因為出去了函式範圍(scope)，最終的值 <code>num end:3</code></li></ul><h3 id="pass-by-refrence"><a href="#pass-by-refrence" class="headerlink" title="pass by refrence"></a>pass by refrence</h3><p>範例</p><pre><code class="javascript">let x={value:10};let y=x;x.value=20;console.log(x); //{value:20}console.log(y); //{value:20}console.log( x === y );  //true</code></pre><h3 id="拆解說明一下"><a href="#拆解說明一下" class="headerlink" title="拆解說明一下"></a>拆解說明一下</h3><ul><li>當宣告一個物件</li><li>JavaScript 會在記憶體的某處建立起一個物件 (圖右側)，然後再將這個 <code>x</code>變數指向新生成的物件</li></ul><p><img src="https://i.imgur.com/LPwkZAg.png" alt=""></p><ul><li>接著，當我們宣告了第二個變數 y ，並且透過 = 將y 指向 x 的位置。</li><li>接著當我們更新了 x.value 的內容後， y.value 的內容也被更新了。</li></ul><p><img src="https://i.imgur.com/vFUhP6X.png" alt=""></p><p>範例2</p><pre><code class="javascript">var obj1={item:&quot;unchanged&quot;};console.log(&quot;obj1 start:&quot;,obj1);function passByReference(ref){  ref.item= &quot;changed&quot;;}passByReference(obj1);console.log(&quot;obj end&quot;, obj1);</code></pre><h4 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h4><pre><code class="javascript">obj1 start:{item: &quot;unchanged&quot;}obj1 end:{item:&quot;changed&quot;}</code></pre><ul><li>當執行passByReference(obj1) 。想像他是個地址(0x0016)，進入函式中將地址複製，傳入。<ul><li>此時他的value 是個地址(0x0016)</li></ul></li><li>進入函式，遇到<code>ref.item</code><ul><li>de-reference ，進入原本的記憶體位置，找到item，並改變他的值</li></ul></li></ul><p><img src="https://i.imgur.com/3Ytn7bk.png" alt=""></p><h4 id="在不一般情況下，基本型別是-pass-by-value，而物件型別是-pass-by-reference的方式，但總有例外的時候。"><a href="#在不一般情況下，基本型別是-pass-by-value，而物件型別是-pass-by-reference的方式，但總有例外的時候。" class="headerlink" title="在不一般情況下，基本型別是 pass by value，而物件型別是 pass by reference的方式，但總有例外的時候。"></a>在不一般情況下，基本型別是 pass by value，而物件型別是 pass by reference的方式，但總有例外的時候。</h4><h3 id="pass-by-sharing"><a href="#pass-by-sharing" class="headerlink" title="pass by  sharing"></a>pass by  sharing</h3><pre><code class="javascript">var obj1={item:&quot;unchanged&quot;};console.log(&quot;obj1 start:&quot;,obj1);function passBySharing(ref){  ref={ item: &quot;changed&quot;};}passBySharing(obj1);console.log(&quot;obj end&quot;, obj1);</code></pre><pre><code class="javascript">obj1 start:{item: &quot;unchanged&quot;}obj1 end:{item:&quot;unchanged&quot;}</code></pre><ul><li>傳入之前start 沒有改變</li><li>呼叫函式，並進入<code>passBySharing()</code>，還是複製地址，傳入</li><li>遇到<code>ref={ item: &quot;changed&quot;};</code>，會直接覆蓋地址(有點類似pass by value)<ul><li>這並不是直接更改物件特性</li></ul></li></ul><p><img src="https://i.imgur.com/Kst3565.png" alt=""></p><h2 id="最後，來說說-JavaScript-屬於？"><a href="#最後，來說說-JavaScript-屬於？" class="headerlink" title="最後，來說說 JavaScript 屬於？"></a>最後，來說說 JavaScript 屬於？</h2><p>看了多篇文章，實在也是有點混亂，該認為三種形式都有呢？還是就是Pass by sharing、Pass by reference呢？ 那例外情形又該如何解釋？</p><p>所以這邊的結尾，直接引用Kuro、Huli老師文章的資訊，供給大家參考。</p><p>從Kuro Hsu 的<a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">文章</a>、<a href="https://www.tenlong.com.tw/products/9789864344130" target="_blank" rel="noopener">書</a><br>提及認為 JavaScript 應該更屬於 Pass by sharing 的形式。</p><ul><li>JavaScript 不屬於單純的傳值或傳址。</li></ul><p>參考 ECMA-262-3 in detail. Chapter 8. Evaluation strategy</p><blockquote><p>Regardless of usage concept of reference in this case, this strategy should not be confused with the “call by reference” discussed above. The value of the argument is not a direct alias, but the copy of the address.<br>由於在 JavaScript 的物件類型是可變的 (mutable)，當物件更新時，會影響到所有引用這個物件的變數與其副本，修改時會變動到原本的參考，但當賦與新值時，會產生新的實體參考。</p></blockquote><p>另外在 Huli 的文章中：</p><blockquote><p>依據細分程度的不同，下面幾句話都是正確的：<br>JavaScript 裡面只有 pass by value<br>JavaScript 的 primitive type 是 pass by value，object 是 pass by sharing</p></blockquote><hr><h2 id="最終來個綜合練習："><a href="#最終來個綜合練習：" class="headerlink" title="最終來個綜合練習："></a>最終來個綜合練習：</h2><p>相信在最後的這個練習，可以更清楚，pass by value，pass by reference，pass by sharing</p><pre><code class="javascript">function changeStuff(num,obj,obj2){  num=num*10;  obj.item=&quot;changed&quot;;  obj={item:&quot;changed&quot;};}var num=10;var obj={item: &quot;unchanged&quot;};var obj2= {item: &quot;unchanged&quot;};changeStuff(num, obj, obj2);console.log(num);console.log(obj.item);console.log(obj.item);</code></pre><pre><code>console=&gt; 10 &quot;changed&quot; &quot;unchanged&quot;</code></pre><p>參考資料：<br><a href="https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc" target="_blank" rel="noopener">JS基本觀念：call by value 還是reference 又或是 sharing?</a><br><a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a><br><a href="https://www.youtube.com/watch?v=1YFss_4B_o4&t=302s" target="_blank" rel="noopener">Tech Talk: Pass By Sharing with Javascript</a><br><a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/" target="_blank" rel="noopener">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zT0UU5c.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;之所以會撰寫這篇文，是因為面試過程被考倒的觀念，才發現自己過去從沒注意到這部分啊，那就來寫篇文章來認識它們之中的傳遞方式。&lt;/p&gt;
&lt;h2 id=&quot;首先，先從</summary>
      
    
    
    
    
    <category term="JS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>演算法入門 - Sorting-Algorithms</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/10/08/Sorting-Algorithms/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/10/08/Sorting-Algorithms/</id>
    <published>2021-10-08T06:08:05.000Z</published>
    <updated>2021-10-12T08:06:52.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/glzKE9I.png" alt=""></p><p>延續 Wilson Ren<a href="https://www.udemy.com/course/algorithm-data-structure/?course_id=3819536&fbclid=IwAR3ugnEJMsniBCvoMHthf31EqEQeG9hCL3BQb2gWS7eAFZ4lcixmWOiwNAo" target="_blank" rel="noopener">課程</a>來認識常見的排列方法！</p><h2 id="排列的演算法介紹"><a href="#排列的演算法介紹" class="headerlink" title="排列的演算法介紹"></a>排列的演算法介紹</h2><p><img src="https://i.imgur.com/zeRjPef.png" alt=""></p><ul><li>在JS中，就有內建 <code>array.sort()</code><ul><li>同樣在其他程式語言，都會有內建的 sorting function</li><li>但還是需要知道他們是如何運作</li></ul></li><li>總共有 6 種 sorting</li><li>此篇文章會以前面兩種為主</li></ul><h2 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h2><ul><li>冒泡排序</li><li>會比較相鄰的元素，如果順序不對會互換element</li><li>是相當簡單的演算法，在現實世界很少拿來使用，最常用在教學</li><li>而像在python、java 他們內建的排序演算法，都不是用冒泡排序，多是用 quicksort,merge sort（比較複雜、但有效率）<h3 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明"></a>範例說明</h3><img src="https://i.imgur.com/pDdBK9i.png" alt=""></li><li>比較array的最後兩個數字 =&gt; 發現順序不對就對調<br><img src="https://i.imgur.com/ElpC2qh.png" alt=""></li><li>對調之後，再往下兩個元素<ul><li>發現順序正確，不需更動<br><img src="https://i.imgur.com/mQuFUvU.png" alt=""></li></ul></li><li>不更動之後，再往下兩個<br><img src="https://i.imgur.com/Qk1T9c3.png" alt=""><br>以此類推…</li><li>小結：將找到的最小值，推到最左邊</li></ul><h3 id="要如何做-Bubble-Sort"><a href="#要如何做-Bubble-Sort" class="headerlink" title="要如何做 Bubble Sort"></a>要如何做 Bubble Sort</h3><ul><li><p>先從一個陣列中2個數值比較開始思考</p><pre><code>for j from A.length-1 to 1; if A[j] &lt; A[j-i] ; swap A[j] and A[j-i]</code></pre></li><li><p>虛擬碼<br><img src="https://i.imgur.com/2VFPI3E.png" alt=""></p></li><li><p>i =&gt; sorted elements</p></li><li><p>j =&gt; adjacent elements(j是相對i而來)</p><pre><code class="javascript">function bubbleSort(arr){  for(let i=0;i&lt;arr.length-2;i++){    for(let j=arr.length-1;j&gt;=i+1;j--){      if (arr[j]&lt;arr[j-1]){        //swap arr[j] and arr[j-1]        let temp=arr[j];        arr[j] = arr[j-1];        arr[j-1] = temp;      }    }  }  console.log(arr);}bubbleSort([4,1,5,2,7]);</code></pre></li><li><p>加入隨機的數字，組成新的陣列</p><pre><code class="javascript">function bubbleSort(arr) {let step = 0;for (let i = 0; i &lt;= arr.length - 2; i++) {  for (let j = arr.length - 1; j &gt;= i + 1; j--) {    if (arr[j] &lt; arr[j - 1]) {      // swap arr[j] and arr[j - 1]      let temp = arr[j];      arr[j] = arr[j - 1];      arr[j - 1] = temp;      step++;    }  }}console.log(&quot;It takes &quot; + step + &quot; steps to complete.&quot;);console.log(arr);}</code></pre></li></ul><p>let test = [];</p><p>for (let i = 0; i &lt; 100; i++) {<br>  test.push(Math.floor(Math.random() * 100));<br>}</p><p>bubbleSort(test);</p><pre><code>## Big O of Bubble Sort![](https://i.imgur.com/NSg6FSC.png)* 最糟情況下： 由大到小，要排成 由小到大 =&gt; 他交換的次數會是 (n-1)+(n-2)+(n-3)+...+(n-n)次* 最好的情況： 本身的arr就接近 小到大    * 優化語法    * 發現沒有任何elements被交換，就可以停止迴圈```javascriptfunction bubbleSort(arr){    for(let i=0;i&lt;arr.length-2;i++){      let swapping=false;      for(let j=arr.length-1;j&gt;=i+1;j--){        if (arr[j]&lt;arr[j-1]){          //swap arr[j] and arr[j-1]          let temp=arr[j];          arr[j] = arr[j-1];          arr[j-1] = temp;          swapping=true;        }      }    }    if (swapping==false){      break;    }  }</code></pre><ul><li>平均情況還是用到 nested for loop<ul><li>O(n^2)</li></ul></li></ul><h2 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><p><img src="https://i.imgur.com/NwAm9cW.png" alt=""></p><ul><li>效率比 bubble sort 好一些</li><li>理論上， 都是 O(n^2)</li><li>不斷做插入的動作<h3 id="範例說明-1"><a href="#範例說明-1" class="headerlink" title="範例說明"></a>範例說明</h3><img src="https://i.imgur.com/HtfgFYG.png" alt=""></li><li>先認為這條arr長度是1</li><li>從陣列最前面開始，要將1插入4這個arr上</li></ul><p><img src="https://i.imgur.com/CrYGinm.png" alt=""></p><ul><li><p>數字2，要和左邊的數字作比較<br><img src="https://i.imgur.com/lb7mYhc.png" alt=""></p></li><li><p>數字3去比較<br><img src="https://i.imgur.com/gqnhQYA.png" alt=""></p></li></ul><h3 id="虛擬碼"><a href="#虛擬碼" class="headerlink" title="虛擬碼"></a>虛擬碼</h3><p><img src="https://i.imgur.com/lNSbpjL.png" alt=""></p><pre><code>index 0,1,2,3,4value 1,2,3,4,0</code></pre><ul><li>檢查這條arr的 index=1</li><li>設定<code>key=A[j]</code>，並將key插入 sorted sequence <ul><li>j 的前一格為 i</li></ul></li><li>確認 i 有沒有大於key =&gt; 也就是對於key而言，要不斷地和它左邊的值比較<ul><li>如果左邊的值比key大，就要讓他們互換</li></ul></li></ul><pre><code>index 0,1,2,3,4value 1,2,3,4 (i),0 (j key)while i&gt;0 &amp;&amp; A[i] &gt; key  A[i+1] = A[i]  i -= 1</code></pre><ul><li>語法</li></ul><pre><code class="javascript">let unsorted = [14, -4, 17, 6, 22, 1, -5];insertionSort(unsorted);function insertionSort(arr) {  for (let j = 1; j &lt;= arr.length - 1; j++) {    let key = arr[j];    i = j - 1;    while (i &gt;= 0 &amp;&amp; arr[i] &gt; key) {      arr[i + 1] = arr[i];      i -= 1;    }    arr[i + 1] = key;  }  console.log(arr);  return arr;}</code></pre><p><img src="https://i.imgur.com/E8xWtkL.png" alt=""></p><h2 id="Big-O"><a href="#Big-O" class="headerlink" title="Big O"></a>Big O</h2><p><img src="https://i.imgur.com/OVF4VRl.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/glzKE9I.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;延續 Wilson Ren&lt;a href=&quot;https://www.udemy.com/course/algorithm-data-structure/?co</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>演算法入門</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/10/02/Algorithm/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/10/02/Algorithm/</id>
    <published>2021-10-02T05:17:40.000Z</published>
    <updated>2021-10-12T06:29:45.095Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/LHDcmBI.png" alt=""></p><p>常常看到 YouTube 演算法造成頻道經營的難度、或是facebook演算法而使得行銷曝光度的改變，但始終對演算法這個名詞沒有認識。<br>藉由 Wilson Ren<a href="https://www.udemy.com/course/algorithm-data-structure/?course_id=3819536&fbclid=IwAR3ugnEJMsniBCvoMHthf31EqEQeG9hCL3BQb2gWS7eAFZ4lcixmWOiwNAo" target="_blank" rel="noopener">課程</a></p><h2 id="什麼是演算法？"><a href="#什麼是演算法？" class="headerlink" title="什麼是演算法？"></a>什麼是演算法？</h2><p>用以解決問題而可以逐步執行的步驟或程序。</p><h4 id="來看看現實生活中的演算法"><a href="#來看看現實生活中的演算法" class="headerlink" title="來看看現實生活中的演算法"></a>來看看現實生活中的演算法</h4><ul><li>Google Map 如何找到最短路徑</li><li>YouTube 推薦給你，認為你有興趣的影片</li><li>FB\IG 的加好友、追蹤推薦</li></ul><h2 id="演算法比較"><a href="#演算法比較" class="headerlink" title="演算法比較"></a>演算法比較</h2><p>有兩個演算法都可以完成目標任務，那我們會如何取決誰比較好？</p><ul><li>哪個演算法執行速度快？</li><li>所佔用電腦的記憶體資源少？<h3 id="時間"><a href="#時間" class="headerlink" title="時間?"></a>時間?</h3>首先，在計時演算法所耗時的部分：</li><li>幫演算法做計時，是不實際的事情<ul><li>同一台電腦在執行同一任務，所執行的時間會不同</li><li>不同電腦、CPU處理速度不一樣<h4 id="應該考慮，複雜度-Complexity"><a href="#應該考慮，複雜度-Complexity" class="headerlink" title="應該考慮，複雜度 Complexity"></a>應該考慮，複雜度 Complexity</h4></li></ul></li><li>複雜度分為兩種：時間複雜度、空間複雜度 （在本文多是討論時間複雜度）</li><li>要如何計算時間複雜度?<ul><li>加、減、乘、除、comparison ，這些每一個都可以被算作一個 operation</li><li>Complexity: 在所寫的演算法中，總共用到多少 operations(運算子)</li><li>使用 function 來顯示 Complexity 和 input size 的關係。</li></ul></li></ul><h2 id="Big-O-Notation"><a href="#Big-O-Notation" class="headerlink" title="Big O Notation"></a>Big O Notation</h2><ol><li>是一個工具，用來描述當你的值不斷擴大時，f(n)值會去哪裡</li><li>為最壞情況的打算。他會展示一個演算法複雜度的趨勢</li></ol><h3 id="計算-Big-O-的值"><a href="#計算-Big-O-的值" class="headerlink" title="計算 Big O 的值"></a>計算 Big O 的值</h3><ol><li>Constant doesn’t matter : 常數它並不重要<ul><li>f(n)=3n ：3為常數、n為變數</li></ul></li><li>Small Terms don’t matter<ul><li>fn= 3n^2 + 6n + 4 =&gt; 只需保留到fn= 3n^2</li></ul></li><li>Logarithm Base doesn’t matter<br><img src="https://i.imgur.com/dNM08rx.png" alt=""><h2 id="範例："><a href="#範例：" class="headerlink" title="範例："></a>範例：</h2></li><li>f(n)=3n<br>答案：O(n)</li><li>f(n)=13n^3 + 6n +7<br>答案：O(n^3)</li><li>f(n)=4log₂n<br>答案：O(logn)</li><li>f(n)=5<br>答案：O(1)</li></ol><h2 id="演算法常見-Big-O-的值"><a href="#演算法常見-Big-O-的值" class="headerlink" title="演算法常見 Big O 的值"></a>演算法常見 Big O 的值</h2><p>由好至差</p><ol><li>O(1)</li><li>O(logn)</li><li>O(n)</li><li>O(nlogn)</li><li>O(n^2)</li><li>O(n^3)</li></ol><ul><li>很多sorting值會是 O(nlogn)</li><li>盡量讓演算法可以達到3、4的值</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LHDcmBI.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;常常看到 YouTube 演算法造成頻道經營的難度、或是facebook演算法而使得行銷曝光度的改變，但始終對演算法這個名詞沒有認識。&lt;br&gt;藉由 Wilso</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 -  資料傳遞 emit</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/09/21/vue-emit/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/09/21/vue-emit/</id>
    <published>2021-09-21T04:42:48.000Z</published>
    <updated>2021-10-25T05:22:15.348Z</updated>
    
    <content type="html"><![CDATA[<p>圖示：<br><img src="https://i.imgur.com/PxIIobu.png" alt=""></p><h2 id="emit-實作練習"><a href="#emit-實作練習" class="headerlink" title="emit 實作練習"></a>emit 實作練習</h2><p><img src="https://i.imgur.com/7guYdVb.png" alt=""></p><ul><li>透過點擊add按鈕，觸發外層元件數值的改變<ul><li>先定義外層接收資料方式</li><li>定義內層的 $emit 觸發方法</li><li>使用 v-on 的方式觸發外層方法（口訣：前內、後外）</li></ul></li></ul><h3 id="外層元件"><a href="#外層元件" class="headerlink" title="外層元件"></a>外層元件</h3><ul><li><p>定義接收方法：當內層傳給你的時候，要做什麼事</p><ul><li><p><code>addNumber()</code>使num 增加1</p><pre><code class="javascript">const app = Vue.createApp({      data() {        return {          num: 0,          text: &#39;&#39;        };      },      methods: {        addNumber() {          console.log(&#39;addnumber&#39;);          this.num++;        },      }    });</code></pre></li></ul></li></ul><h3 id="內層元件"><a href="#內層元件" class="headerlink" title="內層元件"></a>內層元件</h3><ul><li>在方法內建立函式，來觸發資料傳遞</li><li>並將<code>click</code>綁到內部元件的按鈕上。使點擊時候，會觸發$emit<ul><li>emit 名稱<code>emit-num</code><pre><code class="javascript">app.component(&#39;button-counter&#39;, {      methods: {        click() {          console.log(&#39;inner,click&#39;);          this.$emit(&#39;emit-num&#39;);        }      },      template: `&lt;button type=&quot;button&quot; @click=&quot;click&quot;&gt;add&lt;/button&gt;`    });</code></pre></li></ul></li></ul><p><img src="https://i.imgur.com/W1s9mhp.png" alt=""></p><h2 id="建立內外層元件的溝通橋樑"><a href="#建立內外層元件的溝通橋樑" class="headerlink" title="建立內外層元件的溝通橋樑"></a>建立內外層元件的溝通橋樑</h2><ul><li>使用 v-on 的方式觸發外層方法（口訣：前內、後外）<ul><li>在 div內放入子元件<code>button-counter</code></li><li><code>:emit-num=&quot;addNumber&quot;</code></li></ul></li></ul><pre><code class="javascript">&lt;div id=&quot;app&quot;&gt;          {{ num }}    &lt;button-counter v-on:emit-num=&quot;addNumber&quot;&gt;&lt;/button-counter&gt;     &lt;/div&gt;</code></pre><h2 id="練習二，資料接收"><a href="#練習二，資料接收" class="headerlink" title="練習二，資料接收"></a>練習二，資料接收</h2><h3 id="外層元件-1"><a href="#外層元件-1" class="headerlink" title="外層元件"></a>外層元件</h3><ul><li><p>接收方法為 <code>getData</code> 接收 text</p><pre><code class="javascript">const app = Vue.createApp({          data() {            return {              text: &#39;&#39;            };          },          methods: {            getData(value) {              console.log(&#39;getData&#39;, text);              this.text = value;            }          }        });</code></pre></li></ul><h3 id="內層元件-1"><a href="#內層元件-1" class="headerlink" title="內層元件"></a>內層元件</h3><ul><li>建立觸發傳遞的方式<ul><li>將內層元件<code>text: &#39;內部資料&#39;</code> 傳遞到外層<pre><code class="javascript">app.component(&#39;button-text&#39;, {data() {  return {  text: &#39;內部資料&#39;,   }},methods: {emitText() {this.emit(&#39;emit-text&#39;, this.text)   }},template: `&lt;button type=&quot;button&quot; @click=&quot;emitText&quot;&gt;emit data&lt;/button&gt;`});</code></pre><h3 id="建立內外橋樑"><a href="#建立內外橋樑" class="headerlink" title="建立內外橋樑"></a>建立內外橋樑</h3><pre><code class="javascript">&lt;h3&gt;傳遞資料狀態&lt;/h3&gt;內部傳來的文字：{{ text }}&lt;br&gt;&lt;button-text @emit-text=&quot;getData&quot;&gt;&lt;/button-text&gt;</code></pre><img src="https://i.imgur.com/avhMirS.png" alt=""></li></ul></li></ul><h2 id="emit-命名"><a href="#emit-命名" class="headerlink" title="emit 命名"></a>emit 命名</h2><p>與 props 命名一樣需要注意：</p><ul><li>在內層若以駝峰命名 <code>emitText</code><ul><li>也可以一開始內層就是用<code>-</code> 來命名即可，如<code>emit-text</code><pre><code class="javascript">emitText() { this.emit(&#39;emitText&#39;, this.text)}</code></pre></li></ul></li><li>到了要綁定的 template 上，<code>emit-text</code><pre><code class="javascript">&lt;button-text @emit-text=&quot;getData&quot;&gt;&lt;/button-text&gt;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;圖示：&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/PxIIobu.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;emit-實作練習&quot;&gt;&lt;a href=&quot;#emit-實作練習&quot; class=&quot;headerlink&quot; title=&quot;emit 實作練習</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 -  資料傳遞 props</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/09/21/vue-props/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/09/21/vue-props/</id>
    <published>2021-09-21T03:42:48.000Z</published>
    <updated>2021-10-25T05:22:10.673Z</updated>
    
    <content type="html"><![CDATA[<p>因為Vue每個元件都是各自獨立，所以我們無法在各自元件去調整資料，而直接修改另一個元件的資料。<br>所以，要使元件之間可以相互溝通，就需要使用資料傳遞方式。<br>在傳遞方式：</p><ul><li>外層傳遞內層 : props</li><li>內層向外傳遞 : emit<br>當外層元件，要將資料往內層元件丟時，此過程就是使用props。</li></ul><p><img src="https://i.imgur.com/FTbHDPk.png" alt=""></p><h2 id="傳遞資料的方式："><a href="#傳遞資料的方式：" class="headerlink" title="傳遞資料的方式："></a>傳遞資料的方式：</h2><h3 id="靜態資料傳入"><a href="#靜態資料傳入" class="headerlink" title="靜態資料傳入"></a>靜態資料傳入</h3><ul><li>預期將外層傳入一個url的變數，傳進給內層使用<ul><li>photo為內部元件，在template 我希望能夠取得外層傳入的圖片(urlimg)</li><li>故在 props 以此命名，並將它綁到 template<pre><code class="javascript">app.component(&#39;photo&#39;, {  props: [&#39;url&#39;],  template: `&lt;img :src=&quot;url&quot; class=&quot;img-thumbnail&quot; alt&gt;`});</code></pre></li></ul></li><li>將上方的元件資料，加到外層元件：像是加入html屬性一樣<pre><code class="javascript">&lt;photo  url=&quot;https://images.unsplash.com/photo-1605784401368-5af1d9d6c4dc?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=80&quot;&gt;&lt;/photo&gt;</code></pre></li></ul><p><img src="https://i.imgur.com/f079ziY.png" alt=""></p><h3 id="動態資源"><a href="#動態資源" class="headerlink" title="動態資源"></a>動態資源</h3><ul><li>使用 <code>v-bind</code>，綁定內部元件的props ，使資料可以跟外層元件連動</li><li>記得使用口訣： 前內、後外 =&gt;前面就是props內的名稱，後面就是外層元件的名稱<br><img src="https://i.imgur.com/BMVZtkn.png" alt=""><pre><code class="htmlembedded">&lt;h3&gt;動態資源&lt;/h3&gt;&lt;p&gt;技巧：前內、後外&lt;/p&gt;&lt;photo v-bind:urlimg=&quot;imgUrl&quot;&gt;&lt;/photo&gt;</code></pre></li></ul><h2 id="資料傳遞為-單向數據流"><a href="#資料傳遞為-單向數據流" class="headerlink" title="資料傳遞為 單向數據流"></a>資料傳遞為 單向數據流</h2><ul><li>外部所定義的資料，當往內層傳遞，是單向性</li><li>不能試圖使用v-model或各種方式，來改變props傳入的內容<ul><li>以下範例：在子元件 <code>photo2</code> 放入 <code>input</code>綁定 <code>v-model</code></li><li>當嘗試在輸入框修改網址，會出現錯誤</li></ul></li></ul><pre><code class="javascript">//外層元件綁定 url&lt;photo2 :url=&quot;imgUrl&quot;&gt;&lt;/photo2&gt;</code></pre><pre><code class="javascript">const app = Vue.createApp({    data() {    return {      imgUrl: &#39;https://images.unsplash.com/photo-1605784401368-5af1d9d6c4dc?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=80&#39;,         };     },}); app.component(&#39;photo2&#39;, {    props: [&#39;url&#39;],    template: `&lt;img :src=&quot;url&quot; class=&quot;img-thumbnail&quot; alt&gt;&lt;br&gt;    &lt;input type=&quot;text&quot; v-model=&quot;url&quot;&gt; {{ url }}`     })</code></pre><p><img src="https://i.imgur.com/OmmIxpi.png" alt=""></p><p><img src="https://i.imgur.com/2BqCNTp.png" alt=""></p><h2 id="在內部元件，要為props來命名"><a href="#在內部元件，要為props來命名" class="headerlink" title="在內部元件，要為props來命名"></a>在內部元件，要為props來命名</h2><p>在命名上有些要注意的地方</p><ul><li>首字母大寫: PostData、SetItems</li><li>駝峰命名法: postData、setItems<br>要注意：在 HTML 中使用時必須使用 kebab-case (短橫線分隔)且應該為小寫。</li></ul><pre><code class="javascript">&lt;div id=&quot;app&quot;&gt; &lt;photo3 :super-url=&quot;imgUrl&quot; &gt;&lt;/photo3&gt;&lt;/div&gt;&lt;script&gt;Vue.component(&quot;photo3&quot;, {  props: [&quot;superUrl&quot;],  template: `&lt;img :src=&quot;superUrl&quot; class=&quot;img-thumbnail alt &gt;&quot;`});&lt;/script&gt;</code></pre><p><img src="https://i.imgur.com/57P1JDW.png" alt=""></p><h2 id="定義-Props-型別驗證"><a href="#定義-Props-型別驗證" class="headerlink" title="定義 Props 型別驗證"></a>定義 Props 型別驗證</h2><ul><li><p>使用型別驗證，會改用大括號，裡面放入props名稱，並用物件形式加入設定的內容</p><ul><li><code>props:{  propC: {  type: String,  required: true,  }}</code></li></ul></li><li><p>其中，可以針對該props 來設定：</p><ul><li><p><code>type</code>型別 ： 可以是 String、Number、Boolean、Array、Object、Date、Function、Symbol</p></li><li><p><code>default</code> ：如果該 prop 沒有接收到傳入的值，就會使用 default 的值作為預設值。</p></li><li><p><code>required</code> ： 是否為必填項，如果設為 true 則表示必須要有值傳入，若沒有，就會出現錯誤提示。</p><pre><code class="javascript">app.component(&#39;props-validation&#39;, {props: {// 單一型別檢查，可接受的型別 String, Number, Object, Boolean, Function(在 Vue 中可使用 Function 驗證型別)// null, undefined 會直接通過驗證propA: Function,// 多個型別檢查propB: [String, Number],// 必要值propC: {  type: String,  required: true,},// 預設值propD: {  type: Number,  default: 300},// 自訂函式propE: {  type: Object,  default() {    return {      money: 300    }  }},// 自訂驗證propF: {  validator(value) {    return value &gt; 1000  }}, },</code></pre><p><a href="https://www.hexschool.com/courses/vue3.html" target="_blank" rel="noopener">六角學院</a><br><a href="https://ithelp.ithome.com.tw/articles/10254050" target="_blank" rel="noopener">[DAY12]跟 Vue.js 認識的30天 - Vue 模組資料傳遞(<code>props</code>)</a></p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因為Vue每個元件都是各自獨立，所以我們無法在各自元件去調整資料，而直接修改另一個元件的資料。&lt;br&gt;所以，要使元件之間可以相互溝通，就需要使用資料傳遞方式。&lt;br&gt;在傳遞方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外層傳遞內層 : props&lt;/li&gt;
&lt;li&gt;內層向外傳遞 : e</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 - v-on 修飾符</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/09/20/Vue-modify/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/09/20/Vue-modify/</id>
    <published>2021-09-20T07:06:46.000Z</published>
    <updated>2021-10-05T08:38:42.809Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><p>修飾符有分為：<br>1.按件修飾符<br>2.滑鼠修飾符<br>3.事件修飾符</p><p><a href="https://codepen.io/Eva-go/pen/RwgMXGN" target="_blank" rel="noopener">codepen</a></p><h2 id="按鍵修飾符"><a href="#按鍵修飾符" class="headerlink" title="按鍵修飾符"></a>按鍵修飾符</h2><h3 id="1-1-別名修飾"><a href="#1-1-別名修飾" class="headerlink" title="1-1. 別名修飾"></a>1-1. 別名修飾</h3><ul><li>在特定按鍵，按下去的時候觸發<ul><li><code>.enter</code>, <code>.tab</code>, <code>.delete</code>, <code>.esc</code>, <code>.space</code>, <code>.up</code>, <code>.down</code>, <code>.left</code>, <code>.righ</code></li></ul></li><li>使用<code>.enter</code>只有再按下 enter 鍵才會觸發</li></ul><pre><code class="html">  &lt;div id=&quot;app&quot;&gt;   &lt;h6 class=&quot;mt-3&quot;&gt;別名修飾&lt;/h6&gt;  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot; @keyup.enter=&quot;trigger(&#39;enter&#39;)&quot;&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {    }  },  methods: {   trigger: function(name) {      console.log(name, &#39;此事件被觸發了&#39;)    },  }}).mount(&#39;#app&#39;)</code></pre><h3 id="1-2-相應按鍵時才觸發的監聽器"><a href="#1-2-相應按鍵時才觸發的監聽器" class="headerlink" title="1-2. 相應按鍵時才觸發的監聽器"></a>1-2. 相應按鍵時才觸發的監聽器</h3><ul><li>僅在按下相應按鍵時才觸發鼠標或鍵盤事件的監聽器</li><li><code>.ctrl</code>, <code>.alt</code>, <code>.shift</code>, <code>.meta</code></li><li>此範例為 <code>@keyup.shift.enter</code><pre><code class="html">&lt;h6 class=&quot;mt-3&quot;&gt;相應按鍵時才觸發的監聽器&lt;/h6&gt;&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot; @keyup.shift.enter=&quot;trigger(&#39;shift + Enter&#39;)&quot;&gt;</code></pre><img src="https://i.imgur.com/gQjWYVy.png" alt=""></li></ul><ol start="2"><li>滑鼠修飾符<br><code>.left</code> 只當點擊鼠標左鍵時觸發。<br><code>.right</code> 只當點擊鼠標右鍵時觸發。<br><code>.middle</code> 只當點擊鼠標中鍵時觸發。</li></ol><ul><li>按下滑鼠右鍵<br><code>&lt;span class=&quot;box&quot; @click.right=&quot;trigger(&#39;right button&#39;)&quot;&gt;</code></li></ul><pre><code class="html">          &lt;h4&gt;滑鼠修飾符&lt;/h4&gt;          &lt;h6 class=&quot;mt-3&quot;&gt;滑鼠修飾符&lt;/h6&gt;          &lt;div class=&quot;p-3 bg-primary&quot;&gt;            &lt;span class=&quot;box&quot; @click.right=&quot;trigger(&#39;right button&#39;)&quot;&gt;            &lt;/span&gt;          &lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/lddG6zT.png" alt=""></p><ol start="3"><li>事件修飾符</li></ol><ul><li>不會限定，是使用滑鼠還是鍵盤，是針對事件本身來進行修飾<br><code>.stop</code> - 調用 <code>event.stopPropagation()</code>。<br><code>.prevent</code> - 調用 <code>event.preventDefault()</code>。<br><code>.capture</code> - 添加事件偵聽器時使用 capture 模式。<br><code>.self</code> - 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調。<br><code>.once</code> - 只觸發一次回調。</li><li>常用的是 <code>&lt;a&gt;</code>外部連結：移除預設事件<pre><code class="html">     &lt;h4&gt;事件修飾符&lt;/h4&gt;        &lt;ul&gt;          &lt;li&gt;.stop - 調用 event.stopPropagation()。&lt;/li&gt;          &lt;li&gt;&lt;strong&gt;.prevent - 調用 event.preventDefault()。&lt;/strong&gt;&lt;/li&gt;          &lt;li&gt;.capture - 添加事件偵聽器時使用 capture 模式。&lt;/li&gt;          &lt;li&gt;.self - 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調。&lt;/li&gt;          &lt;li&gt;.once - 只觸發一次回調。&lt;/li&gt;        &lt;/ul&gt;        &lt;a href=&quot;https://www.google.com/&quot; @click.prevent=&quot;trigger(&#39;prevent&#39;)&quot;&gt;加入 Prevent&lt;/a&gt;</code></pre></li></ul><p>資料來源：<br>六角學院 - Vue 3.js</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NBBY8vo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;修飾符有分為：&lt;br&gt;1.按件修飾符&lt;br&gt;2.滑鼠修飾符&lt;br&gt;3.事件修飾符&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/Eva</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>認識 Node.js</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/06/11/node-1/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/06/11/node-1/</id>
    <published>2021-06-11T06:28:30.000Z</published>
    <updated>2021-10-11T06:33:48.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  之前在安裝套件時，就有先安裝過 Node.js 但從沒有特別去注意，它是應用在哪一塊、可以做什麼？就找了之前 udemy 全端課程，特意拉此部分來認識一下。</p><p>Node.js，讓我們可以將js檔案拿出瀏覽器，並直接和電腦硬件互動</p><ul><li>js: 進行網頁中的實作、函式、行為的建立。動畫的執行、下拉選單</li><li>Node.js: 允許我們用JS 直接與電腦的硬體互動。例如建立桌面應用程式</li><li>此外，還能在別人的電腦或server用Node.js來用行JS。例如：使用者登入 google 並輸入詢問，而你的瀏覽器會發出請求給google servers，而在這些servers 可以真的執行JS程式碼來執行發出的請求</li></ul><p><img src="https://i.imgur.com/49D3LbW.png" alt=""></p><h2 id="如何使用Node"><a href="#如何使用Node" class="headerlink" title="如何使用Node"></a>如何使用Node</h2><ol><li>首先，建立一個資料夾 <code>intro-to-node</code>，在資料夾內建立檔案<code>index.js</code></li><li>在該資料夾位置，運行<code>node index.js</code></li></ol><p><img src="https://i.imgur.com/fsgHKd8.png" alt=""></p><ul><li>印出檔案內的console<br><img src="https://i.imgur.com/bptXcfu.png" alt=""><br><img src="https://i.imgur.com/QQ1BXXI.png" alt=""></li></ul><h2 id="node-REPL"><a href="#node-REPL" class="headerlink" title="node REPL"></a>node REPL</h2><ul><li>Read Evaluation Print Loop</li><li>要進入：就是在終端機下node<br><img src="https://i.imgur.com/gomqsjQ.png" alt=""></li><li>和google 的console有點類似<br><img src="https://i.imgur.com/hOMWtn5.png" alt=""></li><li>取得些提示 con+ tab 會列出相關的可能性<br><img src="https://i.imgur.com/ijg4eJg.png" alt=""><br><img src="https://i.imgur.com/36ZOTYu.png" alt=""><h3 id="離開"><a href="#離開" class="headerlink" title="離開"></a>離開</h3></li><li><code>.exit</code></li><li>control+c 兩次</li><li><code>clear</code> 可以清除終端機的資料<h2 id="native-node-module"><a href="#native-node-module" class="headerlink" title="native node module"></a>native node module</h2></li><li>當安裝node，他就會包含許多建立好的模組<h3 id="使用node-js-進入電腦本地端的資料"><a href="#使用node-js-進入電腦本地端的資料" class="headerlink" title="使用node.js 進入電腦本地端的資料"></a>使用node.js 進入電腦本地端的資料</h3></li><li>nodejs.org/api 可以查到所有native node module，以及使用方式說明的文件</li><li>當要使用 modual<br><img src="https://i.imgur.com/eIDZjer.png" alt=""></li></ul><p><img src="https://i.imgur.com/DDWBxTn.png" alt=""></p><ul><li>警告 jshint esversion:6<br><img src="https://i.imgur.com/zdRpkQ4.png" alt=""></li></ul><h3 id="實際應用練習：複製檔案"><a href="#實際應用練習：複製檔案" class="headerlink" title="實際應用練習：複製檔案"></a>實際應用練習：複製檔案</h3><ul><li>在原本的資料夾內建立新的檔案<br><img src="https://i.imgur.com/ndvRf3A.png" alt=""><br><img src="https://i.imgur.com/24EYw4k.png" alt=""></li><li>在index.jd 輸入該語法<br><img src="https://i.imgur.com/0oGOWsV.png" alt=""></li><li>輸入後要運行 <code>node index.js</code><br><img src="https://i.imgur.com/hCsZbOF.png" alt=""><ul><li>運行之後會看到 <code>file2</code> 建立完成<br><img src="https://i.imgur.com/YR3MLWP.png" alt=""></li></ul></li><li>若是已經建立好的檔案</li><li>在檔案內輸入資訊<code>I am file2</code><br><img src="https://i.imgur.com/9ODoKY5.png" alt=""></li><li>執行 <code>copyFileSync</code><br><img src="https://i.imgur.com/Jae1spC.png" alt=""></li></ul><hr><h2 id="NPM-package-manager"><a href="#NPM-package-manager" class="headerlink" title="NPM package manager"></a>NPM package manager</h2><ul><li>即為 Node Package Manager 的縮寫，他是套件管理工具</li><li>在安裝node 的同時，就已經裝有 NPM<br><a href="https://tw.alphacamp.co/blog/npm-node-package-manager" target="_blank" rel="noopener">NPM是什麼？了解Node Package Manager套件管理機制</a></li><li>npm init<br><img src="https://i.imgur.com/75YtfQR.png" alt=""></li><li>建立一個 package.json<br><img src="https://i.imgur.com/HdtTW6p.png" alt=""><br><img src="https://i.imgur.com/eHkTGKZ.png" alt=""></li></ul><h2 id="如何使用真實npm"><a href="#如何使用真實npm" class="headerlink" title="如何使用真實npm"></a>如何使用真實npm</h2><p><img src="https://i.imgur.com/OQ0764J.png" alt=""></p><ul><li>在要進行安裝的資料夾內，<code>npm install superheroes</code><br><img src="https://i.imgur.com/05qxzDJ.png" alt=""><br><img src="https://i.imgur.com/XOlgK2J.png" alt=""></li><li>參考文件的說明<br><img src="https://i.imgur.com/6xrdtZG.png" alt=""><ul><li>在js檔案中輸入<br><img src="https://i.imgur.com/87emqhz.png" alt=""></li><li>運行 <code>node index.js</code><br><img src="https://i.imgur.com/F9f6Qzj.png" alt=""></li></ul></li></ul><p><a href="https://blog.hiskio.com/what-is-node-js/" target="_blank" rel="noopener">什麼是 Node.js？Node.js 完整介紹懶人包！</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  之前在安裝套件時，就有先安裝過 Node.js 但從沒有特別去注意，它是應用在哪一塊、可以做什麼？就找了之前 udemy 全端課程，特意</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue.js 3 -  多筆資料渲染 v-for</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/17/Vue-v-for/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/17/Vue-v-for/</id>
    <published>2021-05-17T08:20:22.000Z</published>
    <updated>2021-10-05T08:38:36.440Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><h2 id="v-for-呈現多筆陣列"><a href="#v-for-呈現多筆陣列" class="headerlink" title="v-for 呈現多筆陣列"></a><code>v-for</code> 呈現多筆陣列</h2><ul><li><code>v-for= item in peopleArr</code> ， item 為 自定義名稱，後面(peopleArr)填入要迴圈的資料<ul><li>item是表示 peopleArr 陣列中每個單一物件</li></ul></li><li>key ：為帶入陣列的 key 值</li></ul><pre><code class="html">  &lt;div id=&quot;app&quot;&gt;   &lt;h3&gt;v-for 與 key&lt;/h3&gt;  &lt;p&gt; 人員介紹&lt;/p&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(item, key) in peopleArr&quot;&gt;      {{ key }} - {{ item.name}} / {{ item.age }} 歲    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {     peopleArr: [        {          name: &#39;Ken&#39;,          age: 30,          vegan: false        },        {          name: &#39;Wong&#39;,          page: 35,          vegan: false        },        {          name: &#39;Merry&#39;,          age: 60,          vegan: false        },        {          name: &#39;Tom&#39;,          age: 30,          vegan: true        },      ],    }  },}).mount(&#39;#app&#39;)</code></pre><p><a href="https://codepen.io/Eva-go/pen/powVYmN" target="_blank" rel="noopener">codepen</a><br><img src="https://i.imgur.com/TebHrmC.png" alt=""></p><h2 id="物件迴圈"><a href="#物件迴圈" class="headerlink" title="物件迴圈"></a>物件迴圈</h2><ul><li>每個item 就是每個物件的資料</li><li>key值為物件的屬性名稱</li></ul><pre><code class="html">  &lt;div id=&quot;app&quot;&gt;   &lt;h3&gt;v-for 與 key&lt;/h3&gt;  &lt;p&gt; 人員介紹&lt;/p&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(item, key) in peopleObj&quot;&gt;      {{ key }} - {{ item.name}} / {{ item.age }} 歲    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {     peopleObj:{        Salse: {           name: &#39;Ken&#39;,          age: 30,          vegan: false        },        Manager: {          name: &#39;Wong&#39;,          page: 35,          vegan: false        },        HumanResource: {          name: &#39;Merry&#39;,          age: 60,          vegan: false        },        Crew: {           name: &#39;Tom&#39;,          age: 30,          vegan: true        }      },    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/tzjh6Ah.png" alt=""></p><h2 id="v-for-與-key"><a href="#v-for-與-key" class="headerlink" title="v-for 與 key"></a>v-for 與 key</h2><h3 id="v-for-可以使用-index-當作-key-嗎？"><a href="#v-for-可以使用-index-當作-key-嗎？" class="headerlink" title="v-for 可以使用 index 當作 key 嗎？"></a>v-for 可以使用 index 當作 key 嗎？</h3><p>以六角課程為範例說明</p><pre><code class="html">&lt;h3&gt;v-for 與 key &lt;/h3&gt;  &lt;p&gt;菜單&lt;/p&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(item, key) in products&quot;&gt;      {{ key }} - {{ item.name}} / {{ item.price }} 元      &lt;input type=&quot;text&quot;&gt;    &lt;/li&gt;  &lt;/ul&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){    return {     products: [        {          name: &#39;蛋餅&#39;,          price: 30,          vegan: false        },        {          name: &#39;飯糰&#39;,          price: 35,          vegan: false        },        {          name: &#39;小籠包&#39;,          price: 60,          vegan: false        },        {          name: &#39;蘿蔔糕&#39;,          price: 30,          vegan: true        },      ],    },  method:{    reverseArray: function () {      this.products.reverse();    },  }  }}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/GKjdBGd.png" alt=""></p><ul><li><p>反轉之後，並沒有跟著<br><img src="https://i.imgur.com/ALe8vst.png" alt=""></p></li><li><p>綁定key之後</p><pre><code class="html">&lt;li v-for=&quot;(item, key) in products&quot; v-bind:key=&#39;item.name&#39;&gt;</code></pre></li></ul><p><img src="https://i.imgur.com/kbtUwy1.png" alt=""></p><h3 id="v-for-可以使用-index-當作-key-嗎？-1"><a href="#v-for-可以使用-index-當作-key-嗎？-1" class="headerlink" title="v-for 可以使用 index 當作 key 嗎？"></a><code>v-for</code> 可以使用 index 當作 key 嗎？</h3><p>索引是依照位置來判定，所以當資料的位置修改，索引值也會跟著變動，導致後續的渲染錯誤。<br>如果key是會變動的話，可能會導致資料的渲染錯誤</p><h3 id="如果後端提供的資料，沒有唯一索引要如何處理？"><a href="#如果後端提供的資料，沒有唯一索引要如何處理？" class="headerlink" title="如果後端提供的資料，沒有唯一索引要如何處理？"></a>如果後端提供的資料，沒有唯一索引要如何處理？</h3><p>  1.與後端溝通，為何前端要用到key的值<br>  2.拿到資料後，自己產生key，並放入該物件資料中</p><pre><code>使用v-for時，一定要用key 使用v-for時，不要拿索引當作key請使用唯一的值當作key的值</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NBBY8vo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;v-for-呈現多筆陣列&quot;&gt;&lt;a href=&quot;#v-for-呈現多筆陣列&quot; class=&quot;headerlink&quot; title=&quot;v-for 呈現多筆</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
    <category term="v-for" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/v-for/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 -  資料雙向綁定 v-model</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/17/Vue-v-model/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/17/Vue-v-model/</id>
    <published>2021-05-17T08:16:22.000Z</published>
    <updated>2021-10-05T08:38:31.980Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><p>使用<code>v-model</code>來進行資料的「雙向」綁定， v-model 會根據不同的表單類別來更新元素的內容。<br>主要應用在表單類型進行綁定，常見的表單元素像是 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 以及 <code>&lt;select&gt;</code> 等。</p><h2 id="v-model-可以與-input-、textarea-綁定"><a href="#v-model-可以與-input-、textarea-綁定" class="headerlink" title="v-model 可以與 input 、textarea 綁定"></a>v-model 可以與 input 、textarea 綁定</h2><pre><code class="html">  &lt;h3&gt;input&lt;/h3&gt;     &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;name&quot;&gt;          {{ name }}</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      name: &quot;小明&quot;    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/fuPfWXo.png" alt=""></p><p><img src="https://i.imgur.com/Vyon4w6.png" alt=""></p><pre><code class="html">&lt;h3&gt;textarea&lt;/h3&gt;          &lt;textarea cols=&quot;30&quot; rows=&quot;3&quot; class=&quot;form-control&quot; v-model=&quot;text&quot;&gt;&lt;/textarea&gt;          {{ text }}</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      text: &quot;一段文字敘述&quot;    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/T7AMqwY.png" alt=""></p><p><img src="https://i.imgur.com/fxYLTcU.png" alt=""></p><h2 id="checkbox-單選框"><a href="#checkbox-單選框" class="headerlink" title="checkbox 單選框"></a>checkbox 單選框</h2><ol><li>checkbox與p段落連動</li></ol><ul><li>在input加入<code>v-model=&quot;checkAnswer&quot;</code></li><li>P段洛，放入三元運算：用來判斷當checkAnswer為true，顯示’吃飽了’;反之，’還沒’<ul><li>透過選單的勾選，來顯示 checkAnswer 是 true \ false</li></ul></li></ul><pre><code class="html">     &lt;h3&gt;checkbox 單選框&lt;/h3&gt;     &lt;p&gt;小明，你是吃飽沒？&lt;/p&gt;     &lt;p&gt;{{ checkAnswer ? '吃飽了' : '還沒'}}&lt;/p&gt;     &lt;div class=&quot;form-check&quot;&gt;     &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check1&quot; v-model=&quot;checkAnswer&quot;&gt;    &lt;label class=&quot;form-check-label&quot; for=&quot;check1&quot;&gt;小明回覆&lt;/label&gt;          &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      checkAnswer: false,    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/wBR8ESD.png" alt=""></p><p><img src="https://i.imgur.com/cRDgctR.gif" alt=""></p><ol start="2"><li>checkbox 單選延伸</li></ol><ul><li>回傳單一的值，相對使用三元運算比較直觀</li><li><code>checkAnswer2</code> 是空字串，在 input 綁定後，設定false-value、true-value</li><li>將文字綁入：<code>true-value=&quot;吃飽了&quot; false-value=&quot;還沒&quot;</code>，就可以放入資料欄位上</li></ul><pre><code class="html"> &lt;h3&gt;checkbox 單選延伸&lt;/h3&gt;     &lt;p&gt;小明，你是吃飽沒？&lt;/p&gt;     &lt;p&gt;{{ checkAnswer2 }}&lt;/p&gt;     &lt;div class=&quot;form-check&quot;&gt;     &lt;input type=&quot;checkbox&quot; v-model=&quot;checkAnswer2&quot; true-value=&quot;吃飽了&quot; false-value=&quot;還沒&quot; class=&quot;form-check-input&quot;              id=&quot;check2&quot;&gt;     &lt;label class=&quot;form-check-label&quot; for=&quot;check2&quot;&gt;小明回覆&lt;/label&gt;     &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      checkAnswer2: &#39;&#39;,    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/x4aeut8.png" alt=""></p><p><img src="https://i.imgur.com/qvyj7dH.png" alt=""></p><h2 id="checkbox-複選框"><a href="#checkbox-複選框" class="headerlink" title="checkbox 複選框"></a>checkbox 複選框</h2><ul><li><p>資料格式為陣列</p></li><li><p>覆選框的input裡面要有value</p></li><li><p>當綁定v-model，於畫面點選該項目時，會將 input 中的 value，放入的陣列中</p><ul><li>最後將資料渲染於畫面<pre><code class="html">&lt;h3&gt;checkbox 複選框&lt;/h3&gt;&lt;p&gt;你還要吃什麼？&lt;/p&gt;&lt;p&gt;{{ checkAnswer3.join('') }}&lt;/p&gt;&lt;div class=&quot;form-check&quot;&gt;   &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check3&quot; value=&quot;蛋餅&quot; v-model=&quot;checkAnswer3&quot;&gt;   &lt;label class=&quot;form-check-label&quot; for=&quot;check3&quot;&gt;蛋餅&lt;/label&gt;         &lt;/div&gt;&lt;div class=&quot;form-check&quot;&gt;    &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check4&quot; value=&quot;蘿蔔糕&quot; v-model=&quot;checkAnswer3&quot;&gt;    &lt;label class=&quot;form-check-label&quot; for=&quot;check4&quot;&gt;蘿蔔糕&lt;/label&gt;&lt;/div&gt;&lt;div class=&quot;form-check&quot;&gt;  &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check5&quot; value=&quot;豆漿&quot; v-model=&quot;checkAnswer3&quot;&gt;  &lt;label class=&quot;form-check-label&quot; for=&quot;check5&quot;&gt;豆漿&lt;/label&gt; &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({</code></pre></li></ul><p>data(){<br>   return {</p><pre><code>checkAnswer3: [],</code></pre><p>  }<br>},</p></li></ul><p>}).mount(‘#app’)</p><pre><code>![](https://i.imgur.com/V6RUoEF.png)## v-model 修飾符修飾符為畫面上，v-model的資料和實際data中的資料在綁定之間，額外處理的小方法。1. 延遲 Lazy* 輸入文字後，要點擊外面或是按下enter，才會出現* 綁定到html的change事件：當完成輸入框的事件之後，才會綁定到資料集```html   &lt;h3&gt;修飾符&lt;/h3&gt;   &lt;h4 class=&quot;mt-3&quot;&gt;延遲 Lazy&lt;/h4&gt;     {{ lazyMsg }}   &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model.lazy=&quot;lazyMsg&quot;&gt;</code></pre><p><img src="https://i.imgur.com/1Jp0XWl.png" alt=""></p><h2 id="純數值-Number"><a href="#純數值-Number" class="headerlink" title="純數值 Number"></a>純數值 Number</h2><p>需要用戶輸入數值，可先將type改為number,並加入修飾符</p><ul><li><code>&lt;input type=&quot;number&quot;&gt;</code>:輸入框無法輸入文字，只能輸入數字，但型別依然是string</li></ul><pre><code class="html">   &lt;h4 class=&quot;mt-3&quot;&gt;純數值 Number&lt;/h4&gt;     {{ numberMsg }}{{ typeof numberMsg }}   &lt;input type=&quot;number&quot; class=&quot;form-control&quot; v-model=&quot;numberMsg&quot;&gt;</code></pre><p><img src="https://i.imgur.com/48WNFq2.png" alt=""></p><ul><li>要確保輸入的內容為純數字型別：要加修飾符</li></ul><pre><code class="html">   &lt;h4 class=&quot;mt-3&quot;&gt;純數值 Number&lt;/h4&gt;       {{ numberMsg }}{{ typeof numberMsg }}   &lt;input type=&quot;number&quot; class=&quot;form-control&quot; v-model.number=&quot;numberMsg&quot;&gt;</code></pre><p><img src="https://i.imgur.com/ANESock.png" alt=""></p><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>將資料內容的前後空白鍵，刪除</p><ul><li>應用於要輸入e-mail帳號，避免用戶不小心在前後加入空白，而造成資料錯誤<pre><code class="html"> &lt;h4 class=&quot;mt-3&quot;&gt;修剪 Trim&lt;/h4&gt;        這是一段{{ trimMsg }}緊黏的文字 &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model.trim=&quot;trimMsg&quot;&gt;</code></pre><img src="https://i.imgur.com/SCJddsn.png" alt=""></li></ul><p>參考資料：<br><a href="https://book.vue.tw/CH1/1-4-directive.html" target="_blank" rel="noopener">重新認識 Vue.js | Kuro Hsu</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NBBY8vo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;v-model&lt;/code&gt;來進行資料的「雙向」綁定， v-model 會根據不同的表單類別來更新元素的內容。&lt;br&gt;主要應用在表單類型進行綁</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 - 綁定方式多變化</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-bind2/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-bind2/</id>
    <published>2021-05-16T08:17:30.000Z</published>
    <updated>2021-10-05T08:38:07.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="動態屬性綁定-注意大小寫"><a href="#動態屬性綁定-注意大小寫" class="headerlink" title="動態屬性綁定(注意大小寫)"></a>動態屬性綁定(注意大小寫)</h2><ul><li>宣告變數dynamic，將 dynamic 綁定於點擊事件上 <code>:click=&quot;dynamic = dynamic === &#39;disabled&#39; ? &#39;readonly&#39;:&#39;disabled&#39;&quot;</code><ul><li>如果變數結果是 disable 的話就會切換成 readonly，反之，就會切換為 disabled</li></ul></li><li>接著可以將值動態地加入 HTML 屬性上 <code>:[dynamic]</code><ul><li>綁定後，就會發現輸入框隨著切換，有不同效果<pre><code class="html">&lt;h3&gt;動態屬性綁定(注意大小寫)&lt;/h3&gt;&lt;button type=&quot;button&quot;v-on:click=&quot;dynamic = dynamic === &#39;disabled&#39; ? &#39;readonly&#39;:&#39;disabled&#39;&quot;&gt;切換為 {{ dynamic }}&lt;/button&gt;&lt;br&gt;&lt;input type=&quot;text&quot; :[dynamic] :value=&quot;name&quot;&gt;</code></pre><pre><code class="javascript">//JS</code></pre></li></ul></li></ul><p>Vue.createApp({</p><p>  data(){<br>     return {<br>      dynamic: ‘disabled’,<br>      breakfastShop: {<br>      name: ‘奇蹟早餐’,<br>        imgUrl: ‘<a href="https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&#39;" target="_blank" rel="noopener">https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&#39;</a>,<br>        resizeImg: ‘<a href="https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;q=80&#39;" target="_blank" rel="noopener">https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;q=80&#39;</a><br>      },<br>    }<br>  }<br>}).mount(‘#app’)</p><pre><code>`readony`:可以選擇輸入框，但無法輸入值`disabled`:無法點選輸入框![](https://i.imgur.com/GfAhQJk.png)![](https://i.imgur.com/YUf3XZk.png)</code></pre><p>再次補充說明：<br>    1. dynamic = 【這邊是最前面的變數，用來存放後面回傳回來的值】<br>    2. dynamic === ‘disabled’ ? 【這邊就是中間判斷式的部分，判斷 dynamic 變數是否為 ‘disabled’】<br>    3. ‘readonly’:’disabled’ 【這邊就是最後面的值，會依照前方的判斷式來決定回傳 ‘readonly’ 還是 ‘disabled’，如果判斷式結果為 True 則回傳 ‘readonly’ ，反之回傳 ‘disabled’】</p><pre><code>## HTML 樣式綁定樣式綁定是時常使用到的效果，能透過此方式，使顏色改變、增加一點簡易動畫的效果。## 範例解說* 替 box 增加旋轉效果* 綁定class可以用陣列方式、或物件方式來添加，以下範例為物件方式  * 物件key值對應 className，物件的值是對應 true\false(判斷式)  * 若className 有 `-` ， 注意要 &quot;bg-danger&quot;* 事件的綁定 `change()` 透過函式來切換 true\false` this[key] = !this[key];`* 切換是否旋轉、切換背景色 ```html&lt;style&gt;.box {  background-color: var(--bs-light);  border: 1px solid var(--bs-gray);  width: 80px;  height: 80px;}.box {  transition: all .5s;}.box.rotate {  transform: rotate(45deg)}&lt;/style&gt; &lt;h2&gt;切換 Class&lt;/h2&gt;          &lt;h3&gt;物件寫法&lt;/h3&gt;          &lt;!-- 物件key值對應 className，物件的值是對應 true\false --&gt;          &lt;div class=&quot;box&quot; :class=&quot;{ rotate: isTransform ,&#39;bg-danger&#39;:boxColor}&quot;&gt;&lt;/div&gt;          &lt;hr&gt;          &lt;button class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;change(&#39;isTransform&#39;)&quot;&gt;選轉物件&lt;/button&gt;          &lt;button class=&quot;btn btn-outline-primary ms-1&quot; v-on:click=&quot;change(&#39;boxColor&#39;)&quot;&gt;切換色彩&lt;/button&gt;</code></pre><pre><code class="javascript">const App = {  data() {    return {      isTransform: true,      boxColor: false,    };  },  methods: {    change: function (key) {      this[key] = !this[key];    },    addClass(arr) {      this.arrayClass.push(...arr);    }  },};Vue.createApp(App).mount(&#39;#app&#39;);</code></pre><p><img src="https://i.imgur.com/KFqN9hz.png" alt=""></p><p><img src="https://i.imgur.com/b9OCub3.gif" alt=""></p><h3 id="整合為一個物件"><a href="#整合為一個物件" class="headerlink" title="整合為一個物件"></a>整合為一個物件</h3><p>將上個範例的兩個class樣式，整合成一個物件</p><pre><code class="html"> &lt;hr class=&quot;mt-4&quot;&gt;   &lt;h3&gt;物件寫法 2&lt;/h5&gt;         &lt;div class=&quot;box&quot; :class=&#39;classObj&#39;&gt;&lt;/div&gt;</code></pre><pre><code class="javascript">const App = {  data() {    return {      isTransform: true,      boxColor: false,      classObj:{        rotata: true,        &quot;bg-danger&quot;: true,      }    };  },  methods: {    change: function (key) {      this[key] = !this[key];    },    addClass(arr) {      this.arrayClass.push(...arr);    }  },};Vue.createApp(App).mount(&#39;#app&#39;);</code></pre><p><img src="https://i.imgur.com/41AKFc8.png" alt=""></p><p><img src="https://i.imgur.com/StALtsi.png" alt=""></p><h2 id="綁定樣式，陣列寫法"><a href="#綁定樣式，陣列寫法" class="headerlink" title="綁定樣式，陣列寫法"></a>綁定樣式，陣列寫法</h2><ul><li>針對單一元素，加入多個class<ul><li>此方式就不用 true\false 的判斷動作，只要綁定在陣列之中的樣式，就會套入效果</li><li>像是範例，就是使按鈕背景色彩為紅色(‘btn-danger’)、無法點擊(‘disabled’)<pre><code class="html">&lt;h4&gt;陣列寫法&lt;/h4&gt;        &lt;button class=&quot;btn&quot; :class=&quot;[&#39;disabled&#39;,&#39;btn-danger&#39;]&quot;&gt;請操作本元件&lt;/button&gt;        &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;addClass([&#39;btn-primary&#39;, &#39;active&#39;])&quot;&gt;為陣列加入          Class&lt;/button&gt;</code></pre><img src="https://i.imgur.com/RZFOrdK.png" alt=""></li></ul></li></ul><ul><li>另一種，製作陣列，並將陣列放入<ul><li>將arrayClass，綁定在標籤的class上</li><li>在點擊按鈕，綁定點擊事件，<code>addClass(arr)</code>，在該函式傳入參數，將陣列內容加入arrayClass，並套入綁定的標籤上</li><li>相對應的方法：<br><img src="https://i.imgur.com/VFfDXPY.png" alt=""></li></ul></li></ul><pre><code class="html">&lt;h4&gt;陣列寫法&lt;/h4&gt;  &lt;button class=&quot;btn&quot; :class=&quot;arrayClass&quot;  &gt;請操作本元件&lt;/button&gt;  &lt;button type=&quot;button&quot;    class=&quot;btn btn-outline-primary&quot;    v-on:click=&quot;addClass([&#39;btn-primary&#39;, &#39;active&#39;])&quot;&gt;為陣列加入 Class&lt;/button&gt;</code></pre><pre><code class="javascript">const App = {  data() {    return {       // Array 操作      arrayClass: [&#39;&#39;],    };  },  methods: {    addClass(arr) {      this.arrayClass.push(...arr);    }  },};Vue.createApp(App).mount(&#39;#app&#39;);</code></pre><p><img src="https://i.imgur.com/PZd0sKO.png" alt=""></p><ul><li><code>btn-primary</code>:背景色為綠色<br><img src="https://i.imgur.com/S0zLJKb.png" alt=""></li></ul><h4 id="補充：混合寫法"><a href="#補充：混合寫法" class="headerlink" title="補充：混合寫法"></a>補充：混合寫法</h4><ul><li>將bootstrap的class放入，且加入arrayClass<ul><li><code>:class=&quot;[arrayClass,&#39;text-danger&#39;]</code>，也就是除了放入 arrayClass 這個變數之外，我們還可以放入新的class給予不同樣式<pre><code class="html">&lt;h4&gt;陣列寫法&lt;/h4&gt;&lt;button class=&quot;btn&quot; :class=&quot;[arrayClass,&#39;text-danger&#39;]&quot;&gt;請操作本元件&lt;/button&gt;  &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;addClass([&#39;btn-primary&#39;, &#39;active&#39;])&quot;&gt;為陣列加入          Class&lt;/button&gt;</code></pre></li></ul></li></ul><p><img src="https://i.imgur.com/d3dqSTj.png" alt=""></p><h2 id="行內樣式style"><a href="#行內樣式style" class="headerlink" title="行內樣式style"></a>行內樣式style</h2><h4 id="要綁定style的時候"><a href="#要綁定style的時候" class="headerlink" title="要綁定style的時候"></a>要綁定style的時候</h4><ul><li>key會帶入style的屬性(注意要以駝峰式)，如background-color，要改為backgroundColor</li><li>值則是帶入style相對應的值</li></ul><pre><code class="html">&lt;h2&gt;行內樣式&lt;/h2&gt;            &lt;h4&gt;綁定行內樣式&lt;/h4&gt;            &lt;div class=&quot;box&quot; :style=&quot;{backgroundColor:&#39;red&#39;}&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></pre><h3 id="加入準備好的資料格式"><a href="#加入準備好的資料格式" class="headerlink" title="加入準備好的資料格式"></a>加入準備好的資料格式</h3><ul><li><p>將設定好的物件，裡面有包含數個樣式，直接綁定至style<br><img src="https://i.imgur.com/z93Jmam.png" alt=""></p></li><li><p>背景色彩，紅色，邊框5px<br><img src="https://i.imgur.com/lWYdxIi.png" alt=""></p></li></ul><h3 id="同時多個樣式"><a href="#同時多個樣式" class="headerlink" title="同時多個樣式"></a>同時多個樣式</h3><ul><li>以陣列裡面包多個物件<pre><code class="html">&lt;div class=&quot;box&quot; :style=&quot;[styleObject,styleObject2]&quot;&gt;&lt;/div&gt;</code></pre><img src="https://i.imgur.com/11h8F7J.png" alt=""></li></ul><p><img src="https://i.imgur.com/62sDl0J.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;動態屬性綁定-注意大小寫&quot;&gt;&lt;a href=&quot;#動態屬性綁定-注意大小寫&quot; class=&quot;headerlink&quot; title=&quot;動態屬性綁定(注意大小寫)&quot;&gt;&lt;/a&gt;動態屬性綁定(注意大小寫)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;宣告變數dynamic，將 dynamic </summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 - 事件綁定</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-v-on/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-v-on/</id>
    <published>2021-05-16T08:16:30.000Z</published>
    <updated>2021-10-05T08:38:53.199Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><ul><li>建立add、minus兩個按鈕<ul><li>點選add增加數字、點選minus減少數字</li></ul></li><li>讓add按鈕綁定<code>addFn</code>函式：<code>v-on:click=&quot;addFn&quot;</code> <code>on</code> <code>click</code>事件，執行<code>addFn</code>函式</li><li>綁定後，在<code>methods</code>撰寫<code>addFn</code>函式內容，要取得 data 中的 num 才能進行運算 =&gt;<code>this.num++</code></li><li>同理，在minus的按鈕，函式內運算<code>this.num++</code>，並將點擊事件放入<code>button</code><ul><li>v-on:Event 事件綁定，有兩種撰寫方式<br><img src="https://i.imgur.com/IUUcznh.png" alt=""></li></ul></li></ul><pre><code class="html"> &lt;div id=&quot;app&quot;&gt;   &lt;h1&gt;{{num}}&lt;/h1&gt;    &lt;button v-on:click=&quot;addFn&quot;&gt;Add&lt;/button&gt;    &lt;!-- v-on 改為@ --&gt;    &lt;button @click=&quot;MinusFun&quot;&gt;Minus&lt;/button&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {       num: 0    }  },  methods: {    addFn() {       //num.value = num.value + 1;          this.num ++;    },     MinusFun(){        this.num--;     },  }}).mount(&#39;#app&#39;)</code></pre><p><a href="https://codepen.io/Eva-go/pen/bGRLXNW" target="_blank" rel="noopener">codepen</a></p><h2 id="事件與class的綁定"><a href="#事件與class的綁定" class="headerlink" title="事件與class的綁定"></a>事件與class的綁定</h2><ul><li><p>於 box 綁定旋轉的效果 <code>:class=&quot;{ rotate: isTransform }</code></p></li><li><p>在button綁定觸發旋轉的事件</p><pre><code class="html">&lt;style&gt;.box { margin:0 auto;background-color: #fff;border: 1px solid #ccc;width: 80px;height: 80px;}.box {transition: all .5s;}.box.rotate {transform: rotate(45deg)}&lt;/style&gt;&lt;div id=&quot;app&quot;&gt; &lt;h3&gt;觸發事件 與 縮寫*&lt;/h3&gt;&lt;div class=&quot;box&quot; :class=&quot;{ rotate: isTransform }&quot;&gt;&lt;/div&gt;&lt;hr&gt;&lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;changeClass&quot; &gt;選轉物件&lt;/button&gt;&lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({data() {  return {     isTransform: true,  };},methods: {   changeClass() {    this.isTransform =!this.isTransform;  },}};</code></pre></li></ul><p>}).mount(‘#app’)</p><pre><code>## 帶入參數* 建立 `change()` 函式以帶入參數方式，來變化 isTransform 的 true\false```html&lt;h3&gt;帶入參數*&lt;/h3&gt;  &lt;div class=&quot;box&quot; :class=&quot;{ rotate: isTransform }&quot;&gt;&lt;/div&gt;  &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;change(&#39;isTransform&#39;)&quot;&gt;選轉物件&lt;/button&gt;</code></pre><pre><code class="javascript">Vue.createApp({ data() {    return {       isTransform: true,    };  },  methods: {     changeClass() {      this.isTransform =!this.isTransform;    },    change(key) {      this[key] = !this[key];    },  }};}).mount(&#39;#app&#39;)</code></pre><h2 id="動態物件方法"><a href="#動態物件方法" class="headerlink" title="動態物件方法 {}"></a>動態物件方法 {}</h2><ul><li><p>在一個元素上，加入多個事件</p></li><li><p>注意：此方式無法傳入參數</p><pre><code class="html">&lt;h3&gt;動態物件方法 {}&lt;/h3&gt;        &lt;!-- 此方法無法傳入參數 --&gt;&lt;button class=&quot;box&quot; @=&quot;{    mousedown:down,    mouseup:up }&quot;&gt;&lt;/button&gt;</code></pre><pre><code class="javascript">Vue.createApp({data() {  return {     isTransform: true,  };},methods: {   changeClass() {    this.isTransform =!this.isTransform;  },  change(key) {    this[key] = !this[key];  },  down() {    console.log(&quot;按下&quot;);  },  up() {    console.log(&quot;放開&quot;);  }}};</code></pre></li></ul><p>}).mount(‘#app’)</p><pre><code>![](https://i.imgur.com/qO3AcxL.gif)[codepen](https://codepen.io/Eva-go/pen/abwYwPa)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NBBY8vo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立add、minus兩個按鈕&lt;ul&gt;
&lt;li&gt;點選add增加數字、點選minus減少數字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;讓add按鈕</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 - 屬性綁定</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-bind/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-bind/</id>
    <published>2021-05-16T06:56:28.000Z</published>
    <updated>2021-10-05T08:38:00.097Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><p>  屬性綁定可以輕鬆的將data中的資料，與HTML的標籤屬性綁定，這樣一來可以動態的變更資料。</p><h2 id="原本-HTML-的樣子"><a href="#原本-HTML-的樣子" class="headerlink" title="原本 HTML 的樣子"></a>原本 HTML 的樣子</h2><ul><li>img中原本有個圖片資料</li><li>v-bind是指令，<code>：</code>後接的是HTML的屬性</li></ul><pre><code class="html">  &lt;h3&gt;綁定屬性 v-bind&lt;/h3&gt;  &lt;p&gt;{{ breakfastShop.name }}&lt;/p&gt;  &lt;img src=&quot;https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&quot; class=&quot;square-img&quot; alt=&quot;&quot;&gt;</code></pre><pre><code class="javascript">//JSVue.createApp({  data(){     return {      breakfastShop: {        name: &#39;奇蹟早餐&#39;,        imgUrl: &#39;https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&#39;,        resizeImg: &#39;https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;q=80&#39;      },    }  }}).mount(&#39;#app&#39;)</code></pre><h3 id="修改-gt-綁定JS中-breakfastShop-物件資料內容"><a href="#修改-gt-綁定JS中-breakfastShop-物件資料內容" class="headerlink" title="修改 =&gt; 綁定JS中 breakfastShop 物件資料內容"></a>修改 =&gt; 綁定JS中 breakfastShop 物件資料內容</h3><p><img src="https://i.imgur.com/H3UzhrB.png" alt=""></p><ul><li>將原本<code>src</code> =&gt; <code>v-bind:src=&quot;breakfastShop.imgUrl&quot;</code><ul><li>此外title 屬性，也能照樣綁定喔！  <pre><code class="html">&lt;h3&gt;綁定屬性 v-bind&lt;/h3&gt;      &lt;p&gt;{{ breakfastShop.name }}&lt;/p&gt;      &lt;img v-bind:src=&quot;breakfastShop.imgUrl&quot; class=&quot;square-img&quot; v-bind:title=&quot;breakfastShop.name&quot; alt=&quot;&quot;&gt;</code></pre><img src="https://i.imgur.com/Xhtez9s.png" alt=""></li></ul></li></ul><h3 id="縮寫形式"><a href="#縮寫形式" class="headerlink" title="縮寫形式"></a>縮寫形式</h3><ul><li>留下冒號<pre><code class="html">&lt;h3&gt;縮寫形式 &lt;code&gt;:&lt;/code&gt;&lt;/h3&gt;        &lt;img :src=&quot;breakfastShop.imgUrl&quot; class=&quot;square-img&quot; :title=&quot;breakfastShop.name&quot; alt=&quot;&quot;&gt;</code></pre></li></ul><pre><code>## 其他屬性的綁定* 當他是飽的狀態，就無法按下送出    * 預設是false 所以可以送出表單    * 但當點擊狀態切換(isFull: true)，此時就會無法點擊送出按鈕* 由範例可得知，可以透過 true\false 的狀態切換，製造出不同互動效果```html &lt;h3&gt;更多屬性綁定&lt;/h3&gt;          小明還想點餐：          &lt;form action=&quot;&quot;&gt;            &lt;input type=&quot;text&quot; value=&quot;我要吃蘿蔔糕&quot;&gt;            &lt;button type=&quot;submit&quot; :disabled=&quot;isFull&quot;&gt;送出&lt;/button&gt;          &lt;/form&gt;          &lt;button type=&quot;button&quot; v-on:click=&quot;change(&#39;isFull&#39;)&quot;&gt;狀態切換&lt;/button&gt;</code></pre><p><img src="https://i.imgur.com/GVQXr8f.png" alt=""></p><ul><li>預設是false，所以可以點擊送出<br><img src="https://i.imgur.com/4HmkD5f.png" alt=""></li></ul><p><img src="https://i.imgur.com/w91MEBD.png" alt=""></p><p>資料來源：<br>六角學院 - Vue.js 3 課程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NBBY8vo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  屬性綁定可以輕鬆的將data中的資料，與HTML的標籤屬性綁定，這樣一來可以動態的變更資料。&lt;/p&gt;
&lt;h2 id=&quot;原本-HTML-的樣子&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 - 起手式</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-basic/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-basic/</id>
    <published>2021-05-16T05:56:28.000Z</published>
    <updated>2021-10-05T08:38:50.375Z</updated>
    
    <content type="html"><![CDATA[<p>今天要介紹的是 Vue.js3 的起手式，主要參考<a href="https://vuejs.org/v2/guide/#Getting-Started" target="_blank" rel="noopener">官方文件</a>來學習</p><h3 id="載入方式"><a href="#載入方式" class="headerlink" title="載入方式"></a>載入方式</h3><pre><code class="javascript">&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></pre><h3 id="引入之後，在index-html檔案"><a href="#引入之後，在index-html檔案" class="headerlink" title="引入之後，在index.html檔案"></a>引入之後，在<code>index.html</code>檔案</h3><pre><code class="html"> &lt;div id=&quot;app&quot;&gt;    &lt;h1&gt;{{message}}&lt;/h1&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">//JSVue.createApp({  data(){     return {      message: &#39;I am Eva!&#39;    }  }}).mount(&#39;#app&#39;)</code></pre><ul><li>畫面就會出現相應的文字<br><img src="https://i.imgur.com/l7MiTCV.png" alt=""></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天要介紹的是 Vue.js3 的起手式，主要參考&lt;a href=&quot;https://vuejs.org/v2/guide/#Getting-Started&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文件&lt;/a&gt;來學習&lt;/p&gt;
&lt;h3 id=&quot;載入方</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>SCSS- ClothesStore</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/03/05/scss-ClothesStore/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/03/05/scss-ClothesStore/</id>
    <published>2021-03-05T06:26:19.000Z</published>
    <updated>2021-10-05T08:42:35.152Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/v5qnxzN.png" alt=""></p><p><a href="https://eva813.github.io/Eva_portfolio/sass-ClothesStore/ClothesStore.html" target="_blank" rel="noopener">成品</a></p><h2 id="scss-檔案的建立"><a href="#scss-檔案的建立" class="headerlink" title="scss 檔案的建立"></a>scss 檔案的建立</h2><p>所建立的各分檔，個別會負責不同的區塊，並透過<code>@import</code>放入主要的sass檔</p><ul><li>main.scss 引入其他分檔<br><img src="https://i.imgur.com/PLNNF5k.png" alt=""></li><li>abstracts<ul><li>/_variables.scss：設定常用的變數，如：顏色、字體大小</li><li>/_mixin.scss：設定某些區段中，重複用到的樣式，並於該區段要使用的時候引用</li></ul></li><li>base<ul><li>/_base.scss：為設定大框架，如html、body、container，等主幹的大小、字型的設定</li></ul></li><li>components:放置部分功能元件<ul><li>/_button.scss：按鈕的設定</li><li>/_heading.scss：標題</li><li>/_logo.scss</li><li>/_dropdown.scss</li></ul></li><li>layout （設計網頁版面配置(Layout)）<ul><li>/_header.scss</li><li>/_navigation.scss</li><li>/_products.scss</li><li>/_slidshow.scss</li><li>/_footer.scss</li></ul></li><li>pages 通常是用來放置其他分頁（網頁內會連結到其他相關分頁）</li><li>venders 放置外部套件</li></ul><p><img src="https://i.imgur.com/GmeHZ7w.png" alt=""></p><h3 id="1-基礎設置"><a href="#1-基礎設置" class="headerlink" title="(1)基礎設置"></a>(1)基礎設置</h3><h4 id="1-1-Grid-練習"><a href="#1-1-Grid-練習" class="headerlink" title="(1.1)Grid 練習"></a>(1.1)Grid 練習</h4><p><code>_base.scss</code></p><ul><li>總共要設置10欄</li><li>列的則是設置4區塊</li><li>並設置每個區塊都有1.6rem的gap<pre><code class="scss">.container{  display: grid;  grid-template-columns:minmax(6rem,1fr) repeat(8,minmax(min-content,16 rem))   minmax(6rem,1fr);//10欄  grid-template-rows: repeat(4,min-content);  grid-row-gap:1.6rem ;</code></pre></li></ul><p>}</p><pre><code>![](https://i.imgur.com/QA3NLgt.png)* `minmax(min, max)``minmax(6rem,1fr)`:設定格線最小6rem，最大1frfr 單位就是為了格線布局而生，fraction，中文意思是分數，當使用在網格軌道上時，可以直接想像成 &quot;我的這個空位要佔有總 fr 數量的幾等份&quot;* `repeat(8,minmax(min-content,16rem))`:重複8個，最小：min-content;最大16rem    * repeat() 重複網格線及間距     * max-content/min-content 最小內容尺寸/最大內容尺寸        * max-content：給予網格區域所需的最大尺寸空間，內容盡可能避免折行。        * min-content：給予網格區域所需的最小尺寸空間，內容盡可能的折行，但不會溢出邊界。[[Day19] grid-template 屬性之 rows/columns](https://ithelp.ithome.com.tw/articles/10248418)[Min &amp; Max Content Sizing in CSS Grid — 1/3 Flexibility](https://www.youtube.com/watch?v=lZ2JX_6SGNI)[CSS Layout很難？用這招30秒就讓你輕鬆生出網頁版面！](http://csscoke.com/2013/10/17/css-layout-generator/)---#### (1.2)常用變數* `` _variable.scss``map與function的搭配使用* 設定不同的顏色，並設置函式，以利後續使用```scss$colors:(  primary:#333,  secondary:#ffe,  tertiary:#f2f0f1,  quaternary:#f5b149);//創造函式//函式名稱為color代入參數為$color-name，使用map代入物件，最為回傳的結果@function color($color-name){  @return map-get($map: $colors, $key:$color-name )}$font-size:(  xl:3rem,  lg:2.5rem,  md:2rem,  sm:1.8rem,  xs:1.6rem);@function size($size){  @return map-get($map: $font-size, $key:$size )}</code></pre><hr><h3 id="2-layout-header-scss"><a href="#2-layout-header-scss" class="headerlink" title="(2)layout/_header.scss"></a>(2)<code>layout/_header.scss</code></h3><p>header的版面</p><ul><li><code>grid-column: 1/-1; (1/11) grid-row: 1/2;</code>表示所佔的區隔<br><img src="https://i.imgur.com/C1W2Urq.png" alt=""></li><li>而在header這區，在設置grid劃分區塊<ul><li>有9欄</li><li>列設置3區塊<pre><code class="scss">.header{grid-column: 1/-1; //1/11grid-row: 1/2;display: grid;grid-template-columns: 1fr repeat(7,minmax(min-content,16rem)) 1fr;grid-template-rows: repeat(3,min-content);grid-gap: 2rem;}</code></pre></li></ul></li><li><code>grid-column: 1/-1; //1/11  ; grid-row: 1/2;</code> <a href="https://stackoverflow.com/questions/49005233/whats-the-difference-between-grid-column-value-1-1-and-1-2" target="_blank" rel="noopener">What’s the difference between grid-column value 1/1 and 1/2?</a></li></ul><h3 id="3-logo的大小設置"><a href="#3-logo的大小設置" class="headerlink" title="(3)logo的大小設置"></a>(3)logo的大小設置</h3><p><code>_logo.scss</code></p><ul><li>注意：設立所設定的欄和列的區塊，是在header設置的grid底下<br><img src="https://i.imgur.com/OEkTxyS.png" alt=""></li></ul><pre><code class="scss">.logo{  grid-column: 1/2;  grid-row: 1/2;  padding: 1rem;  //class=&quot;logo-img&quot;  &amp;-img{      width: 10rem;    height: 100%;  }}</code></pre><h3 id="4-heading"><a href="#4-heading" class="headerlink" title="(4)heading"></a>(4)heading</h3><ul><li>標題的位置一樣利用grid來設定</li><li>在文字的字體、大小、間距進行調整<br><code>_heading.scss</code><pre><code class="scss">.heading{grid-column: 4/7;grid-row: 2/3;text-align: center;&amp;-text{  font-family: &#39;Great Vibes&#39;,cursive;  font-size: size(xl)*2; //結果為6rem  font-weight: lighter;  letter-spacing: 0.5rem;}}</code></pre><img src="https://i.imgur.com/JfkrqEb.png" alt=""></li></ul><h3 id="5-heading中的navigation"><a href="#5-heading中的navigation" class="headerlink" title="(5)heading中的navigation"></a>(5)heading中的navigation</h3><p> <code>layout/_navigation.scss</code></p><ul><li><code>.first-nav</code>為放置右上角</li><li><code>.second-nav</code>為放置下方，中間的位置<pre><code class="scss"></code></pre></li></ul><p>.first-nav{<br>  //放在最後三欄<br>  grid-column: 7/10;<br>  grid-row: 1/2;<br>  @include navigation;<br>}<br>.second-nav{<br>  grid-column: 3/8;<br>  grid-row: 3/4;<br>  @include navigation;<br>}<br>.dropdown{<br>  display: none;<br>}</p><pre><code>![](https://i.imgur.com/PWJoEoH.png)* @mixin，創造navigstion共用樣式    * 使navigation的li-list可以橫向分散排列    * 設定hover效果，使游標摸到顏色變淺`lighten()````scss//.first-nav-list@mixin navigation{  &amp;-list{      display: flex;    justify-content: space-around;    align-items: center;    height: 100%;  }  &amp;-item{    list-style: none;  }  &amp;-link{    color: color(primary);    text-decoration: none;    font-size: size(sm);    transition: all .3s;    &amp;:hover{      color: lighten(color(primary),40%);    }  }}</code></pre><p><img src="https://i.imgur.com/t6KdpJ9.png" alt=""></p><h3 id="6-下拉選項：dropdown-list的箭頭符號"><a href="#6-下拉選項：dropdown-list的箭頭符號" class="headerlink" title="(6)下拉選項：dropdown list的箭頭符號"></a>(6)下拉選項：dropdown list的箭頭符號</h3><p><code>components/_dropdown.scss</code></p><ul><li><code>font-family: &#39;Font Awesome 5 Free&#39;</code>：把icon當作字體使用<br><a href="https://yuwensaf.github.io/6110beb1/" target="_blank" rel="noopener">使用 fontAwesome 動態加入連結 icon</a></li></ul><pre><code class="scss">.dropdown-li{  position: relative; //創造下拉選單的箭頭符號 &amp;::after{   font-family: &#39;Font Awesome 5 Free&#39;;   content: &#39;\f078&#39;;   font-weight:bold ; }}</code></pre><p><img src="https://i.imgur.com/4pg8oNR.png" alt=""></p><ul><li><p>製作下拉式選單的三角形</p><ul><li>先利用border製作出上、下、左、右的三角<pre><code class="scss">.dropdown{&amp;::before{content: &#39;&#39;;display: block;position: absolute;top: -1.5rem;left: 7.3rem;border-top: 15px solid red;border-right: 15px solid green;border-bottom: 15px solid orange;border-left: 15px solid blue;</code></pre></li></ul><p>}<br>}</p><pre><code>![](https://i.imgur.com/chq5TM1.png)</code></pre></li><li><p>調整上方各色的三角形，並留下要保留的一個三角形</p></li></ul><pre><code class="scss">  &amp;::before{    content: &#39;&#39;;    display: block;    position: absolute;    top: -1.5rem;    left: 7.3rem;    // border-top: 15px solid red;    border-right: 15px solid transparent;    border-bottom: 15px solid orange;    border-left: 15px solid transparent;  }</code></pre><p><img src="https://i.imgur.com/YhxKI4C.png" alt=""></p><ul><li><code>right: -2.8rem;</code>:條整位置對齊正方形list</li><li><code>border-bottom: 15px solid darken(color(tertiary),5%);</code>：修改三角形的顏色，使整體為灰色</li></ul><pre><code class="scss">.dropdown{  position: absolute;  top: 3rem;  right: -2.8rem; //使整個往右移動  width: 10rem;  background-color:darken(color(tertiary),5%);  @include navigation;  padding: 1rem;  text-align: center;  border-radius: 0.2rem;  &amp;::before{    content: &#39;&#39;;    display: block;    position: absolute;    top: -1.5rem;    left: 7.3rem;    // border-top: 15px solid red;    border-right: 15px solid transparent;    border-bottom: 15px solid darken(color(tertiary),5%);    border-left: 15px solid transparent;  }</code></pre><p><img src="https://i.imgur.com/JMI2Zgc.png" alt=""></p><ul><li><p>hover使下拉選單消失\出現</p><ul><li>建立游標摸到<code>.dropdown-li</code>，會顯示下拉選單</li><li><code>visibility</code>、<code>opacity</code><pre><code class="scss">.dropdown-li{</code></pre></li></ul><p>&amp;:hover .dropdown{<br>visibility: visible;<br>opacity: 1;<br>}<br>}</p></li></ul><p>.dropdown{<br>visibility: hidden;<br>   opacity: 0;<br>  transition: opicity .3s;<br>}</p><pre><code>![](https://i.imgur.com/vY3cbuj.gif)![](https://i.imgur.com/0zOvMTI.png)## 使slideshow可以跳轉(如幻燈片效果)* 使用`@keyframes`做出動畫位置* Animation Duration(動畫整個完成一次的時間): (fade-in + visible) × images = duration.    * 假設你要讓圖片花1秒fade-in，再讓他顯示1秒。而你共有3張圖片，所以總共所需時間為6秒。* Animation Delay:(fade-in + visible) × (ordinal position − 1) = delay.* Keyframes: 100 ÷ animation duration = percentage for 1 second.(100/20=5%)，5％為1秒，所以4秒大約是20％的位置```scss.slideshow{ &amp;-slide{    //使圖片、文字都放在同一個位置  position: absolute;   top: 0;   left: 0;   width: inherit;   height: inherit;//預設先讓slide消失   visibility: hidden;    opacity: 0;   animation: slideshow 20s linear infinite ;   }}@keyframes slideshow{   //主要是0~20時圖片顯示，之後都消失，讓其他圖片得宜顯示  //0~2%創造fade的效果  0%{    visibility: hidden;    opacity: 0;  };  2%{    visibility: visible;    opacity: 1;  }  //2%~18% slide要顯示  18%{    visibility: visible;    opacity: 1;  }  //18~20要消失  20%{    visibility: hidden;    opacity: 0;  }  100%{    visibility: hidden;    opacity: 0;  }}</code></pre><p><a href="https://snook.ca/archives/html_and_css/simplest-css-slideshow" target="_blank" rel="noopener">Simplest CSS Slideshow</a><br><a href="https://www.smashingmagazine.com/2012/04/pure-css3-cycling-slideshow/#4" target="_blank" rel="noopener">CSS3 Keyframes Animation</a><br><a href="https://pjchender.blogspot.com/2015/12/cssanimation-keyframes.html" target="_blank" rel="noopener">[筆記] CSS動畫Animation — @keyframes</a><br><a href="https://www.oxxostudio.tw/articles/201803/css-animation.html" target="_blank" rel="noopener">完整解析 CSS 動畫 ( CSS Animation )</a></p><ul><li>設置延遲時間(4秒)，使每張圖片呈現(css的撰寫方式)<ul><li><code>:nth-child()</code>選擇第幾張圖片<pre><code class="css">/*設置延遲時間，讓每張slide呈現4秒替換*/.slideshow-slide:nth-child(1){animation-delay: 0s;}.slideshow-slide:nth-child(2){animation-delay: 4s;}.slideshow-slide:nth-child(3){animation-delay: 8s;}.slideshow-slide:nth-child(4){animation-delay: 12s;}.slideshow-slide:nth-child(5){animation-delay: 16s;}</code></pre></li></ul></li></ul><ul><li>將上方轉化為<code>@each</code>的寫法<ul><li>先創造一個列表<code>$animlist</code>，在each迴圈時要但進去的項目</li><li>在each迴圈中<code>.slideshow-slide:nth-child</code>放入slide of number(取得列表中第一個值)，後面接著寫下要執行的動作<code>animation-delay: nth($item,2);</code></li></ul></li></ul><pre><code class="scss">///改寫為=&gt;$animlist:第幾個 延遲秒數,//#{nth($item,1)}: 1表示(2 4s)，第一個值=2$animList:1 0s,2 4s,3 8s,4 12s, 5 16s;@each $item in $animList {   .slideshow-slide:nth-child(#{nth($item,1)}){     animation-delay: nth($item,2);     //2就是指秒數   }}</code></pre><p><a href="https://www.youtube.com/watch?v=O4hPOMX8AaU" target="_blank" rel="noopener">Sass Tutorials #9 - Nth Function In Lists</a></p><h2 id="產品區下方see-more按鈕"><a href="#產品區下方see-more按鈕" class="headerlink" title="產品區下方see more按鈕"></a>產品區下方see more按鈕</h2><ul><li>html part<ul><li>有三個<code>arrow-line</code>，於後續在scss中會運用此三個div製作箭頭符號<pre><code class="html">&lt;div class=&quot;products-btn&quot;&gt;  &lt;a href=&quot;#&quot; class=&quot;btn&quot;&gt;    &lt;div class=&quot;btn-bg&quot;&gt;      &lt;div class=&quot;arrow&quot;&gt;        &lt;div class=&quot;arrow-line arrow-line-1&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;arrow-line arrow-line-2&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;arrow-line arrow-line-3&quot;&gt;&lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;span class=&quot;btn-text&quot;&gt;      See More    &lt;/span&gt;  &lt;/a&gt;&lt;/div&gt;</code></pre></li></ul></li></ul><ul><li><p>創造arrow<br><code>transform: rotateZ</code> :Z軸 (使其斜向旋轉45度)</p><pre><code class="scss">&amp;-line {    height: .2rem;    background-color: color(secondary);    position: absolute;}  &amp;-line-2 {    width: 1rem;    //透過旋轉線2,線3使其成為交叉    transform: rotateZ(45deg);  }  &amp;-line-3 {    width: 1rem;    transform: rotateZ(-45deg);  }</code></pre><p><img src="https://i.imgur.com/s62AXMY.png" alt=""></p></li></ul><p><code>transform-origin去設定物件變形的起始點</code></p><pre><code class="scss">&amp;-line {      height: .2rem;      background-color: color(secondary);      position: absolute;      //將x變成arrow &gt; ;因預設原點是在center，所以須將原點拉到右邊，形成箭頭      transform-origin:right ;  }</code></pre><p><img src="https://i.imgur.com/wbRTSeb.png" alt=""></p><p><a href="https://juejin.cn/post/6844903780937367565" target="_blank" rel="noopener">CSS 属性篇(三)：transform-origin属性</a></p><ul><li>增加橫向直線</li></ul><pre><code class="scss">&amp;-line-1{      width: 2rem;      transform: translateX(-0.7rem);    }</code></pre><p><img src="https://i.imgur.com/sdIdcZI.png" alt=""></p><ul><li>設置動畫，透過摸到箭頭，會延展<ul><li>bg的的寬度進行延展</li></ul></li></ul><pre><code class="scss">.btn{&amp;:hover .btn-bg{    width: 18rem;  }  &amp;-bg{     width: 4rem;     height: 4rem;    background-color: color(primary) ;    //使其變圓形     border-radius: 5rem ;    position: absolute;    left: 0;    transition: width .2s ;  }   &amp;-line-1{       width: 0;      transform: translateX(-0.7rem);    }    //* line-1預設看不到，透過hover出現  }</code></pre><p><img src="https://i.imgur.com/vQjUp05.gif" alt=""></p><ul><li><p>使see more 出現</p><ul><li>先修改see more的顏色</li><li>即便改變顏色，還是會被bg覆蓋，所以要調整z-index<pre><code class="scss">.btn{</code></pre></li></ul><p>&amp;:hover .btn-text{<br>  color: color(secondary);<br> }</p></li></ul><p>  &amp;-text{<br>    font-size: size(xs);<br>    text-transform: uppercase;<br>    color: color(primary);<br>    z-index: 10;<br>  }</p><p>}</p><pre><code>![](https://i.imgur.com/bo8TJLy.gif)* 將箭頭向右移動，並呈現完整箭頭符號    * 設定`.arrow`右移，並讓line-1得宜呈現並延展```scss.btn{   &amp;:hover .arrow{    transform: translateX(1rem);  }   &amp;:hover .arrow-line-1{    width: 2rem;  } .arrow{    @include flexPosition;    transition: transform .2s ;    &amp;-line-1{      width: 0;      transform: translateX(-0.7rem);      transition: width .2s ;      }    }}</code></pre><p><img src="https://i.imgur.com/9pptj0t.gif" alt=""></p><h2 id="表尾區塊"><a href="#表尾區塊" class="headerlink" title="表尾區塊"></a>表尾區塊</h2><p><img src="https://i.imgur.com/yHeHkU8.png" alt=""></p><h3 id="1-footer區塊的樣式"><a href="#1-footer區塊的樣式" class="headerlink" title="(1)footer區塊的樣式"></a>(1)footer區塊的樣式</h3><p> <code>layout/_footer.scss</code></p><ul><li>footer有三區，中間是表單，左右邊分別為資訊連結<pre><code class="scss">.footer{</code></pre></li></ul><p>  grid-column: 1/-1;<br>  grid-row: 4/5;<br>  @include flexPosition(space-around);<br>  padding:5rem 0 ;<br>  border-top: .1rem solid color(primary);<br>}</p><pre><code>![](https://i.imgur.com/tSWtPTW.png)* 透過`＠mixin`一次修改2區的條例項目（`mixin_scss`）    * 其中包含文字大小、樣式、hover效果```scss@mixin footerList {  &amp;-heading{    font-size: size(lg);    color:color(primary);  }  &amp;-item{    list-style: none;    margin: 1rem 0;  }  &amp;-link{    font-size: size(xs);    text-decoration: none;    color: lighten(color(primary),15%);    transition: color .2s ;    &amp;:hover{      color:lighten(color(primary),35%)    }  }}</code></pre><p><img src="https://i.imgur.com/X9BA5K0.gif" alt=""></p><h3 id="2-社群icon"><a href="#2-社群icon" class="headerlink" title="(2)社群icon"></a>(2)社群icon</h3><pre><code class="scss">.social-icons{    display: flex;    justify-content: space-between;    padding: 1rem;    box-sizing: border-box;    &amp;-item{      list-style: none;    }    &amp;-link{      text-decoration: none;      width: 4rem;      height: 4rem;      border:.1rem solid color(primary);    }</code></pre><p><img src="https://i.imgur.com/IZzM7eK.png" alt=""></p><ul><li><code>border-radius: 100%;</code>調整為圓形外框</li><li>a標籤的前放為i的圖示，所以flex的設置，是針對<code>social-icons-lik</code><br><img src="https://i.imgur.com/kd6jbyV.png" alt=""></li><li>利用<code>@each</code>來套入icon的顏色</li></ul><pre><code class="scss">&amp;-link{      text-decoration: none;      width: 4rem;      height: 4rem;      border:.1rem solid color(primary);      //修改icon成圓形      // display: block;      border-radius: 100%;      @include flexPosition;      i{        font-size: size(md);      }    }$socialMediaColors: 1 #3b5998, 2 #b31217, 3 #dc4e41, 4 #55acee, 5 #517fa4, 6 #0077b5;@each $color in $socialMediaColors {  .social-icons-item:nth-child(#{nth(($color),1)}) .social-icons-link{    color:nth($color,2);    border:.1rem solid nth($color,2);  }}    </code></pre><ul><li>轉為css<pre><code class="css">.social-icons-item:nth-child(1) .social-icons-link {color: #3b5998;border: 0.1rem solid #3b5998; }</code></pre></li></ul><p>.social-icons-item:nth-child(2) .social-icons-link {<br>  color: #b31217;<br>  border: 0.1rem solid #b31217; }</p><p>.social-icons-item:nth-child(3) .social-icons-link {<br>  color: #dc4e41;<br>  border: 0.1rem solid #dc4e41; }</p><p>.social-icons-item:nth-child(4) .social-icons-link {<br>  color: #55acee;<br>  border: 0.1rem solid #55acee; }</p><p>.social-icons-item:nth-child(5) .social-icons-link {<br>  color: #517fa4;<br>  border: 0.1rem solid #517fa4; }</p><p>.social-icons-item:nth-child(6) .social-icons-link {<br>  color: #0077b5;<br>  border: 0.1rem solid #0077b5; }</p><pre><code>![](https://i.imgur.com/8aWeLiw.png)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/v5qnxzN.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/sass-ClothesStore/ClothesStore.</summary>
      
    
    
    
    
    <category term="grid" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/grid/"/>
    
    <category term="SCSS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/SCSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 預處理器- Sass/SCSS 基本介紹</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/03/05/sass-1/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/03/05/sass-1/</id>
    <published>2021-03-05T01:41:46.000Z</published>
    <updated>2021-10-05T08:41:10.204Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/e59PuUk.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CSS預處理器，增加了一些編寫的特性，也可以說是運用程式化的方式寫CSS。</p><ul><li>其中SASS最廣泛使用：Sass包含SASS與SCSS兩種<ul><li>兩者之間不同之處有以下兩點：</li><li>1.文件擴展名不同，Sass 是以“.sass”後綴為擴展名，而SCSS 是以“.scss”後綴為擴展名</li><li>2.語法書寫方式不同，Sass是以嚴格的縮進式語法規則來書寫，不帶大括號({})和分號(;)，而SCSS的語法書寫和我們的CSS語法書寫方式非常類似。<h2 id="安裝sass"><a href="#安裝sass" class="headerlink" title="安裝sass"></a>安裝sass</h2><a href="https://github.com/sass/sass">sass-github</a></li></ul></li><li>在專案底下，安裝<pre><code class="javascript">npm install -g sass</code></pre></li><li>安裝後，建立<code>index.scss</code>檔案<br><img src="https://i.imgur.com/cQtE8T5.png" alt=""></li><li>手動轉擋<br><img src="https://i.imgur.com/6TYjGnV.png" alt=""><ul><li>會出現css檔案<br><img src="https://i.imgur.com/SHoaMLN.png" alt=""></li></ul></li></ul><h2 id="使用node-sass編譯"><a href="#使用node-sass編譯" class="headerlink" title="使用node-sass編譯"></a>使用node-sass編譯</h2><ol><li>先取得package.json檔案<br>安裝語法：<code>npm init --yes</code><br>(要注意安裝的路徑位置)<br><img src="https://i.imgur.com/f9QFcH0.png" alt=""><br><img src="https://i.imgur.com/4B623eU.png" alt=""></li><li>安裝node-sass</li></ol><ul><li><code>npm i -g node-sass</code>  (i -&gt; install)<br><img src="https://i.imgur.com/vgGzk85.png" alt=""></li><li>查尋安裝是否完成<br><img src="https://i.imgur.com/EdeoV1H.png" alt=""></li></ul><ol start="3"><li>將檔案編譯為css<br>建立css(資料夾)<h3 id="使用watch，使每次修改sass檔案時，會自動編譯到css中"><a href="#使用watch，使每次修改sass檔案時，會自動編譯到css中" class="headerlink" title="使用watch，使每次修改sass檔案時，會自動編譯到css中"></a>使用watch，使每次修改sass檔案時，會自動編譯到css中</h3></li></ol><ul><li>在package.jason檔案中的<code>&quot;scripts&quot;</code></li><li>要注意編譯資料的位置<ul><li>css :為資料夾路徑 </li><li>scss/main.scss:建立的css路徑</li></ul></li></ul><pre><code class="javascript"> &quot;scripts&quot;: {    &quot;watch&quot;: &quot;node-sass -o css scss/main.scss -w&quot;  }</code></pre><ul><li>在終端機要輸入<br><code>npm run watch</code>，<code>control+c</code>退出<br><img src="https://i.imgur.com/KNReHQL.png" alt=""></li></ul><h2 id="基本語法實作"><a href="#基本語法實作" class="headerlink" title="基本語法實作"></a>基本語法實作</h2><h3 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h3><ul><li>在變數前加上<code>$</code>，來宣告要使用的變數</li><li>運用抽取變數方式，使運用版面顏色時，可以有一致性，修改版面時也較快速</li><li>變數：數量不要超過10個，自己在記憶上會混亂<pre><code class="scss">// 創造顏色、字大小的變數$white:#fff;$black:#000;.button{text-align:center;background-color:$black;border:1px solid $black;color:$white;}</code></pre></li></ul><p>$font-lg:40px;<br>$font-md:30px;<br>$font-sm:20px;</p><p>.footer h3{<br>  font-size: $font-md;<br>  color: $color-secondary;<br>  text-align: center;</p><p>}</p><pre><code>#### scope of sass variable* 一般常見屬於global scope* 如果將變數設在，標間架構中-&gt;local scope![](https://i.imgur.com/oAeBzah.png)* 在後面加上`！global`就變成全域![](https://i.imgur.com/jbDV03A.png)PS: 還是建議以global 的方式進行修改，才不會造成維護的混亂* 命名中使用`-`以及`_`，在sass中是一樣的    * 如`$font-lg`改為`$font_lg`一樣也會有效### Nested 巢狀#### 1.針對nav下的`ul`、`li````scss.nav{  background-color: $color-primary;  ul li{    list-style: none;  }  a{    text-decoration: none;    font-size: $font-sm;    color: $color-secondary;  }}</code></pre><ul><li>轉換為css<pre><code class="css">.nav {background-color: orange; }.nav ul li {  list-style: none; }.nav a {  text-decoration: none;  font-size: 20px;  color: gray; }</code></pre><img src="https://i.imgur.com/wQXDhMZ.png" alt=""></li></ul><h4 id="2-增加hover的效果"><a href="#2-增加hover的效果" class="headerlink" title="2.增加hover的效果"></a>2.增加hover的效果</h4><ul><li><code>&amp;</code>，來指出<code>parent element</code>：在這便是指<code>&lt;a&gt;</code></li></ul><pre><code class="scss">.nav{  background-color: $color-primary;  ul li{    list-style: none;  }  a{    text-decoration: none;    font-size: $font-sm;    color: $color-secondary;    &amp;:hover{      color: $color-tertiary;    }  }}</code></pre><ul><li>轉換為css<pre><code class="css">.nav {background-color: orange; }.nav ul li {  list-style: none; }.nav a {  text-decoration: none;  font-size: 20px;  color: gray; }  .nav a:hover {    color: royalblue; }</code></pre></li></ul><pre><code>![](https://i.imgur.com/IL4dwvL.png)#### 巢狀層級不可以太多層，否則會出現效率問題### @import 是什麼* import 讓我們可以拉出特定區塊或是根據功能性不同拆成不同區塊，來撰寫scss，並利用@import放入主要的scss檔案，最後彙整到同一個css之中。* 再用一個css引入(@import)，各個功能* 要引入的檔案命名：在要import的檔案要加`_`&gt;六角學院&gt;![](https://i.imgur.com/SRD31V7.png)`_test.scss`為撰寫footer樣式的檔案```scss.footer h3{  font-style:italic ;  border: blue 3px solid;}</code></pre><p><code>main.scss</code> 要引入檔案的主要檔案</p><pre><code class="scss">@import &quot;test&quot;;</code></pre><p>轉譯為css(main.css)</p><pre><code class="css=">.footer h3 {  font-style: italic;  border: blue 3px solid; }</code></pre><h2 id="mixin-與-include"><a href="#mixin-與-include" class="headerlink" title="@mixin 與 @include"></a>@mixin 與 @include</h2><ul><li>當在多個地方想使用同一種style的方式。可以組成一組的樣式，並於scss中重複使用。</li><li>以 <code>@mixin</code> 開頭，並自定義一個名稱</li><li>需要它的時候就用 <code>@include</code>呼叫</li></ul><ol><li>設定對齊方式<pre><code class="scss">@mixin horizontal-list{li{display:inline-block;margin:{left:-2px;right:2em;}}}</code></pre></li></ol><p>/<em>當要引用時</em>/<br>nav ul{<br>  @include horizontal-list<br>}</p><pre><code>2. 調整字體大小（以帶參數的方式）```scss// 發現h1,h3樣式一樣@mixin headingStyles($fontSize){  //以代參數方式來放入不同字體大小的變數設定  font-size: $fontSize; color: $color-secondary;  text-align: center;} .banner h1{ @include headingStyles($font-lg);}.footer h3{  @include headingStyles($font-md);}</code></pre><ul><li>在css的地方，可以看到字的大小不同<pre><code class="css">.banner h1 {font-size: 40px;color: gray;text-align: center; }</code></pre></li></ul><p>.footer h3 {<br>  font-size: 30px;<br>  color: gray;<br>  text-align: center; }</p><pre><code>3. 加入動畫效果* 在`footer h3`加上`hover`* `@mixin transition($param...)`加上設定參數特性    * 當要同時設定特性中的多個值時，要記得在參數後面加上`...````scss// 發現h1,h3樣式一樣@mixin headingStyles($fontSize){  //以代參數方式來放入不同字體大小的變數設定  font-size: $fontSize; color: $color-secondary;  text-align: center;} @mixin transition($param...) {  transition: $param;}.banner h1{ @include headingStyles($font-lg);}.footer h3{  @include headingStyles($font-md);  @include transition(color .5s ,background-color 1s);  &amp;:hover{    color:$color-tertiary;    background-color: $color-primary;  }}</code></pre><ul><li>轉譯為css<pre><code class="css">.footer h3 {font-size: 30px;color: gray;text-align: center;transition: color 0.5s, background-color 1s; }.footer h3:hover {  color: royalblue;  background-color: orange; }</code></pre></li></ul><p><a href="https://ithelp.ithome.com.tw/articles/10197303" target="_blank" rel="noopener">Day27：小事之 Transition 與 Animation</a><br><a href="https://cythilya.github.io/2017/08/27/css-animation/#transition-%E6%BC%B8%E8%AE%8A" target="_blank" rel="noopener">CSS3 Animation</a></p><p><a href="https://5xruby.tw/posts/play-sass-mixin-and-include" target="_blank" rel="noopener">新手也可以輕鬆玩轉 SASS - @mixin and @include</a></p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><ul><li>透過函式的建立，可以在需要使用時，不斷地呼叫使用</li><li><code>@function fontSize($size){ @return $size*2; }</code>建立函式</li></ul><pre><code class="scss">@function fontSize($size){   @return $size*2;} h1{.banner p{  font-size: fontSize($font-sm);  //字的大小會變成 20px*2 =&gt;40px}</code></pre><p>轉譯為css</p><pre><code class="css">.banner p {  font-size: 40px; }</code></pre><ul><li>將文字大小，預先設定預設值</li></ul><pre><code class="scss">//設定預設為25px@function fontSize($size:25px){   @return $size*2;}.footer p{  font-size: fontSize();}</code></pre><p>轉譯為css</p><pre><code class="css">.footer p {  font-size: 50px; }  /* 25*2=&gt;50 */</code></pre><ul><li>若插入數字</li></ul><pre><code class="scss">.footer p{  font-size: fontSize(30px);}</code></pre><ul><li>轉譯為css<pre><code class="css">.footer p {font-size: 60px; }/* 30*2=&gt;50 */</code></pre><h3 id="內建函式介紹"><a href="#內建函式介紹" class="headerlink" title="內建函式介紹"></a>內建函式介紹</h3></li></ul><ol><li><code>lighten()</code><pre><code class="sass=">.nav{background-color: lighten($color-primary,20%);}</code></pre>css<pre><code class="css=">.nav {background-color: #ffc966; }</code></pre></li></ol><ul><li>顏色變淡<br><img src="https://i.imgur.com/WhTLwso.png" alt=""></li></ul><ol start="2"><li><code>darken()</code><pre><code class="scss">.nav{background-color: darken($color-primary,20%);}</code></pre></li></ol><ul><li>編譯為css<pre><code class="css">.nav {background-color: #996300; }</code></pre><img src="https://i.imgur.com/LRzx1fH.png" alt=""></li></ul><p>3.<code>transparentize()</code></p><ul><li>透明度從0-1 (1是完全透明)<pre><code class="scss">.nav{background-color: transparentize($color-primary,0.6);}</code></pre></li><li>編譯為css<pre><code class="css">.nav {background-color: rgba(255, 165, 0, 0.4); }</code></pre><img src="https://i.imgur.com/6ON5Rfk.png" alt=""></li></ul><p>4.<code>mix()</code></p><ul><li>將顏色混合<pre><code class="scss">.nav{ background-color: mix(blue,green);}</code></pre>css<pre><code class="css">.nav {background-color: #004080; }</code></pre><img src="https://i.imgur.com/M9sFOr6.png" alt=""></li></ul><h4 id="加入百分比（利用百分比來調配顏色的比重）"><a href="#加入百分比（利用百分比來調配顏色的比重）" class="headerlink" title="加入百分比（利用百分比來調配顏色的比重）"></a>加入百分比（利用百分比來調配顏色的比重）</h4><ul><li><code>mix(blue,green,10%)</code>表示只有10%的藍色，90%為綠色<pre><code class="scss">.nav{ background-color: mix(blue,green,10%);}</code></pre>css<pre><code class="css">.nav {background-color: #00731a; }</code></pre><img src="https://i.imgur.com/TdUkHSn.png" alt=""></li></ul><hr><h2 id="補充scss檔案編制"><a href="#補充scss檔案編制" class="headerlink" title="補充scss檔案編制"></a>補充scss檔案編制</h2><ul><li>主要視自己專案上的區分來編制<br>vendor:外部套件，放置bootstrap或其他frameworks、liberaries、hover.css<br>utils(helpers):工具類的class，放置字的大小、margin、border顏色設置、hover效果<br>partials:放置一些部分區域的css，如：nav、footer; layout: （共通的佈局）如表頭、表尾，就是每頁都會出現<br>而這幾個檔案，放在main.scss要有順序<br><img src="https://i.imgur.com/tjRLJjK.png" alt=""><br>base:p段落、h1..等的全站設定(css reset)<br>components ：元件，如按鈕、卡片的設定</li></ul><hr><p>參考資料：<a href="https://tw.alphacamp.co/blog/css-preprocessor-sass-scss" target="_blank" rel="noopener">alphacamp-Sass/SCSS 基本語法介紹，搞懂CSS 預處理器</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/e59PuUk.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;CSS預處理器，增加了一</summary>
      
    
    
    
    
    <category term="SCSS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/SCSS/"/>
    
  </entry>
  
  <entry>
    <title>API-youtube</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/02/23/API-youtube/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/02/23/API-youtube/</id>
    <published>2021-02-23T06:47:04.000Z</published>
    <updated>2021-10-05T09:15:47.787Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/HyrwBQl.png" alt=""></p><p><a href="https://eva813.github.io/Eva_portfolio/YoutubeAPI/YoutubeAPI.html" target="_blank" rel="noopener">成品</a></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li>搜尋框，輸入搜尋關鍵字，下方會列出5筆列表<ul><li>有圖片縮圖、影片標題、影片描述</li></ul></li><li>按下next page 會取得下5筆資料</li><li>按下prev page，會取得上5筆資料</li></ul><p>ajax 在同一個頁面，不做刷新就可以改變頁面的內容。<br>q: query</p><h2 id="youtube-API-application-programming-interface-資料查看"><a href="#youtube-API-application-programming-interface-資料查看" class="headerlink" title="youtube API(application programming interface)資料查看"></a>youtube API(application programming interface)資料查看</h2><p><a href="https://developers.google.com/youtube/v3/docs/" target="_blank" rel="noopener">YouTube 資料 API 參考手冊</a></p><p>取得授權：<a href="https://console.developers.google.com/projectselector2/apis/credentials?pli=1&supportedpurview=project" target="_blank" rel="noopener">憑證</a></p><p><img src="https://i.imgur.com/asf7coq.png" alt=""></p><p>API 金鑰:AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M</p><pre><code>jQuery API D ocument =&gt; 表示看官方文件串API =&gt;</code></pre><h4 id="檢視範例，ajax資料的情形"><a href="#檢視範例，ajax資料的情形" class="headerlink" title="檢視範例，ajax資料的情形"></a>檢視範例，ajax資料的情形</h4><p><img src="https://i.imgur.com/wc6VWtV.png" alt=""></p><p><img src="https://i.imgur.com/tSYR4vu.png" alt=""></p><h2 id="JS-部分"><a href="#JS-部分" class="headerlink" title="JS 部分"></a>JS 部分</h2><h3 id="1-嘗試串接Youtube-API"><a href="#1-嘗試串接Youtube-API" class="headerlink" title="1.嘗試串接Youtube API"></a>1.嘗試串接Youtube API</h3><ul><li><p>首先需考量，我們所需要的資料參數有哪些(</p></li><li><p>在抓取成功的部分，要設置抓取五筆搜尋到的五筆資料，並將其呈現於頁面</p><ul><li><p>除了5筆資料外，還需要跳轉上、下頁的按鈕</p><pre><code class="javascript">function getVideo() {let value = $(&#39;#search-field&#39;).val();let youtubeURL = &quot;https://www.googleapis.com/youtube/v3/search&quot;;$.ajax({type: &quot;GET&quot;,url: youtubeURL,data: {//將要放入網址的參數放在這part:  &#39;id,snippet&#39;,// 必填，把需要的資訊列出來q: value,// 查詢文字maxResults: 5,// 預設為五筆資料，可以設定1~50type: &quot;video&quot;,key: &#39;AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M&#39;// 使用 API 只能取得公開的播放清單},dataType: &quot;json&quot;,success: function (data) {//console.log(data);let nextPageToken = data.nextPageToken;let prevPageToken = data.prevPageToken;//試著將收到的資料傳入，並呈現於畫面中insertItems(data);getBtn(data, prevPageToken, nextPageToken)</code></pre></li></ul></li></ul><pre><code>}, error: function (err) {  console.log(&#39;oh no&#39;);}</code></pre><p>  });<br>}</p><pre><code>網址放入參數[[JS] 使用 JavaScript 解析網址與處理網址中的參數（URL Parameters）](https://pjchender.blogspot.com/2018/08/js-javascript-url-parameters.html)### 2.將資料呈現於頁面(insertItems())* 透過迴圈方式將要抓取的資料依序填入* 觀察原本畫面結構，並依據去找尋資料中符合的資料    * videoId、videoTitle、description、channelTitle...```javascriptfunction insertItems(item) {  let output = &#39;&#39;;  $.each(item.items, function (index, value) {    let videoId = item.items[index].id.videoId;    let videoTitle = item.items[index].snippet.title;    let description = item.items[index].snippet.description;    let thumbnailURL = item.items[index].snippet.thumbnails.high.url;//高解析度影片縮圖    let channelTitle = item.items[index].snippet.channelTitle;    let publishedDate = item.items[index].snippet.publishedAt;    // 按鈕    output += `&lt;li&gt;&lt;div class=&quot;list-left&quot;&gt;    &lt;img src=&quot; ${thumbnailURL}&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;list-right&quot;&gt;    &lt;h3&gt;    &lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/${videoId}&quot; &quot;href=&quot;javascript:;&quot;&gt; ${videoTitle} &lt;/a&gt;&lt;/h3&gt; &lt;small&gt;By &lt;span class=&quot;cTitle&quot;&gt; ${channelTitle}&lt;/span&gt; on ${publishedDate}&lt;/small&gt;    &lt;p&gt; ${description} &lt;p&gt;&lt;/div&gt;&lt;/li&gt; &lt;div classs=&quot;clearfix&quot;&gt;&lt;/div&gt;     `    $(&#39;#results&#39;).html(output);  });};</code></pre><h2 id="3-製作上、下頁的按鈕鍵"><a href="#3-製作上、下頁的按鈕鍵" class="headerlink" title="3.製作上、下頁的按鈕鍵"></a>3.製作上、下頁的按鈕鍵</h2><ul><li>注意該函式要帶入的參數有哪些</li><li>我們要判斷為，在第一頁時，只有下一頁的按鈕<ul><li>判斷方式為，<code>(!prevPageToken)</code>沒有上一頁的token</li><li>（截圖）</li></ul></li><li>在判斷之中，我們需要將要插入的標籤與內容，放入，並append到畫面要呈現的位置</li><li>注意：在插入的button之中，加入<code>data-token=&quot;${nextPageToken}&quot; data-query=&quot;${value}&quot;</code>，用於後續抓取屬性內容。</li></ul><pre><code class="javascript">function getBtn(value, prevPageToken, nextPageToken) {  console.log(nextPageToken)  if (!prevPageToken) {    var btnOutput = $(`&lt;div class=&quot;button-container&quot;&gt;    &lt;button id=&quot;next-button&quot; class=&quot;paging-button&quot; data-token=&quot;${nextPageToken}&quot; data-query=&quot;${value}&quot; onclick=&quot;pressNext();&quot;&gt; Next Page&lt;/button&gt;&lt;/div&gt;`    )    $(&quot;#buttons&quot;).append(btnOutput);  } else {    var btnOutput = $(`&lt;div class=&quot;button-container&quot;&gt;&lt;button id=&quot;prev-button&quot; class=&quot;paging-button&quot; data-token=&quot;${prevPageToken}&quot; data-query=&quot;${value}&quot; onclick=&quot;pressPrev();&quot;&gt; Prev Page&lt;/button&gt;      &lt;button id=&quot;next-button&quot; class=&quot;paging-button&quot;  data-token=&quot;${nextPageToken}&quot; data-query=&quot;${value}&quot; onclick=&quot;pressNext();&quot;&gt;Next Page&lt;/button&gt;&lt;/div&gt;`)    $(&quot;#buttons&quot;).append(btnOutput);  }}</code></pre><p><a href="https://developers.google.com/youtube/v3/guides/implementation/pagination" target="_blank" rel="noopener">Youtube:Implementation: Pagination</a></p><h2 id="4-下一頁點下後，下五筆的資料"><a href="#4-下一頁點下後，下五筆的資料" class="headerlink" title="4.下一頁點下後，下五筆的資料"></a>4.下一頁點下後，下五筆的資料</h2><ul><li>同樣以ajax的方式來抓取<ul><li>在參數的地方我們要抓取的是，按取下一頁的token</li></ul></li><li>success之中所應用的函示，同樣為插入5筆的資料，以及上下頁的按鈕</li></ul><pre><code class="javascript">//取得下一頁的資料function pressNext() {  let youtubeURL = &quot;https://www.googleapis.com/youtube/v3/search&quot;;  let token = $(&#39;#next-button&#39;).data(&#39;token&#39;);  let value = $(&#39;#search-field&#39;).val();  $.ajax({    type: &quot;GET&quot;,    url: youtubeURL,    data: {//將要放入網址的參數放在這      part:        &#39;id,snippet&#39;,// 必填，把需要的資訊列出來      q: value,// 查詢文字      pageToken: token,      maxResults: 5,// 預設為五筆資料，可以設定1~50      type: &quot;video&quot;,      key: &#39;AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M&#39;// 使用 API 只能取得公開的播放清單    },    dataType: &quot;json&quot;,    success: function (data) {      console.log(data);      let nextPageToken = data.nextPageToken;      let prevPageToken = data.prevPageToken;      // 清空內容      $(&#39;#results&#39;).html(&#39;&#39;);      $(&#39;#buttons&#39;).html(&#39;&#39;);      //試著將收到的資料傳入，並呈現於畫面中      insertItems(data);      getBtn(data, prevPageToken, nextPageToken)    }, error: function (err) {      console.log(&#39;oh no&#39;);    }  });}</code></pre><h3 id="5-上一頁"><a href="#5-上一頁" class="headerlink" title="5.上一頁"></a>5.上一頁</h3><ul><li><p>同樣的抓取方式，只有要帶入的資料有些差異</p></li><li><p><code>token = $(&#39;#prev-button&#39;).data(&#39;token&#39;);</code></p><pre><code class="javascript">//前一頁function pressPrev() {// 清空內容$(&#39;#results&#39;).html(&#39;&#39;);$(&#39;#buttons&#39;).html(&#39;&#39;);let youtubeURL = new URL(`https://www.googleapis.com/youtube/v3/search?`);let token = $(&#39;#prev-button&#39;).data(&#39;token&#39;);let value = $(&#39;#search-field&#39;).val();$.ajax({  type: &quot;GET&quot;,  url: youtubeURL,  data: {//將要放入網址的參數放在這    part:      &#39;id,snippet&#39;,// 必填，把需要的資訊列出來    q: value,// 查詢文字    pageToken: token,    maxResults: 5,// 預設為五筆資料，可以設定1~50    type: &quot;video&quot;,    key: &#39;AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M&#39;// 使用 API 只能取得公開的播放清單  },  dataType: &quot;json&quot;,  success: function (data) {    console.log(data);    let nextPageToken = data.nextPageToken;    let prevPageToken = data.prevPageToken;    // 清空內容    $(&#39;#results&#39;).html(&#39;&#39;);    $(&#39;#buttons&#39;).html(&#39;&#39;);    //試著將收到的資料傳入，並呈現於畫面中    insertItems(data);    getBtn(data, prevPageToken, nextPageToken)</code></pre></li></ul><pre><code>}, error: function (err) {  console.log(&#39;oh no&#39;);}</code></pre><p>  });</p><p>}</p><pre><code>[HTML5 自定義屬性 data-* 和 jQuery.data 詳解2018.06.20](https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/177833/)[[技術分享] 什麼是 HTML 5 中的資料屬性（data-* attribute）](https://pjchender.blogspot.com/2017/01/html-5-data-attribute.html)### 6.運用fancybox的方式彈出* 使用fancyBox展示影片    * [fancybox Documention](http://fancyapps.com/fancybox/3/docs/#iframe)    * [fancybox-CDN](https://cdnjs.com/libraries/fancybox)* 使用iframe連結欲嵌入的外部影片連結    * iframe 是框架的一種，也稱為內置框架或內聯框架，用來在網頁內嵌入另外一個網頁[](https://fancyapps.com/fancybox/3/docs/#iframe)* 透過CDN方式連結fancybox套件```javascript&lt;!-- fancyBox --&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css&quot; /&gt;  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.5.7/jquery.fancybox.min.js&quot;&gt;&lt;/script&gt;</code></pre><ul><li>在我們點選該影片名稱區，插入影片id<pre><code class="javascript">&lt;h3&gt;&lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/${videoId}&quot; &quot;href=&quot;javascript:;&quot;&gt; ${videoTitle} &lt;/a&gt;&lt;/h3&gt;</code></pre><pre><code class="javascript">$(&#39;[data-fancybox]&#39;).fancybox({toolbar  : false,smallBtn : true,iframe : {  preload : false}})</code></pre><a href="https://orow.github.io/2019/03/16/jQuery-youtube-search/" target="_blank" rel="noopener">[jQuery] - 練習-Youtube Search Engine</a></li></ul><hr><p>補充知識：<br>XMLHttpRequest(XHR):是一種規範，用來發ajax使用</p><p>token(令牌)：唯一的、可以認證身份或取得資料</p><p>GET:向伺服器發request，（伺服器會告訴我們要發伺服器的網址，我們向它請求資訊）</p><h4 id="用瀏覽器debug"><a href="#用瀏覽器debug" class="headerlink" title="用瀏覽器debug"></a>用瀏覽器debug</h4><p><img src="https://i.imgur.com/IlQ8Glx.png" alt=""></p><ul><li>可在watch加上要觀察的變數<br><img src="https://i.imgur.com/7RcELS4.png" alt=""></li></ul><hr><p>參考資料<br><a href="https://ithelp.ithome.com.tw/articles/10194007" target="_blank" rel="noopener">[30apis] Day 7 : YouTube Data API + 基礎 Fetch API</a><br><a href="https://www.c-sharpcorner.com/article/how-to-implement-youtube-video-search-using-youtube-data-api-v3-in-wordpress-web2/" target="_blank" rel="noopener">How To Implement A Youtube Video Search Using Youtube Data API V3</a><br><a href="https://hackmd.io/@c36ICNyhQE6-iTXKxoIocg/S1eYdtA1P" target="_blank" rel="noopener">Youtube Data API 使用手札</a><br><a href="https://a42033.gitbooks.io/api/content/Youtube/youtube_data_api/applicate.html" target="_blank" rel="noopener">Youtube Data API 申請</a><br><a href="https://console.cloud.google.com/iam-admin/quotas?hl=zh-tw&_ga=2.128962188.1087850229.1615615433-929425058.1615373715&orgonly=true&angularJsUrl=%2Fprojectselector%2Fiam-admin%2Fquotas%3Fhl%3Dzh-tw%26_ga%3D2.128962188.1087850229.1615615433-929425058.1615373715%26supportedpurview%3Dproject%26orgonly%3Dtrue%26folder%3Dtrue%26organizationId%3Dtrue&project=my-youtube-api-307211&folder=&organizationId=&supportedpurview=project" target="_blank" rel="noopener">配額</a></p><pre><code class="javascript=">{  &quot;error&quot;: {    &quot;code&quot;: 403,    &quot;message&quot;: &quot;The request cannot be completed because you have exceeded your \u003ca href=\&quot;/youtube/v3/getting-started#quota\&quot;\u003equota\u003c/a\u003e.&quot;,    &quot;errors&quot;: [      {        &quot;message&quot;: &quot;The request cannot be completed because you have exceeded your \u003ca href=\&quot;/youtube/v3/getting-started#quota\&quot;\u003equota\u003c/a\u003e.&quot;,        &quot;domain&quot;: &quot;youtube.quota&quot;,        &quot;reason&quot;: &quot;quotaExceeded&quot;      }    ]  }}</code></pre><hr><p><a href="https://stackoverflow.com/questions/31075893/im-getting-favicon-ico-error" target="_blank" rel="noopener">favicon.ico error</a></p><p>問題：</p><ul><li>script.js: Allow attribute will take precedence over ‘allowfullscreen’.<br><img src="https://i.imgur.com/0JiThlt.png" alt=""></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HyrwBQl.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/YoutubeAPI/YoutubeAPI.html&quot; tar</summary>
      
    
    
    
    <category term="Ajax 實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/Ajax-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="Ajax" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Ajax/"/>
    
    <category term="API" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>串接API- 天氣預報</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/02/23/API-weather/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/02/23/API-weather/</id>
    <published>2021-02-23T06:42:02.000Z</published>
    <updated>2021-10-05T09:15:51.747Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/weatherAPI/weatherAPI.html" target="_blank" rel="noopener">成品</a></p><p><img src="https://i.imgur.com/odl0KcP.png" alt=""></p><h1 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h1><ul><li>從公開的氣象資料平台取得氣象資料</li><li>建立下拉式選單，選擇地區，並按下按鈕取得氣象資料</li><li>呈現當日天氣狀況(包含氣溫、圖示、描述)</li><li>呈現未來一週的天氣預報(包含日期、星期;氣溫、圖示、描述)</li></ul><h2 id="了解要串接的資料open-data"><a href="#了解要串接的資料open-data" class="headerlink" title="了解要串接的資料open data"></a>了解要串接的資料open data</h2><p>至中央氣象局-氣象開放資料平台的網站，註冊會員<br>註冊並登入之後，要取得授權碼<br><img src="https://i.imgur.com/KoRQyNL.png" alt=""><br>到<a href="https://opendata.cwb.gov.tw/dist/opendata-swagger.html" target="_blank" rel="noopener">中央氣象局開放資料平臺之資料擷取API</a>，查看要取用的資料<br>我的授權碼：CWB-F0145DA5-2539-4333-BAFD-466910C1EECC</p><p>參考資料：<br><a href="https://www.youtube.com/watch?v=QDdn3yrsyCQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=QDdn3yrsyCQ</a><br><a href="https://ithelp.ithome.com.tw/articles/10222662" target="_blank" rel="noopener">[Day 13 - 即時天氣] 建立一個即時天氣 App - 前置準備</a></p><h2 id="尋找要參考實現畫面呈現的資料"><a href="#尋找要參考實現畫面呈現的資料" class="headerlink" title="尋找要參考實現畫面呈現的資料"></a>尋找要參考實現畫面呈現的資料</h2><p>畫面主要樣式是參考：<br><a href="https://webdesign.tutsplus.com/tutorials/build-a-simple-weather-app-with-vanilla-javascript--cms-33893" target="_blank" rel="noopener">Build a Simple Weather App With Vanilla JavaScript</a></p><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="1-利用Ajax串接資料"><a href="#1-利用Ajax串接資料" class="headerlink" title="1.利用Ajax串接資料"></a>1.利用Ajax串接資料</h3><ul><li>根據平台提供的url作為取得資料的地方</li><li>利用sucess/error，來查看是否有成功取得資料<ul><li>依據console.log()出要串接的資料<br><img src="https://i.imgur.com/Kdm159o.png" alt=""></li></ul></li></ul><pre><code class="javascript">function getCity() {  let url = &quot;https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-D0047-091?Authorization=CWB-F0145DA5-2539-4333-BAFD-466910C1EECC&amp;format=JSON&quot;;  $.ajax({    type: &quot;get&quot;,    url: url,    dataType: &quot;json&quot;,    success: function (data) {      console.log(data);      })    },    error: function (err) {      console.log(&#39;oh no&#39;)    }  });</code></pre><h3 id="2-製作下拉式選單"><a href="#2-製作下拉式選單" class="headerlink" title="2.製作下拉式選單"></a>2.製作下拉式選單</h3><ul><li>當串到想要的資料後，希望能在下拉選單，呈現出各個地區，以供選擇<br><img src="https://i.imgur.com/I2QTip1.png" alt=""></li><li>因為地區有很多，以迴圈方式來填入資料<ul><li><code>i</code>的長度 <code>data.records.locations[0].location.length</code><br><img src="https://i.imgur.com/QaNMU8d.png" alt=""></li><li><code>opt = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;)</code>創立選項標籤</li><li>利用<code>attr</code>,<code>html</code>填入該地區的index，以及地區名稱<br><img src="https://i.imgur.com/xc7bwaP.png" alt=""></li></ul></li></ul><pre><code class="javascript">function getCity() {  let url = &quot;https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-D0047-091?Authorization=CWB-F0145DA5-2539-4333-BAFD-466910C1EECC&amp;format=JSON&quot;;  $.ajax({    type: &quot;get&quot;,    url: url,    dataType: &quot;json&quot;,    success: function (data) {      //console.log(data);      let selectCity = $(&#39;#selector-list&#39;);      for (let i = 0; i &lt; data.records.locations[0].location.length; i++) {        let opt = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;);        opt.attr(&quot;data-index&quot;, i);        opt.html(data.records.locations[0].location[i].locationName);        selectCity.append(opt);      }    },    error: function (err) {      console.log(&#39;oh no&#39;)    }  });};</code></pre><h3 id="3-點選-submit-按鈕時要跳出取得今日天氣以及未來一週的天氣"><a href="#3-點選-submit-按鈕時要跳出取得今日天氣以及未來一週的天氣" class="headerlink" title="3.點選(submit)按鈕時要跳出取得今日天氣以及未來一週的天氣"></a>3.點選(submit)按鈕時要跳出取得今日天氣以及未來一週的天氣</h3><ul><li><p>在sucess:中放入取得今日天氣、週天氣的函式</p><ul><li>在此要宣告<code>selectedCityIndex</code>變數，並取得被選取的city index<code>$(&#39;#selector-list&#39;).get(0).selectedIndex</code><pre><code class="javascript">function getCity() {let url = &quot;https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-D0047-091?Authorization=CWB-F0145DA5-2539-4333-BAFD-466910C1EECC&amp;format=JSON&quot;;</code></pre></li></ul><p>$.ajax({<br>  type: “get”,<br>  url: url,</p><p>  dataType: “json”,<br>  success: function (data) {</p><pre><code>console.log(data);let selectCity = $(&#39;#selector-list&#39;);for (let i = 0; i &lt; data.records.locations[0].location.length; i++) {  let opt = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;);  opt.attr(&quot;data-index&quot;, i);  opt.html(data.records.locations[0].location[i].locationName);  selectCity.append(opt);}$(&#39;button&#39;).click(function (e) {  e.preventDefault();  clear();  let selectedCityIndex = $(&#39;#selector-list&#39;).get(0).selectedIndex;  getWeather(data, selectedCityIndex);  weekWeather(data, selectedCityIndex);})</code></pre><p>  },<br>  error: function (err) {</p><pre><code>console.log(&#39;oh no&#39;)</code></pre><p>  }<br>});</p></li></ul><p>};</p><pre><code>[jQuery獲取Select選擇的Text和Value：](https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/287007/)### 4.取得今日天氣(`getWeather();`)* 傳入參數分別為data\locationIndex:data為串接到的天氣資料,locationIndex，為放入要取的資料中的index* 我們想要取得的氣象資料，分別有地區、溫度(最低溫、最高溫)、天氣描述、icon圖示    * `name`變數就是要取得資料內的地區名稱![](https://i.imgur.com/SZZSUnh.png)    * `weather`變數就是取得氣象資料![](https://i.imgur.com/pVwq3xe.png)    * `weatherDescription`以及`weatherCode`分別就是氣象描述以及給予氣象描述的編號 ![](https://i.imgur.com/qeUH1iw.png)* `let weatherImg = checkImg(weatherCode);`依據天氣描述的分類放入對應圖示* 抓取到所需要的變數資料後，就是將要填入呈現畫面的html標籤以及變數放入* `after()`在該區塊後面在插入想要呈現的其他標籤內容```javascriptfunction getWeather(data, locationIndex) {  //console.log(data, locationIndex)  let name = data.records.locations[0].location[locationIndex].locationName;  let weather = data.records.locations[0].location[locationIndex].weatherElement;  //console.log(name);  //console.log(weather);  // 天氣描述  let weatherDescription = weather[6].time[0].elementValue[0].value;  let weatherCode = weather[6].time[0].elementValue[1].value;  let minTemp = weather[8].time[0].elementValue[0].value;  let maxTemp = weather[12].time[0].elementValue[0].value;  let weatherImg = checkImg(weatherCode);  // 今天日期  // let date = getDate().toUTCString();  console.log(weatherCode);  let li = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;).appendTo(&#39;.cities&#39;);  li.addClass(&quot;city&quot;);  li.html(`  &lt;h2 class=&quot;city-name&quot; data-name=&quot;${name},&quot;&gt;    &lt;span&gt;${name}&lt;/span&gt;    &lt;sup&gt;Today&lt;/sup&gt;  &lt;/h2&gt;  &lt;div class=&quot;city-temp&quot;&gt;${Math.round(minTemp)}&lt;sup&gt;°C&lt;/sup&gt; ~ ${Math.round(maxTemp)}&lt;sup&gt;°C&lt;/sup&gt;  &lt;/div&gt;  &lt;figure class=&#39;weather-icon&#39;&gt;    ${weatherImg}    &lt;figcaption&gt;${weatherDescription}&lt;/figcaption&gt;  &lt;/figure&gt;`);  $(&#39;.cities&#39;).after(`&lt;h2 class=&quot;sec-h2&quot;&gt;未來一週預報&lt;/h2&gt;`)  $(&#39;.cities&#39;).append(li);};</code></pre><h3 id="5-根據weather-code分類，分配的圖示-checkImg"><a href="#5-根據weather-code分類，分配的圖示-checkImg" class="headerlink" title="5.根據weather code分類，分配的圖示(checkImg())"></a>5.根據weather code分類，分配的圖示(<code>checkImg()</code>)</h3><ul><li><p>將分類的代碼區分到各個天氣狀況</p></li><li><p>依分類代碼下判斷，並回傳要放入的圖示</p></li><li><p><code>weatherTypes.isThunderstorm.includes(weatherData)</code></p><ul><li>利用<code>includes()</code>取得 weatherTypes中各天氣情形陣列中，是否有符合參數的數值<pre><code class="javascript">function checkImg(code) {let weatherData = +code;const weatherTypes = {isThunderstorm: [15, 16, 17, 18, 21, 22, 33, 34, 35, 36, 41],isClear: [1],isCloudyFog: [25, 26, 27, 28],isCloudy: [2, 3, 4, 5, 6, 7],isFog: [24],isPartiallyClearWithRain: [8, 9, 10, 11, 12,13, 14, 19, 20, 29, 30,31, 32, 38, 39,],isSnowing: [23, 37, 42],};// console.log(data)// console.log(weatherTypes.isPartiallyClearWithRain)</code></pre></li></ul><p>// let s = weatherTypes.isThunderstorm.includes(weatherData);<br>// console.log(s);</p></li></ul><p>  if (weatherTypes.isThunderstorm.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/thunderstorm.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isClear.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/clear.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isCloudyFog.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/cloudyfog.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isCloudy.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/cloud-and-sun.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isFog.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/fog.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isPartiallyClearWithRain.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/clearwithrainy.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else { return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/snow.png&quot; alt=&quot;weather-img&quot;&gt;</code>; }</p><p>}</p><pre><code>[[Day 21 - 即時天氣] 處理天氣圖示以及 useMemo 的使用](https://ithelp.ithome.com.tw/articles/10225927)[JavaScript Array 陣列操作方法大全 ( 含 ES6 )](https://www.oxxostudio.tw/articles/201908/js-array.html#array_includes)includes(weatherData):[JavaScript 陣列處理：找東西 - indexOf、$.inArray 與 filter](https://cythilya.github.io/2017/05/08/javascript-find-item-in-an-array/)[預報因子欄位中文說明表](https://opendata.cwb.gov.tw/opendatadoc/MFC/D0047.pdf)---### 6.取得未來一週的天氣* 此作法與取的當日天氣有些類似，不過因為要取得未來一週6天的資料，所以須以迴圈的方式來取的並填入資料* `let i = 1; i &lt; 7; i++`從1開始，6天* `timeIndex= 2 * i`是為了抓取一週時間所設置的index![](https://i.imgur.com/xSanS8F.png)* 日期、星期的取得    * 以算出tomorrow為目標，並帶入i，就會執行出往後六天的日期 ![](https://i.imgur.com/ZqSmPOy.png) * 並從上圖，分別擷取出月份、日期、星期的資料```javascriptfunction weekWeather(data, locationIndex) {  // $(&#39;.week-ul&#39;).html(&#39;&#39;);  var weather = data.records.locations[0].location[locationIndex].weatherElement;  for (let i = 1; i &lt; 7; i++) {    let timeIndex = 2 * i;    let weekday = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;).appendTo(&#39;.week-ul&#39;);    weekday.addClass(&#39;day&#39;).attr(&#39;id&#39;, `day-${i}`);    let weatherDescription = weather[6].time[timeIndex].elementValue[0].value;    let weatherCode = weather[6].time[timeIndex].elementValue[1].value;    let minTemp = weather[8].time[timeIndex].elementValue[0].value;    let maxTemp = weather[12].time[timeIndex].elementValue[0].value;    let weatherImg = checkImg(weatherCode);    //console.log(weatherDescription);    //////日期、星期的擷取//////    let today = new Date();    let tomorrow = new Date(today);    tomorrow.setDate(tomorrow.getDate() + i);    let weekDay = tomorrow.getDay();    let weekMonth = tomorrow.getMonth()    let date = tomorrow.getDate();    const dayNamesEn = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;];    const monthNamesEn = [      &#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;,      &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;    ]    let inweekDay = dayNamesEn[weekDay]    let inweekMonth = monthNamesEn[weekMonth];    let indate = date;    ///////////    weekday.html(`&lt;li class=&quot;day&quot;&gt;          &lt;h2 class=&quot;whichDay&quot; data-name=&quot;&quot;&gt;            &lt;span&gt;${indate} ${inweekMonth}&lt;/span&gt;            &lt;sup&gt;${inweekDay}&lt;/sup&gt;          &lt;/h2&gt;          &lt;div class=&quot;week-temp&quot;&gt;${minTemp}&lt;sup&gt;°C&lt;/sup&gt; ~ ${maxTemp}&lt;sup&gt;°C&lt;/sup&gt;          &lt;/div&gt;          &lt;figure class=&#39;weather-icon&#39;&gt;            ${weatherImg}            &lt;figcaption&gt;${weatherDescription}&lt;/figcaption&gt;          &lt;/figure&gt;        &lt;/li&gt;`)    $(&#39;.week-ul&#39;).append(weekday);  }}</code></pre><p><a href="https://flaviocopes.com/how-to-get-tomorrow-date-javascript/" target="_blank" rel="noopener">抓取明天日期:How to get tomorrow’s date using JavaScript</a><br><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/datetime.html" target="_blank" rel="noopener">日期與時間</a></p><h3 id="7-當文件準備好"><a href="#7-當文件準備好" class="headerlink" title="7.當文件準備好"></a>7.當文件準備好</h3><ul><li>先執行要串接的資料</li><li>於選擇地區時，跳出提醒文字</li></ul><pre><code class="javascript">$(document).ready(function (e) {  getCity();  $(&#39;#selector-list&#39;).change(function () {    $(&#39;.msg&#39;).text(&#39;別忘了按下SUBMIT&#39;);  })});</code></pre><h3 id="8-清除資料"><a href="#8-清除資料" class="headerlink" title="8.清除資料"></a>8.清除資料</h3><ul><li>建立在點選submit後，要先執行的步驟，為清除原本頁面的資料<pre><code class="javascript">function clear() {$(&#39;.cities&#39;).html(&#39;&#39;);$(&#39;.sec-h2&#39;).empty(&#39;&#39;);$(&#39;.week-ul&#39;).html(&#39;&#39;);$(&#39;.msg&#39;).text(&#39;&#39;);</code></pre><a href="https://blog.csdn.net/sunpeiyumail/article/details/7665668" target="_blank" rel="noopener">JQuery中html、append、appendTo、after、insertAfter</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/weatherAPI/weatherAPI.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;成品&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:</summary>
      
    
    
    
    <category term="Ajax 實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/Ajax-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="Ajax" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Ajax/"/>
    
    <category term="API" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/API/"/>
    
  </entry>
  
</feed>
