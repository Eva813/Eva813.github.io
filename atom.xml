<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Let&#39;s Code</title>
  
  
  <link href="https://github.com/Eva813/Eva813.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/Eva813/Eva813.github.io.git/"/>
  <updated>2021-10-09T09:24:30.373Z</updated>
  <id>https://github.com/Eva813/Eva813.github.io.git/</id>
  
  <author>
    <name>Eva Chan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS基本觀念 - 認識 pass by value、pass by reference 、 pass by sharing，Javascript 又是哪一個？</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/10/09/js-pass/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/10/09/js-pass/</id>
    <published>2021-10-09T04:18:41.000Z</published>
    <updated>2021-10-09T09:24:30.373Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/zT0UU5c.jpg" alt=""></p><p>之所以會撰寫這篇文，是因為面試過程被考倒的觀念，才發現自己過去從沒注意到這部分啊，那就來寫篇文章來認識它們之中的傳遞方式。</p><h2 id="首先，先從型別的認識開始"><a href="#首先，先從型別的認識開始" class="headerlink" title="首先，先從型別的認識開始"></a>首先，先從型別的認識開始</h2><p>在Javascript分兩大類，一種是基本型別(primitive type)，另一種是物件(Object)。</p><ul><li>Primitive type （以純值的形式存在）<br>Boolean<br>Null<br>Undefined<br>Number<br>BigInt<br>String<br>Symbol（於 ECMAScript 6 新定義）</li><li>Object<br>物件型別指的是可能由零或多種不同型別 (包括純值與物件) 所組合成，例如object,array, function, map</li></ul><p>知道型別後，可以簡易的分類：</p><ul><li>primitive type會是 pass by value，</li><li>object 是 pass by reference。</li></ul><h2 id="接下來來觀察，它們之間不同"><a href="#接下來來觀察，它們之間不同" class="headerlink" title="接下來來觀察，它們之間不同"></a>接下來來觀察，它們之間不同</h2><h3 id="pass-by-value"><a href="#pass-by-value" class="headerlink" title="pass by value"></a>pass by value</h3><p>範例1：</p><pre><code class="javascript">let x=10;let y=x;x=20;console.log(x); //20console.log(y); //10</code></pre><ul><li>注意：x和y是兩個獨立變數 （先記著這點）<ul><li>值會存入該變數<br><code>var y = x;</code> 看起來會像是y的內容要複製x，但可以的話要理解為，變數 y 是去建立了一個新的值，然後將變數 x 的內容複製了一份過來。</li></ul></li><li>因為兩的變數，各自獨立，所以當變數 x 的內容後來經過更新變成 20 之後，變數 y 的內容依舊保持原來的 10 而不受影響。</li></ul><p>範例2</p><pre><code class="javascript">var num=3;console.log(&quot;num start:&quot;,num);function passByValue(func_num){  func_num=5;}passByValue(num);console.log(&quot;num end:&quot;, num);</code></pre><h4 id="結果："><a href="#結果：" class="headerlink" title="結果："></a>結果：</h4><pre><code class="javascript">num start:3num end: 3</code></pre><ul><li>先是宣告新變數</li><li>隨後建立<code>passByValue()</code> 函式</li><li>呼叫<code>passByValue(num)</code> 複製變數num的值，3傳入<code>passByValue(func_num)</code>。<ul><li>一開始 值會是3</li><li>遇到<code>func_num=5;</code> =&gt; 將值改為 5</li></ul></li><li>但因為出去了函式範圍(scope)，最終的值 <code>num end:3</code></li></ul><h3 id="pass-by-refrence"><a href="#pass-by-refrence" class="headerlink" title="pass by refrence"></a>pass by refrence</h3><p>範例</p><pre><code class="javascript">let x={value:10};let y=x;x.value=20;console.log(x); //{value:20}console.log(y); //{value:20}console.log( x === y );  //true</code></pre><h3 id="拆解說明一下"><a href="#拆解說明一下" class="headerlink" title="拆解說明一下"></a>拆解說明一下</h3><ul><li>當宣告一個物件</li><li>JavaScript 會在記憶體的某處建立起一個物件 (圖右側)，然後再將這個 <code>x</code>變數指向新生成的物件</li></ul><p><img src="https://i.imgur.com/LPwkZAg.png" alt=""></p><ul><li>接著，當我們宣告了第二個變數 y ，並且透過 = 將y 指向 x 的位置。</li><li>接著當我們更新了 x.value 的內容後， y.value 的內容也被更新了。</li></ul><p><img src="https://i.imgur.com/vFUhP6X.png" alt=""></p><p>範例2</p><pre><code class="javascript">var obj1={item:&quot;unchanged&quot;};console.log(&quot;obj1 start:&quot;,obj1);function passByReference(ref){  ref.item= &quot;changed&quot;;}passByReference(obj1);console.log(&quot;obj end&quot;, obj1);</code></pre><h4 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h4><pre><code class="javascript">obj1 start:{item: &quot;unchanged&quot;}obj1 end:{item:&quot;changed&quot;}</code></pre><ul><li>當執行passByReference(obj1) 。想像他是個地址(0x0016)，進入函式中將地址複製，傳入。<ul><li>此時他的value 是個地址(0x0016)</li></ul></li><li>進入函式，遇到<code>ref.item</code><ul><li>de-reference ，進入原本的記憶體位置，找到item，並改變他的值</li></ul></li></ul><p><img src="https://i.imgur.com/3Ytn7bk.png" alt=""></p><h4 id="在不一般情況下，基本型別是-pass-by-value，而物件型別是-pass-by-reference的方式，但總有例外的時候。"><a href="#在不一般情況下，基本型別是-pass-by-value，而物件型別是-pass-by-reference的方式，但總有例外的時候。" class="headerlink" title="在不一般情況下，基本型別是 pass by value，而物件型別是 pass by reference的方式，但總有例外的時候。"></a>在不一般情況下，基本型別是 pass by value，而物件型別是 pass by reference的方式，但總有例外的時候。</h4><h3 id="pass-by-sharing"><a href="#pass-by-sharing" class="headerlink" title="pass by  sharing"></a>pass by  sharing</h3><pre><code class="javascript">var obj1={item:&quot;unchanged&quot;};console.log(&quot;obj1 start:&quot;,obj1);function passBySharing(ref){  ref={ item: &quot;changed&quot;};}passBySharing(obj1);console.log(&quot;obj end&quot;, obj1);</code></pre><pre><code class="javascript">obj1 start:{item: &quot;unchanged&quot;}obj1 end:{item:&quot;unchanged&quot;}</code></pre><ul><li>傳入之前start 沒有改變</li><li>呼叫函式，並進入<code>passBySharing()</code>，還是複製地址，傳入</li><li>遇到<code>ref={ item: &quot;changed&quot;};</code>，會直接覆蓋地址(有點類似pass by value)<ul><li>這並不是直接更改物件特性</li></ul></li></ul><p><img src="https://i.imgur.com/Kst3565.png" alt=""></p><h2 id="最後，來說說-JavaScript-屬於？"><a href="#最後，來說說-JavaScript-屬於？" class="headerlink" title="最後，來說說 JavaScript 屬於？"></a>最後，來說說 JavaScript 屬於？</h2><p>看了多篇文章，實在也是有點混亂，該認為三種形式都有呢？還是就是Pass by sharing、Pass by reference呢？ 那例外情形又該如何解釋？</p><p>所以這邊的結尾，直接引用Kuro、Huli老師文章的資訊，供給大家參考。</p><p>從Kuro Hsu 的<a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">文章</a>、<a href="https://www.tenlong.com.tw/products/9789864344130" target="_blank" rel="noopener">書</a><br>提及認為 JavaScript 應該更屬於 Pass by sharing 的形式。</p><ul><li>JavaScript 不屬於單純的傳值或傳址。</li></ul><p>參考 ECMA-262-3 in detail. Chapter 8. Evaluation strategy</p><blockquote><p>Regardless of usage concept of reference in this case, this strategy should not be confused with the “call by reference” discussed above. The value of the argument is not a direct alias, but the copy of the address.<br>由於在 JavaScript 的物件類型是可變的 (mutable)，當物件更新時，會影響到所有引用這個物件的變數與其副本，修改時會變動到原本的參考，但當賦與新值時，會產生新的實體參考。</p></blockquote><p>另外在 Huli 的文章中：</p><blockquote><p>依據細分程度的不同，下面幾句話都是正確的：<br>JavaScript 裡面只有 pass by value<br>JavaScript 的 primitive type 是 pass by value，object 是 pass by sharing</p></blockquote><hr><h2 id="最終來個綜合練習："><a href="#最終來個綜合練習：" class="headerlink" title="最終來個綜合練習："></a>最終來個綜合練習：</h2><p>相信在最後的這個練習，可以更清楚，pass by value，pass by reference，pass by sharing</p><pre><code class="javascript">function changeStuff(num,obj,obj2){  num=num*10;  obj.item=&quot;changed&quot;;  obj={item:&quot;changed&quot;};}var num=10;var obj={item: &quot;unchanged&quot;};var obj2= {item: &quot;unchanged&quot;};changeStuff(num, obj, obj2);console.log(num);console.log(obj.item);console.log(obj.item);</code></pre><pre><code>console=&gt; 10 &quot;changed&quot; &quot;unchanged&quot;</code></pre><p>參考資料：<br><a href="https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc" target="_blank" rel="noopener">JS基本觀念：call by value 還是reference 又或是 sharing?</a><br><a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a><br><a href="https://www.youtube.com/watch?v=1YFss_4B_o4&t=302s" target="_blank" rel="noopener">Tech Talk: Pass By Sharing with Javascript</a><br><a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/" target="_blank" rel="noopener">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zT0UU5c.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;之所以會撰寫這篇文，是因為面試過程被考倒的觀念，才發現自己過去從沒注意到這部分啊，那就來寫篇文章來認識它們之中的傳遞方式。&lt;/p&gt;
&lt;h2 id=&quot;首先，先從</summary>
      
    
    
    
    
    <category term="JS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>演算法入門</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/10/02/newpage/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/10/02/newpage/</id>
    <published>2021-10-02T05:17:40.000Z</published>
    <updated>2021-10-05T08:29:17.318Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/LHDcmBI.png" alt=""></p><p>常常看到 YouTube 演算法造成頻道經營的難度、或是facebook演算法而使得行銷曝光度的改變，但始終對演算法這個名詞沒有認識。<br>藉由 Wilson Ren<a href="https://www.udemy.com/course/algorithm-data-structure/?course_id=3819536&fbclid=IwAR3ugnEJMsniBCvoMHthf31EqEQeG9hCL3BQb2gWS7eAFZ4lcixmWOiwNAo" target="_blank" rel="noopener">課程</a></p><h2 id="什麼是演算法？"><a href="#什麼是演算法？" class="headerlink" title="什麼是演算法？"></a>什麼是演算法？</h2><p>用以解決問題而可以逐步執行的步驟或程序。</p><h4 id="來看看現實生活中的演算法"><a href="#來看看現實生活中的演算法" class="headerlink" title="來看看現實生活中的演算法"></a>來看看現實生活中的演算法</h4><ul><li>Google Map 如何找到最短路徑</li><li>YouTube 推薦給你，認為你有興趣的影片</li><li>FB\IG 的加好友、追蹤推薦</li></ul><h2 id="演算法比較"><a href="#演算法比較" class="headerlink" title="演算法比較"></a>演算法比較</h2><p>有兩個演算法都可以完成目標任務，那我們會如何取決誰比較好？</p><ul><li>哪個演算法執行速度快？</li><li>所佔用電腦的記憶體資源少？<h3 id="時間"><a href="#時間" class="headerlink" title="時間?"></a>時間?</h3>首先，在計時演算法所耗時的部分：</li><li>幫演算法做計時，是不實際的事情<ul><li>同一台電腦在執行同一任務，所執行的時間會不同</li><li>不同電腦、CPU處理速度不一樣<h4 id="應該考慮，複雜度-Complexity"><a href="#應該考慮，複雜度-Complexity" class="headerlink" title="應該考慮，複雜度 Complexity"></a>應該考慮，複雜度 Complexity</h4></li></ul></li><li>複雜度分為兩種：時間複雜度、空間複雜度 （在本文多是討論時間複雜度）</li><li>要如何計算時間複雜度?<ul><li>加、減、乘、除、comparison ，這些每一個都可以被算作一個 operation</li><li>Complexity: 在所寫的演算法中，總共用到多少 operations(運算子)</li><li>使用 function 來顯示 Complexity 和 input size 的關係。</li></ul></li></ul><h2 id="Big-O-Notation"><a href="#Big-O-Notation" class="headerlink" title="Big O Notation"></a>Big O Notation</h2><ol><li>是一個工具，用來描述當你的值不斷擴大時，f(n)值會去哪裡</li><li>為最壞情況的打算。他會展示一個演算法複雜度的趨勢</li></ol><h3 id="計算-Big-O-的值"><a href="#計算-Big-O-的值" class="headerlink" title="計算 Big O 的值"></a>計算 Big O 的值</h3><ol><li>Constant doesn’t matter : 常數它並不重要<ul><li>f(n)=3n ：3為常數、n為變數</li></ul></li><li>Small Terms don’t matter<ul><li>fn= 3n^2 + 6n + 4 =&gt; 只需保留到fn= 3n^2</li></ul></li><li>Logarithm Base doesn’t matter<br><img src="https://i.imgur.com/dNM08rx.png" alt=""><h2 id="範例："><a href="#範例：" class="headerlink" title="範例："></a>範例：</h2></li><li>f(n)=3n<br>答案：O(n)</li><li>f(n)=13n^3 + 6n +7<br>答案：O(n^3)</li><li>f(n)=4log₂n<br>答案：O(logn)</li><li>f(n)=5<br>答案：O(1)</li></ol><h2 id="演算法常見-Big-O-的值"><a href="#演算法常見-Big-O-的值" class="headerlink" title="演算法常見 Big O 的值"></a>演算法常見 Big O 的值</h2><p>由好至差</p><ol><li>O(1)</li><li>O(logn)</li><li>O(n)</li><li>O(nlogn)</li><li>O(n^2)</li><li>O(n^3)</li></ol><ul><li>很多sorting值會是 O(nlogn)</li><li>盡量讓演算法可以達到3、4的值</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LHDcmBI.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;常常看到 YouTube 演算法造成頻道經營的難度、或是facebook演算法而使得行銷曝光度的改變，但始終對演算法這個名詞沒有認識。&lt;br&gt;藉由 Wilso</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 - v-on 修飾符</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/09/20/Vue-modify/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/09/20/Vue-modify/</id>
    <published>2021-09-20T07:06:46.000Z</published>
    <updated>2021-10-05T08:38:42.809Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><p>修飾符有分為：<br>1.按件修飾符<br>2.滑鼠修飾符<br>3.事件修飾符</p><p><a href="https://codepen.io/Eva-go/pen/RwgMXGN" target="_blank" rel="noopener">codepen</a></p><h2 id="按鍵修飾符"><a href="#按鍵修飾符" class="headerlink" title="按鍵修飾符"></a>按鍵修飾符</h2><h3 id="1-1-別名修飾"><a href="#1-1-別名修飾" class="headerlink" title="1-1. 別名修飾"></a>1-1. 別名修飾</h3><ul><li>在特定按鍵，按下去的時候觸發<ul><li><code>.enter</code>, <code>.tab</code>, <code>.delete</code>, <code>.esc</code>, <code>.space</code>, <code>.up</code>, <code>.down</code>, <code>.left</code>, <code>.righ</code></li></ul></li><li>使用<code>.enter</code>只有再按下 enter 鍵才會觸發</li></ul><pre><code class="html">  &lt;div id=&quot;app&quot;&gt;   &lt;h6 class=&quot;mt-3&quot;&gt;別名修飾&lt;/h6&gt;  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot; @keyup.enter=&quot;trigger(&#39;enter&#39;)&quot;&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {    }  },  methods: {   trigger: function(name) {      console.log(name, &#39;此事件被觸發了&#39;)    },  }}).mount(&#39;#app&#39;)</code></pre><h3 id="1-2-相應按鍵時才觸發的監聽器"><a href="#1-2-相應按鍵時才觸發的監聽器" class="headerlink" title="1-2. 相應按鍵時才觸發的監聽器"></a>1-2. 相應按鍵時才觸發的監聽器</h3><ul><li>僅在按下相應按鍵時才觸發鼠標或鍵盤事件的監聽器</li><li><code>.ctrl</code>, <code>.alt</code>, <code>.shift</code>, <code>.meta</code></li><li>此範例為 <code>@keyup.shift.enter</code><pre><code class="html">&lt;h6 class=&quot;mt-3&quot;&gt;相應按鍵時才觸發的監聽器&lt;/h6&gt;&lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;text&quot; @keyup.shift.enter=&quot;trigger(&#39;shift + Enter&#39;)&quot;&gt;</code></pre><img src="https://i.imgur.com/gQjWYVy.png" alt=""></li></ul><ol start="2"><li>滑鼠修飾符<br><code>.left</code> 只當點擊鼠標左鍵時觸發。<br><code>.right</code> 只當點擊鼠標右鍵時觸發。<br><code>.middle</code> 只當點擊鼠標中鍵時觸發。</li></ol><ul><li>按下滑鼠右鍵<br><code>&lt;span class=&quot;box&quot; @click.right=&quot;trigger(&#39;right button&#39;)&quot;&gt;</code></li></ul><pre><code class="html">          &lt;h4&gt;滑鼠修飾符&lt;/h4&gt;          &lt;h6 class=&quot;mt-3&quot;&gt;滑鼠修飾符&lt;/h6&gt;          &lt;div class=&quot;p-3 bg-primary&quot;&gt;            &lt;span class=&quot;box&quot; @click.right=&quot;trigger(&#39;right button&#39;)&quot;&gt;            &lt;/span&gt;          &lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/lddG6zT.png" alt=""></p><ol start="3"><li>事件修飾符</li></ol><ul><li>不會限定，是使用滑鼠還是鍵盤，是針對事件本身來進行修飾<br><code>.stop</code> - 調用 <code>event.stopPropagation()</code>。<br><code>.prevent</code> - 調用 <code>event.preventDefault()</code>。<br><code>.capture</code> - 添加事件偵聽器時使用 capture 模式。<br><code>.self</code> - 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調。<br><code>.once</code> - 只觸發一次回調。</li><li>常用的是 <code>&lt;a&gt;</code>外部連結：移除預設事件<pre><code class="html">     &lt;h4&gt;事件修飾符&lt;/h4&gt;        &lt;ul&gt;          &lt;li&gt;.stop - 調用 event.stopPropagation()。&lt;/li&gt;          &lt;li&gt;&lt;strong&gt;.prevent - 調用 event.preventDefault()。&lt;/strong&gt;&lt;/li&gt;          &lt;li&gt;.capture - 添加事件偵聽器時使用 capture 模式。&lt;/li&gt;          &lt;li&gt;.self - 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調。&lt;/li&gt;          &lt;li&gt;.once - 只觸發一次回調。&lt;/li&gt;        &lt;/ul&gt;        &lt;a href=&quot;https://www.google.com/&quot; @click.prevent=&quot;trigger(&#39;prevent&#39;)&quot;&gt;加入 Prevent&lt;/a&gt;</code></pre></li></ul><p>資料來源：<br>六角學院 - Vue 3.js</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NBBY8vo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;修飾符有分為：&lt;br&gt;1.按件修飾符&lt;br&gt;2.滑鼠修飾符&lt;br&gt;3.事件修飾符&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/Eva</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 -  多筆資料渲染 v-for</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/17/Vue-v-for/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/17/Vue-v-for/</id>
    <published>2021-05-17T08:20:22.000Z</published>
    <updated>2021-10-05T08:38:36.440Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><h2 id="v-for-呈現多筆陣列"><a href="#v-for-呈現多筆陣列" class="headerlink" title="v-for 呈現多筆陣列"></a><code>v-for</code> 呈現多筆陣列</h2><ul><li><code>v-for= item in peopleArr</code> ， item 為 自定義名稱，後面(peopleArr)填入要迴圈的資料<ul><li>item是表示 peopleArr 陣列中每個單一物件</li></ul></li><li>key ：為帶入陣列的 key 值</li></ul><pre><code class="html">  &lt;div id=&quot;app&quot;&gt;   &lt;h3&gt;v-for 與 key&lt;/h3&gt;  &lt;p&gt; 人員介紹&lt;/p&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(item, key) in peopleArr&quot;&gt;      {{ key }} - {{ item.name}} / {{ item.age }} 歲    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {     peopleArr: [        {          name: &#39;Ken&#39;,          age: 30,          vegan: false        },        {          name: &#39;Wong&#39;,          page: 35,          vegan: false        },        {          name: &#39;Merry&#39;,          age: 60,          vegan: false        },        {          name: &#39;Tom&#39;,          age: 30,          vegan: true        },      ],    }  },}).mount(&#39;#app&#39;)</code></pre><p><a href="https://codepen.io/Eva-go/pen/powVYmN" target="_blank" rel="noopener">codepen</a><br><img src="https://i.imgur.com/TebHrmC.png" alt=""></p><h2 id="物件迴圈"><a href="#物件迴圈" class="headerlink" title="物件迴圈"></a>物件迴圈</h2><ul><li>每個item 就是每個物件的資料</li><li>key值為物件的屬性名稱</li></ul><pre><code class="html">  &lt;div id=&quot;app&quot;&gt;   &lt;h3&gt;v-for 與 key&lt;/h3&gt;  &lt;p&gt; 人員介紹&lt;/p&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(item, key) in peopleObj&quot;&gt;      {{ key }} - {{ item.name}} / {{ item.age }} 歲    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {     peopleObj:{        Salse: {           name: &#39;Ken&#39;,          age: 30,          vegan: false        },        Manager: {          name: &#39;Wong&#39;,          page: 35,          vegan: false        },        HumanResource: {          name: &#39;Merry&#39;,          age: 60,          vegan: false        },        Crew: {           name: &#39;Tom&#39;,          age: 30,          vegan: true        }      },    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/tzjh6Ah.png" alt=""></p><h2 id="v-for-與-key"><a href="#v-for-與-key" class="headerlink" title="v-for 與 key"></a>v-for 與 key</h2><h3 id="v-for-可以使用-index-當作-key-嗎？"><a href="#v-for-可以使用-index-當作-key-嗎？" class="headerlink" title="v-for 可以使用 index 當作 key 嗎？"></a>v-for 可以使用 index 當作 key 嗎？</h3><p>以六角課程為範例說明</p><pre><code class="html">&lt;h3&gt;v-for 與 key &lt;/h3&gt;  &lt;p&gt;菜單&lt;/p&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(item, key) in products&quot;&gt;      {{ key }} - {{ item.name}} / {{ item.price }} 元      &lt;input type=&quot;text&quot;&gt;    &lt;/li&gt;  &lt;/ul&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){    return {     products: [        {          name: &#39;蛋餅&#39;,          price: 30,          vegan: false        },        {          name: &#39;飯糰&#39;,          price: 35,          vegan: false        },        {          name: &#39;小籠包&#39;,          price: 60,          vegan: false        },        {          name: &#39;蘿蔔糕&#39;,          price: 30,          vegan: true        },      ],    },  method:{    reverseArray: function () {      this.products.reverse();    },  }  }}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/GKjdBGd.png" alt=""></p><ul><li><p>反轉之後，並沒有跟著<br><img src="https://i.imgur.com/ALe8vst.png" alt=""></p></li><li><p>綁定key之後</p><pre><code class="html">&lt;li v-for=&quot;(item, key) in products&quot; v-bind:key=&#39;item.name&#39;&gt;</code></pre></li></ul><p><img src="https://i.imgur.com/kbtUwy1.png" alt=""></p><h3 id="v-for-可以使用-index-當作-key-嗎？-1"><a href="#v-for-可以使用-index-當作-key-嗎？-1" class="headerlink" title="v-for 可以使用 index 當作 key 嗎？"></a><code>v-for</code> 可以使用 index 當作 key 嗎？</h3><p>索引是依照位置來判定，所以當資料的位置修改，索引值也會跟著變動，導致後續的渲染錯誤。<br>如果key是會變動的話，可能會導致資料的渲染錯誤</p><h3 id="如果後端提供的資料，沒有唯一索引要如何處理？"><a href="#如果後端提供的資料，沒有唯一索引要如何處理？" class="headerlink" title="如果後端提供的資料，沒有唯一索引要如何處理？"></a>如果後端提供的資料，沒有唯一索引要如何處理？</h3><p>  1.與後端溝通，為何前端要用到key的值<br>  2.拿到資料後，自己產生key，並放入該物件資料中</p><pre><code>使用v-for時，一定要用key 使用v-for時，不要拿索引當作key請使用唯一的值當作key的值</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NBBY8vo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;v-for-呈現多筆陣列&quot;&gt;&lt;a href=&quot;#v-for-呈現多筆陣列&quot; class=&quot;headerlink&quot; title=&quot;v-for 呈現多筆</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
    <category term="v-for" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/v-for/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 -  資料雙向綁定 v-model</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/17/Vue-v-model/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/17/Vue-v-model/</id>
    <published>2021-05-17T08:16:22.000Z</published>
    <updated>2021-10-05T08:38:31.980Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><p>使用<code>v-model</code>來進行資料的「雙向」綁定， v-model 會根據不同的表單類別來更新元素的內容。<br>主要應用在表單類型進行綁定，常見的表單元素像是 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 以及 <code>&lt;select&gt;</code> 等。</p><h2 id="v-model-可以與-input-、textarea-綁定"><a href="#v-model-可以與-input-、textarea-綁定" class="headerlink" title="v-model 可以與 input 、textarea 綁定"></a>v-model 可以與 input 、textarea 綁定</h2><pre><code class="html">  &lt;h3&gt;input&lt;/h3&gt;     &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;name&quot;&gt;          {{ name }}</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      name: &quot;小明&quot;    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/fuPfWXo.png" alt=""></p><p><img src="https://i.imgur.com/Vyon4w6.png" alt=""></p><pre><code class="html">&lt;h3&gt;textarea&lt;/h3&gt;          &lt;textarea cols=&quot;30&quot; rows=&quot;3&quot; class=&quot;form-control&quot; v-model=&quot;text&quot;&gt;&lt;/textarea&gt;          {{ text }}</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      text: &quot;一段文字敘述&quot;    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/T7AMqwY.png" alt=""></p><p><img src="https://i.imgur.com/fxYLTcU.png" alt=""></p><h2 id="checkbox-單選框"><a href="#checkbox-單選框" class="headerlink" title="checkbox 單選框"></a>checkbox 單選框</h2><ol><li>checkbox與p段落連動</li></ol><ul><li>在input加入<code>v-model=&quot;checkAnswer&quot;</code></li><li>P段洛，放入三元運算：用來判斷當checkAnswer為true，顯示’吃飽了’;反之，’還沒’<ul><li>透過選單的勾選，來顯示 checkAnswer 是 true \ false</li></ul></li></ul><pre><code class="html">     &lt;h3&gt;checkbox 單選框&lt;/h3&gt;     &lt;p&gt;小明，你是吃飽沒？&lt;/p&gt;     &lt;p&gt;{{ checkAnswer ? '吃飽了' : '還沒'}}&lt;/p&gt;     &lt;div class=&quot;form-check&quot;&gt;     &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check1&quot; v-model=&quot;checkAnswer&quot;&gt;    &lt;label class=&quot;form-check-label&quot; for=&quot;check1&quot;&gt;小明回覆&lt;/label&gt;          &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      checkAnswer: false,    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/wBR8ESD.png" alt=""></p><p><img src="https://i.imgur.com/cRDgctR.gif" alt=""></p><ol start="2"><li>checkbox 單選延伸</li></ol><ul><li>回傳單一的值，相對使用三元運算比較直觀</li><li><code>checkAnswer2</code> 是空字串，在 input 綁定後，設定false-value、true-value</li><li>將文字綁入：<code>true-value=&quot;吃飽了&quot; false-value=&quot;還沒&quot;</code>，就可以放入資料欄位上</li></ul><pre><code class="html"> &lt;h3&gt;checkbox 單選延伸&lt;/h3&gt;     &lt;p&gt;小明，你是吃飽沒？&lt;/p&gt;     &lt;p&gt;{{ checkAnswer2 }}&lt;/p&gt;     &lt;div class=&quot;form-check&quot;&gt;     &lt;input type=&quot;checkbox&quot; v-model=&quot;checkAnswer2&quot; true-value=&quot;吃飽了&quot; false-value=&quot;還沒&quot; class=&quot;form-check-input&quot;              id=&quot;check2&quot;&gt;     &lt;label class=&quot;form-check-label&quot; for=&quot;check2&quot;&gt;小明回覆&lt;/label&gt;     &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {      checkAnswer2: &#39;&#39;,    }  },}).mount(&#39;#app&#39;)</code></pre><p><img src="https://i.imgur.com/x4aeut8.png" alt=""></p><p><img src="https://i.imgur.com/qvyj7dH.png" alt=""></p><h2 id="checkbox-複選框"><a href="#checkbox-複選框" class="headerlink" title="checkbox 複選框"></a>checkbox 複選框</h2><ul><li><p>資料格式為陣列</p></li><li><p>覆選框的input裡面要有value</p></li><li><p>當綁定v-model，於畫面點選該項目時，會將 input 中的 value，放入的陣列中</p><ul><li>最後將資料渲染於畫面<pre><code class="html">&lt;h3&gt;checkbox 複選框&lt;/h3&gt;&lt;p&gt;你還要吃什麼？&lt;/p&gt;&lt;p&gt;{{ checkAnswer3.join('') }}&lt;/p&gt;&lt;div class=&quot;form-check&quot;&gt;   &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check3&quot; value=&quot;蛋餅&quot; v-model=&quot;checkAnswer3&quot;&gt;   &lt;label class=&quot;form-check-label&quot; for=&quot;check3&quot;&gt;蛋餅&lt;/label&gt;         &lt;/div&gt;&lt;div class=&quot;form-check&quot;&gt;    &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check4&quot; value=&quot;蘿蔔糕&quot; v-model=&quot;checkAnswer3&quot;&gt;    &lt;label class=&quot;form-check-label&quot; for=&quot;check4&quot;&gt;蘿蔔糕&lt;/label&gt;&lt;/div&gt;&lt;div class=&quot;form-check&quot;&gt;  &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;check5&quot; value=&quot;豆漿&quot; v-model=&quot;checkAnswer3&quot;&gt;  &lt;label class=&quot;form-check-label&quot; for=&quot;check5&quot;&gt;豆漿&lt;/label&gt; &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({</code></pre></li></ul><p>data(){<br>   return {</p><pre><code>checkAnswer3: [],</code></pre><p>  }<br>},</p></li></ul><p>}).mount(‘#app’)</p><pre><code>![](https://i.imgur.com/V6RUoEF.png)## v-model 修飾符修飾符為畫面上，v-model的資料和實際data中的資料在綁定之間，額外處理的小方法。1. 延遲 Lazy* 輸入文字後，要點擊外面或是按下enter，才會出現* 綁定到html的change事件：當完成輸入框的事件之後，才會綁定到資料集```html   &lt;h3&gt;修飾符&lt;/h3&gt;   &lt;h4 class=&quot;mt-3&quot;&gt;延遲 Lazy&lt;/h4&gt;     {{ lazyMsg }}   &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model.lazy=&quot;lazyMsg&quot;&gt;</code></pre><p><img src="https://i.imgur.com/1Jp0XWl.png" alt=""></p><h2 id="純數值-Number"><a href="#純數值-Number" class="headerlink" title="純數值 Number"></a>純數值 Number</h2><p>需要用戶輸入數值，可先將type改為number,並加入修飾符</p><ul><li><code>&lt;input type=&quot;number&quot;&gt;</code>:輸入框無法輸入文字，只能輸入數字，但型別依然是string</li></ul><pre><code class="html">   &lt;h4 class=&quot;mt-3&quot;&gt;純數值 Number&lt;/h4&gt;     {{ numberMsg }}{{ typeof numberMsg }}   &lt;input type=&quot;number&quot; class=&quot;form-control&quot; v-model=&quot;numberMsg&quot;&gt;</code></pre><p><img src="https://i.imgur.com/48WNFq2.png" alt=""></p><ul><li>要確保輸入的內容為純數字型別：要加修飾符</li></ul><pre><code class="html">   &lt;h4 class=&quot;mt-3&quot;&gt;純數值 Number&lt;/h4&gt;       {{ numberMsg }}{{ typeof numberMsg }}   &lt;input type=&quot;number&quot; class=&quot;form-control&quot; v-model.number=&quot;numberMsg&quot;&gt;</code></pre><p><img src="https://i.imgur.com/ANESock.png" alt=""></p><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>將資料內容的前後空白鍵，刪除</p><ul><li>應用於要輸入e-mail帳號，避免用戶不小心在前後加入空白，而造成資料錯誤<pre><code class="html"> &lt;h4 class=&quot;mt-3&quot;&gt;修剪 Trim&lt;/h4&gt;        這是一段{{ trimMsg }}緊黏的文字 &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model.trim=&quot;trimMsg&quot;&gt;</code></pre><img src="https://i.imgur.com/SCJddsn.png" alt=""></li></ul><p>參考資料：<br><a href="https://book.vue.tw/CH1/1-4-directive.html" target="_blank" rel="noopener">重新認識 Vue.js | Kuro Hsu</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NBBY8vo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;v-model&lt;/code&gt;來進行資料的「雙向」綁定， v-model 會根據不同的表單類別來更新元素的內容。&lt;br&gt;主要應用在表單類型進行綁</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 - 綁定方式多變化</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-bind2/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-bind2/</id>
    <published>2021-05-16T08:17:30.000Z</published>
    <updated>2021-10-05T08:38:07.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="動態屬性綁定-注意大小寫"><a href="#動態屬性綁定-注意大小寫" class="headerlink" title="動態屬性綁定(注意大小寫)"></a>動態屬性綁定(注意大小寫)</h2><ul><li>宣告變數dynamic，將 dynamic 綁定於點擊事件上 <code>:click=&quot;dynamic = dynamic === &#39;disabled&#39; ? &#39;readonly&#39;:&#39;disabled&#39;&quot;</code><ul><li>如果變數結果是 disable 的話就會切換成 readonly，反之，就會切換為 disabled</li></ul></li><li>接著可以將值動態地加入 HTML 屬性上 <code>:[dynamic]</code><ul><li>綁定後，就會發現輸入框隨著切換，有不同效果<pre><code class="html">&lt;h3&gt;動態屬性綁定(注意大小寫)&lt;/h3&gt;&lt;button type=&quot;button&quot;v-on:click=&quot;dynamic = dynamic === &#39;disabled&#39; ? &#39;readonly&#39;:&#39;disabled&#39;&quot;&gt;切換為 {{ dynamic }}&lt;/button&gt;&lt;br&gt;&lt;input type=&quot;text&quot; :[dynamic] :value=&quot;name&quot;&gt;</code></pre><pre><code class="javascript">//JS</code></pre></li></ul></li></ul><p>Vue.createApp({</p><p>  data(){<br>     return {<br>      dynamic: ‘disabled’,<br>      breakfastShop: {<br>      name: ‘奇蹟早餐’,<br>        imgUrl: ‘<a href="https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&#39;" target="_blank" rel="noopener">https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&#39;</a>,<br>        resizeImg: ‘<a href="https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;q=80&#39;" target="_blank" rel="noopener">https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;q=80&#39;</a><br>      },<br>    }<br>  }<br>}).mount(‘#app’)</p><pre><code>`readony`:可以選擇輸入框，但無法輸入值`disabled`:無法點選輸入框![](https://i.imgur.com/GfAhQJk.png)![](https://i.imgur.com/YUf3XZk.png)</code></pre><p>再次補充說明：<br>    1. dynamic = 【這邊是最前面的變數，用來存放後面回傳回來的值】<br>    2. dynamic === ‘disabled’ ? 【這邊就是中間判斷式的部分，判斷 dynamic 變數是否為 ‘disabled’】<br>    3. ‘readonly’:’disabled’ 【這邊就是最後面的值，會依照前方的判斷式來決定回傳 ‘readonly’ 還是 ‘disabled’，如果判斷式結果為 True 則回傳 ‘readonly’ ，反之回傳 ‘disabled’】</p><pre><code>## HTML 樣式綁定樣式綁定是時常使用到的效果，能透過此方式，使顏色改變、增加一點簡易動畫的效果。## 範例解說* 替 box 增加旋轉效果* 綁定class可以用陣列方式、或物件方式來添加，以下範例為物件方式  * 物件key值對應 className，物件的值是對應 true\false(判斷式)  * 若className 有 `-` ， 注意要 &quot;bg-danger&quot;* 事件的綁定 `change()` 透過函式來切換 true\false` this[key] = !this[key];`* 切換是否旋轉、切換背景色 ```html&lt;style&gt;.box {  background-color: var(--bs-light);  border: 1px solid var(--bs-gray);  width: 80px;  height: 80px;}.box {  transition: all .5s;}.box.rotate {  transform: rotate(45deg)}&lt;/style&gt; &lt;h2&gt;切換 Class&lt;/h2&gt;          &lt;h3&gt;物件寫法&lt;/h3&gt;          &lt;!-- 物件key值對應 className，物件的值是對應 true\false --&gt;          &lt;div class=&quot;box&quot; :class=&quot;{ rotate: isTransform ,&#39;bg-danger&#39;:boxColor}&quot;&gt;&lt;/div&gt;          &lt;hr&gt;          &lt;button class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;change(&#39;isTransform&#39;)&quot;&gt;選轉物件&lt;/button&gt;          &lt;button class=&quot;btn btn-outline-primary ms-1&quot; v-on:click=&quot;change(&#39;boxColor&#39;)&quot;&gt;切換色彩&lt;/button&gt;</code></pre><pre><code class="javascript">const App = {  data() {    return {      isTransform: true,      boxColor: false,    };  },  methods: {    change: function (key) {      this[key] = !this[key];    },    addClass(arr) {      this.arrayClass.push(...arr);    }  },};Vue.createApp(App).mount(&#39;#app&#39;);</code></pre><p><img src="https://i.imgur.com/KFqN9hz.png" alt=""></p><p><img src="https://i.imgur.com/b9OCub3.gif" alt=""></p><h3 id="整合為一個物件"><a href="#整合為一個物件" class="headerlink" title="整合為一個物件"></a>整合為一個物件</h3><p>將上個範例的兩個class樣式，整合成一個物件</p><pre><code class="html"> &lt;hr class=&quot;mt-4&quot;&gt;   &lt;h3&gt;物件寫法 2&lt;/h5&gt;         &lt;div class=&quot;box&quot; :class=&#39;classObj&#39;&gt;&lt;/div&gt;</code></pre><pre><code class="javascript">const App = {  data() {    return {      isTransform: true,      boxColor: false,      classObj:{        rotata: true,        &quot;bg-danger&quot;: true,      }    };  },  methods: {    change: function (key) {      this[key] = !this[key];    },    addClass(arr) {      this.arrayClass.push(...arr);    }  },};Vue.createApp(App).mount(&#39;#app&#39;);</code></pre><p><img src="https://i.imgur.com/41AKFc8.png" alt=""></p><p><img src="https://i.imgur.com/StALtsi.png" alt=""></p><h2 id="綁定樣式，陣列寫法"><a href="#綁定樣式，陣列寫法" class="headerlink" title="綁定樣式，陣列寫法"></a>綁定樣式，陣列寫法</h2><ul><li>針對單一元素，加入多個class<ul><li>此方式就不用 true\false 的判斷動作，只要綁定在陣列之中的樣式，就會套入效果</li><li>像是範例，就是使按鈕背景色彩為紅色(‘btn-danger’)、無法點擊(‘disabled’)<pre><code class="html">&lt;h4&gt;陣列寫法&lt;/h4&gt;        &lt;button class=&quot;btn&quot; :class=&quot;[&#39;disabled&#39;,&#39;btn-danger&#39;]&quot;&gt;請操作本元件&lt;/button&gt;        &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;addClass([&#39;btn-primary&#39;, &#39;active&#39;])&quot;&gt;為陣列加入          Class&lt;/button&gt;</code></pre><img src="https://i.imgur.com/RZFOrdK.png" alt=""></li></ul></li></ul><ul><li>另一種，製作陣列，並將陣列放入<ul><li>將arrayClass，綁定在標籤的class上</li><li>在點擊按鈕，綁定點擊事件，<code>addClass(arr)</code>，在該函式傳入參數，將陣列內容加入arrayClass，並套入綁定的標籤上</li><li>相對應的方法：<br><img src="https://i.imgur.com/VFfDXPY.png" alt=""></li></ul></li></ul><pre><code class="html">&lt;h4&gt;陣列寫法&lt;/h4&gt;  &lt;button class=&quot;btn&quot; :class=&quot;arrayClass&quot;  &gt;請操作本元件&lt;/button&gt;  &lt;button type=&quot;button&quot;    class=&quot;btn btn-outline-primary&quot;    v-on:click=&quot;addClass([&#39;btn-primary&#39;, &#39;active&#39;])&quot;&gt;為陣列加入 Class&lt;/button&gt;</code></pre><pre><code class="javascript">const App = {  data() {    return {       // Array 操作      arrayClass: [&#39;&#39;],    };  },  methods: {    addClass(arr) {      this.arrayClass.push(...arr);    }  },};Vue.createApp(App).mount(&#39;#app&#39;);</code></pre><p><img src="https://i.imgur.com/PZd0sKO.png" alt=""></p><ul><li><code>btn-primary</code>:背景色為綠色<br><img src="https://i.imgur.com/S0zLJKb.png" alt=""></li></ul><h4 id="補充：混合寫法"><a href="#補充：混合寫法" class="headerlink" title="補充：混合寫法"></a>補充：混合寫法</h4><ul><li>將bootstrap的class放入，且加入arrayClass<ul><li><code>:class=&quot;[arrayClass,&#39;text-danger&#39;]</code>，也就是除了放入 arrayClass 這個變數之外，我們還可以放入新的class給予不同樣式<pre><code class="html">&lt;h4&gt;陣列寫法&lt;/h4&gt;&lt;button class=&quot;btn&quot; :class=&quot;[arrayClass,&#39;text-danger&#39;]&quot;&gt;請操作本元件&lt;/button&gt;  &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-primary&quot; v-on:click=&quot;addClass([&#39;btn-primary&#39;, &#39;active&#39;])&quot;&gt;為陣列加入          Class&lt;/button&gt;</code></pre></li></ul></li></ul><p><img src="https://i.imgur.com/d3dqSTj.png" alt=""></p><h2 id="行內樣式style"><a href="#行內樣式style" class="headerlink" title="行內樣式style"></a>行內樣式style</h2><h4 id="要綁定style的時候"><a href="#要綁定style的時候" class="headerlink" title="要綁定style的時候"></a>要綁定style的時候</h4><ul><li>key會帶入style的屬性(注意要以駝峰式)，如background-color，要改為backgroundColor</li><li>值則是帶入style相對應的值</li></ul><pre><code class="html">&lt;h2&gt;行內樣式&lt;/h2&gt;            &lt;h4&gt;綁定行內樣式&lt;/h4&gt;            &lt;div class=&quot;box&quot; :style=&quot;{backgroundColor:&#39;red&#39;}&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></pre><h3 id="加入準備好的資料格式"><a href="#加入準備好的資料格式" class="headerlink" title="加入準備好的資料格式"></a>加入準備好的資料格式</h3><ul><li><p>將設定好的物件，裡面有包含數個樣式，直接綁定至style<br><img src="https://i.imgur.com/z93Jmam.png" alt=""></p></li><li><p>背景色彩，紅色，邊框5px<br><img src="https://i.imgur.com/lWYdxIi.png" alt=""></p></li></ul><h3 id="同時多個樣式"><a href="#同時多個樣式" class="headerlink" title="同時多個樣式"></a>同時多個樣式</h3><ul><li>以陣列裡面包多個物件<pre><code class="html">&lt;div class=&quot;box&quot; :style=&quot;[styleObject,styleObject2]&quot;&gt;&lt;/div&gt;</code></pre><img src="https://i.imgur.com/11h8F7J.png" alt=""></li></ul><p><img src="https://i.imgur.com/62sDl0J.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;動態屬性綁定-注意大小寫&quot;&gt;&lt;a href=&quot;#動態屬性綁定-注意大小寫&quot; class=&quot;headerlink&quot; title=&quot;動態屬性綁定(注意大小寫)&quot;&gt;&lt;/a&gt;動態屬性綁定(注意大小寫)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;宣告變數dynamic，將 dynamic </summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 - 事件綁定</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-v-on/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-v-on/</id>
    <published>2021-05-16T08:16:30.000Z</published>
    <updated>2021-10-05T08:38:53.199Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><ul><li>建立add、minus兩個按鈕<ul><li>點選add增加數字、點選minus減少數字</li></ul></li><li>讓add按鈕綁定<code>addFn</code>函式：<code>v-on:click=&quot;addFn&quot;</code> <code>on</code> <code>click</code>事件，執行<code>addFn</code>函式</li><li>綁定後，在<code>methods</code>撰寫<code>addFn</code>函式內容，要取得 data 中的 num 才能進行運算 =&gt;<code>this.num++</code></li><li>同理，在minus的按鈕，函式內運算<code>this.num++</code>，並將點擊事件放入<code>button</code><ul><li>v-on:Event 事件綁定，有兩種撰寫方式<br><img src="https://i.imgur.com/IUUcznh.png" alt=""></li></ul></li></ul><pre><code class="html"> &lt;div id=&quot;app&quot;&gt;   &lt;h1&gt;{{num}}&lt;/h1&gt;    &lt;button v-on:click=&quot;addFn&quot;&gt;Add&lt;/button&gt;    &lt;!-- v-on 改為@ --&gt;    &lt;button @click=&quot;MinusFun&quot;&gt;Minus&lt;/button&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({  data(){     return {       num: 0    }  },  methods: {    addFn() {       //num.value = num.value + 1;          this.num ++;    },     MinusFun(){        this.num--;     },  }}).mount(&#39;#app&#39;)</code></pre><p><a href="https://codepen.io/Eva-go/pen/bGRLXNW" target="_blank" rel="noopener">codepen</a></p><h2 id="事件與class的綁定"><a href="#事件與class的綁定" class="headerlink" title="事件與class的綁定"></a>事件與class的綁定</h2><ul><li><p>於 box 綁定旋轉的效果 <code>:class=&quot;{ rotate: isTransform }</code></p></li><li><p>在button綁定觸發旋轉的事件</p><pre><code class="html">&lt;style&gt;.box { margin:0 auto;background-color: #fff;border: 1px solid #ccc;width: 80px;height: 80px;}.box {transition: all .5s;}.box.rotate {transform: rotate(45deg)}&lt;/style&gt;&lt;div id=&quot;app&quot;&gt; &lt;h3&gt;觸發事件 與 縮寫*&lt;/h3&gt;&lt;div class=&quot;box&quot; :class=&quot;{ rotate: isTransform }&quot;&gt;&lt;/div&gt;&lt;hr&gt;&lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;changeClass&quot; &gt;選轉物件&lt;/button&gt;&lt;/div&gt;</code></pre><pre><code class="javascript">Vue.createApp({data() {  return {     isTransform: true,  };},methods: {   changeClass() {    this.isTransform =!this.isTransform;  },}};</code></pre></li></ul><p>}).mount(‘#app’)</p><pre><code>## 帶入參數* 建立 `change()` 函式以帶入參數方式，來變化 isTransform 的 true\false```html&lt;h3&gt;帶入參數*&lt;/h3&gt;  &lt;div class=&quot;box&quot; :class=&quot;{ rotate: isTransform }&quot;&gt;&lt;/div&gt;  &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;change(&#39;isTransform&#39;)&quot;&gt;選轉物件&lt;/button&gt;</code></pre><pre><code class="javascript">Vue.createApp({ data() {    return {       isTransform: true,    };  },  methods: {     changeClass() {      this.isTransform =!this.isTransform;    },    change(key) {      this[key] = !this[key];    },  }};}).mount(&#39;#app&#39;)</code></pre><h2 id="動態物件方法"><a href="#動態物件方法" class="headerlink" title="動態物件方法 {}"></a>動態物件方法 {}</h2><ul><li><p>在一個元素上，加入多個事件</p></li><li><p>注意：此方式無法傳入參數</p><pre><code class="html">&lt;h3&gt;動態物件方法 {}&lt;/h3&gt;        &lt;!-- 此方法無法傳入參數 --&gt;&lt;button class=&quot;box&quot; @=&quot;{    mousedown:down,    mouseup:up }&quot;&gt;&lt;/button&gt;</code></pre><pre><code class="javascript">Vue.createApp({data() {  return {     isTransform: true,  };},methods: {   changeClass() {    this.isTransform =!this.isTransform;  },  change(key) {    this[key] = !this[key];  },  down() {    console.log(&quot;按下&quot;);  },  up() {    console.log(&quot;放開&quot;);  }}};</code></pre></li></ul><p>}).mount(‘#app’)</p><pre><code>![](https://i.imgur.com/qO3AcxL.gif)[codepen](https://codepen.io/Eva-go/pen/abwYwPa)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NBBY8vo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立add、minus兩個按鈕&lt;ul&gt;
&lt;li&gt;點選add增加數字、點選minus減少數字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;讓add按鈕</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 - 屬性綁定</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-bind/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-bind/</id>
    <published>2021-05-16T06:56:28.000Z</published>
    <updated>2021-10-05T08:38:00.097Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NBBY8vo.png" alt=""></p><p>  屬性綁定可以輕鬆的將data中的資料，與HTML的標籤屬性綁定，這樣一來可以動態的變更資料。</p><h2 id="原本-HTML-的樣子"><a href="#原本-HTML-的樣子" class="headerlink" title="原本 HTML 的樣子"></a>原本 HTML 的樣子</h2><ul><li>img中原本有個圖片資料</li><li>v-bind是指令，<code>：</code>後接的是HTML的屬性</li></ul><pre><code class="html">  &lt;h3&gt;綁定屬性 v-bind&lt;/h3&gt;  &lt;p&gt;{{ breakfastShop.name }}&lt;/p&gt;  &lt;img src=&quot;https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&quot; class=&quot;square-img&quot; alt=&quot;&quot;&gt;</code></pre><pre><code class="javascript">//JSVue.createApp({  data(){     return {      breakfastShop: {        name: &#39;奇蹟早餐&#39;,        imgUrl: &#39;https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=200&amp;q=80&#39;,        resizeImg: &#39;https://images.unsplash.com/photo-1600182610361-4b4d664e07b9?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;q=80&#39;      },    }  }}).mount(&#39;#app&#39;)</code></pre><h3 id="修改-gt-綁定JS中-breakfastShop-物件資料內容"><a href="#修改-gt-綁定JS中-breakfastShop-物件資料內容" class="headerlink" title="修改 =&gt; 綁定JS中 breakfastShop 物件資料內容"></a>修改 =&gt; 綁定JS中 breakfastShop 物件資料內容</h3><p><img src="https://i.imgur.com/H3UzhrB.png" alt=""></p><ul><li>將原本<code>src</code> =&gt; <code>v-bind:src=&quot;breakfastShop.imgUrl&quot;</code><ul><li>此外title 屬性，也能照樣綁定喔！  <pre><code class="html">&lt;h3&gt;綁定屬性 v-bind&lt;/h3&gt;      &lt;p&gt;{{ breakfastShop.name }}&lt;/p&gt;      &lt;img v-bind:src=&quot;breakfastShop.imgUrl&quot; class=&quot;square-img&quot; v-bind:title=&quot;breakfastShop.name&quot; alt=&quot;&quot;&gt;</code></pre><img src="https://i.imgur.com/Xhtez9s.png" alt=""></li></ul></li></ul><h3 id="縮寫形式"><a href="#縮寫形式" class="headerlink" title="縮寫形式"></a>縮寫形式</h3><ul><li>留下冒號<pre><code class="html">&lt;h3&gt;縮寫形式 &lt;code&gt;:&lt;/code&gt;&lt;/h3&gt;        &lt;img :src=&quot;breakfastShop.imgUrl&quot; class=&quot;square-img&quot; :title=&quot;breakfastShop.name&quot; alt=&quot;&quot;&gt;</code></pre></li></ul><pre><code>## 其他屬性的綁定* 當他是飽的狀態，就無法按下送出    * 預設是false 所以可以送出表單    * 但當點擊狀態切換(isFull: true)，此時就會無法點擊送出按鈕* 由範例可得知，可以透過 true\false 的狀態切換，製造出不同互動效果```html &lt;h3&gt;更多屬性綁定&lt;/h3&gt;          小明還想點餐：          &lt;form action=&quot;&quot;&gt;            &lt;input type=&quot;text&quot; value=&quot;我要吃蘿蔔糕&quot;&gt;            &lt;button type=&quot;submit&quot; :disabled=&quot;isFull&quot;&gt;送出&lt;/button&gt;          &lt;/form&gt;          &lt;button type=&quot;button&quot; v-on:click=&quot;change(&#39;isFull&#39;)&quot;&gt;狀態切換&lt;/button&gt;</code></pre><p><img src="https://i.imgur.com/GVQXr8f.png" alt=""></p><ul><li>預設是false，所以可以點擊送出<br><img src="https://i.imgur.com/4HmkD5f.png" alt=""></li></ul><p><img src="https://i.imgur.com/w91MEBD.png" alt=""></p><p>資料來源：<br>六角學院 - Vue.js 3 課程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NBBY8vo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  屬性綁定可以輕鬆的將data中的資料，與HTML的標籤屬性綁定，這樣一來可以動態的變更資料。&lt;/p&gt;
&lt;h2 id=&quot;原本-HTML-的樣子&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 3 - 起手式</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-basic/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/05/16/Vue-basic/</id>
    <published>2021-05-16T05:56:28.000Z</published>
    <updated>2021-10-05T08:38:50.375Z</updated>
    
    <content type="html"><![CDATA[<p>今天要介紹的是 Vue.js3 的起手式，主要參考<a href="https://vuejs.org/v2/guide/#Getting-Started" target="_blank" rel="noopener">官方文件</a>來學習</p><h3 id="載入方式"><a href="#載入方式" class="headerlink" title="載入方式"></a>載入方式</h3><pre><code class="javascript">&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></pre><h3 id="引入之後，在index-html檔案"><a href="#引入之後，在index-html檔案" class="headerlink" title="引入之後，在index.html檔案"></a>引入之後，在<code>index.html</code>檔案</h3><pre><code class="html"> &lt;div id=&quot;app&quot;&gt;    &lt;h1&gt;{{message}}&lt;/h1&gt;  &lt;/div&gt;</code></pre><pre><code class="javascript">//JSVue.createApp({  data(){     return {      message: &#39;I am Eva!&#39;    }  }}).mount(&#39;#app&#39;)</code></pre><ul><li>畫面就會出現相應的文字<br><img src="https://i.imgur.com/l7MiTCV.png" alt=""></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天要介紹的是 Vue.js3 的起手式，主要參考&lt;a href=&quot;https://vuejs.org/v2/guide/#Getting-Started&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文件&lt;/a&gt;來學習&lt;/p&gt;
&lt;h3 id=&quot;載入方</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>SCSS- ClothesStore</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/03/05/scss-ClothesStore/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/03/05/scss-ClothesStore/</id>
    <published>2021-03-05T06:26:19.000Z</published>
    <updated>2021-10-05T08:42:35.152Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/v5qnxzN.png" alt=""></p><p><a href="https://eva813.github.io/Eva_portfolio/sass-ClothesStore/ClothesStore.html" target="_blank" rel="noopener">成品</a></p><h2 id="scss-檔案的建立"><a href="#scss-檔案的建立" class="headerlink" title="scss 檔案的建立"></a>scss 檔案的建立</h2><p>所建立的各分檔，個別會負責不同的區塊，並透過<code>@import</code>放入主要的sass檔</p><ul><li>main.scss 引入其他分檔<br><img src="https://i.imgur.com/PLNNF5k.png" alt=""></li><li>abstracts<ul><li>/_variables.scss：設定常用的變數，如：顏色、字體大小</li><li>/_mixin.scss：設定某些區段中，重複用到的樣式，並於該區段要使用的時候引用</li></ul></li><li>base<ul><li>/_base.scss：為設定大框架，如html、body、container，等主幹的大小、字型的設定</li></ul></li><li>components:放置部分功能元件<ul><li>/_button.scss：按鈕的設定</li><li>/_heading.scss：標題</li><li>/_logo.scss</li><li>/_dropdown.scss</li></ul></li><li>layout （設計網頁版面配置(Layout)）<ul><li>/_header.scss</li><li>/_navigation.scss</li><li>/_products.scss</li><li>/_slidshow.scss</li><li>/_footer.scss</li></ul></li><li>pages 通常是用來放置其他分頁（網頁內會連結到其他相關分頁）</li><li>venders 放置外部套件</li></ul><p><img src="https://i.imgur.com/GmeHZ7w.png" alt=""></p><h3 id="1-基礎設置"><a href="#1-基礎設置" class="headerlink" title="(1)基礎設置"></a>(1)基礎設置</h3><h4 id="1-1-Grid-練習"><a href="#1-1-Grid-練習" class="headerlink" title="(1.1)Grid 練習"></a>(1.1)Grid 練習</h4><p><code>_base.scss</code></p><ul><li>總共要設置10欄</li><li>列的則是設置4區塊</li><li>並設置每個區塊都有1.6rem的gap<pre><code class="scss">.container{  display: grid;  grid-template-columns:minmax(6rem,1fr) repeat(8,minmax(min-content,16 rem))   minmax(6rem,1fr);//10欄  grid-template-rows: repeat(4,min-content);  grid-row-gap:1.6rem ;</code></pre></li></ul><p>}</p><pre><code>![](https://i.imgur.com/QA3NLgt.png)* `minmax(min, max)``minmax(6rem,1fr)`:設定格線最小6rem，最大1frfr 單位就是為了格線布局而生，fraction，中文意思是分數，當使用在網格軌道上時，可以直接想像成 &quot;我的這個空位要佔有總 fr 數量的幾等份&quot;* `repeat(8,minmax(min-content,16rem))`:重複8個，最小：min-content;最大16rem    * repeat() 重複網格線及間距     * max-content/min-content 最小內容尺寸/最大內容尺寸        * max-content：給予網格區域所需的最大尺寸空間，內容盡可能避免折行。        * min-content：給予網格區域所需的最小尺寸空間，內容盡可能的折行，但不會溢出邊界。[[Day19] grid-template 屬性之 rows/columns](https://ithelp.ithome.com.tw/articles/10248418)[Min &amp; Max Content Sizing in CSS Grid — 1/3 Flexibility](https://www.youtube.com/watch?v=lZ2JX_6SGNI)[CSS Layout很難？用這招30秒就讓你輕鬆生出網頁版面！](http://csscoke.com/2013/10/17/css-layout-generator/)---#### (1.2)常用變數* `` _variable.scss``map與function的搭配使用* 設定不同的顏色，並設置函式，以利後續使用```scss$colors:(  primary:#333,  secondary:#ffe,  tertiary:#f2f0f1,  quaternary:#f5b149);//創造函式//函式名稱為color代入參數為$color-name，使用map代入物件，最為回傳的結果@function color($color-name){  @return map-get($map: $colors, $key:$color-name )}$font-size:(  xl:3rem,  lg:2.5rem,  md:2rem,  sm:1.8rem,  xs:1.6rem);@function size($size){  @return map-get($map: $font-size, $key:$size )}</code></pre><hr><h3 id="2-layout-header-scss"><a href="#2-layout-header-scss" class="headerlink" title="(2)layout/_header.scss"></a>(2)<code>layout/_header.scss</code></h3><p>header的版面</p><ul><li><code>grid-column: 1/-1; (1/11) grid-row: 1/2;</code>表示所佔的區隔<br><img src="https://i.imgur.com/C1W2Urq.png" alt=""></li><li>而在header這區，在設置grid劃分區塊<ul><li>有9欄</li><li>列設置3區塊<pre><code class="scss">.header{grid-column: 1/-1; //1/11grid-row: 1/2;display: grid;grid-template-columns: 1fr repeat(7,minmax(min-content,16rem)) 1fr;grid-template-rows: repeat(3,min-content);grid-gap: 2rem;}</code></pre></li></ul></li><li><code>grid-column: 1/-1; //1/11  ; grid-row: 1/2;</code> <a href="https://stackoverflow.com/questions/49005233/whats-the-difference-between-grid-column-value-1-1-and-1-2" target="_blank" rel="noopener">What’s the difference between grid-column value 1/1 and 1/2?</a></li></ul><h3 id="3-logo的大小設置"><a href="#3-logo的大小設置" class="headerlink" title="(3)logo的大小設置"></a>(3)logo的大小設置</h3><p><code>_logo.scss</code></p><ul><li>注意：設立所設定的欄和列的區塊，是在header設置的grid底下<br><img src="https://i.imgur.com/OEkTxyS.png" alt=""></li></ul><pre><code class="scss">.logo{  grid-column: 1/2;  grid-row: 1/2;  padding: 1rem;  //class=&quot;logo-img&quot;  &amp;-img{      width: 10rem;    height: 100%;  }}</code></pre><h3 id="4-heading"><a href="#4-heading" class="headerlink" title="(4)heading"></a>(4)heading</h3><ul><li>標題的位置一樣利用grid來設定</li><li>在文字的字體、大小、間距進行調整<br><code>_heading.scss</code><pre><code class="scss">.heading{grid-column: 4/7;grid-row: 2/3;text-align: center;&amp;-text{  font-family: &#39;Great Vibes&#39;,cursive;  font-size: size(xl)*2; //結果為6rem  font-weight: lighter;  letter-spacing: 0.5rem;}}</code></pre><img src="https://i.imgur.com/JfkrqEb.png" alt=""></li></ul><h3 id="5-heading中的navigation"><a href="#5-heading中的navigation" class="headerlink" title="(5)heading中的navigation"></a>(5)heading中的navigation</h3><p> <code>layout/_navigation.scss</code></p><ul><li><code>.first-nav</code>為放置右上角</li><li><code>.second-nav</code>為放置下方，中間的位置<pre><code class="scss"></code></pre></li></ul><p>.first-nav{<br>  //放在最後三欄<br>  grid-column: 7/10;<br>  grid-row: 1/2;<br>  @include navigation;<br>}<br>.second-nav{<br>  grid-column: 3/8;<br>  grid-row: 3/4;<br>  @include navigation;<br>}<br>.dropdown{<br>  display: none;<br>}</p><pre><code>![](https://i.imgur.com/PWJoEoH.png)* @mixin，創造navigstion共用樣式    * 使navigation的li-list可以橫向分散排列    * 設定hover效果，使游標摸到顏色變淺`lighten()````scss//.first-nav-list@mixin navigation{  &amp;-list{      display: flex;    justify-content: space-around;    align-items: center;    height: 100%;  }  &amp;-item{    list-style: none;  }  &amp;-link{    color: color(primary);    text-decoration: none;    font-size: size(sm);    transition: all .3s;    &amp;:hover{      color: lighten(color(primary),40%);    }  }}</code></pre><p><img src="https://i.imgur.com/t6KdpJ9.png" alt=""></p><h3 id="6-下拉選項：dropdown-list的箭頭符號"><a href="#6-下拉選項：dropdown-list的箭頭符號" class="headerlink" title="(6)下拉選項：dropdown list的箭頭符號"></a>(6)下拉選項：dropdown list的箭頭符號</h3><p><code>components/_dropdown.scss</code></p><ul><li><code>font-family: &#39;Font Awesome 5 Free&#39;</code>：把icon當作字體使用<br><a href="https://yuwensaf.github.io/6110beb1/" target="_blank" rel="noopener">使用 fontAwesome 動態加入連結 icon</a></li></ul><pre><code class="scss">.dropdown-li{  position: relative; //創造下拉選單的箭頭符號 &amp;::after{   font-family: &#39;Font Awesome 5 Free&#39;;   content: &#39;\f078&#39;;   font-weight:bold ; }}</code></pre><p><img src="https://i.imgur.com/4pg8oNR.png" alt=""></p><ul><li><p>製作下拉式選單的三角形</p><ul><li>先利用border製作出上、下、左、右的三角<pre><code class="scss">.dropdown{&amp;::before{content: &#39;&#39;;display: block;position: absolute;top: -1.5rem;left: 7.3rem;border-top: 15px solid red;border-right: 15px solid green;border-bottom: 15px solid orange;border-left: 15px solid blue;</code></pre></li></ul><p>}<br>}</p><pre><code>![](https://i.imgur.com/chq5TM1.png)</code></pre></li><li><p>調整上方各色的三角形，並留下要保留的一個三角形</p></li></ul><pre><code class="scss">  &amp;::before{    content: &#39;&#39;;    display: block;    position: absolute;    top: -1.5rem;    left: 7.3rem;    // border-top: 15px solid red;    border-right: 15px solid transparent;    border-bottom: 15px solid orange;    border-left: 15px solid transparent;  }</code></pre><p><img src="https://i.imgur.com/YhxKI4C.png" alt=""></p><ul><li><code>right: -2.8rem;</code>:條整位置對齊正方形list</li><li><code>border-bottom: 15px solid darken(color(tertiary),5%);</code>：修改三角形的顏色，使整體為灰色</li></ul><pre><code class="scss">.dropdown{  position: absolute;  top: 3rem;  right: -2.8rem; //使整個往右移動  width: 10rem;  background-color:darken(color(tertiary),5%);  @include navigation;  padding: 1rem;  text-align: center;  border-radius: 0.2rem;  &amp;::before{    content: &#39;&#39;;    display: block;    position: absolute;    top: -1.5rem;    left: 7.3rem;    // border-top: 15px solid red;    border-right: 15px solid transparent;    border-bottom: 15px solid darken(color(tertiary),5%);    border-left: 15px solid transparent;  }</code></pre><p><img src="https://i.imgur.com/JMI2Zgc.png" alt=""></p><ul><li><p>hover使下拉選單消失\出現</p><ul><li>建立游標摸到<code>.dropdown-li</code>，會顯示下拉選單</li><li><code>visibility</code>、<code>opacity</code><pre><code class="scss">.dropdown-li{</code></pre></li></ul><p>&amp;:hover .dropdown{<br>visibility: visible;<br>opacity: 1;<br>}<br>}</p></li></ul><p>.dropdown{<br>visibility: hidden;<br>   opacity: 0;<br>  transition: opicity .3s;<br>}</p><pre><code>![](https://i.imgur.com/vY3cbuj.gif)![](https://i.imgur.com/0zOvMTI.png)## 使slideshow可以跳轉(如幻燈片效果)* 使用`@keyframes`做出動畫位置* Animation Duration(動畫整個完成一次的時間): (fade-in + visible) × images = duration.    * 假設你要讓圖片花1秒fade-in，再讓他顯示1秒。而你共有3張圖片，所以總共所需時間為6秒。* Animation Delay:(fade-in + visible) × (ordinal position − 1) = delay.* Keyframes: 100 ÷ animation duration = percentage for 1 second.(100/20=5%)，5％為1秒，所以4秒大約是20％的位置```scss.slideshow{ &amp;-slide{    //使圖片、文字都放在同一個位置  position: absolute;   top: 0;   left: 0;   width: inherit;   height: inherit;//預設先讓slide消失   visibility: hidden;    opacity: 0;   animation: slideshow 20s linear infinite ;   }}@keyframes slideshow{   //主要是0~20時圖片顯示，之後都消失，讓其他圖片得宜顯示  //0~2%創造fade的效果  0%{    visibility: hidden;    opacity: 0;  };  2%{    visibility: visible;    opacity: 1;  }  //2%~18% slide要顯示  18%{    visibility: visible;    opacity: 1;  }  //18~20要消失  20%{    visibility: hidden;    opacity: 0;  }  100%{    visibility: hidden;    opacity: 0;  }}</code></pre><p><a href="https://snook.ca/archives/html_and_css/simplest-css-slideshow" target="_blank" rel="noopener">Simplest CSS Slideshow</a><br><a href="https://www.smashingmagazine.com/2012/04/pure-css3-cycling-slideshow/#4" target="_blank" rel="noopener">CSS3 Keyframes Animation</a><br><a href="https://pjchender.blogspot.com/2015/12/cssanimation-keyframes.html" target="_blank" rel="noopener">[筆記] CSS動畫Animation — @keyframes</a><br><a href="https://www.oxxostudio.tw/articles/201803/css-animation.html" target="_blank" rel="noopener">完整解析 CSS 動畫 ( CSS Animation )</a></p><ul><li>設置延遲時間(4秒)，使每張圖片呈現(css的撰寫方式)<ul><li><code>:nth-child()</code>選擇第幾張圖片<pre><code class="css">/*設置延遲時間，讓每張slide呈現4秒替換*/.slideshow-slide:nth-child(1){animation-delay: 0s;}.slideshow-slide:nth-child(2){animation-delay: 4s;}.slideshow-slide:nth-child(3){animation-delay: 8s;}.slideshow-slide:nth-child(4){animation-delay: 12s;}.slideshow-slide:nth-child(5){animation-delay: 16s;}</code></pre></li></ul></li></ul><ul><li>將上方轉化為<code>@each</code>的寫法<ul><li>先創造一個列表<code>$animlist</code>，在each迴圈時要但進去的項目</li><li>在each迴圈中<code>.slideshow-slide:nth-child</code>放入slide of number(取得列表中第一個值)，後面接著寫下要執行的動作<code>animation-delay: nth($item,2);</code></li></ul></li></ul><pre><code class="scss">///改寫為=&gt;$animlist:第幾個 延遲秒數,//#{nth($item,1)}: 1表示(2 4s)，第一個值=2$animList:1 0s,2 4s,3 8s,4 12s, 5 16s;@each $item in $animList {   .slideshow-slide:nth-child(#{nth($item,1)}){     animation-delay: nth($item,2);     //2就是指秒數   }}</code></pre><p><a href="https://www.youtube.com/watch?v=O4hPOMX8AaU" target="_blank" rel="noopener">Sass Tutorials #9 - Nth Function In Lists</a></p><h2 id="產品區下方see-more按鈕"><a href="#產品區下方see-more按鈕" class="headerlink" title="產品區下方see more按鈕"></a>產品區下方see more按鈕</h2><ul><li>html part<ul><li>有三個<code>arrow-line</code>，於後續在scss中會運用此三個div製作箭頭符號<pre><code class="html">&lt;div class=&quot;products-btn&quot;&gt;  &lt;a href=&quot;#&quot; class=&quot;btn&quot;&gt;    &lt;div class=&quot;btn-bg&quot;&gt;      &lt;div class=&quot;arrow&quot;&gt;        &lt;div class=&quot;arrow-line arrow-line-1&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;arrow-line arrow-line-2&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;arrow-line arrow-line-3&quot;&gt;&lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;span class=&quot;btn-text&quot;&gt;      See More    &lt;/span&gt;  &lt;/a&gt;&lt;/div&gt;</code></pre></li></ul></li></ul><ul><li><p>創造arrow<br><code>transform: rotateZ</code> :Z軸 (使其斜向旋轉45度)</p><pre><code class="scss">&amp;-line {    height: .2rem;    background-color: color(secondary);    position: absolute;}  &amp;-line-2 {    width: 1rem;    //透過旋轉線2,線3使其成為交叉    transform: rotateZ(45deg);  }  &amp;-line-3 {    width: 1rem;    transform: rotateZ(-45deg);  }</code></pre><p><img src="https://i.imgur.com/s62AXMY.png" alt=""></p></li></ul><p><code>transform-origin去設定物件變形的起始點</code></p><pre><code class="scss">&amp;-line {      height: .2rem;      background-color: color(secondary);      position: absolute;      //將x變成arrow &gt; ;因預設原點是在center，所以須將原點拉到右邊，形成箭頭      transform-origin:right ;  }</code></pre><p><img src="https://i.imgur.com/wbRTSeb.png" alt=""></p><p><a href="https://juejin.cn/post/6844903780937367565" target="_blank" rel="noopener">CSS 属性篇(三)：transform-origin属性</a></p><ul><li>增加橫向直線</li></ul><pre><code class="scss">&amp;-line-1{      width: 2rem;      transform: translateX(-0.7rem);    }</code></pre><p><img src="https://i.imgur.com/sdIdcZI.png" alt=""></p><ul><li>設置動畫，透過摸到箭頭，會延展<ul><li>bg的的寬度進行延展</li></ul></li></ul><pre><code class="scss">.btn{&amp;:hover .btn-bg{    width: 18rem;  }  &amp;-bg{     width: 4rem;     height: 4rem;    background-color: color(primary) ;    //使其變圓形     border-radius: 5rem ;    position: absolute;    left: 0;    transition: width .2s ;  }   &amp;-line-1{       width: 0;      transform: translateX(-0.7rem);    }    //* line-1預設看不到，透過hover出現  }</code></pre><p><img src="https://i.imgur.com/vQjUp05.gif" alt=""></p><ul><li><p>使see more 出現</p><ul><li>先修改see more的顏色</li><li>即便改變顏色，還是會被bg覆蓋，所以要調整z-index<pre><code class="scss">.btn{</code></pre></li></ul><p>&amp;:hover .btn-text{<br>  color: color(secondary);<br> }</p></li></ul><p>  &amp;-text{<br>    font-size: size(xs);<br>    text-transform: uppercase;<br>    color: color(primary);<br>    z-index: 10;<br>  }</p><p>}</p><pre><code>![](https://i.imgur.com/bo8TJLy.gif)* 將箭頭向右移動，並呈現完整箭頭符號    * 設定`.arrow`右移，並讓line-1得宜呈現並延展```scss.btn{   &amp;:hover .arrow{    transform: translateX(1rem);  }   &amp;:hover .arrow-line-1{    width: 2rem;  } .arrow{    @include flexPosition;    transition: transform .2s ;    &amp;-line-1{      width: 0;      transform: translateX(-0.7rem);      transition: width .2s ;      }    }}</code></pre><p><img src="https://i.imgur.com/9pptj0t.gif" alt=""></p><h2 id="表尾區塊"><a href="#表尾區塊" class="headerlink" title="表尾區塊"></a>表尾區塊</h2><p><img src="https://i.imgur.com/yHeHkU8.png" alt=""></p><h3 id="1-footer區塊的樣式"><a href="#1-footer區塊的樣式" class="headerlink" title="(1)footer區塊的樣式"></a>(1)footer區塊的樣式</h3><p> <code>layout/_footer.scss</code></p><ul><li>footer有三區，中間是表單，左右邊分別為資訊連結<pre><code class="scss">.footer{</code></pre></li></ul><p>  grid-column: 1/-1;<br>  grid-row: 4/5;<br>  @include flexPosition(space-around);<br>  padding:5rem 0 ;<br>  border-top: .1rem solid color(primary);<br>}</p><pre><code>![](https://i.imgur.com/tSWtPTW.png)* 透過`＠mixin`一次修改2區的條例項目（`mixin_scss`）    * 其中包含文字大小、樣式、hover效果```scss@mixin footerList {  &amp;-heading{    font-size: size(lg);    color:color(primary);  }  &amp;-item{    list-style: none;    margin: 1rem 0;  }  &amp;-link{    font-size: size(xs);    text-decoration: none;    color: lighten(color(primary),15%);    transition: color .2s ;    &amp;:hover{      color:lighten(color(primary),35%)    }  }}</code></pre><p><img src="https://i.imgur.com/X9BA5K0.gif" alt=""></p><h3 id="2-社群icon"><a href="#2-社群icon" class="headerlink" title="(2)社群icon"></a>(2)社群icon</h3><pre><code class="scss">.social-icons{    display: flex;    justify-content: space-between;    padding: 1rem;    box-sizing: border-box;    &amp;-item{      list-style: none;    }    &amp;-link{      text-decoration: none;      width: 4rem;      height: 4rem;      border:.1rem solid color(primary);    }</code></pre><p><img src="https://i.imgur.com/IZzM7eK.png" alt=""></p><ul><li><code>border-radius: 100%;</code>調整為圓形外框</li><li>a標籤的前放為i的圖示，所以flex的設置，是針對<code>social-icons-lik</code><br><img src="https://i.imgur.com/kd6jbyV.png" alt=""></li><li>利用<code>@each</code>來套入icon的顏色</li></ul><pre><code class="scss">&amp;-link{      text-decoration: none;      width: 4rem;      height: 4rem;      border:.1rem solid color(primary);      //修改icon成圓形      // display: block;      border-radius: 100%;      @include flexPosition;      i{        font-size: size(md);      }    }$socialMediaColors: 1 #3b5998, 2 #b31217, 3 #dc4e41, 4 #55acee, 5 #517fa4, 6 #0077b5;@each $color in $socialMediaColors {  .social-icons-item:nth-child(#{nth(($color),1)}) .social-icons-link{    color:nth($color,2);    border:.1rem solid nth($color,2);  }}    </code></pre><ul><li>轉為css<pre><code class="css">.social-icons-item:nth-child(1) .social-icons-link {color: #3b5998;border: 0.1rem solid #3b5998; }</code></pre></li></ul><p>.social-icons-item:nth-child(2) .social-icons-link {<br>  color: #b31217;<br>  border: 0.1rem solid #b31217; }</p><p>.social-icons-item:nth-child(3) .social-icons-link {<br>  color: #dc4e41;<br>  border: 0.1rem solid #dc4e41; }</p><p>.social-icons-item:nth-child(4) .social-icons-link {<br>  color: #55acee;<br>  border: 0.1rem solid #55acee; }</p><p>.social-icons-item:nth-child(5) .social-icons-link {<br>  color: #517fa4;<br>  border: 0.1rem solid #517fa4; }</p><p>.social-icons-item:nth-child(6) .social-icons-link {<br>  color: #0077b5;<br>  border: 0.1rem solid #0077b5; }</p><pre><code>![](https://i.imgur.com/8aWeLiw.png)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/v5qnxzN.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/sass-ClothesStore/ClothesStore.</summary>
      
    
    
    
    
    <category term="grid" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/grid/"/>
    
    <category term="SCSS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/SCSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 預處理器- Sass/SCSS 基本介紹</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/03/05/sass-1/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/03/05/sass-1/</id>
    <published>2021-03-05T01:41:46.000Z</published>
    <updated>2021-10-05T08:41:10.204Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/e59PuUk.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CSS預處理器，增加了一些編寫的特性，也可以說是運用程式化的方式寫CSS。</p><ul><li>其中SASS最廣泛使用：Sass包含SASS與SCSS兩種<ul><li>兩者之間不同之處有以下兩點：</li><li>1.文件擴展名不同，Sass 是以“.sass”後綴為擴展名，而SCSS 是以“.scss”後綴為擴展名</li><li>2.語法書寫方式不同，Sass是以嚴格的縮進式語法規則來書寫，不帶大括號({})和分號(;)，而SCSS的語法書寫和我們的CSS語法書寫方式非常類似。<h2 id="安裝sass"><a href="#安裝sass" class="headerlink" title="安裝sass"></a>安裝sass</h2><a href="https://github.com/sass/sass">sass-github</a></li></ul></li><li>在專案底下，安裝<pre><code class="javascript">npm install -g sass</code></pre></li><li>安裝後，建立<code>index.scss</code>檔案<br><img src="https://i.imgur.com/cQtE8T5.png" alt=""></li><li>手動轉擋<br><img src="https://i.imgur.com/6TYjGnV.png" alt=""><ul><li>會出現css檔案<br><img src="https://i.imgur.com/SHoaMLN.png" alt=""></li></ul></li></ul><h2 id="使用node-sass編譯"><a href="#使用node-sass編譯" class="headerlink" title="使用node-sass編譯"></a>使用node-sass編譯</h2><ol><li>先取得package.json檔案<br>安裝語法：<code>npm init --yes</code><br>(要注意安裝的路徑位置)<br><img src="https://i.imgur.com/f9QFcH0.png" alt=""><br><img src="https://i.imgur.com/4B623eU.png" alt=""></li><li>安裝node-sass</li></ol><ul><li><code>npm i -g node-sass</code>  (i -&gt; install)<br><img src="https://i.imgur.com/vgGzk85.png" alt=""></li><li>查尋安裝是否完成<br><img src="https://i.imgur.com/EdeoV1H.png" alt=""></li></ul><ol start="3"><li>將檔案編譯為css<br>建立css(資料夾)<h3 id="使用watch，使每次修改sass檔案時，會自動編譯到css中"><a href="#使用watch，使每次修改sass檔案時，會自動編譯到css中" class="headerlink" title="使用watch，使每次修改sass檔案時，會自動編譯到css中"></a>使用watch，使每次修改sass檔案時，會自動編譯到css中</h3></li></ol><ul><li>在package.jason檔案中的<code>&quot;scripts&quot;</code></li><li>要注意編譯資料的位置<ul><li>css :為資料夾路徑 </li><li>scss/main.scss:建立的css路徑</li></ul></li></ul><pre><code class="javascript"> &quot;scripts&quot;: {    &quot;watch&quot;: &quot;node-sass -o css scss/main.scss -w&quot;  }</code></pre><ul><li>在終端機要輸入<br><code>npm run watch</code>，<code>control+c</code>退出<br><img src="https://i.imgur.com/KNReHQL.png" alt=""></li></ul><h2 id="基本語法實作"><a href="#基本語法實作" class="headerlink" title="基本語法實作"></a>基本語法實作</h2><h3 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h3><ul><li>在變數前加上<code>$</code>，來宣告要使用的變數</li><li>運用抽取變數方式，使運用版面顏色時，可以有一致性，修改版面時也較快速</li><li>變數：數量不要超過10個，自己在記憶上會混亂<pre><code class="scss">// 創造顏色、字大小的變數$white:#fff;$black:#000;.button{text-align:center;background-color:$black;border:1px solid $black;color:$white;}</code></pre></li></ul><p>$font-lg:40px;<br>$font-md:30px;<br>$font-sm:20px;</p><p>.footer h3{<br>  font-size: $font-md;<br>  color: $color-secondary;<br>  text-align: center;</p><p>}</p><pre><code>#### scope of sass variable* 一般常見屬於global scope* 如果將變數設在，標間架構中-&gt;local scope![](https://i.imgur.com/oAeBzah.png)* 在後面加上`！global`就變成全域![](https://i.imgur.com/jbDV03A.png)PS: 還是建議以global 的方式進行修改，才不會造成維護的混亂* 命名中使用`-`以及`_`，在sass中是一樣的    * 如`$font-lg`改為`$font_lg`一樣也會有效### Nested 巢狀#### 1.針對nav下的`ul`、`li````scss.nav{  background-color: $color-primary;  ul li{    list-style: none;  }  a{    text-decoration: none;    font-size: $font-sm;    color: $color-secondary;  }}</code></pre><ul><li>轉換為css<pre><code class="css">.nav {background-color: orange; }.nav ul li {  list-style: none; }.nav a {  text-decoration: none;  font-size: 20px;  color: gray; }</code></pre><img src="https://i.imgur.com/wQXDhMZ.png" alt=""></li></ul><h4 id="2-增加hover的效果"><a href="#2-增加hover的效果" class="headerlink" title="2.增加hover的效果"></a>2.增加hover的效果</h4><ul><li><code>&amp;</code>，來指出<code>parent element</code>：在這便是指<code>&lt;a&gt;</code></li></ul><pre><code class="scss">.nav{  background-color: $color-primary;  ul li{    list-style: none;  }  a{    text-decoration: none;    font-size: $font-sm;    color: $color-secondary;    &amp;:hover{      color: $color-tertiary;    }  }}</code></pre><ul><li>轉換為css<pre><code class="css">.nav {background-color: orange; }.nav ul li {  list-style: none; }.nav a {  text-decoration: none;  font-size: 20px;  color: gray; }  .nav a:hover {    color: royalblue; }</code></pre></li></ul><pre><code>![](https://i.imgur.com/IL4dwvL.png)#### 巢狀層級不可以太多層，否則會出現效率問題### @import 是什麼* import 讓我們可以拉出特定區塊或是根據功能性不同拆成不同區塊，來撰寫scss，並利用@import放入主要的scss檔案，最後彙整到同一個css之中。* 再用一個css引入(@import)，各個功能* 要引入的檔案命名：在要import的檔案要加`_`&gt;六角學院&gt;![](https://i.imgur.com/SRD31V7.png)`_test.scss`為撰寫footer樣式的檔案```scss.footer h3{  font-style:italic ;  border: blue 3px solid;}</code></pre><p><code>main.scss</code> 要引入檔案的主要檔案</p><pre><code class="scss">@import &quot;test&quot;;</code></pre><p>轉譯為css(main.css)</p><pre><code class="css=">.footer h3 {  font-style: italic;  border: blue 3px solid; }</code></pre><h2 id="mixin-與-include"><a href="#mixin-與-include" class="headerlink" title="@mixin 與 @include"></a>@mixin 與 @include</h2><ul><li>當在多個地方想使用同一種style的方式。可以組成一組的樣式，並於scss中重複使用。</li><li>以 <code>@mixin</code> 開頭，並自定義一個名稱</li><li>需要它的時候就用 <code>@include</code>呼叫</li></ul><ol><li>設定對齊方式<pre><code class="scss">@mixin horizontal-list{li{display:inline-block;margin:{left:-2px;right:2em;}}}</code></pre></li></ol><p>/<em>當要引用時</em>/<br>nav ul{<br>  @include horizontal-list<br>}</p><pre><code>2. 調整字體大小（以帶參數的方式）```scss// 發現h1,h3樣式一樣@mixin headingStyles($fontSize){  //以代參數方式來放入不同字體大小的變數設定  font-size: $fontSize; color: $color-secondary;  text-align: center;} .banner h1{ @include headingStyles($font-lg);}.footer h3{  @include headingStyles($font-md);}</code></pre><ul><li>在css的地方，可以看到字的大小不同<pre><code class="css">.banner h1 {font-size: 40px;color: gray;text-align: center; }</code></pre></li></ul><p>.footer h3 {<br>  font-size: 30px;<br>  color: gray;<br>  text-align: center; }</p><pre><code>3. 加入動畫效果* 在`footer h3`加上`hover`* `@mixin transition($param...)`加上設定參數特性    * 當要同時設定特性中的多個值時，要記得在參數後面加上`...````scss// 發現h1,h3樣式一樣@mixin headingStyles($fontSize){  //以代參數方式來放入不同字體大小的變數設定  font-size: $fontSize; color: $color-secondary;  text-align: center;} @mixin transition($param...) {  transition: $param;}.banner h1{ @include headingStyles($font-lg);}.footer h3{  @include headingStyles($font-md);  @include transition(color .5s ,background-color 1s);  &amp;:hover{    color:$color-tertiary;    background-color: $color-primary;  }}</code></pre><ul><li>轉譯為css<pre><code class="css">.footer h3 {font-size: 30px;color: gray;text-align: center;transition: color 0.5s, background-color 1s; }.footer h3:hover {  color: royalblue;  background-color: orange; }</code></pre></li></ul><p><a href="https://ithelp.ithome.com.tw/articles/10197303" target="_blank" rel="noopener">Day27：小事之 Transition 與 Animation</a><br><a href="https://cythilya.github.io/2017/08/27/css-animation/#transition-%E6%BC%B8%E8%AE%8A" target="_blank" rel="noopener">CSS3 Animation</a></p><p><a href="https://5xruby.tw/posts/play-sass-mixin-and-include" target="_blank" rel="noopener">新手也可以輕鬆玩轉 SASS - @mixin and @include</a></p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><ul><li>透過函式的建立，可以在需要使用時，不斷地呼叫使用</li><li><code>@function fontSize($size){ @return $size*2; }</code>建立函式</li></ul><pre><code class="scss">@function fontSize($size){   @return $size*2;} h1{.banner p{  font-size: fontSize($font-sm);  //字的大小會變成 20px*2 =&gt;40px}</code></pre><p>轉譯為css</p><pre><code class="css">.banner p {  font-size: 40px; }</code></pre><ul><li>將文字大小，預先設定預設值</li></ul><pre><code class="scss">//設定預設為25px@function fontSize($size:25px){   @return $size*2;}.footer p{  font-size: fontSize();}</code></pre><p>轉譯為css</p><pre><code class="css">.footer p {  font-size: 50px; }  /* 25*2=&gt;50 */</code></pre><ul><li>若插入數字</li></ul><pre><code class="scss">.footer p{  font-size: fontSize(30px);}</code></pre><ul><li>轉譯為css<pre><code class="css">.footer p {font-size: 60px; }/* 30*2=&gt;50 */</code></pre><h3 id="內建函式介紹"><a href="#內建函式介紹" class="headerlink" title="內建函式介紹"></a>內建函式介紹</h3></li></ul><ol><li><code>lighten()</code><pre><code class="sass=">.nav{background-color: lighten($color-primary,20%);}</code></pre>css<pre><code class="css=">.nav {background-color: #ffc966; }</code></pre></li></ol><ul><li>顏色變淡<br><img src="https://i.imgur.com/WhTLwso.png" alt=""></li></ul><ol start="2"><li><code>darken()</code><pre><code class="scss">.nav{background-color: darken($color-primary,20%);}</code></pre></li></ol><ul><li>編譯為css<pre><code class="css">.nav {background-color: #996300; }</code></pre><img src="https://i.imgur.com/LRzx1fH.png" alt=""></li></ul><p>3.<code>transparentize()</code></p><ul><li>透明度從0-1 (1是完全透明)<pre><code class="scss">.nav{background-color: transparentize($color-primary,0.6);}</code></pre></li><li>編譯為css<pre><code class="css">.nav {background-color: rgba(255, 165, 0, 0.4); }</code></pre><img src="https://i.imgur.com/6ON5Rfk.png" alt=""></li></ul><p>4.<code>mix()</code></p><ul><li>將顏色混合<pre><code class="scss">.nav{ background-color: mix(blue,green);}</code></pre>css<pre><code class="css">.nav {background-color: #004080; }</code></pre><img src="https://i.imgur.com/M9sFOr6.png" alt=""></li></ul><h4 id="加入百分比（利用百分比來調配顏色的比重）"><a href="#加入百分比（利用百分比來調配顏色的比重）" class="headerlink" title="加入百分比（利用百分比來調配顏色的比重）"></a>加入百分比（利用百分比來調配顏色的比重）</h4><ul><li><code>mix(blue,green,10%)</code>表示只有10%的藍色，90%為綠色<pre><code class="scss">.nav{ background-color: mix(blue,green,10%);}</code></pre>css<pre><code class="css">.nav {background-color: #00731a; }</code></pre><img src="https://i.imgur.com/TdUkHSn.png" alt=""></li></ul><hr><h2 id="補充scss檔案編制"><a href="#補充scss檔案編制" class="headerlink" title="補充scss檔案編制"></a>補充scss檔案編制</h2><ul><li>主要視自己專案上的區分來編制<br>vendor:外部套件，放置bootstrap或其他frameworks、liberaries、hover.css<br>utils(helpers):工具類的class，放置字的大小、margin、border顏色設置、hover效果<br>partials:放置一些部分區域的css，如：nav、footer; layout: （共通的佈局）如表頭、表尾，就是每頁都會出現<br>而這幾個檔案，放在main.scss要有順序<br><img src="https://i.imgur.com/tjRLJjK.png" alt=""><br>base:p段落、h1..等的全站設定(css reset)<br>components ：元件，如按鈕、卡片的設定</li></ul><hr><p>參考資料：<a href="https://tw.alphacamp.co/blog/css-preprocessor-sass-scss" target="_blank" rel="noopener">alphacamp-Sass/SCSS 基本語法介紹，搞懂CSS 預處理器</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/e59PuUk.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;CSS預處理器，增加了一</summary>
      
    
    
    
    
    <category term="SCSS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/SCSS/"/>
    
  </entry>
  
  <entry>
    <title>API-youtube</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/02/23/API-youtube/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/02/23/API-youtube/</id>
    <published>2021-02-23T06:47:04.000Z</published>
    <updated>2021-10-05T09:15:47.787Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/HyrwBQl.png" alt=""></p><p><a href="https://eva813.github.io/Eva_portfolio/YoutubeAPI/YoutubeAPI.html" target="_blank" rel="noopener">成品</a></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li>搜尋框，輸入搜尋關鍵字，下方會列出5筆列表<ul><li>有圖片縮圖、影片標題、影片描述</li></ul></li><li>按下next page 會取得下5筆資料</li><li>按下prev page，會取得上5筆資料</li></ul><p>ajax 在同一個頁面，不做刷新就可以改變頁面的內容。<br>q: query</p><h2 id="youtube-API-application-programming-interface-資料查看"><a href="#youtube-API-application-programming-interface-資料查看" class="headerlink" title="youtube API(application programming interface)資料查看"></a>youtube API(application programming interface)資料查看</h2><p><a href="https://developers.google.com/youtube/v3/docs/" target="_blank" rel="noopener">YouTube 資料 API 參考手冊</a></p><p>取得授權：<a href="https://console.developers.google.com/projectselector2/apis/credentials?pli=1&supportedpurview=project" target="_blank" rel="noopener">憑證</a></p><p><img src="https://i.imgur.com/asf7coq.png" alt=""></p><p>API 金鑰:AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M</p><pre><code>jQuery API D ocument =&gt; 表示看官方文件串API =&gt;</code></pre><h4 id="檢視範例，ajax資料的情形"><a href="#檢視範例，ajax資料的情形" class="headerlink" title="檢視範例，ajax資料的情形"></a>檢視範例，ajax資料的情形</h4><p><img src="https://i.imgur.com/wc6VWtV.png" alt=""></p><p><img src="https://i.imgur.com/tSYR4vu.png" alt=""></p><h2 id="JS-部分"><a href="#JS-部分" class="headerlink" title="JS 部分"></a>JS 部分</h2><h3 id="1-嘗試串接Youtube-API"><a href="#1-嘗試串接Youtube-API" class="headerlink" title="1.嘗試串接Youtube API"></a>1.嘗試串接Youtube API</h3><ul><li><p>首先需考量，我們所需要的資料參數有哪些(</p></li><li><p>在抓取成功的部分，要設置抓取五筆搜尋到的五筆資料，並將其呈現於頁面</p><ul><li><p>除了5筆資料外，還需要跳轉上、下頁的按鈕</p><pre><code class="javascript">function getVideo() {let value = $(&#39;#search-field&#39;).val();let youtubeURL = &quot;https://www.googleapis.com/youtube/v3/search&quot;;$.ajax({type: &quot;GET&quot;,url: youtubeURL,data: {//將要放入網址的參數放在這part:  &#39;id,snippet&#39;,// 必填，把需要的資訊列出來q: value,// 查詢文字maxResults: 5,// 預設為五筆資料，可以設定1~50type: &quot;video&quot;,key: &#39;AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M&#39;// 使用 API 只能取得公開的播放清單},dataType: &quot;json&quot;,success: function (data) {//console.log(data);let nextPageToken = data.nextPageToken;let prevPageToken = data.prevPageToken;//試著將收到的資料傳入，並呈現於畫面中insertItems(data);getBtn(data, prevPageToken, nextPageToken)</code></pre></li></ul></li></ul><pre><code>}, error: function (err) {  console.log(&#39;oh no&#39;);}</code></pre><p>  });<br>}</p><pre><code>網址放入參數[[JS] 使用 JavaScript 解析網址與處理網址中的參數（URL Parameters）](https://pjchender.blogspot.com/2018/08/js-javascript-url-parameters.html)### 2.將資料呈現於頁面(insertItems())* 透過迴圈方式將要抓取的資料依序填入* 觀察原本畫面結構，並依據去找尋資料中符合的資料    * videoId、videoTitle、description、channelTitle...```javascriptfunction insertItems(item) {  let output = &#39;&#39;;  $.each(item.items, function (index, value) {    let videoId = item.items[index].id.videoId;    let videoTitle = item.items[index].snippet.title;    let description = item.items[index].snippet.description;    let thumbnailURL = item.items[index].snippet.thumbnails.high.url;//高解析度影片縮圖    let channelTitle = item.items[index].snippet.channelTitle;    let publishedDate = item.items[index].snippet.publishedAt;    // 按鈕    output += `&lt;li&gt;&lt;div class=&quot;list-left&quot;&gt;    &lt;img src=&quot; ${thumbnailURL}&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;list-right&quot;&gt;    &lt;h3&gt;    &lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/${videoId}&quot; &quot;href=&quot;javascript:;&quot;&gt; ${videoTitle} &lt;/a&gt;&lt;/h3&gt; &lt;small&gt;By &lt;span class=&quot;cTitle&quot;&gt; ${channelTitle}&lt;/span&gt; on ${publishedDate}&lt;/small&gt;    &lt;p&gt; ${description} &lt;p&gt;&lt;/div&gt;&lt;/li&gt; &lt;div classs=&quot;clearfix&quot;&gt;&lt;/div&gt;     `    $(&#39;#results&#39;).html(output);  });};</code></pre><h2 id="3-製作上、下頁的按鈕鍵"><a href="#3-製作上、下頁的按鈕鍵" class="headerlink" title="3.製作上、下頁的按鈕鍵"></a>3.製作上、下頁的按鈕鍵</h2><ul><li>注意該函式要帶入的參數有哪些</li><li>我們要判斷為，在第一頁時，只有下一頁的按鈕<ul><li>判斷方式為，<code>(!prevPageToken)</code>沒有上一頁的token</li><li>（截圖）</li></ul></li><li>在判斷之中，我們需要將要插入的標籤與內容，放入，並append到畫面要呈現的位置</li><li>注意：在插入的button之中，加入<code>data-token=&quot;${nextPageToken}&quot; data-query=&quot;${value}&quot;</code>，用於後續抓取屬性內容。</li></ul><pre><code class="javascript">function getBtn(value, prevPageToken, nextPageToken) {  console.log(nextPageToken)  if (!prevPageToken) {    var btnOutput = $(`&lt;div class=&quot;button-container&quot;&gt;    &lt;button id=&quot;next-button&quot; class=&quot;paging-button&quot; data-token=&quot;${nextPageToken}&quot; data-query=&quot;${value}&quot; onclick=&quot;pressNext();&quot;&gt; Next Page&lt;/button&gt;&lt;/div&gt;`    )    $(&quot;#buttons&quot;).append(btnOutput);  } else {    var btnOutput = $(`&lt;div class=&quot;button-container&quot;&gt;&lt;button id=&quot;prev-button&quot; class=&quot;paging-button&quot; data-token=&quot;${prevPageToken}&quot; data-query=&quot;${value}&quot; onclick=&quot;pressPrev();&quot;&gt; Prev Page&lt;/button&gt;      &lt;button id=&quot;next-button&quot; class=&quot;paging-button&quot;  data-token=&quot;${nextPageToken}&quot; data-query=&quot;${value}&quot; onclick=&quot;pressNext();&quot;&gt;Next Page&lt;/button&gt;&lt;/div&gt;`)    $(&quot;#buttons&quot;).append(btnOutput);  }}</code></pre><p><a href="https://developers.google.com/youtube/v3/guides/implementation/pagination" target="_blank" rel="noopener">Youtube:Implementation: Pagination</a></p><h2 id="4-下一頁點下後，下五筆的資料"><a href="#4-下一頁點下後，下五筆的資料" class="headerlink" title="4.下一頁點下後，下五筆的資料"></a>4.下一頁點下後，下五筆的資料</h2><ul><li>同樣以ajax的方式來抓取<ul><li>在參數的地方我們要抓取的是，按取下一頁的token</li></ul></li><li>success之中所應用的函示，同樣為插入5筆的資料，以及上下頁的按鈕</li></ul><pre><code class="javascript">//取得下一頁的資料function pressNext() {  let youtubeURL = &quot;https://www.googleapis.com/youtube/v3/search&quot;;  let token = $(&#39;#next-button&#39;).data(&#39;token&#39;);  let value = $(&#39;#search-field&#39;).val();  $.ajax({    type: &quot;GET&quot;,    url: youtubeURL,    data: {//將要放入網址的參數放在這      part:        &#39;id,snippet&#39;,// 必填，把需要的資訊列出來      q: value,// 查詢文字      pageToken: token,      maxResults: 5,// 預設為五筆資料，可以設定1~50      type: &quot;video&quot;,      key: &#39;AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M&#39;// 使用 API 只能取得公開的播放清單    },    dataType: &quot;json&quot;,    success: function (data) {      console.log(data);      let nextPageToken = data.nextPageToken;      let prevPageToken = data.prevPageToken;      // 清空內容      $(&#39;#results&#39;).html(&#39;&#39;);      $(&#39;#buttons&#39;).html(&#39;&#39;);      //試著將收到的資料傳入，並呈現於畫面中      insertItems(data);      getBtn(data, prevPageToken, nextPageToken)    }, error: function (err) {      console.log(&#39;oh no&#39;);    }  });}</code></pre><h3 id="5-上一頁"><a href="#5-上一頁" class="headerlink" title="5.上一頁"></a>5.上一頁</h3><ul><li><p>同樣的抓取方式，只有要帶入的資料有些差異</p></li><li><p><code>token = $(&#39;#prev-button&#39;).data(&#39;token&#39;);</code></p><pre><code class="javascript">//前一頁function pressPrev() {// 清空內容$(&#39;#results&#39;).html(&#39;&#39;);$(&#39;#buttons&#39;).html(&#39;&#39;);let youtubeURL = new URL(`https://www.googleapis.com/youtube/v3/search?`);let token = $(&#39;#prev-button&#39;).data(&#39;token&#39;);let value = $(&#39;#search-field&#39;).val();$.ajax({  type: &quot;GET&quot;,  url: youtubeURL,  data: {//將要放入網址的參數放在這    part:      &#39;id,snippet&#39;,// 必填，把需要的資訊列出來    q: value,// 查詢文字    pageToken: token,    maxResults: 5,// 預設為五筆資料，可以設定1~50    type: &quot;video&quot;,    key: &#39;AIzaSyCKPRCaNS-PQJLl2jzoQEf-O4I0tnrtd8M&#39;// 使用 API 只能取得公開的播放清單  },  dataType: &quot;json&quot;,  success: function (data) {    console.log(data);    let nextPageToken = data.nextPageToken;    let prevPageToken = data.prevPageToken;    // 清空內容    $(&#39;#results&#39;).html(&#39;&#39;);    $(&#39;#buttons&#39;).html(&#39;&#39;);    //試著將收到的資料傳入，並呈現於畫面中    insertItems(data);    getBtn(data, prevPageToken, nextPageToken)</code></pre></li></ul><pre><code>}, error: function (err) {  console.log(&#39;oh no&#39;);}</code></pre><p>  });</p><p>}</p><pre><code>[HTML5 自定義屬性 data-* 和 jQuery.data 詳解2018.06.20](https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/177833/)[[技術分享] 什麼是 HTML 5 中的資料屬性（data-* attribute）](https://pjchender.blogspot.com/2017/01/html-5-data-attribute.html)### 6.運用fancybox的方式彈出* 使用fancyBox展示影片    * [fancybox Documention](http://fancyapps.com/fancybox/3/docs/#iframe)    * [fancybox-CDN](https://cdnjs.com/libraries/fancybox)* 使用iframe連結欲嵌入的外部影片連結    * iframe 是框架的一種，也稱為內置框架或內聯框架，用來在網頁內嵌入另外一個網頁[](https://fancyapps.com/fancybox/3/docs/#iframe)* 透過CDN方式連結fancybox套件```javascript&lt;!-- fancyBox --&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css&quot; /&gt;  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.5.7/jquery.fancybox.min.js&quot;&gt;&lt;/script&gt;</code></pre><ul><li>在我們點選該影片名稱區，插入影片id<pre><code class="javascript">&lt;h3&gt;&lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/${videoId}&quot; &quot;href=&quot;javascript:;&quot;&gt; ${videoTitle} &lt;/a&gt;&lt;/h3&gt;</code></pre><pre><code class="javascript">$(&#39;[data-fancybox]&#39;).fancybox({toolbar  : false,smallBtn : true,iframe : {  preload : false}})</code></pre><a href="https://orow.github.io/2019/03/16/jQuery-youtube-search/" target="_blank" rel="noopener">[jQuery] - 練習-Youtube Search Engine</a></li></ul><hr><p>補充知識：<br>XMLHttpRequest(XHR):是一種規範，用來發ajax使用</p><p>token(令牌)：唯一的、可以認證身份或取得資料</p><p>GET:向伺服器發request，（伺服器會告訴我們要發伺服器的網址，我們向它請求資訊）</p><h4 id="用瀏覽器debug"><a href="#用瀏覽器debug" class="headerlink" title="用瀏覽器debug"></a>用瀏覽器debug</h4><p><img src="https://i.imgur.com/IlQ8Glx.png" alt=""></p><ul><li>可在watch加上要觀察的變數<br><img src="https://i.imgur.com/7RcELS4.png" alt=""></li></ul><hr><p>參考資料<br><a href="https://ithelp.ithome.com.tw/articles/10194007" target="_blank" rel="noopener">[30apis] Day 7 : YouTube Data API + 基礎 Fetch API</a><br><a href="https://www.c-sharpcorner.com/article/how-to-implement-youtube-video-search-using-youtube-data-api-v3-in-wordpress-web2/" target="_blank" rel="noopener">How To Implement A Youtube Video Search Using Youtube Data API V3</a><br><a href="https://hackmd.io/@c36ICNyhQE6-iTXKxoIocg/S1eYdtA1P" target="_blank" rel="noopener">Youtube Data API 使用手札</a><br><a href="https://a42033.gitbooks.io/api/content/Youtube/youtube_data_api/applicate.html" target="_blank" rel="noopener">Youtube Data API 申請</a><br><a href="https://console.cloud.google.com/iam-admin/quotas?hl=zh-tw&_ga=2.128962188.1087850229.1615615433-929425058.1615373715&orgonly=true&angularJsUrl=%2Fprojectselector%2Fiam-admin%2Fquotas%3Fhl%3Dzh-tw%26_ga%3D2.128962188.1087850229.1615615433-929425058.1615373715%26supportedpurview%3Dproject%26orgonly%3Dtrue%26folder%3Dtrue%26organizationId%3Dtrue&project=my-youtube-api-307211&folder=&organizationId=&supportedpurview=project" target="_blank" rel="noopener">配額</a></p><pre><code class="javascript=">{  &quot;error&quot;: {    &quot;code&quot;: 403,    &quot;message&quot;: &quot;The request cannot be completed because you have exceeded your \u003ca href=\&quot;/youtube/v3/getting-started#quota\&quot;\u003equota\u003c/a\u003e.&quot;,    &quot;errors&quot;: [      {        &quot;message&quot;: &quot;The request cannot be completed because you have exceeded your \u003ca href=\&quot;/youtube/v3/getting-started#quota\&quot;\u003equota\u003c/a\u003e.&quot;,        &quot;domain&quot;: &quot;youtube.quota&quot;,        &quot;reason&quot;: &quot;quotaExceeded&quot;      }    ]  }}</code></pre><hr><p><a href="https://stackoverflow.com/questions/31075893/im-getting-favicon-ico-error" target="_blank" rel="noopener">favicon.ico error</a></p><p>問題：</p><ul><li>script.js: Allow attribute will take precedence over ‘allowfullscreen’.<br><img src="https://i.imgur.com/0JiThlt.png" alt=""></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HyrwBQl.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/YoutubeAPI/YoutubeAPI.html&quot; tar</summary>
      
    
    
    
    <category term="Ajax 實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/Ajax-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="Ajax" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Ajax/"/>
    
    <category term="API" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>串接API- 天氣預報</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/02/23/API-weather/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/02/23/API-weather/</id>
    <published>2021-02-23T06:42:02.000Z</published>
    <updated>2021-10-05T09:15:51.747Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/weatherAPI/weatherAPI.html" target="_blank" rel="noopener">成品</a></p><p><img src="https://i.imgur.com/odl0KcP.png" alt=""></p><h1 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h1><ul><li>從公開的氣象資料平台取得氣象資料</li><li>建立下拉式選單，選擇地區，並按下按鈕取得氣象資料</li><li>呈現當日天氣狀況(包含氣溫、圖示、描述)</li><li>呈現未來一週的天氣預報(包含日期、星期;氣溫、圖示、描述)</li></ul><h2 id="了解要串接的資料open-data"><a href="#了解要串接的資料open-data" class="headerlink" title="了解要串接的資料open data"></a>了解要串接的資料open data</h2><p>至中央氣象局-氣象開放資料平台的網站，註冊會員<br>註冊並登入之後，要取得授權碼<br><img src="https://i.imgur.com/KoRQyNL.png" alt=""><br>到<a href="https://opendata.cwb.gov.tw/dist/opendata-swagger.html" target="_blank" rel="noopener">中央氣象局開放資料平臺之資料擷取API</a>，查看要取用的資料<br>我的授權碼：CWB-F0145DA5-2539-4333-BAFD-466910C1EECC</p><p>參考資料：<br><a href="https://www.youtube.com/watch?v=QDdn3yrsyCQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=QDdn3yrsyCQ</a><br><a href="https://ithelp.ithome.com.tw/articles/10222662" target="_blank" rel="noopener">[Day 13 - 即時天氣] 建立一個即時天氣 App - 前置準備</a></p><h2 id="尋找要參考實現畫面呈現的資料"><a href="#尋找要參考實現畫面呈現的資料" class="headerlink" title="尋找要參考實現畫面呈現的資料"></a>尋找要參考實現畫面呈現的資料</h2><p>畫面主要樣式是參考：<br><a href="https://webdesign.tutsplus.com/tutorials/build-a-simple-weather-app-with-vanilla-javascript--cms-33893" target="_blank" rel="noopener">Build a Simple Weather App With Vanilla JavaScript</a></p><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="1-利用Ajax串接資料"><a href="#1-利用Ajax串接資料" class="headerlink" title="1.利用Ajax串接資料"></a>1.利用Ajax串接資料</h3><ul><li>根據平台提供的url作為取得資料的地方</li><li>利用sucess/error，來查看是否有成功取得資料<ul><li>依據console.log()出要串接的資料<br><img src="https://i.imgur.com/Kdm159o.png" alt=""></li></ul></li></ul><pre><code class="javascript">function getCity() {  let url = &quot;https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-D0047-091?Authorization=CWB-F0145DA5-2539-4333-BAFD-466910C1EECC&amp;format=JSON&quot;;  $.ajax({    type: &quot;get&quot;,    url: url,    dataType: &quot;json&quot;,    success: function (data) {      console.log(data);      })    },    error: function (err) {      console.log(&#39;oh no&#39;)    }  });</code></pre><h3 id="2-製作下拉式選單"><a href="#2-製作下拉式選單" class="headerlink" title="2.製作下拉式選單"></a>2.製作下拉式選單</h3><ul><li>當串到想要的資料後，希望能在下拉選單，呈現出各個地區，以供選擇<br><img src="https://i.imgur.com/I2QTip1.png" alt=""></li><li>因為地區有很多，以迴圈方式來填入資料<ul><li><code>i</code>的長度 <code>data.records.locations[0].location.length</code><br><img src="https://i.imgur.com/QaNMU8d.png" alt=""></li><li><code>opt = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;)</code>創立選項標籤</li><li>利用<code>attr</code>,<code>html</code>填入該地區的index，以及地區名稱<br><img src="https://i.imgur.com/xc7bwaP.png" alt=""></li></ul></li></ul><pre><code class="javascript">function getCity() {  let url = &quot;https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-D0047-091?Authorization=CWB-F0145DA5-2539-4333-BAFD-466910C1EECC&amp;format=JSON&quot;;  $.ajax({    type: &quot;get&quot;,    url: url,    dataType: &quot;json&quot;,    success: function (data) {      //console.log(data);      let selectCity = $(&#39;#selector-list&#39;);      for (let i = 0; i &lt; data.records.locations[0].location.length; i++) {        let opt = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;);        opt.attr(&quot;data-index&quot;, i);        opt.html(data.records.locations[0].location[i].locationName);        selectCity.append(opt);      }    },    error: function (err) {      console.log(&#39;oh no&#39;)    }  });};</code></pre><h3 id="3-點選-submit-按鈕時要跳出取得今日天氣以及未來一週的天氣"><a href="#3-點選-submit-按鈕時要跳出取得今日天氣以及未來一週的天氣" class="headerlink" title="3.點選(submit)按鈕時要跳出取得今日天氣以及未來一週的天氣"></a>3.點選(submit)按鈕時要跳出取得今日天氣以及未來一週的天氣</h3><ul><li><p>在sucess:中放入取得今日天氣、週天氣的函式</p><ul><li>在此要宣告<code>selectedCityIndex</code>變數，並取得被選取的city index<code>$(&#39;#selector-list&#39;).get(0).selectedIndex</code><pre><code class="javascript">function getCity() {let url = &quot;https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-D0047-091?Authorization=CWB-F0145DA5-2539-4333-BAFD-466910C1EECC&amp;format=JSON&quot;;</code></pre></li></ul><p>$.ajax({<br>  type: “get”,<br>  url: url,</p><p>  dataType: “json”,<br>  success: function (data) {</p><pre><code>console.log(data);let selectCity = $(&#39;#selector-list&#39;);for (let i = 0; i &lt; data.records.locations[0].location.length; i++) {  let opt = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;);  opt.attr(&quot;data-index&quot;, i);  opt.html(data.records.locations[0].location[i].locationName);  selectCity.append(opt);}$(&#39;button&#39;).click(function (e) {  e.preventDefault();  clear();  let selectedCityIndex = $(&#39;#selector-list&#39;).get(0).selectedIndex;  getWeather(data, selectedCityIndex);  weekWeather(data, selectedCityIndex);})</code></pre><p>  },<br>  error: function (err) {</p><pre><code>console.log(&#39;oh no&#39;)</code></pre><p>  }<br>});</p></li></ul><p>};</p><pre><code>[jQuery獲取Select選擇的Text和Value：](https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/287007/)### 4.取得今日天氣(`getWeather();`)* 傳入參數分別為data\locationIndex:data為串接到的天氣資料,locationIndex，為放入要取的資料中的index* 我們想要取得的氣象資料，分別有地區、溫度(最低溫、最高溫)、天氣描述、icon圖示    * `name`變數就是要取得資料內的地區名稱![](https://i.imgur.com/SZZSUnh.png)    * `weather`變數就是取得氣象資料![](https://i.imgur.com/pVwq3xe.png)    * `weatherDescription`以及`weatherCode`分別就是氣象描述以及給予氣象描述的編號 ![](https://i.imgur.com/qeUH1iw.png)* `let weatherImg = checkImg(weatherCode);`依據天氣描述的分類放入對應圖示* 抓取到所需要的變數資料後，就是將要填入呈現畫面的html標籤以及變數放入* `after()`在該區塊後面在插入想要呈現的其他標籤內容```javascriptfunction getWeather(data, locationIndex) {  //console.log(data, locationIndex)  let name = data.records.locations[0].location[locationIndex].locationName;  let weather = data.records.locations[0].location[locationIndex].weatherElement;  //console.log(name);  //console.log(weather);  // 天氣描述  let weatherDescription = weather[6].time[0].elementValue[0].value;  let weatherCode = weather[6].time[0].elementValue[1].value;  let minTemp = weather[8].time[0].elementValue[0].value;  let maxTemp = weather[12].time[0].elementValue[0].value;  let weatherImg = checkImg(weatherCode);  // 今天日期  // let date = getDate().toUTCString();  console.log(weatherCode);  let li = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;).appendTo(&#39;.cities&#39;);  li.addClass(&quot;city&quot;);  li.html(`  &lt;h2 class=&quot;city-name&quot; data-name=&quot;${name},&quot;&gt;    &lt;span&gt;${name}&lt;/span&gt;    &lt;sup&gt;Today&lt;/sup&gt;  &lt;/h2&gt;  &lt;div class=&quot;city-temp&quot;&gt;${Math.round(minTemp)}&lt;sup&gt;°C&lt;/sup&gt; ~ ${Math.round(maxTemp)}&lt;sup&gt;°C&lt;/sup&gt;  &lt;/div&gt;  &lt;figure class=&#39;weather-icon&#39;&gt;    ${weatherImg}    &lt;figcaption&gt;${weatherDescription}&lt;/figcaption&gt;  &lt;/figure&gt;`);  $(&#39;.cities&#39;).after(`&lt;h2 class=&quot;sec-h2&quot;&gt;未來一週預報&lt;/h2&gt;`)  $(&#39;.cities&#39;).append(li);};</code></pre><h3 id="5-根據weather-code分類，分配的圖示-checkImg"><a href="#5-根據weather-code分類，分配的圖示-checkImg" class="headerlink" title="5.根據weather code分類，分配的圖示(checkImg())"></a>5.根據weather code分類，分配的圖示(<code>checkImg()</code>)</h3><ul><li><p>將分類的代碼區分到各個天氣狀況</p></li><li><p>依分類代碼下判斷，並回傳要放入的圖示</p></li><li><p><code>weatherTypes.isThunderstorm.includes(weatherData)</code></p><ul><li>利用<code>includes()</code>取得 weatherTypes中各天氣情形陣列中，是否有符合參數的數值<pre><code class="javascript">function checkImg(code) {let weatherData = +code;const weatherTypes = {isThunderstorm: [15, 16, 17, 18, 21, 22, 33, 34, 35, 36, 41],isClear: [1],isCloudyFog: [25, 26, 27, 28],isCloudy: [2, 3, 4, 5, 6, 7],isFog: [24],isPartiallyClearWithRain: [8, 9, 10, 11, 12,13, 14, 19, 20, 29, 30,31, 32, 38, 39,],isSnowing: [23, 37, 42],};// console.log(data)// console.log(weatherTypes.isPartiallyClearWithRain)</code></pre></li></ul><p>// let s = weatherTypes.isThunderstorm.includes(weatherData);<br>// console.log(s);</p></li></ul><p>  if (weatherTypes.isThunderstorm.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/thunderstorm.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isClear.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/clear.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isCloudyFog.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/cloudyfog.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isCloudy.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/cloud-and-sun.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isFog.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/fog.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else if (weatherTypes.isPartiallyClearWithRain.includes(weatherData)) {<br>    return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/clearwithrainy.png&quot; alt=&quot;weather-img&quot;&gt;</code>;<br>  } else { return <code>&lt;img class=&quot;city-icon&quot; src=&quot;./img/snow.png&quot; alt=&quot;weather-img&quot;&gt;</code>; }</p><p>}</p><pre><code>[[Day 21 - 即時天氣] 處理天氣圖示以及 useMemo 的使用](https://ithelp.ithome.com.tw/articles/10225927)[JavaScript Array 陣列操作方法大全 ( 含 ES6 )](https://www.oxxostudio.tw/articles/201908/js-array.html#array_includes)includes(weatherData):[JavaScript 陣列處理：找東西 - indexOf、$.inArray 與 filter](https://cythilya.github.io/2017/05/08/javascript-find-item-in-an-array/)[預報因子欄位中文說明表](https://opendata.cwb.gov.tw/opendatadoc/MFC/D0047.pdf)---### 6.取得未來一週的天氣* 此作法與取的當日天氣有些類似，不過因為要取得未來一週6天的資料，所以須以迴圈的方式來取的並填入資料* `let i = 1; i &lt; 7; i++`從1開始，6天* `timeIndex= 2 * i`是為了抓取一週時間所設置的index![](https://i.imgur.com/xSanS8F.png)* 日期、星期的取得    * 以算出tomorrow為目標，並帶入i，就會執行出往後六天的日期 ![](https://i.imgur.com/ZqSmPOy.png) * 並從上圖，分別擷取出月份、日期、星期的資料```javascriptfunction weekWeather(data, locationIndex) {  // $(&#39;.week-ul&#39;).html(&#39;&#39;);  var weather = data.records.locations[0].location[locationIndex].weatherElement;  for (let i = 1; i &lt; 7; i++) {    let timeIndex = 2 * i;    let weekday = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;).appendTo(&#39;.week-ul&#39;);    weekday.addClass(&#39;day&#39;).attr(&#39;id&#39;, `day-${i}`);    let weatherDescription = weather[6].time[timeIndex].elementValue[0].value;    let weatherCode = weather[6].time[timeIndex].elementValue[1].value;    let minTemp = weather[8].time[timeIndex].elementValue[0].value;    let maxTemp = weather[12].time[timeIndex].elementValue[0].value;    let weatherImg = checkImg(weatherCode);    //console.log(weatherDescription);    //////日期、星期的擷取//////    let today = new Date();    let tomorrow = new Date(today);    tomorrow.setDate(tomorrow.getDate() + i);    let weekDay = tomorrow.getDay();    let weekMonth = tomorrow.getMonth()    let date = tomorrow.getDate();    const dayNamesEn = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;];    const monthNamesEn = [      &#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;,      &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;    ]    let inweekDay = dayNamesEn[weekDay]    let inweekMonth = monthNamesEn[weekMonth];    let indate = date;    ///////////    weekday.html(`&lt;li class=&quot;day&quot;&gt;          &lt;h2 class=&quot;whichDay&quot; data-name=&quot;&quot;&gt;            &lt;span&gt;${indate} ${inweekMonth}&lt;/span&gt;            &lt;sup&gt;${inweekDay}&lt;/sup&gt;          &lt;/h2&gt;          &lt;div class=&quot;week-temp&quot;&gt;${minTemp}&lt;sup&gt;°C&lt;/sup&gt; ~ ${maxTemp}&lt;sup&gt;°C&lt;/sup&gt;          &lt;/div&gt;          &lt;figure class=&#39;weather-icon&#39;&gt;            ${weatherImg}            &lt;figcaption&gt;${weatherDescription}&lt;/figcaption&gt;          &lt;/figure&gt;        &lt;/li&gt;`)    $(&#39;.week-ul&#39;).append(weekday);  }}</code></pre><p><a href="https://flaviocopes.com/how-to-get-tomorrow-date-javascript/" target="_blank" rel="noopener">抓取明天日期:How to get tomorrow’s date using JavaScript</a><br><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/datetime.html" target="_blank" rel="noopener">日期與時間</a></p><h3 id="7-當文件準備好"><a href="#7-當文件準備好" class="headerlink" title="7.當文件準備好"></a>7.當文件準備好</h3><ul><li>先執行要串接的資料</li><li>於選擇地區時，跳出提醒文字</li></ul><pre><code class="javascript">$(document).ready(function (e) {  getCity();  $(&#39;#selector-list&#39;).change(function () {    $(&#39;.msg&#39;).text(&#39;別忘了按下SUBMIT&#39;);  })});</code></pre><h3 id="8-清除資料"><a href="#8-清除資料" class="headerlink" title="8.清除資料"></a>8.清除資料</h3><ul><li>建立在點選submit後，要先執行的步驟，為清除原本頁面的資料<pre><code class="javascript">function clear() {$(&#39;.cities&#39;).html(&#39;&#39;);$(&#39;.sec-h2&#39;).empty(&#39;&#39;);$(&#39;.week-ul&#39;).html(&#39;&#39;);$(&#39;.msg&#39;).text(&#39;&#39;);</code></pre><a href="https://blog.csdn.net/sunpeiyumail/article/details/7665668" target="_blank" rel="noopener">JQuery中html、append、appendTo、after、insertAfter</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/weatherAPI/weatherAPI.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;成品&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:</summary>
      
    
    
    
    <category term="Ajax 實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/Ajax-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="Ajax" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Ajax/"/>
    
    <category term="API" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>JS實作- typingGame</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/01/22/js-typingGame/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/01/22/js-typingGame/</id>
    <published>2021-01-22T01:31:35.000Z</published>
    <updated>2021-10-05T08:56:16.623Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/typeGame/typeGame.html" target="_blank" rel="noopener">成品</a><br><img src="https://i.imgur.com/fC1gVUt.png" alt=""></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li>在difficuly地方，有設置難易度，並於重新整理後，仍然儲存選擇的難易度<ul><li>使用到取表格中的值</li><li>localstorage的方式，儲存設置的難易度</li></ul></li><li>創造出隨機的單字，並呈現於畫面<ul><li>輸入的值與隨機出現的值要核對</li></ul></li><li>左上方有倒數計時;右上方有分數的計算<ul><li><code>setInterval</code>設定倒數</li></ul></li><li>設置reload的按鈕<ul><li>在要加入文字內容的容器中，添加<code>location.reload()</code></li></ul></li></ul><h2 id="HTML-部分"><a href="#HTML-部分" class="headerlink" title="HTML 部分"></a>HTML 部分</h2><p>1.icon來源<br><a href="https://www.codegrepper.com/code-examples/c/font-awesome+-+cdnjs.com+-+The+best+FOSS+CDN+for+web" target="_blank" rel="noopener">font-awesome - cdnjs</a></p><ul><li>fa-cog<br><img src="https://i.imgur.com/uN4HVq7.png" alt=""></li></ul><p>1.設置難易度選單</p><ul><li><p>difficulty為<code>label</code></p></li><li><p>下拉選單使用<code>option</code></p><p><img src="https://i.imgur.com/99JhtOs.png" alt=""></p></li></ul><pre><code class="html">&lt;div id=&quot;settings&quot; class=&quot;settings&quot;&gt;    &lt;form id=&quot;settings-form&quot;&gt;      &lt;div&gt;        &lt;label for=&quot;difficulty&quot;&gt;Difficulty&lt;/label&gt;        &lt;select id=&quot;difficulty&quot;&gt;          &lt;option value=&quot;easy&quot;&gt;Easy&lt;/option&gt;          &lt;option value=&quot;medium&quot;&gt;Medium&lt;/option&gt;          &lt;option value=&quot;hard&quot;&gt;Hard&lt;/option&gt;        &lt;/select&gt;      &lt;/div&gt;    &lt;/form&gt;  &lt;/div&gt;</code></pre><h2 id="JS-部分"><a href="#JS-部分" class="headerlink" title="JS 部分"></a>JS 部分</h2><h3 id="1-如何隨機取到已製作好的單字"><a href="#1-如何隨機取到已製作好的單字" class="headerlink" title="1.如何隨機取到已製作好的單字"></a>1.如何隨機取到已製作好的單字</h3><p><code>words[Math.floor(Math.random() * words.length)]</code></p><ul><li><code>$(&#39;#word&#39;).text(randomItem);</code>讓文字呈現於畫面中</li></ul><pre><code class="javascript">const words = [  &#39;sigh&#39;,  &#39;tense&#39;,  &#39;airplane&#39;,  &#39;ball&#39;,  &#39;pies&#39;,  &#39;juice&#39;,  &#39;warlike&#39;,  &#39;bad&#39;,  &#39;north&#39;,  &#39;dependent&#39;,  &#39;steer&#39;,  &#39;silver&#39;,  &#39;highfalutin&#39;,  &#39;superficial&#39;,  &#39;quince&#39;,  &#39;eight&#39;,  &#39;feeble&#39;,  &#39;admit&#39;,  &#39;drag&#39;,  &#39;loving&#39;];</code></pre><pre><code class="javascript">function getRandomword() {  //https://www.codegrepper.com/code-examples/javascript/get+random+word+from+array+javascript  randomItem = words[Math.floor(Math.random() * words.length)];  $(&#39;#word&#39;).text(randomItem);};getRandomword()</code></pre><h3 id="2-單字的核對"><a href="#2-單字的核對" class="headerlink" title="2.單字的核對"></a>2.單字的核對</h3><ul><li>要確認抓到的單字是否一樣</li><li><code>let text = $(&#39;#text&#39;).val(); let Item = randomItem;</code></li><li><code>console.log(Item);</code>查看抓取到的單字</li><li>設定文字核對一樣，就執行分數加一，以及創造另一組新單字  </li><li>每次輸入完，並呈現新單字的同時，要清空輸入框的內容<pre><code class="javascript">//輸入單字核對function checkWord() {let text = $(&#39;#text&#39;).val();let Item = randomItem;//console.log(Item);if (text === Item) {  getRandomword();  updateScore();  $(&#39;#text&#39;).val(&quot;&quot;);}}</code></pre></li></ul><h3 id="3-倒數計時"><a href="#3-倒數計時" class="headerlink" title="3.倒數計時"></a>3.倒數計時</h3><ul><li>設置起始時間為10</li><li><code>setInterval()</code>「不斷循環」地固定延遲了某段時間之後，才去執行對應的程式碼，使用 <code>clearInterval()</code>来終止</li><li>在秒數倒計完之後，終止循環，並呈現結束畫面</li></ul><pre><code class="javascript">// Init timelet time = 10;// 倒數計時//https://jsfiddle.net/satyasrinivaschekuri/y03m54Le/function countTime() {  time--;  $(&#39;#time&#39;).text(`${time}s`)  if (time &lt;= 0) {    clearInterval(downloadTimer);    gameOver();  }  //   } else {  //     time--;  //     $(&#39;#time&#39;).text(`${time}s`)  //   }}var downloadTimer = setInterval(countTime, 1000);</code></pre><h4 id="4-倒數計時結束，終止畫面"><a href="#4-倒數計時結束，終止畫面" class="headerlink" title="4.倒數計時結束，終止畫面"></a>4.倒數計時結束，終止畫面</h4><p><img src="https://i.imgur.com/r9oXFmc.png" alt=""></p><ul><li>在該div容器中，插入要顯示的標籤與內容</li><li>利用<code>display:flex</code>呈現該內容</li></ul><pre><code class="javascript">//遊戲結束//location.reload()function gameOver() {  $(&#39;#end-game-container&#39;).html(`&lt;h1&gt;Time ran out&lt;/h1&gt;  &lt;p&gt;Your final score is ${score}&lt;/p&gt;  &lt;button onclick=&quot;location.reload()&quot;&gt;Reload&lt;/button&gt;  `)  // 顯示指定的flex容器  $(&quot;#end-game-container&quot;).css(&#39;display&#39;, &#39;flex&#39;);}</code></pre><h3 id="5-設置難易度"><a href="#5-設置難易度" class="headerlink" title="5.設置難易度"></a>5.設置難易度</h3><ul><li>設定在表格變動選項後的綁定事件</li><li>抓取難易度選項的值，並以其值作為儲存local storage的內容</li><li>接著將儲存的難易度，呈現於畫面<code>$(&#39;#difficulty&#39;).val()</code></li></ul><pre><code class="javascript">//如果儲存端不是空值(已有選擇)，就以此為主，否則的話就是mediumlet difficulty = localStorage.getItem(&#39;difficulty&#39;) !== null  ? localStorage.getItem(&#39;difficulty&#39;)  : &#39;medium&#39;; //設置select的選擇  $(&#39;form&#39;).change(function () {    difficulty = $(&#39;#difficulty&#39;).val();    localStorage.setItem(&#39;difficulty&#39;, difficulty);  });  //使畫面的難易度選擇，呈現儲存的選項  $(&#39;#difficulty&#39;).val(function () {    let a = $(&#39;#difficulty&#39;).val()    if (localStorage.getItem(&#39;difficulty&#39;) !== null) {      return a = localStorage.getItem(&#39;difficulty&#39;);    } else {      return a = &#39;medium&#39;;    }  }) </code></pre><h3 id="6-調整難易度，每次打對題目可以增加秒數"><a href="#6-調整難易度，每次打對題目可以增加秒數" class="headerlink" title="6.調整難易度，每次打對題目可以增加秒數"></a>6.調整難易度，每次打對題目可以增加秒數</h3><ul><li>在<code>checkWord()</code>函式中，如過答對題目的條件下設置</li><li>判斷如果難易度為高、中、低時，可以添加的秒數分別為多少</li></ul><pre><code class="javascript">//time += 5;    if (difficulty === &#39;hard&#39;) {      time += 2;    } else if (difficulty === &#39;medium&#39;) {      time += 3;    } else {      time += 5;    }//判斷完之後，隨之繼續倒數時間    countTime();</code></pre><h3 id="7-設定結束時，分數-gt-5-，會出現good-job圖示"><a href="#7-設定結束時，分數-gt-5-，會出現good-job圖示" class="headerlink" title="7.設定結束時，分數(&gt;=5)，會出現good job圖示"></a>7.設定結束時，分數(&gt;=5)，會出現good job圖示</h3><p><img src="https://i.imgur.com/2YKGGsw.png" alt=""></p><ul><li>在css檔案加入show的class，並插入該圖示的顯現方式</li><li>於js部分，將判斷式，加入<code>gameOver()a</code></li></ul><pre><code class="javascript">//增加判斷，分數達到一標準，會出現圖示  let s = score  console.log(s)  if (s &gt; = 5) {    $(&quot;#end-game-container&quot;).find(&#39;img&#39;).addClass(&#39;show&#39;);  };</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/typeGame/typeGame.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;成品&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgu</summary>
      
    
    
    
    <category term="JS實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/JS%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="JS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/JS/"/>
    
    <category term="jQuery " scheme="https://github.com/Eva813/Eva813.github.io.git/tags/jQuery/"/>
    
    <category term="toggleClass" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/toggleClass/"/>
    
  </entry>
  
  <entry>
    <title>JS實作- 猜數字遊戲</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/01/22/js-guessNumber/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/01/22/js-guessNumber/</id>
    <published>2021-01-22T01:28:14.000Z</published>
    <updated>2021-10-05T09:01:07.507Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/guessNumber/guessNumber.html" target="_blank" rel="noopener">成品</a></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li>練習語音辨識的使用： speech recognition API<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition" target="_blank" rel="noopener">SpeechRecognition-MDN</a></li></ul></li><li>根據不同情形，有不一樣的回覆<ul><li>依據猜測數字的情形給予：go higher,go lower</li></ul></li></ul><p><img src="https://i.imgur.com/IjVZV5d.png" alt=""></p><ul><li>數字猜中後，會出現恭喜答對等敘述，並呈現<code>Play Again</code>的按鈕</li></ul><p><img src="https://i.imgur.com/MhtrTrR.png" alt=""></p><h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><h3 id="1-設定隨機數字"><a href="#1-設定隨機數字" class="headerlink" title="1.設定隨機數字"></a>1.設定隨機數字</h3><ul><li><code>Math.floor(Math.random() * 100) + 1</code>取得1-100</li></ul><pre><code class="javascript">// 取得隨1-100隨機數字function theRandomNum() {  return Math.floor(Math.random() * 100) + 1;  //沒有加1，數字會是0-99}let randomNum = theRandomNum();console.log(&#39;randomNum:&#39;, randomNum);</code></pre><h3 id="2-SpeechRecognition"><a href="#2-SpeechRecognition" class="headerlink" title="2.SpeechRecognition"></a>2.SpeechRecognition</h3><ul><li>第一步要先將SpeechRecognition設為全域變數<ul><li>檢查瀏覽器是否有支援不需要 prefix 的 speechRecognition 介面，若沒有則將 webkit 標頭的 webkitSpeechRecognition 指定給該全域變數，</li></ul></li><li>要使用 speechRecognition ，必須透過 SpeechRecognition 建構式建立一個物件實例。</li><li><code>recognition.onresult</code> 設定取得語音辨識的結果</li><li>執行<code>writeMessage(myWord);checkNumber(myWord);</code>兩個函式<pre><code class="javascript">try {var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;var recognition = new SpeechRecognition();//設定辨識語言。recognition.lang = &#39;zh-tw&#39;;}catch (e) {console.error(e);</code></pre></li></ul><p>}</p><p>// 開始語音辨識<br>recognition.start();<br>//取得語音辨識的結果<br>recognition.onresult = function (event) {<br>  //console.log(event);<br>  let myWord = event.results[0][0].transcript<br>  //console.log(‘You said: ‘, myWord);<br>  writeMessage(myWord);<br>  checkNumber(myWord);<br>};</p><pre><code>* 簡易測試，取得得語音辨識 :point_down: ```javascript=//取得語音辨識的結果recognition.onresult = function (event) {  console.log(&#39;You said: &#39;, event.results[0][0].transcript);};</code></pre><p><img src="https://i.imgur.com/QLWaJB0.png" alt=""></p><p><img src="https://i.imgur.com/FfF5Aqv.png" alt=""></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API" target="_blank" rel="noopener">Using the Web Speech API</a><br><a href="https://www.freecodecamp.org/news/how-to-build-a-simple-speech-recognition-app-a65860da6108/" target="_blank" rel="noopener">How to build a simple speech recognition app</a></p><h3 id="3-記錄下使用者所說的話"><a href="#3-記錄下使用者所說的話" class="headerlink" title="3.記錄下使用者所說的話"></a>3.記錄下使用者所說的話</h3><ul><li><p>在<code>msg</code>的div插入辨識語言的結果文字</p><pre><code class="javascript">function writeMessage(myWord) {$(&#39;#msg&#39;).html(`&lt;div&gt;You said:&lt;/div&gt;  &lt;span class=&quot;box&quot;&gt;${myWord}&lt;/span&gt;`)}</code></pre><h3 id="4-核對隨機數字與猜的數字是否一致"><a href="#4-核對隨機數字與猜的數字是否一致" class="headerlink" title="4.核對隨機數字與猜的數字是否一致"></a>4.核對隨機數字與猜的數字是否一致</h3></li><li><p>設定當辨識到的不是數字：This is not a valid number</p></li><li><p>當範圍不在1-100之間：Number must be between 1 and 100</p></li><li><p>猜中數字的結果：Congrats! You have guessed the number!</p></li><li><p>數字猜測GO LOWER,GO HIGHER</p><pre><code class="javascript">function checkNumber(myWord) {let number = +myWord; //轉為數字if (Number.isNaN(number)) {  $(&#39;#msg&#39;).append(`&lt;div&gt;This is not a valid number&lt;/div&gt;`)  return}//設定語句if (number &gt; 100 || number &lt; 1) {  $(&#39;#msg&#39;).append(`&lt;div&gt;Number must be between 1 and 100&lt;/div&gt;`);  return;}if (number === randomNum) {  $(&#39;body&#39;).html(`  &lt;h2&gt;Congrats! You have guessed the number! &lt;br&gt;&lt;br&gt;   It was ${number}&lt;/h2&gt;  &lt;button class=&quot;play-again&quot; id=&quot;play-again&quot; &gt; Play Again &lt;/button&gt;  `);} else if (number &gt; randomNum) {  $(&#39;#msg&#39;).append(`&lt;div&gt;GO LOWER&lt;/div&gt;`);} else {  $(&#39;#msg&#39;).append(`&lt;div&gt;GO HIGHER&lt;/div&gt;`)}</code></pre></li></ul><p>}</p><pre><code>* 透過 Number.isNaN() 語法可以判斷，若回傳 true，則表示值為 NaN，否則為 false[Number.isNaN()](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN)### 5.使猜數字可以持續猜，直到答對為止* `recognition.onend`使用於控制語音識別的服務，並應用在結束語音識別時的情境。* `recognition.start();`每次數字猜完後，都會重新開始語音識別，直到猜中。* 在數字猜中後，會出現`play again`按鈕，所以要設定此按鈕，按下後能夠重新開始遊戲 =&gt;`window.location.reload()````javascript//https://stackoverflow.com/questions/51080738/how-to-make-speech-recognition-continous-for-a-fix-time-periodrecognition.onend = function () {  recognition.start();  //點擊按鈕，重啟遊戲畫面  $(&#39;body&#39;).find(&#39;#play-again&#39;).click(    function () {      window.location.reload();    }  );}</code></pre><p><a href="https://ithelp.ithome.com.tw/articles/10187827" target="_blank" rel="noopener">實戰智慧插座 14 - 我說開燈就開燈 ( 語音辨識 )</a></p><hr><p>其他參考資料:<br><a href="https://tutorialzine.com/2017/08/converting-from-speech-to-text-with-javascript" target="_blank" rel="noopener">Converting from Speech to Text with JavaScript</a><br><a href="https://davidwalsh.name/speech-recognition" target="_blank" rel="noopener">JavaScript Speech Recognition</a><br><a href="https://ithelp.ithome.com.tw/articles/10248999" target="_blank" rel="noopener">Day21 – Speech Recognition (lukechu)</a><br><a href="https://ithelp.ithome.com.tw/articles/10196577" target="_blank" rel="noopener">Day 21 - Speech Detection (Arel)</a><br><a href="https://ithelp.ithome.com.tw/articles/10224891?sc=rss.qu" target="_blank" rel="noopener">DAY20 : Speech Detection (BROWN)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/guessNumber/guessNumber.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;成品&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;觀察功能需求&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="JS實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/JS%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="JS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/JS/"/>
    
    <category term="jQuery " scheme="https://github.com/Eva813/Eva813.github.io.git/tags/jQuery/"/>
    
    <category term="random" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/random/"/>
    
  </entry>
  
  <entry>
    <title>JS實作- 新年倒數</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/01/16/js-countDown/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/01/16/js-countDown/</id>
    <published>2021-01-16T01:17:11.000Z</published>
    <updated>2021-10-05T09:04:10.743Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/countDown/countDown.html" target="_blank" rel="noopener">成品</a></p><p><img src="https://i.imgur.com/et0bQ96.png" alt=""></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li>計算天、小時、分鐘、秒數的倒數</li><li>最下面顯示倒數年份</li><li>page load的圖示(會旋轉1秒鐘)之後顯示倒數</li></ul><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><pre><code class="css">/*增加讓螢幕寬度變化時，字的大小隨之改變如果螢幕寬度為 500px 以下*/@media (max-width: 500px) {  h1 {    font-size: 45px;  }  .time {    margin: 5px;  }  .time h2 {    font-size: 12px;    margin: 0;  }  .time small {    font-size: 10px;  }}</code></pre><p><a href="https://ithelp.ithome.com.tw/articles/10196578" target="_blank" rel="noopener">Day22：小事之 Media Query</a><a href="https://malagege.github.io/blog/2019/05/05/CSS%E8%A8%AD%E5%AE%9A%E9%9F%BF%E6%87%89%E5%BC%8F-RWD-%E6%9C%89%E5%B9%BE%E7%A8%AE%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">CSS設定響應式(RWD)有幾種方法</a></p><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="1-宣告最終日期-新的一年1-1的日期"><a href="#1-宣告最終日期-新的一年1-1的日期" class="headerlink" title="1. 宣告最終日期(新的一年1/1的日期)"></a>1. 宣告最終日期(新的一年1/1的日期)</h3><ul><li>要先宣告取得目前的年份</li><li>再利用此變數帶入，要倒數的最終日期</li></ul><pre><code class="javascript=">//getFullYear(),用來取得日期物件當中本地時間的年份const currentYear = new Date().getFullYear();const newYearTime = new Date(`January 01 ${currentYear + 1} 00:00:00`);</code></pre><p>時間日期<br><a href="https://www.fooish.com/javascript/date" target="_blank" rel="noopener">JavaScript Date 時間和日期</a><br><a href="https://www.w3schools.com/jsref/jsref_getfullyear.asp" target="_blank" rel="noopener">getFullYear() Method</a></p><h3 id="2-倒數計時的日、時、分、秒"><a href="#2-倒數計時的日、時、分、秒" class="headerlink" title="2. 倒數計時的日、時、分、秒"></a>2. 倒數計時的日、時、分、秒</h3><ul><li><p><code>currentTime</code> 取得目前時間<br><img src="https://i.imgur.com/b3sgw3L.png" alt=""></p></li><li><p><code>diff = newYearTime - currentTime;</code>:計算出目前與未來最終日期的時間差異(此相減得出的是毫秒)<br><img src="https://i.imgur.com/ly5elua.png" alt=""></p></li><li><p>計算天數、小時、秒數</p><ul><li><code>const d</code>1天等於24小時，1小時等於60分鐘，1分鐘等於60秒，1秒等於1000毫秒。所以，msec / 1000 / 60 / 60 / 24 保留整數就是天數。</li><li><code>h = Math.floor(diff / 1000 / 60 / 60) % 24</code>:計算小時，並以除以24之後的餘數，來得到剩餘的小時。</li><li>分鐘、以及秒數也是用同樣方式計算取得。</li></ul></li><li><p>將取得的日期帶入畫面</p><ul><li>使用<code>.html()</code>：<code>$(&#39;#days&#39;).html(d);</code></li><li>在小時、分鐘、秒，是以兩位數呈現，需要當數字少於10，要呈現01,02…，所以使用三元運算子<code>$(&#39;#hours&#39;).html(h &lt; 10 ? &#39;0&#39; + h : h);</code>，當數字小於10，要0+h;反之就只要呈現h。</li></ul></li><li><p>最後要設定<code>setInterval(updateCountdown, 1000);</code> ，使其每秒倒數。</p></li></ul><pre><code class="javascript">function updateCountdown() {  const currentTime = new Date();  //console.log(currentTime);  const diff = newYearTime - currentTime;  //diff計算出來是毫秒  //days  const d = Math.floor(diff / 1000 / 60 / 60 / 24);  //取得除以24之後的餘數  const h = Math.floor(diff / 1000 / 60 / 60) % 24;  const m = Math.floor(diff / 1000 / 60) % 60;  const s = Math.floor(diff / 1000) % 60;  $(&#39;#days&#39;).html(d);  //當數字少於10，要呈現01,02...  $(&#39;#hours&#39;).html(h &lt; 10 ? &#39;0&#39; + h : h);  $(&#39;#minutes&#39;).html(m &lt; 10 ? &#39;0&#39; + m : m);  $(&#39;#seconds&#39;).html(s &lt; 10 ? &#39;0&#39; + s : s);}//設定每一秒都會循環倒數setInterval(updateCountdown, 1000);</code></pre><p>參考資料：<br><a href="http://zhi-yuan-chenge.blogspot.com/2015/10/jsjavascript_16.html" target="_blank" rel="noopener">【JS】javascript時間Date()介紹與補零應用的技巧!!!</a><br><a href="https://kknews.cc/zh-tw/code/8g4vo3e.html" target="_blank" rel="noopener">js和vue實現時分秒倒計時的方法</a><br>三元運算子：<br><a href="https://ithelp.ithome.com.tw/articles/10218274" target="_blank" rel="noopener">Day19【ES6 小筆記】三元運算子-以哥哥的擇偶條件為例</a></p><h3 id="3-載入圖示"><a href="#3-載入圖示" class="headerlink" title="3.載入圖示"></a>3.載入圖示</h3><ul><li>設定在載入之後，要隔多久執行功能</li><li>在此設定載入1秒之後，要移除loading畫面，呈現出倒數的時間</li></ul><pre><code class="javascript">setTimeout(function () {  $(&#39;#loading&#39;).remove();  //要在css檔案的countdown，先設置display：none  $(&#39;#countdown&#39;).css(&#39;display&#39;, &#39;flex&#39;);}, 1000);</code></pre><h3 id="4-放入要倒數的年份"><a href="#4-放入要倒數的年份" class="headerlink" title="4.放入要倒數的年份"></a>4.放入要倒數的年份</h3><pre><code class="javascript">$(&#39;#year&#39;).html(currentYear + 1)</code></pre><hr><p><a href="https://ithelp.ithome.com.tw/articles/10238189" target="_blank" rel="noopener">網頁練習 -倒數計時器實作(上)</a><br><a href="https://www.cssscript.com/best-countdown-timer/" target="_blank" rel="noopener">5 Best Countdown Timer JavaScript Libraries (2020 Update)</a><br><a href="https://ithelp.ithome.com.tw/articles/10238547" target="_blank" rel="noopener">網頁練習 -倒數計時器實作(下)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/countDown/countDown.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;成品&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://</summary>
      
    
    
    
    <category term="JS實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/JS%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="JS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/JS/"/>
    
    <category term="jQuery" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/jQuery/"/>
    
    <category term="setInterval" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/setInterval/"/>
    
  </entry>
  
  <entry>
    <title>JS實作- scrollBlog</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/01/16/js-scrollBlog/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/01/16/js-scrollBlog/</id>
    <published>2021-01-16T01:03:51.000Z</published>
    <updated>2021-10-05T08:56:57.561Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/scrollBlog/scrollBlog.html" target="_blank" rel="noopener">成品</a></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><p>1.隨著頁面的往下捲動，會載入新的資料</p><ul><li>一開始頁面載入，會呈現5筆資料，捲動往下，會再載入5筆</li><li>使用<a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="noopener">{JSON} Placeholder</a>的資料來串接(運用ajax)</li><li>設定捲動位置，並於該位置時，會呈現載入的圖示</li><li>setTimeout來呈現載入的時間與畫面</li></ul><p>2.網頁的各資料是有順序，資料左上會有編碼</p><ul><li>利用資料本身的id作為序號</li><li>於js時，帶入該變數取值</li></ul><h2 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h2><h3 id="1-製作左上方，數字"><a href="#1-製作左上方，數字" class="headerlink" title="1.製作左上方，數字"></a>1.製作左上方，數字</h3><ul><li>利用<code>position: absolute;</code>定位位置，並利用並利用<code>top</code>、<code>left</code>調整位置</li><li>使用<code>display: flex;</code>調整數字的位置，<code>align-items: center;justify-content: center;</code>使水平、垂直置中<pre><code class="css">.post .number {position: absolute;top: -15px;left: -15px;font-size: 15px;width: 40px;height: 40px;border-radius: 50%;background: #fff;color: #296ca8;display: flex;align-items: center;justify-content: center;padding: 7px 10px;}</code></pre><img src="https://i.imgur.com/FkIcque.png" alt=""></li></ul><h3 id="2-載入畫面的原點圖示"><a href="#2-載入畫面的原點圖示" class="headerlink" title="2.載入畫面的原點圖示"></a>2.載入畫面的原點圖示</h3><ul><li>先製作load的基本設定，如flex的排列、位置固定於下方，以及透明度的顯示</li><li>針對原點訂定背景、原點大小。新增動畫效果，<code>animation: bounce 0.5s ease-in infinite;</code></li><li>動畫名稱<code>@keyframes bounce</code>，設定在某時間點，<code>translateY</code>，的位置。</li><li>為了讓圓點的跳動時間不同，針對2、3的原點，設定延遲時間<code>animation-delay: 0.2s;</code><pre><code class="css">.loader {/* opacity: 0; */display: flex;position: fixed; /*位置固定於最下面*/bottom: 50px;transition: opacity 0.3s ease-in;}</code></pre></li></ul><p>.loader.show {<br>  opacity: 1;<br>}</p><p>/<em>製作圓點</em>/</p><p>.circle {<br>  background-color: #fff;<br>  width: 10px;<br>  height: 10px;<br>  border-radius: 50%;<br>  margin: 5px;<br>  animation: bounce 0.5s ease-in infinite;<br>}</p><p>.circle:nth-of-type(2) {<br>  animation-delay: 0.1s;<br>}</p><p>.circle:nth-of-type(3) {<br>  animation-delay: 0.2s;<br>}</p><p>@keyframes bounce {<br>  0%,<br>  100% {<br>    transform: translateY(0);<br>  }</p><p>  50% {<br>    transform: translateY(-10px);<br>  }<br>}</p><pre><code>![](https://i.imgur.com/RuhdRt7.gif)## js部分### 1.jsonplaceholder:* 為取得資料的位置* 抓取5筆的方式，後面參數的設定而來https://jsonplaceholder.typicode.com/posts?_limit5### 2.使用ajax串接API* [Async/Await 非同步流程控制-筆記](https://hackmd.io/Ciayzu-vQcyrh-WeVNeOPQ?view)* 參考[Using async await with jQuery&#39;s $.ajax](https://petetasker.com/using-async-await-jquerys-ajax)、[How to await the ajax request?](https://stackoverflow.com/questions/27612372/how-to-await-the-ajax-request)，使用jQuery&#39;s`$.ajax`執行async* 在try裡面，放入一般`$.ajax`抓取API資料的方式，如url、type、dataType* 首先，在連結的部分，我們希望每次抓取5筆資料，呈現1頁，所以在外面設置`let limit = 5;let page = 1`於url中加入該變數* 在抓取資料成功時，放入function，並用`$.each`來執行     * 在`$.each`先傳入該資料(data)陣列，其`function (index, value)`放入索引以及值的內容。     * 宣告`postEl`變數，創造名為`post`的`div`=&gt; ``$(&#39;\&lt;div /&gt;&#39;)``     * 加入`post`class     * 加入html     * 最後將此變數，放置呈現文章的容器`postEl.appendTo(&#39;#posts-container&#39;);````javascriptlet limit = 5let page = 1async function doAjax() {  let result;  try {    result = await $.ajax({      url: `https://jsonplaceholder.typicode.com/posts?_limit=${limit}&amp;_page=${page}`,      type: &#39;get&#39;,      dataType: &#39;json&#39;,      success: function (data) {      $.each(data, function (index, value) {          const postEl = $(&#39;&lt;div /&gt;&#39;).addClass(&#39;post&#39;).html(`&lt;div class=&quot;number&quot;&gt;${value.id}&lt;/div&gt; &lt;div class=&quot;post-info&quot;&gt;&lt;h2 class=&quot;post-title&quot;&gt;${value.title}&lt;/h2&gt;&lt;p class=&quot;post-body&quot;&gt;${value.body}&lt;/p&gt;      &lt;/div&gt;`)          //console.log(postEl)          postEl.appendTo(&#39;#posts-container&#39;);          //$(&#39;#posts-container&#39;).append(postEl)        });      }    });    return result;  } catch (error) {    console.error(error);  }}doAjax();</code></pre><p>查看是否有成功取得資料：<code>console.log(data);</code><br><img src="https://i.imgur.com/wJPpdfh.png" alt=""></p><h3 id="使用jQuery創造div"><a href="#使用jQuery創造div" class="headerlink" title="使用jQuery創造div"></a>使用jQuery創造div</h3><p><a href="https://stackoverflow.com/questions/10402567/jquery-div-vs-div" target="_blank" rel="noopener">https://stackoverflow.com/questions/10402567/jquery-div-vs-div</a></p><h4 id="each"><a href="#each" class="headerlink" title="each()"></a><code>each()</code></h4><p><a href="https://api.jquery.com/jquery.each/" target="_blank" rel="noopener">jQuery.each()</a></p><h3 id="3-Infinite-Scroll無限捲動-瀑布流"><a href="#3-Infinite-Scroll無限捲動-瀑布流" class="headerlink" title="3.Infinite Scroll無限捲動(瀑布流)"></a>3.Infinite Scroll無限捲動(瀑布流)</h3><ul><li><code>scrollTop</code>網頁右邊的卷軸到最上端網頁的距離有多少</li><li><code>scrollHeight</code> 取得整個沒被擋住的高、<code>clientHeight</code> 取得元素的高度（含padding 不含 border）</li><li>完整內容高度 (scrollHeight) = 內容頂端與捲軸頂端的距離 (scrollTop) + 捲軸本身高度 (clientHeight) + 內容底端與捲軸底端的距離。</li></ul><p>例子:</p><pre><code class="javascript">$(function () {  $(window).scroll(function () {    var scrollVal = $(this).scrollTop();    $(&quot;span.qScrollTop&quot;).text(scrollVal);  });});if(scrollVal &gt; 500){  /* 如果滾動的物件捲動 &gt; 500 則觸發指定的動作。*/}</code></pre><h4 id="注意：window本身沒有scrollTop-Left這個屬性，所以window-scrollTop是undefined的"><a href="#注意：window本身沒有scrollTop-Left這個屬性，所以window-scrollTop是undefined的" class="headerlink" title="注意：window本身沒有scrollTop/Left這個屬性，所以window.scrollTop是undefined的"></a>注意：window本身沒有scrollTop/Left這個屬性，所以window.scrollTop是undefined的</h4><p>所以可能要從body、document來取得</p><h4 id="本段落語法："><a href="#本段落語法：" class="headerlink" title="本段落語法："></a>本段落語法：</h4><ul><li>上述說明各視窗高度得解釋，在此if判斷式中<code>scrollTop + clientHeight &gt;= scrollHeight - 5</code>來計算，當捲軸捲到該位置時，要呈現載入畫面</li><li>接著根據載入畫面函式，來放入載入以及呈現接續畫面得設定<ul><li>使用<code>setTimeout()</code>，在1秒後消除載入圖示，接著在300毫秒後，馬上換頁執行載入新資料</li></ul></li></ul><pre><code class="javascript">$(window).scroll(function () {  var scrollTop = $(this).scrollTop();  var scrollHeight = $(&#39;body&#39;).prop(&quot;scrollHeight&quot;);  //一樣 var scrollHeight2 = document.documentElement.scrollHeight;  var clientHeight = document.documentElement.clientHeight;  //https://stackoverflow.com/questions/10423759/plain-javascript-to-jquery-clientheight  // console.log(&#39;scrollTop:&#39;, scrollTop);  // console.log(&#39;scrollHeight:&#39;, scrollHeight);  // console.log(&#39;clientHeight:&#39;, clientHeight);  if (scrollTop + clientHeight &gt;= scrollHeight - 5) {    //console.log(&#39;show up 123&#39;)    showLoading();  }})//顯示載入圖示，並取得更多串接資料function showLoading() {  $(&#39;.loader&#39;).addClass(&#39;show&#39;);  setTimeout(function () {    $(&#39;.loader&#39;).removeClass(&#39;show&#39;);    setTimeout(function () {      page++;      doAjax();    }, 300);  }, 1000);  //1秒之後消失}</code></pre><p>參考資料：<br><a href="https://pjchender.blogspot.com/2015/04/jquery.html" target="_blank" rel="noopener">[筆記] 計算網頁底部位置，當網頁達到底部時才產生效果─jQuery</a><br><a href="https://shubo.io/element-size-scrolling/#%E7%84%A1%E9%99%90%E6%8D%B2%E5%8B%95-infinite-scroll" target="_blank" rel="noopener">一次搞懂 clientHeight/scrollHeight/scrollTop的區別</a><br><a href="https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/" target="_blank" rel="noopener">談談 JavaScript 的 setTimeout 與 setInterval</a></p><h3 id="4-篩選輸入框資料"><a href="#4-篩選輸入框資料" class="headerlink" title="4.篩選輸入框資料"></a>4.篩選輸入框資料</h3><ul><li>綁定事件為<code>.keyup</code>指放開鍵盤的那個剎那，觸發該事件</li><li>執行的函式內容為：<ul><li><code>var text</code>取得輸入值並轉為小寫</li><li>利用迴圈，去搜尋關鍵字，判斷，值轉為小寫文字的內容是否符合條件</li><li>-1 ：意指條件不符合</li><li><code>indexOf()</code> 方法用來判斷字串字串變數中是否包含某字串。</li></ul></li></ul><pre><code class="javascript">//輸入框搜尋//https://makitweb.com/jquery-search-text-in-the-element-with-contains-selector/  (=&gt;Loop all .content )  $(&#39;#filter&#39;).keyup(function () {    // Search text    var text = $(&#39;#filter&#39;).val().toLowerCase();    // Hide all content class element    $(&#39;.post&#39;).hide();    // Search     $(&#39;.post&#39;).each(function () {      if ($(this).text().toLowerCase().indexOf(&quot;&quot; + text + &quot;&quot;) != -1) {        $(this).closest(&#39;.post&#39;).show();      }    });</code></pre><p>參考資料：<br><a href="https://medium.com/@yitailin/%E6%AF%94%E8%BC%83-keydown-keypress-keyup-%E7%9A%84%E5%B7%AE%E7%95%B0-4e873ba17e81" target="_blank" rel="noopener">比較 keydown, keypress, keyup 的差異</a><br><a href="https://makitweb.com/jquery-search-text-in-the-element-with-contains-selector/" target="_blank" rel="noopener">jQuery – Search text in the Element with :contains() Selector</a><br><a href="https://www.fooish.com/javascript/string/indexOf.html" target="_blank" rel="noopener">JavaScript String indexOf()</a></p><hr><p>補充參考：<br><a href="https://whien.medium.com/js20min-day-20-ajax-%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%99%95%E7%90%86-asynchronous-javascript-and-xml-e74a059ab639" target="_blank" rel="noopener">JS20min Day — 20 AJAX 非同步處理 (Asynchronous JavaScript and XML)</a><br><a href="https://www.youtube.com/watch?v=NOprCnnjHm0" target="_blank" rel="noopener">回呼函式 Callbacks、Promises 物件、Async/Await 非同步流程控制 - 彭彭直播 at 2019/04/07</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/scrollBlog/scrollBlog.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;成品&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;觀察功能需求&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="JS實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/JS%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="JS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/JS/"/>
    
    <category term="ajax " scheme="https://github.com/Eva813/Eva813.github.io.git/tags/ajax/"/>
    
    <category term="setTimeout" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/setTimeout/"/>
    
  </entry>
  
  <entry>
    <title>JS實作- DOM Array Methods</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/01/15/js-DOMArrayMethods/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/01/15/js-DOMArrayMethods/</id>
    <published>2021-01-15T14:19:25.000Z</published>
    <updated>2021-10-05T09:03:46.195Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://eva813.github.io/Eva_portfolio/ArrayMethods/arrayMethod.html" target="_blank" rel="noopener">成品</a><br><img src="https://i.imgur.com/gtaxVol.png" alt=""></p><h1 id="需求觀察"><a href="#需求觀察" class="headerlink" title="需求觀察"></a>需求觀察</h1><ul><li>使用fetch來串接API</li><li>透過左側按鈕，使用陣列的方法來實現不同事件<ul><li>運用<code>forEach()</code>來將陣列資料呈現到畫面</li><li>運用<code>map()</code>計算金額的倍數</li><li><code>filter()</code>篩選出符合條件的資料</li><li><code>sort()</code>用來排序資料</li><li><code>reduce()</code>計算陣列中資料的累加結果</li></ul></li></ul><h1 id="使用fetch來串接資料"><a href="#使用fetch來串接資料" class="headerlink" title="使用fetch來串接資料"></a>使用fetch來串接資料</h1><ul><li>實作專案的資料來源<code>https://randomuser.me/api</code></li></ul><p>1.原本使用<code>fetch</code></p><ul><li>送出 Request，如果得到回應就會回傳帶有 Response 的 Promise 物件，使用 then 將回傳值傳遞下去。<pre><code class="javascript">function getRandomUser() {fetch(&#39;https://randomuser.me/api&#39;).then(response =&gt;    response.json()).then(data =&gt; data)}</code></pre></li></ul><pre><code>[JavaScript Fetch API 使用教學](https://www.oxxostudio.tw/articles/201908/js-fetch.html)2.Fetch 搭配 async、await* 使用async很容易：在定義function時，開頭加上 async* 用fetch取得資料```javascript  async function getRandomUser() {  const res = await fetch(&#39;https://randomuser.me/api&#39;);  //執行完後發出promise  const data = await res.json();  //查看取得的資料，並從中選擇要用的部分  //console.log(data);  const user = data.results[0];  //創造新的使用者，並建立新的物件  const newUser = {    name: `${user.name.first} ${user.name.last}`,    money: Math.floor(Math.random() * 1000000)  };  console.log(newUser);  addData(newUser);}</code></pre><p>3.函式中的撰寫</p><ul><li>查看取得的<code>data</code><br><img src="https://i.imgur.com/TjYFhjC.png" alt=""></li><li>變數宣告要取用資料的哪個部分，並用以建立新物件的內容<ul><li><code>const user = data.results[0];</code></li><li><code>user.name.first</code><br><img src="https://i.imgur.com/NAmWK88.png" alt=""></li></ul></li></ul><h2 id="將物件傳入陣列"><a href="#將物件傳入陣列" class="headerlink" title="將物件傳入陣列"></a>將物件傳入陣列</h2><ul><li>data 為前面<pre><code class="javascript"></code></pre></li></ul><p>//將新建立的物件(newUser)放入陣列中<br>function addData(newObj) {<br>  //這裡的data是在最前面所宣告的 初始陣列<br>  data.push(newObj);</p><pre><code>//不放入參數，使用預設data</code></pre><p>  updateDOM();</p><p>}</p><pre><code>## 將傳入新物件的陣列，顯示於畫面* 使用`forEach()`來呈現畫面的資料    * 傳入參數為item，為新創的物件資料，內有：name,money    * 創造新的`div`並增加class給他    * 用`innerHTML`插入內容    * 用 appendChild() 把上面新增的內容放入，新增的內容會依序排列在後面，不會被洗掉```javascript//將新創立的物件輸出呈現到畫面上(dom)function updateDOM(provideData = data) {  console.log(provideData);  //清除main區域的div  main.innerHTML = `&lt;h2&gt;&lt;strong&gt;Person&lt;/strong&gt;  Wealth&lt;/h2&gt;`;  provideData.forEach(item =&gt; {    const element = document.createElement(&#39;div&#39;);    //在新div增加class    element.classList.add(&#39;person&#39;);    element.innerHTML = `&lt;strong&gt;${item.name}&lt;/strong&gt; ${item.money}`;    main.appendChild(element);  })}</code></pre><p>注意：如果本來 HTML 某元素有既有的內容，但是又用 innerHTML 在同樣的元素上加上內容的時候，innerHTML 會把原本寫的東西覆蓋掉。</p><p><img src="https://i.imgur.com/xjxIGr7.png" alt=""></p><ul><li>注意參數的回傳<pre><code class="javascript">function updateDOM(provideData) {console.log(provideData);}</code></pre></li></ul><pre><code>![](https://i.imgur.com/0O0629Q.png)```javascriptfunction updateDOM(provideData = data) {  console.log(provideData);}</code></pre><p><img src="https://i.imgur.com/qW5Vqq9.png" alt=""></p><p><a href="https://ithelp.ithome.com.tw/articles/10218607" target="_blank" rel="noopener">JavaScript 初心者筆記: DOM - 如何用 JS 新增 HTML 內容</a></p><h2 id="數字轉金錢格式"><a href="#數字轉金錢格式" class="headerlink" title="數字轉金錢格式"></a>數字轉金錢格式</h2><p><img src="https://i.imgur.com/JKQrEyd.png" alt=""></p><pre><code class="javascript">//將回傳的隨機數字，轉換為金錢格式 -https://stackoverflow.com/questions/149055/how-to-format-numbers-as-currency-stringsfunction formatMoney(Money) {  return &#39;$&#39; + Money.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, &#39;$&amp;,&#39;);;}</code></pre><ul><li><code>formatMoney()</code>要放入剛剛forEach所傳入的金額，從這邊去調整數字的格式<pre><code class="javascript">element.innerHTML = `&lt;strong&gt;${item.name}&lt;/strong&gt;  ${formatMoney(item.money)}`;</code></pre></li></ul><p><img src="https://i.imgur.com/8DLGtgC.png" alt=""></p><h2 id="增加人員事件"><a href="#增加人員事件" class="headerlink" title="增加人員事件"></a>增加人員事件</h2><pre><code class="javascript">//設置點擊事件，按下add user，增加人addUserBtn.addEventListener(&#39;click&#39;, getRandomUser);</code></pre><h2 id="運用map-來，建立-double-money事件"><a href="#運用map-來，建立-double-money事件" class="headerlink" title="運用map()來，建立 double money事件"></a>運用<code>map()</code>來，建立 double money事件</h2><ul><li><p>loop through array 就像forEach，但不同的是他會回傳東西</p><pre><code class="javascript">//double money function doubleMoney() {data = data.map(item =&gt; {  return { ...item }});console.log(data);</code></pre></li></ul><p>}</p><pre><code>![](https://i.imgur.com/PpZ5v7v.png)```javascript//double money function doubleMoney() {  data = data.map(item =&gt; {    return { ...item, money: item.money * 2 }  });  console.log(data);}</code></pre><p><img src="https://i.imgur.com/joXfDXT.png" alt=""></p><p>呈現於畫面</p><pre><code class="javascript">//double money function doubleMoney() {  data = data.map(item =&gt; {    return { ...item, money: item.money * 2 }  });  console.log(data);   updateDOM();}</code></pre><p><img src="https://i.imgur.com/M0R5KV4.png" alt=""></p><p><code>forEach()</code>: 针对每一个元素执行提供的函数(executes a provided function once for each array element)。<br><code>map()</code>: 创建一个新的数组，其中每一个元素由调用数组中的每一个元素执行提供的函数得来(creates a new array with the results of calling a provided function on every element in the calling array)。<br><a href="https://blog.fundebug.com/2018/02/05/map_vs_foreach/" target="_blank" rel="noopener">JavaScript中Map和ForEach的区别</a></p><h2 id="運用sort來建立排名"><a href="#運用sort來建立排名" class="headerlink" title="運用sort來建立排名"></a>運用<code>sort</code>來建立排名</h2><pre><code class="javascript">//sortEventfunction sortEvent() {  data = data.sort((a, b) =&gt; {    return b.money - a.money;  });  //console.log(data);  updateDOM();}</code></pre><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a><code>sort()</code></h4><p><code>sort</code>依據字串的 Unicode 編碼進行排序，會改變原本的陣列。</p><ul><li>排序進行方式：<code>sort()</code>會將所有元素轉成字串後，且以第一個字元為對象，再進行排序。</li><li>比較好的方式：一般會建議，還是以函式傳入參數來當排序條件會比較穩定。</li></ul><pre><code class="javascript">const arr = [5, 9, 1, 3, 2, 6];// 以匿名函式回參數做「升序」排序arr.sort(function(a, b) {  return a - b; // a - b &gt; 0});// [1, 2, 3, 5, 6, 9]// 如果要反過來做「降序」排序arr.sort(function(a, b) {  return b - a;});// [9, 6, 5, 3, 2, 1]</code></pre><p>參考資料：<a href="https://ithelp.ithome.com.tw/articles/10225733" target="_blank" rel="noopener">JS 將陣列 Array 重新排列的 sort()</a>、<a href="https://medium.com/@leokao0726/%E6%B7%BA%E8%AB%87-js-sort-%E5%88%B0%E8%83%8C%E5%BE%8C%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95-1035f5b8cde8" target="_blank" rel="noopener">淺談 JS sort() 到背後排序方法</a></p><h2 id="filter篩選百萬以上的人員"><a href="#filter篩選百萬以上的人員" class="headerlink" title="filter篩選百萬以上的人員"></a><code>filter</code>篩選百萬以上的人員</h2><pre><code class="javascript">function filterMillionaires() {  data = data.filter((item) =&gt; {    return item.money &gt; 1000000;  });  updateDOM();}</code></pre><p>PS:<code>filter()</code>的使用是回傳新陣列，原陣列不改變</p><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>拆解內部參數<br>accumulator<br>用來累積回呼函式回傳值的累加器（accumulator）或 initialValue（若有提供的話，詳如下敘）。累加器是上一次呼叫後，所回傳的累加數值。<br>currentValue<br>原陣列目前所迭代處理中的元素。</p><ul><li><code>console.log(accumulator);</code></li></ul><p><img src="https://i.imgur.com/dGpG42b.png" alt=""></p><ul><li><code>console.log(currentValue);</code></li></ul><p><img src="https://i.imgur.com/P0yQK34.png" alt=""></p><ul><li>console.log(currentValue.money);</li></ul><p><img src="https://i.imgur.com/vNfFozL.png" alt=""></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">MDN</a><br><a href="https://w3c.hexschool.com/blog/a2cb755f" target="_blank" rel="noopener">JavaScript reduce 在做什麼？</a></p><h3 id="理解完reduce-所回傳的參數資料後…"><a href="#理解完reduce-所回傳的參數資料後…" class="headerlink" title="理解完reduce()所回傳的參數資料後…"></a>理解完<code>reduce()</code>所回傳的參數資料後…</h3><ul><li>讓金額加總計算<code>accumulator += currentValue.money</code></li></ul><pre><code class="javascript">//calculateMoneyfunction calculateMoney() {  const reduceArr = data.reduce((accumulator, currentValue) =&gt; {    //console.log(accumulator);   // console.log(currentValue.money);    return accumulator += currentValue.money;  }, 0);  const totalEl = document.createElement(&#39;div&#39;);  totalEl.innerHTML = `&lt;h3&gt;Total Wealth: &lt;strong&gt; ${formatMoney(reduceArr)} &lt;/strong&gt; &lt;/h3&gt; `;  main.appendChild(totalEl);}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/ArrayMethods/arrayMethod.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;成品&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https:/</summary>
      
    
    
    
    <category term="JS實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/JS%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="JS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/JS/"/>
    
    <category term="Array" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>JS實作- SortableList</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/01/15/js-SortableList/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/01/15/js-SortableList/</id>
    <published>2021-01-15T14:10:22.000Z</published>
    <updated>2021-10-05T08:56:04.818Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/K6JyjsG.png" alt=""></p><p><a href="https://eva813.github.io/Eva_portfolio/sortableList/sortableList.html" target="_blank" rel="noopener">成品</a></p><h2 id="觀察功能需求"><a href="#觀察功能需求" class="headerlink" title="觀察功能需求"></a>觀察功能需求</h2><ul><li><p>Drag &amp; Drop API</p><ul><li>使元素可以拖放，在 HTML5，只要為它加上 draggable=”true” 屬性，它就能「被拖曳」了</li></ul></li><li><p>拖曳該項目時，會使下方的格子顏色變成灰色</p></li></ul><p><img src="https://i.imgur.com/sZVXh9r.png" alt=""></p><ul><li>拖曳項目到目標位置，會使了者交換</li><li>排序最後會有一個檢查順序正確與否的按鈕</li></ul><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="1-排行榜的設置"><a href="#1-排行榜的設置" class="headerlink" title="1.排行榜的設置"></a>1.排行榜的設置</h3><ul><li>設定熱門旅遊縣市排行榜的陣列</li><li>並宣告一個空陣列，以利後面使用</li></ul><pre><code class="javascript">const bestPlace = [  &#39;台南&#39;,  &#39;台中&#39;,  &#39;高雄&#39;,  &#39;台東&#39;,  &#39;屏東&#39;,  &#39;新北&#39;,  &#39;宜蘭&#39;,  &#39;花蓮&#39;,  &#39;澎湖&#39;,  &#39;桃園&#39;];const listItems = [];</code></pre><h3 id="2-創建排行列表，並將其呈現於頁面上"><a href="#2-創建排行列表，並將其呈現於頁面上" class="headerlink" title="2.創建排行列表，並將其呈現於頁面上"></a>2.創建排行列表，並將其呈現於頁面上</h3><ul><li>宣告新的變數，並利用Fisher-Yates，創造隨機的效果<ul><li>注意新變數，是帶入展開運算元(把陣列中的元素取出)</li></ul></li><li>利用<code>each</code>跑陣列，創造變數填入<code>&lt;li&gt;</code>，並於其中填入html標籤，使畫面呈現列表。</li><li>jquery稱增加屬性<code>listItem.setAttribute(&#39;data-index&#39;, index);</code>,<a href="https://api.jquery.com/attr/" target="_blank" rel="noopener">.attr()</a></li></ul><p><img src="https://i.imgur.com/OqjHMda.png" alt=""></p><ul><li><code>listItems.push(listItem);</code>將列表項目，放入空陣列中</li></ul><pre><code class="javascript">//Fisher-Yates洗牌演算法function fisherYatesShuffle(arr) {  for (var i = arr.length - 1; i &gt; 0; i--) {    var j = Math.floor(Math.random() * (i + 1)); //random index    [arr[i], arr[j]] = [arr[j], arr[i]]; // swap  }}/製作實際可以看到的listfunction creatList() {  let placeArr = [...bestPlace];  fisherYatesShuffle(placeArr);  $.each(placeArr, function (index, place) {    const listItem = $(&#39;&lt;li&gt;&lt;/li&gt;&#39;).appendTo(&#39;#draggable-list&#39;);    // console.log(listItem);    listItem.attr(&quot;data-index&quot;, index);    //listItem.addClass(&#39;wrong&#39;)    listItem.html(`&lt;span class=&quot;number&quot;&gt;${index + 1}&lt;/span&gt;        &lt;div class=&quot;draggable&quot; draggable=&quot;true&quot;&gt;          &lt;p class=&quot;place-name&quot;&gt;${place}&lt;/p&gt;          &lt;i class=&quot;fas fa-grip-lines&quot;&gt;&lt;/i&gt;        &lt;/div&gt;`)    listItems.push(listItem);    //insert into dom    $(&#39;#draggable-list&#39;).append(listItem);  });  addEventListeners()}</code></pre><p>參考資料：<br>push：<br><a href="https://ithelp.ithome.com.tw/articles/10222922" target="_blank" rel="noopener">JS 從陣列 Array 尾端新增元素的 push()</a><br><a href="https://www.oxxostudio.tw/articles/201908/js-array.html" target="_blank" rel="noopener">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a></p><h3 id="3-拖曳的監聽事件"><a href="#3-拖曳的監聽事件" class="headerlink" title="3.拖曳的監聽事件"></a>3.拖曳的監聽事件</h3><ul><li>拖曳開始的監聽，元素是抓取<code>draggables</code>，後續的drop、dragenter、dragover等事件，元素是<code>.draggable-list li</code></li><li>針對要被拖曳的元素（dragSource）監聽事件</li><li>利用forEach方式，允許多個可拖曳的物件</li></ul><ul><li>抓取的元素：<br><img src="https://i.imgur.com/5G60Pmr.png" alt=""><br><img src="https://i.imgur.com/zXR4YWT.png" alt=""></li></ul><pre><code class="javascript">//監聽事件function addEventListeners() {  const draggables = document.querySelectorAll(&#39;.draggable&#39;);  const dragListItems = document.querySelectorAll(&#39;.draggable-list li&#39;);  //Dragable dot 增加監聽事件  draggables.forEach(draggable =&gt; {    draggable.addEventListener(&#39;dragstart&#39;, dragStart);  });  dragListItems.forEach(item =&gt; {    item.addEventListener(&#39;dragover&#39;, dragOver);    item.addEventListener(&#39;drop&#39;, dragDrop);    item.addEventListener(&#39;dragenter&#39;, dragEnter);    item.addEventListener(&#39;dragleave&#39;, dragLeave);  });}</code></pre><p><a href="https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html" target="_blank" rel="noopener">[筆記] 製作可拖曳的元素（HTML5 Drag and Drop API）</a></p><h3 id="4-針對監聽事件，設置各執行的函式"><a href="#4-針對監聽事件，設置各執行的函式" class="headerlink" title="4.針對監聽事件，設置各執行的函式"></a>4.針對監聽事件，設置各執行的函式</h3><ul><li>為了能夠追蹤抓取項目，所以一開始先宣告一個索引變數。</li><li><code>dragStart()</code>:宣告<code>dragStartIndex</code>變數為抓取到的<code>li</code>-&gt;<code>data-index</code></li></ul><p><img src="https://i.imgur.com/6tMHuYr.png" alt=""></p><ul><li>有拖曳的開始，就會有結束，也就是放置(<code>dragDrop()</code>)：<code>dragEndIndex</code>同樣也是以索引來作為依據，並在設置一個交換的函式</li></ul><pre><code class="javascript">//要能夠持續追蹤每個項目的index，所以要有個初始變數let dragStartIndex;//拖拉的各函式function dragStart() {  //console.log(&#39;Event: &#39;, &#39;dragstart&#39;);  dragStartIndex = +$(this).closest(&#39;li&#39;).attr(&#39;data-index&#39;);  console.log(dragStartIndex);};function dragOver(e) {  // console.log(&#39;Event: &#39;, &#39;dragover&#39;);  e.preventDefault();}//設定開始的index,以及結束的index是為了交換function dragDrop() {  // console.log(&#39;Event: &#39;, &#39;dragdrop&#39;);  const dragEndIndex = +$(this).attr(&#39;data-index&#39;);  swapItems(dragStartIndex, dragEndIndex);  $(this).removeClass(&#39;over&#39;);}</code></pre><h3 id="5-交換索引，使物件交換位置swapItems"><a href="#5-交換索引，使物件交換位置swapItems" class="headerlink" title="5.交換索引，使物件交換位置swapItems"></a>5.交換索引，使物件交換位置<code>swapItems</code></h3><ul><li>透過抓取到的開始與結束的索引，來填入要交換的變數</li></ul><pre><code class="javascript">function swapItems(fromIndex, toIndex) {  //要設定交換之前，要先到dragover去設定e.preventDefault();（因為dragover會擋到交換的執行）  const itemOne = listItems[fromIndex].find(&#39;.draggable&#39;);  const itemTwo = listItems[toIndex].find(&#39;.draggable&#39;);  //console.log(itemOne, itemTwo)  listItems[fromIndex].append(itemTwo);  listItems[toIndex].append(itemOne);}</code></pre><h3 id="6-延續拖曳監聽事件，所要執行的其他函式"><a href="#6-延續拖曳監聽事件，所要執行的其他函式" class="headerlink" title="6.延續拖曳監聽事件，所要執行的其他函式"></a>6.延續拖曳監聽事件，所要執行的其他函式</h3><ul><li><p><code>dragEnter()</code>拖曳元素進入要放置的目標位置，所觸發的事件。在此是設定要放入目標位置時，增加一個<code>class</code>的效果</p></li><li><p>進入目標位置，其相互搭配的事件就是離開<code>dragLeave()</code>，當拖曳元素離開放置位置時，所發生的事件。在此為設定，去除於原本<code>class</code>的效果。</p></li></ul><pre><code class="javascript">function dragEnter() {  // console.log(&#39;Event: &#39;, &#39;dragenter&#39;);  $(this).addClass(&#39;over&#39;);}function dragLeave() {  // console.log(&#39;Event: &#39;, &#39;dragleave&#39;);  $(this).removeClass(&#39;over&#39;);}</code></pre><h3 id="7-核對順序"><a href="#7-核對順序" class="headerlink" title="7.核對順序"></a>7.核對順序</h3><ul><li>抓取listItems，來跑forEach，其要參照的參數是，項目、索引。</li><li>宣告<code>placeName</code>為參數<code>listItem</code>，draggable的文字字串。<ul><li>trim()用來去除字串前後的空白</li></ul></li><li>判斷句<code>placeName !== bestPlace[index]</code></li><li><code>console.log(bestPlace[index])</code>會印出，正確的順序。</li></ul><p><img src="https://i.imgur.com/xIR3X98.png" alt=""></p><ul><li><p>核對結果：就是分別加入<code>wrong</code>、<code>&#39;right&#39;</code>。</p><pre><code class="javascript">//核對排名順序function checkOrder() {listItems.forEach((listItem, index) =&gt; {  const placeName = listItem.find(&#39;.draggable&#39;).text().trim();  if (placeName !== bestPlace[index]) {    listItem.addClass(&#39;wrong&#39;);  } else {    listItem.removeClass(&#39;wrong&#39;);    listItem.addClass(&#39;right&#39;);  }});}</code></pre></li></ul><hr><h2 id="以下為補充資料："><a href="#以下為補充資料：" class="headerlink" title="以下為補充資料："></a>以下為補充資料：</h2><h3 id="拖曳補充資料："><a href="#拖曳補充資料：" class="headerlink" title="拖曳補充資料："></a>拖曳補充資料：</h3><p><a href="https://ourcodeworld.com/articles/read/664/top-5-best-sortable-and-draggable-list-javascript-and-jquery-plugins" target="_blank" rel="noopener">Top 5: Best Sortable &amp; Draggable List JavaScript and jQuery Plugins</a><br><a href="https://ithelp.ithome.com.tw/articles/10120587" target="_blank" rel="noopener">實用網頁工具庫 - jQuery UI (上) 元件篇</a></p><h3 id="使陣列隨機排序"><a href="#使陣列隨機排序" class="headerlink" title="使陣列隨機排序"></a>使陣列隨機排序</h3><ul><li><p>使用<code>map</code>將陣列轉換為新陣列，創造vale、以及加上sort排序值(利用<code>Math.random()</code>來產生亂數)</p></li><li><p>使用sort隨機排序，剛剛的sort值是隨機產生，再一次使用sort，來使排的順序也隨機。</p></li><li><p>最後，因為排序後陣列中的物件是<code>{ value: , sort:  }</code>，而我們要讓畫面只顯示<code>value:</code>，所以再使用<code>map</code>將新陣列轉回只有該資料的陣列。</p><pre><code class="javascript">function createList() {[...richestPeople]  .map(a =&gt; ({ value: a, sort: Math.random() }))  .sort((a, b) =&gt; a.sort - b.sort)  .map(a =&gt; a.value)  .forEach((person, index) =&gt; {    const listItem = document.createElement(&#39;li&#39;);    listItem.setAttribute(&#39;data-index&#39;, index);    listItem.innerHTML = `      &lt;span class=&quot;number&quot;&gt;${index + 1}&lt;/span&gt;      &lt;div class=&quot;draggable&quot; draggable=&quot;true&quot;&gt;        &lt;p class=&quot;person-name&quot;&gt;${person}&lt;/p&gt;        &lt;i class=&quot;fas fa-grip-lines&quot;&gt;&lt;/i&gt;      &lt;/div&gt;    `;    listItems.push(listItem);    draggable_list.appendChild(listItem);  });addEventListeners();}</code></pre><p><a href="https://shubo.io/javascript-random-shuffle/" target="_blank" rel="noopener">[筆記] 如何正確實作 JavaScript Array Random Shuffle 亂數排序演算法</a><br><a href="https://www.delftstack.com/zh-tw/howto/javascript/shuffle-array-javascript/" target="_blank" rel="noopener">在 JavaScript 中對一個陣列進行隨機化或洗牌</a></p></li></ul><hr><h3 id="jquery-ui"><a href="#jquery-ui" class="headerlink" title="jquery ui"></a>jquery ui</h3><pre><code class="javascript">//https://stackoverflow.com/questions/6426795/what-is-disableselection-used-for-in-jquery-uifunction dragdrop() {  $(&quot;#draggable-list&quot;).sortable({    //connectWith: &quot;ul&quot;,    delay: 300,    distance: 15,    //number: &quot;span:not(.number)&quot;,    iframeFix: true,  }).disableSelection();}</code></pre><hr><h3 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h3><p><a href="https://www.0to255.com/f2e8cf" target="_blank" rel="noopener">0-255</a><br><a href="https://webgradients.com/" target="_blank" rel="noopener">漸層顏色</a><br><a href="https://coolors.co/palettes/trending" target="_blank" rel="noopener">colors</a><br><a href="https://stackoverflow.com/questions/34494873/why-is-my-jquery-selector-returning-a-n-fn-init0-and-what-is-it" target="_blank" rel="noopener">Why is my JQuery selector returning a n.fn.init[0], and what is it?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/K6JyjsG.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfolio/sortableList/sortableList.html&quot;</summary>
      
    
    
    
    <category term="JS實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/JS%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="JS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/JS/"/>
    
    <category term="drag&amp;drop" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/drag-drop/"/>
    
  </entry>
  
  <entry>
    <title>JS實作- musicPlayer</title>
    <link href="https://github.com/Eva813/Eva813.github.io.git/2021/01/15/js-musicPlayer/"/>
    <id>https://github.com/Eva813/Eva813.github.io.git/2021/01/15/js-musicPlayer/</id>
    <published>2021-01-15T13:51:43.000Z</published>
    <updated>2021-10-05T09:00:38.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="觀察須製作的功能"><a href="#觀察須製作的功能" class="headerlink" title="觀察須製作的功能"></a>觀察須製作的功能</h2><p><a href="https://eva813.github.io/Eva_portfolio/musicPlayer/musicPlayer.html" target="_blank" rel="noopener">成品</a></p><ol><li>播放器API的樣式</li></ol><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio" target="_blank" rel="noopener">&lt;audio&gt;: The Embed Audio element</a></p><ol start="2"><li>播放時，左方的圓型圖示會旋轉。</li></ol><ul><li>先於css檔案製作符合動畫的class</li><li>在js時，依照符合的情況加入該class</li></ul><p><img src="https://i.imgur.com/3LBdMiU.png" alt=""></p><ol start="3"><li>播放時，上方會跳出播放歌曲的名稱。</li></ol><ul><li>先於css檔案製作符合動畫的class，設定<code>opacity</code>1或0，<code>translateY</code>位置的移動</li><li>在js時，依照符合的情況加入該class</li></ul><p><img src="https://i.imgur.com/U3dx7yG.png" alt=""></p><ol start="4"><li>左右按鍵可以更換曲目，同時圖片會更換</li></ol><ul><li>設定陣列，使歌曲與圖片相符</li><li>並讓前後的跳轉鍵，依照順序或條件來變化</li></ul><p><img src="https://i.imgur.com/NuxfsOb.png" alt=""></p><hr><h2 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h2><h3 id="跳轉按鍵"><a href="#跳轉按鍵" class="headerlink" title="跳轉按鍵"></a>跳轉按鍵</h3><ul><li>播放鍵、前/後跳轉的按鈕 </li></ul><pre><code class="html">&lt;div class=&quot;nav&quot;&gt;        &lt;button id=&quot;prev&quot; class=&quot;action-btn&quot;&gt;          &lt;i class=&quot;fas fa-backward&quot;&gt;&lt;/i&gt;        &lt;/button&gt;        &lt;button id=&quot;play&quot; class=&quot;action-btn  action-btn-big&quot;&gt;          &lt;i class=&quot;fas fa-play&quot;&gt;&lt;/i&gt;        &lt;/button&gt;        &lt;button id=&quot;next&quot; class=&quot;action-btn&quot;&gt;          &lt;i class=&quot;fas fa-forward&quot;&gt;&lt;/i&gt;        &lt;/button&gt;&lt;/div&gt;</code></pre><p><img src="https://i.imgur.com/w1bpDjr.png" alt=""></p><h2 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h2><h3 id="背景顏色"><a href="#背景顏色" class="headerlink" title="背景顏色"></a>背景顏色</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient()" target="_blank" rel="noopener">linear-gradient()</a></p><pre><code class="css">/* 傾斜度\顏色、從哪個位置開始 */  background-image:linear-gradient(0deg  ,rgb(247, 247, 247,1) 23.8%,  rgba(252,221,221,1) 92% );</code></pre><p><img src="https://i.imgur.com/Xb5PpmY.png" alt=""></p><h2 id="圖片圓形以及旋轉"><a href="#圖片圓形以及旋轉" class="headerlink" title="圖片圓形以及旋轉"></a>圖片圓形以及旋轉</h2><pre><code class="css">.img-container{  position: relative;  width: 110px;}/*圖片圓形*/.img-container img{  border-radius: 50%;  object-fit: cover;/*填滿元素的寬度及高度(維持原比例)，通常會剪掉部分的物件*/ height: 110px; width: inherit; /*繼承自父層的寬度屬性值。*/ position:absolute; bottom: 0; left: 0; animation: rotate 3s linear infinite; animation-play-state: paused;}/* 播放class的製作 */.music-container.play .img-container img{ animation-play-state:running;}@keyframes rotate{  from{    transform: rotate(0deg);  }  to {    transform: rotate(360deg);  }}</code></pre><ul><li>使用animation@keyframe<br><a href="https://wcc723.github.io/development/2020/10/11/img-cover/" target="_blank" rel="noopener">新手前端也不該犯的錯：圖片變形</a></li></ul><p><img src="https://i.imgur.com/RfUz8Pk.png" alt=""></p><ul><li>在圖片中間加入圓形點，以看起來像光碟樣式</li></ul><pre><code class="css">.img-container::after{  content: &#39;&#39;;  border-radius: 50%;  background-color: #fff;  position: absolute;  left: 50%;  bottom: 100%;  width: 25px;  height: 25px;  transform: translate(-50%,50%);}</code></pre><p><img src="https://i.imgur.com/HlnWKJb.png" alt=""></p><h3 id="播放進度條的製作"><a href="#播放進度條的製作" class="headerlink" title="播放進度條的製作"></a>播放進度條的製作</h3><ol><li>標題<pre><code class="css">.music-info{background-color: rgba(255,255,255,.5);border-radius:15px 15px 0 0 ;position: absolute;top: 0;left: 20px;opacity: 0;transform: translateY(0%);transition: transform 0.3s ease-in,opacity 0.3s ease-in;z-index: 0;}</code></pre></li></ol><p>.music-container.play .music-info{<br>  opacity: 1;<br>   transform: translateY(-100%);<br>}</p><pre><code>* 將曲目標題設置背景、圓角* 利用 transfor、opacity來呈現位置的變化![](https://i.imgur.com/icBK0qt.png)* 修改標題位置```css= /*放入.music-info之中*/ width: calc(100% - 40px);  padding: 10px 10px 10px 150px;</code></pre><h4 id="calc"><a href="#calc" class="headerlink" title="calc()"></a><code>calc()</code></h4><p>calc() 的運算式一樣是按照先乘除後加減進行計算<br> width: calc(100% - 40px);<br>/* 意思是 100% 的寬度 - 去 40px */<br><a href="https://5xruby.tw/posts/css-calc/" target="_blank" rel="noopener">CSS： calc() 數值運算</a></p><p><img src="https://i.imgur.com/er3G6Wd.png" alt=""></p><pre><code class="css">.music-info h4{margin: 0;}</code></pre><p><img src="https://i.imgur.com/qiWmxmu.png" alt=""></p><p>2.進度條（progress）</p><pre><code class="css">.progress-container{  background-color: #fff;  border-radius: 5px;  height: 4px;  width: 100%;  margin: 10px 0;  cursor: pointer;}.progress{  background-color: #fe8daa; border-radius: 5px;  height: 4px;  width: 0%;  transition: width .1s linear ;}</code></pre><p><img src="https://i.imgur.com/uPUHWcM.png" alt=""></p><h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><h3 id="1-音樂播放鍵-播放與停止"><a href="#1-音樂播放鍵-播放與停止" class="headerlink" title="1.音樂播放鍵(播放與停止)"></a>1.音樂播放鍵(播放與停止)</h3><ul><li>分別有兩個函式：<code>playMusic()</code> 、<code>pauseMusic()</code></li><li>在css設定<code>.play</code>的css，並於js綁定事件，加入css的效果(使圖片如同轉盤，會旋轉)</li><li>在icon的部分：在播放時：為暫停鍵圖示;在暫停時：為播放鍵的圖示</li><li>透過play()、pause()，讓音源播放與暫停</li></ul><h3 id="play-、pause"><a href="#play-、pause" class="headerlink" title="play()、pause()"></a><code>play()</code>、<code>pause()</code></h3><p>因為play()、pause()是DOM元素，不是jQuery的function，而要用jQuery取得DOM元素<br><code>$(&#39;#audio&#39;).get(0).play()</code> =&gt;<code>$(&#39;#audio&#39;)[0].play()</code><br><code>$(&#39;#audio&#39;).get(0).pause()</code> =&gt;<code>$(&#39;#audio&#39;)[0].pause()</code></p><p>參考資料：<br><a href="https://learn.jquery.com/using-jquery-core/faq/how-do-i-pull-a-native-dom-element-from-a-jquery-object/" target="_blank" rel="noopener">How do I pull a native DOM element from a jQuery object?</a><br><a href="https://stackoverflow.com/questions/4646998/play-pause-html-5-video-using-jquery" target="_blank" rel="noopener">Play/pause HTML 5 video using JQuery</a></p><pre><code class="javascript">//播放音樂function playMusic() {  $(&#39;.music-container&#39;).addClass(&#39;play&#39;);  $(&#39;#play&#39;).find(&#39;i&#39;).removeClass(&#39;fa-play&#39;);  $(&#39;#play&#39;).find(&#39;i&#39;).addClass(&#39;fa-pause&#39;);  $(&#39;#audio&#39;).get(0).play();};</code></pre><pre><code class="javascript">//停止音樂function pauseMusic() {  $(&#39;.music-container&#39;).removeClass(&#39;play&#39;);  $(&#39;#play&#39;).find(&#39;i&#39;).addClass(&#39;fa-play&#39;);  $(&#39;#play&#39;).find(&#39;i&#39;).removeClass(&#39;fa-pause&#39;);  $(&#39;#audio&#39;).get(0).pause();}</code></pre><ul><li><h4 id="綁定事件："><a href="#綁定事件：" class="headerlink" title="綁定事件："></a>綁定事件：</h4>如果音樂是播放狀態的話，就執行<code>pauseMusic()</code>，反之，音樂不處於波方時，執行<code>playMusic()</code><pre><code class="javascript">$(&#39;#play&#39;).click(function (e) {  var hasPlay = $(&#39;#music-container&#39;).hasClass(&#39;play&#39;);  //var a = $(&#39;#audio&#39;).paused;  if (hasPlay) {    pauseMusic();  } else {    playMusic();  }});</code></pre></li></ul><pre><code>### 2.載入音樂* 將歌曲名稱建立陣列，並將此回傳到建立的函式中* 設定預設的索引`let songIndex = 1`* 使用 attr( 屬性名, 屬性值 )，獲取屬性的值，在這部分，透過歌曲名稱來取得歌曲與照片```javascriptvar songs_name = [&#39;hey&#39;, &#39;summer&#39;, &#39;ukulele&#39;];let songIndex = 1;function loadSongs(song) {  //console.log(song);  $(&#39;#title&#39;).text(song);  $(&#39;#audio&#39;).attr(&#39;src&#39;, `music/${song}.mp3`);  $(&#39;#cover&#39;).attr(&#39;src&#39;, `img/${song}.jpg`);}// Initially load song details into DOMloadSongs(songs_name[songIndex]);</code></pre><h4 id="綁定於下一首、前一首的圖示被點擊時"><a href="#綁定於下一首、前一首的圖示被點擊時" class="headerlink" title="綁定於下一首、前一首的圖示被點擊時"></a>綁定於下一首、前一首的圖示被點擊時</h4><pre><code class="javascript">$(&#39;#next&#39;).click(nextSong)  $(&#39;#prev&#39;).click(function () { prevSong();  });</code></pre><ul><li><p>查看函式回傳</p><pre><code class="javascript">loadSongs(songs_name);</code></pre><p><img src="https://i.imgur.com/je9hXJY.png" alt=""></p></li><li><p>要抓取到該索引</p><pre><code class="javascript">loadSongs(songs_name[songIndex]);</code></pre><p><img src="https://i.imgur.com/5not1Ji.png" alt=""><br>此段落執行時，出現問題：<br><img src="https://i.imgur.com/dj4H5hb.png" alt=""></p></li><li><p>搜尋到的處理方式：在html的<code>head</code><link rel="shortcut icon" href="#"><br><a href="https://stackoverflow.com/questions/31075893/im-getting-favicon-ico-error/31329574" target="_blank" rel="noopener">I’m getting favicon.ico error</a></p></li></ul><p>參考資料：<br><a href="https://iter01.com/470327.html" target="_blank" rel="noopener">jquery prop和attr的區別</a><br><a href="https://cythilya.github.io/2017/09/10/jquery-attr-vs-prop/" target="_blank" rel="noopener">jQuery .attr() vs .prop()</a></p><h3 id="3-左右鍵的跳轉"><a href="#3-左右鍵的跳轉" class="headerlink" title="3.左右鍵的跳轉"></a>3.左右鍵的跳轉</h3><ul><li>下一首歌曲，與跳至前一首歌曲，兩個函式的撰寫有異曲同工之妙，只有在設條條件上的差異。</li><li><code>nextSong()</code>:設定條件為歌曲索引<code>songIndex</code>比 歌曲陣列長度-1<code>songs_name.length - 1</code>還要小，我們就要將索引+1。<ul><li>例如這裏預設的索引為1，所以在點擊當下，判斷&lt;<code>songs_name.length - 1</code>，所以需加1，索引變成2，跳至下一首 ‘ukulele’</li></ul></li><li>prevSong()：設定條件為歌曲索引<code>songIndex</code>比0大，就要索引-1，跳轉至上一首歌曲。若沒符合的話，索引就等於<code>songs_name.length - 1</code></li></ul><pre><code class="javascript">//歌曲的索引，如果比歌曲總數-1還小，就將索引加1，跳轉下一首function nextSong() {  if (songIndex &lt; songs_name.length - 1) { songIndex += 1; } else {    songIndex = 0  };  loadSongs(songs_name[songIndex]);  playMusic();}//跳轉前一首function prevSong() {  //如果索引沒有大於0。就會播索引[2]  if (songIndex &gt; 0) { songIndex -= 1; } else {    songIndex = songs_name.length - 1;  };  loadSongs(songs_name[songIndex]);  playMusic();}</code></pre><p>參考資料：<br><a href="https://www.geeksforgeeks.org/create-a-music-player-using-javascript/" target="_blank" rel="noopener">Create a Music Player using JavaScript</a></p><h3 id="4-點擊進度條，可以跳轉音樂位置"><a href="#4-點擊進度條，可以跳轉音樂位置" class="headerlink" title="4.點擊進度條，可以跳轉音樂位置"></a>4.點擊進度條，可以跳轉音樂位置</h3><h4 id="1-顯示粉色進度條"><a href="#1-顯示粉色進度條" class="headerlink" title="(1).顯示粉色進度條"></a>(1).顯示粉色進度條</h4><ul><li>duration：音源的時間(一樣是使用get方式取得)</li><li>currentTime：音樂播放的當前位置（以秒計）</li><li>progressBar：進度條</li><li>計算百分比：<code>(currentTime / duration) * 100</code></li></ul><pre><code class="javascript">//顯示進度條//為何取[0]function handleProgress() {  var duration = $(&#39;#audio&#39;).get(0).duration;  //console.log(duration)  var currentTime = $(&#39;#audio&#39;)[0].currentTime;  //console.log(currentTime)  const progressBar = $(&#39;#progress&#39;);  const progressPercent = (currentTime / duration) * 100;  //currentTime目前播放時間去與影片長度duration轉換成百分比，即可得到目前播放時間的百分比  progressBar.css(&#39;width&#39;, `${progressPercent}%`);};</code></pre><h4 id="2-點擊進度條，會跳轉到該位置播放"><a href="#2-點擊進度條，會跳轉到該位置播放" class="headerlink" title="(2).點擊進度條，會跳轉到該位置播放"></a>(2).點擊進度條，會跳轉到該位置播放</h4><ul><li>width:獲取該進度條容器的寬度</li><li>抓取點擊位置：<ul><li>e.pageX:取得滑鼠在頁面裡的位置</li><li>elm.offset().left:絕對座標X軸</li></ul></li><li>將（點擊位置除以進度條的總長）乘以 音樂的時間長度，就可以取得點擊的時間位置<code>theTime = ((xPos / width))* duration;</code></li><li>最後現在時間設為，計算好的點擊時間</li></ul><pre><code class="javascript">//點擊進度條//https://ithelp.ithome.com.tw/articles/10194871//https://tools.wingzero.tw/article/sn/102$(&#39;#progress-container&#39;).click(function (e) {  const width = $(&#39;#progress-container&#39;).width(); //216.25  //console.log(width);  //取得點擊位置  var elm = $(this);  var xPos = e.pageX - elm.offset().left;  //console.log(xPos);  var duration = $(&#39;#audio&#39;)[0].duration;  var theTime = ((xPos / width))    * duration;  //console.log(theTime);  $(&#39;#audio&#39;)[0].currentTime = theTime;});</code></pre><p>執行過程，利用console來查看</p><pre><code class="javascript">console.log(e.pageX);console.log(elm.offset().left);console.log(xPos)</code></pre><p>參考資料：<br><a href="https://tools.wingzero.tw/article/sn/102" target="_blank" rel="noopener">取得滑鼠位置、元素位置與區塊內的相對位置</a></p><h3 id="5-歌曲播完後，換下一首"><a href="#5-歌曲播完後，換下一首" class="headerlink" title="5.歌曲播完後，換下一首"></a>5.歌曲播完後，換下一首</h3><pre><code class="javascript">  $(&#39;#audio&#39;).on(&#39;ended&#39;,nextSong);</code></pre><p>參考資料：<br><a href="https://stackoverflow.com/questions/39325637/audio-auto-play-next-song-when-previous-is-finished/52228798" target="_blank" rel="noopener">audio auto play next song when previous is finished</a></p><h2 id="6-增加隨機的變換背景色彩"><a href="#6-增加隨機的變換背景色彩" class="headerlink" title="6.增加隨機的變換背景色彩"></a>6.增加隨機的變換背景色彩</h2><ul><li>色彩為0-256;而因為想取的較亮的色系，所以取64-256<ul><li><code>Math.random()</code> 會回傳一個偽隨機小數 (pseudo-random) 介於0到1之間(包含 0，不包含1) </li><li><code>Math.floor()</code>會將所有的小數無條件捨去到比自身小的最大整數</li><li><code>Math.floor(Math.random() * 255) + 64</code>就會取得64 to 256</li></ul></li><li>宣告變數<code>bgColor</code>為rdba(red,green,blue,a)</li><li>最後將此函式，放入<code>loadSongs()</code>函式當中，每次播放、跳轉歌曲，同時背景顏色也會改變<br><img src="https://i.imgur.com/piYCbc5.png" alt=""></li></ul><pre><code class="javascript">function random_bg_color() {  // Get a random number between 64 to 256   // (for getting lighter colors)   let red = Math.floor(Math.random() * 255) + 64;  let green = Math.floor(Math.random() * 255) + 64;  let blue = Math.floor(Math.random() * 255) + 64;  let a = 0.5  // Construct a color withe the given values   let bgColor = &quot;rgba(&quot; + red + &quot;, &quot; + green + &quot;, &quot; + blue + &quot;, &quot; + a + &quot;)&quot;;  var bg = $(document.body).css(&#39;background&#39;, `${bgColor}`);  // Set the background to the new color   bg = bgColor;  console.log(bg)} </code></pre><p>參考資料：<br><a href="https://www.geeksforgeeks.org/create-a-music-player-using-javascript/" target="_blank" rel="noopener">Create a Music Player using JavaScript</a><br><a href="https://stackoverflow.com/questions/20790579/wont-math-floormath-random-255-generate-uneven-probabilities" target="_blank" rel="noopener">Won’t Math.floor(Math.random() * 255) generate uneven probabilities?</a><a href="https://ithelp.ithome.com.tw/articles/10197904" target="_blank" rel="noopener">[筆記][JavaScript]用Math.random()取得亂數的技巧</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;觀察須製作的功能&quot;&gt;&lt;a href=&quot;#觀察須製作的功能&quot; class=&quot;headerlink&quot; title=&quot;觀察須製作的功能&quot;&gt;&lt;/a&gt;觀察須製作的功能&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://eva813.github.io/Eva_portfoli</summary>
      
    
    
    
    <category term="JS實作練習" scheme="https://github.com/Eva813/Eva813.github.io.git/categories/JS%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="JS" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/JS/"/>
    
    <category term="append" scheme="https://github.com/Eva813/Eva813.github.io.git/tags/append/"/>
    
    <category term="jQuery " scheme="https://github.com/Eva813/Eva813.github.io.git/tags/jQuery/"/>
    
  </entry>
  
</feed>
