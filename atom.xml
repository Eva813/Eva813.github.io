<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Let&#39;s Coding</title>
  
  
  <link href="https://eva813.github.io/atom.xml" rel="self"/>
  
  <link href="https://eva813.github.io/"/>
  <updated>2025-09-07T11:35:33.269Z</updated>
  <id>https://eva813.github.io/</id>
  
  <author>
    <name>Eva Chan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何用 SeqNo 管理機制提升列表插入效能，解決排序衝突問題</title>
    <link href="https://eva813.github.io/2025/09/07/firebase-seqNo/"/>
    <id>https://eva813.github.io/2025/09/07/firebase-seqNo/</id>
    <published>2025-09-07T11:02:27.000Z</published>
    <updated>2025-09-07T11:35:33.269Z</updated>
    
    <content type="html"><![CDATA[<p>列表的動態排序和插入為常見的需求。然而，當面對大量資料時，傳統的「刪除重建」策略容易會成為效能瓶頸。本文將分享我在專案中如何透過 SeqNo 管理機制，將列表插入效能提升，同時保持資料一致性和系統穩定性。</p><p>在專案內有一下拉列表的功能，當使用者選擇某個選項後，會將該選項插入到列表中，並且會依據使用者的操作順序來進行排序。最初的實作方式是每次插入新選項時，都會重新計算整個列表的排序，這在資料量較大時，導致效能明顯下降。為了解決這個問題，引入了 SeqNo 管理機制。</p><h2 id="原有問題"><a href="#原有問題" class="headerlink" title="原有問題"></a>原有問題</h2><p>當使用者要在列表中間插入新的資料時，使系統面臨挑戰，並且在沒有加入 seqNo 管理機制前，容易遇到排序衝突的問題。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原有狀態</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;A&#x27;</span>, <span class="attr">seqNo</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;B&#x27;</span>, <span class="attr">seqNo</span>: <span class="number">2</span> &#125;,  <span class="comment">// 要在 B 後面插入新項目</span></span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;C&#x27;</span>, <span class="attr">seqNo</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;D&#x27;</span>, <span class="attr">seqNo</span>: <span class="number">4</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果直接將新項目設為 seqNo: 3，會與現有的項目 C 發生衝突。</p><h3 id="傳統解決方案的困境"><a href="#傳統解決方案的困境" class="headerlink" title="傳統解決方案的困境"></a>傳統解決方案的困境</h3><p>直觀的解決方案是重新排序所有項目：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 刪除重建</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">insertListData</span>(<span class="params">afterId: string, </span></span><br><span class="line"><span class="params">  newListData: ListData</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 刪除所有後續項目 (N-M 次刪除)</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">deleteListDataAfter</span>(afterId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 重新建立所有項目 (N-M+1 次建立)</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">recreateListDataWithNewSeqNo</span>(newListData,</span><br><span class="line">  subsequentListData);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>操作複雜度: O(2N+1) - 其中 N 為列表總長度</li><li>資料庫壓力: 大量刪除和建立操作</li><li>交易風險: 操作步驟過多，失敗機率高</li><li>併發問題: 長時間鎖定，容易產生競爭條件</li></ul><h2 id="SeqNo-管理機制"><a href="#SeqNo-管理機制" class="headerlink" title="SeqNo 管理機制"></a>SeqNo 管理機制</h2><p> 只更新真正需要變動的項目，將複雜度進行改善，是插入點之後的項目數量。</p><ol><li>排序基礎函式<br>確保所有項目能依照 seqNo 正確排序。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 排序工具</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sortListDataBySeqNo</span>(<span class="params">listData: ListData[]</span>): <span class="title class_">ListData</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> [...listData].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> aSeqNo = a.<span class="property">seqNo</span> || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> bSeqNo = b.<span class="property">seqNo</span> || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> aSeqNo - bSeqNo;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>插入策略計算</li></ol><p>只計算「插入點之後」需要調整的項目，並產生更新操作清單。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">calculateInsertStrategy</span>(<span class="params"></span></span><br><span class="line"><span class="params">  existingListData: ListData[],</span></span><br><span class="line"><span class="params">  afterListDataId: string</span></span><br><span class="line"><span class="params"></span>): &#123;</span><br><span class="line">  <span class="attr">insertSeqNo</span>: number;</span><br><span class="line">  <span class="attr">affectedListData</span>: <span class="title class_">ListData</span>[];</span><br><span class="line">  <span class="attr">updateOperations</span>: <span class="title class_">Array</span>&lt;&#123; <span class="attr">listDataId</span>: string; <span class="attr">newSeqNo</span>: number &#125;&gt;;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="keyword">const</span> sortedListData = <span class="title function_">sortListDataBySeqNo</span>(existingListData);</span><br><span class="line">  <span class="keyword">const</span> afterIndex = sortedListData.<span class="title function_">findIndex</span>(<span class="function"><span class="params">data</span> =&gt;</span> data.<span class="property">id</span> === afterListDataId);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (afterIndex === -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;afterListDataId not found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 關鍵：插入點的 seqNo + 1</span></span><br><span class="line">  <span class="keyword">const</span> insertSeqNo = sortedListData[afterIndex].<span class="property">seqNo</span>! + <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 只影響插入點之後的項目</span></span><br><span class="line">  <span class="keyword">const</span> affectedListData = sortedListData.<span class="title function_">slice</span>(afterIndex + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 產生更新操作清單</span></span><br><span class="line">  <span class="keyword">const</span> updateOperations = affectedListData.<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">listDataId</span>: data.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">newSeqNo</span>: data.<span class="property">seqNo</span>! + <span class="number">1</span></span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; insertSeqNo, affectedListData, updateOperations &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>交易執行<br>確保所有更新操作能在同一個 Transaction 中完成。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">executeSeqNoUpdates</span>(<span class="params"></span></span><br><span class="line"><span class="params">  transaction: Transaction,</span></span><br><span class="line"><span class="params">  operations: <span class="built_in">Array</span>&lt;&#123; listDataId: string; newSeqNo: number &#125;&gt;</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="keyword">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> operation <span class="keyword">of</span> operations) &#123;</span><br><span class="line">    <span class="comment">// 更新每個受影響的項目</span></span><br><span class="line">    <span class="keyword">const</span> listDataRef = adminDb.<span class="title function_">collection</span>(<span class="string">&#x27;listData&#x27;</span>).<span class="title function_">doc</span>(operation.<span class="property">listDataId</span>);</span><br><span class="line">    transaction.<span class="title function_">update</span>(listDataRef, &#123;</span><br><span class="line">      <span class="attr">seqNo</span>: operation.<span class="property">newSeqNo</span>,</span><br><span class="line">      <span class="attr">updatedAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>API 實現範例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// POST /api/v1/listData</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">POST</span>(<span class="params">req: Request</span>) &#123;</span><br><span class="line">  <span class="comment">// ... 驗證邏輯</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (afterListDataId) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 步驟1: 計算最小更新策略</span></span><br><span class="line">      <span class="keyword">const</span> &#123; updateOperations, insertSeqNo &#125; =</span><br><span class="line">        <span class="title function_">calculateInsertStrategy</span>(existingListData, afterListDataId);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 步驟2: Transaction 執行</span></span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> adminDb.<span class="title function_">runTransaction</span>(<span class="keyword">async</span> (transaction) =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">executeSeqNoUpdates</span>(transaction, updateOperations);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入新項目</span></span><br><span class="line">        <span class="keyword">const</span> listDataRef = adminDb.<span class="title function_">collection</span>(<span class="string">&#x27;listData&#x27;</span>).<span class="title function_">doc</span>();</span><br><span class="line">        transaction.<span class="title function_">set</span>(listDataRef, &#123;</span><br><span class="line">          ...newListData,</span><br><span class="line">          <span class="attr">seqNo</span>: insertSeqNo</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">id</span>: listDataRef.<span class="property">id</span>, <span class="attr">seqNo</span>: insertSeqNo &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(result, &#123; <span class="attr">status</span>: <span class="number">201</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error.<span class="property">message</span> === <span class="string">&#x27;afterListDataId not found&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;afterListDataId not found&#x27;</span> &#125;, &#123; <span class="attr">status</span>: <span class="number">404</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="此專案的應用回顧與心得"><a href="#此專案的應用回顧與心得" class="headerlink" title="此專案的應用回顧與心得"></a>此專案的應用回顧與心得</h2><p>這個問題最初是在「插入列表中間」時被發現的。<br>當時經常出現排序錯亂，追查後才發現是因為缺乏 SeqNo 管理機制，導致插入時 seqNo 發生衝突。</p><p>一開始的解法是 刪除重建，但這帶來兩個明顯的問題：<br>1.當資料量大時，對後端資料庫造成極大負擔。<br>2.使用者操作無法預測，若頻繁在列表中間插入或刪除，效能會快速下降。</p><p>引入 SeqNo 管理機制 後：</p><ul><li>插入效能明顯提升</li><li>保持了資料一致性</li><li>系統穩定性也大幅改善<br>這樣的設計不僅解決了排序衝突，也大幅減少了資料庫的操作次數，讓整體效能更加穩定可</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;列表的動態排序和插入為常見的需求。然而，當面對大量資料時，傳統的「刪除重建」策略容易會成為效能瓶頸。本文將分享我在專案中如何透過 SeqNo 管理機制，將列表插入效能提升，同時保持資料一致性和系統穩定性。&lt;/p&gt;
&lt;p&gt;在專案內有一下拉列表的功能，當使用者選擇某個選項後，會</summary>
      
    
    
    
    <category term="side-project" scheme="https://eva813.github.io/categories/side-project/"/>
    
    
    <category term="firebase" scheme="https://eva813.github.io/tags/firebase/"/>
    
    <category term="side-project" scheme="https://eva813.github.io/tags/side-project/"/>
    
  </entry>
  
  <entry>
    <title>實現前端自動儲存系統：Next.js + Zustand</title>
    <link href="https://eva813.github.io/2025/06/29/frontend-auto-save/"/>
    <id>https://eva813.github.io/2025/06/29/frontend-auto-save/</id>
    <published>2025-06-29T04:44:01.000Z</published>
    <updated>2025-09-07T01:00:12.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現代 Web 應用開發中，自動儲存功能已成為用戶體驗的重要組成部分。想像一下，用戶正在編輯重要文件時還需要手動點擊儲存按鈕，如果沒有自動儲存機制、或是遺忘點擊儲存，所有辛苦編輯的內容都會瞬間消失。這種糟糕的體驗促使我思考：如何設計一個既智能又穩定的自動儲存系統？</p><p>本文將提供我在專案內內實作如何使用 Next.js 14 + Zustand 架構實現一個完整的自動儲存系統。</p><h2 id="項目背景與需求分析"><a href="#項目背景與需求分析" class="headerlink" title="項目背景與需求分析"></a>項目背景與需求分析</h2><h3 id="應用場景概述"><a href="#應用場景概述" class="headerlink" title="應用場景概述"></a>應用場景概述</h3><p>我們面對的是一個 prompt 管理平台，類似於代碼編輯器或筆記應用。用戶可以：</p><ul><li>創建和編輯 prompt</li><li>設置快捷鍵進行快速訪問</li><li>組織提示詞到不同文件夾</li><li>進行富文本編輯</li></ul><h3 id="核心技術挑戰"><a href="#核心技術挑戰" class="headerlink" title="核心技術挑戰"></a>核心技術挑戰</h3><p>在這樣的編輯環境中，面臨以下挑戰：</p><ol><li><strong>頻繁的內容變更</strong>：用戶持續輸入和修改內容</li><li><strong>多字段同步</strong>：標題、內容、快捷鍵需要同時追蹤</li><li><strong>性能考量</strong>：避免過度頻繁的 API 調用</li><li><strong>用戶反饋</strong>：清晰的保存狀態指示</li></ol><h3 id="技術選型理由"><a href="#技術選型理由" class="headerlink" title="技術選型理由"></a>技術選型理由</h3><p>我們選擇以下技術棧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">技術棧架構</span><br><span class="line">├── Next.js 14 (App Router) - 前端框架</span><br><span class="line">├── Zustand - 狀態管理</span><br><span class="line">├── TypeScript - 類型安全</span><br><span class="line">├── TipTap - 富文本編輯器</span><br><span class="line">└── Firebase - 後端數據存儲</span><br></pre></td></tr></table></figure><p><strong>為什麼選擇這個組合？</strong></p><ul><li><strong>Next.js 14</strong>：提供現代化的 React 開發體驗和卓越的性能</li><li><strong>Zustand</strong>：相比 Redux 更輕量，但功能完整的狀態管理方案</li><li><strong>TypeScript</strong>：在複雜的狀態管理中提供類型安全保障</li><li><strong>Firebase</strong>：簡化後端開發，讓我們專注於前端邏輯</li></ul><h2 id="系統架構設計"><a href="#系統架構設計" class="headerlink" title="系統架構設計"></a>系統架構設計</h2><h3 id="整體架構思路"><a href="#整體架構思路" class="headerlink" title="整體架構思路"></a>整體架構思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">自動保存系統架構</span><br><span class="line"></span><br><span class="line">     ┌────────────────────────────────────────────────┐</span><br><span class="line">     │                    UI 組件層                    │</span><br><span class="line">     │                                                │</span><br><span class="line">     │   ┌─────────────────┐   ┌────────────────────┐ │</span><br><span class="line">     │   │  編輯器組件       │   │ SaveStatusIndicator│ │</span><br><span class="line">     │   │  (表單輸入)       │   │ (保存狀態顯示)       │ │</span><br><span class="line">     │   └─────────────────┘   └────────────────────┘ │</span><br><span class="line">     │                                                │</span><br><span class="line">     └────────────────────────────────────────────────┘</span><br><span class="line">                           │</span><br><span class="line">                           ▼</span><br><span class="line">     ┌────────────────────────────────────────────────┐</span><br><span class="line">     │                   業務邏輯層                     │</span><br><span class="line">     │                                                │</span><br><span class="line">     │      ┌────────────────────────────────────┐    │</span><br><span class="line">     │      │         usePromptPageLogic         │    │</span><br><span class="line">     │      │  • 表單狀態管理                      │    │</span><br><span class="line">     │      │  • Debounce 自動保存                │    │</span><br><span class="line">     │      │  • 數據驗證                         │    │</span><br><span class="line">     │      │  • 錯誤處理                         │    │</span><br><span class="line">     │      └────────────────────────────────────┘    │</span><br><span class="line">     │                                                │</span><br><span class="line">     └────────────────────────────────────────────────┘</span><br><span class="line">                           │</span><br><span class="line">                           ▼</span><br><span class="line">     ┌────────────────────────────────────────────────┐</span><br><span class="line">     │                   狀態管理層                     │</span><br><span class="line">     │                                                │</span><br><span class="line">     │   ┌─────────────────┐   ┌────────────────────┐ │</span><br><span class="line">     │   │  useSaveStore   │   │  usePromptStore    │ │</span><br><span class="line">     │   │  (保存狀態)      │   │  (業務數據)          │ │</span><br><span class="line">     │   └─────────────────┘   └────────────────────┘ │</span><br><span class="line">     │                                                │</span><br><span class="line">     └────────────────────────────────────────────────┘</span><br><span class="line">                           │</span><br><span class="line">                           ▼</span><br><span class="line">     ┌────────────────────────────────────────────────┐</span><br><span class="line">     │                     API 層                     │</span><br><span class="line">     │                                                │</span><br><span class="line">     │               Firebase/REST API                │</span><br><span class="line">     │                                                │</span><br><span class="line">     └────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h3 id="核心設計原則"><a href="#核心設計原則" class="headerlink" title="核心設計原則"></a>核心設計原則</h3><ol><li><strong>關注點分離</strong>：UI、業務邏輯、狀態管理各司其職</li><li><strong>單一職責</strong>：每個 Hook 和組件都有明確的責任範圍  </li><li><strong>可組合性</strong>：小而專精的函數可以靈活組合</li><li><strong>類型安全</strong>：全程 TypeScript 保護，減少運行時錯誤</li></ol><h2 id="核心工具"><a href="#核心工具" class="headerlink" title="核心工具"></a>核心工具</h2><h3 id="1-Debounce-防抖機制"><a href="#1-Debounce-防抖機制" class="headerlink" title="1. Debounce 防抖機制"></a>1. Debounce 防抖機制</h3><p>Debounce 是自動保存的核心技術，它能延遲函數執行直到停止觸發一段時間後。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">DebouncedFunction</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">unknown</span>[]) =&gt; <span class="built_in">unknown</span>&gt; = T &amp; &#123;</span><br><span class="line">  <span class="attr">cancel</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> debounce&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">unknown</span>[]) =&gt; <span class="built_in">void</span>&gt;(</span><br><span class="line">  <span class="attr">func</span>: T, </span><br><span class="line">  <span class="attr">delay</span>: <span class="built_in">number</span></span><br><span class="line">): <span class="title class_">DebouncedFunction</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">timer</span>: <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> <span class="built_in">setTimeout</span>&gt;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> debouncedFunc = <span class="keyword">function</span> (<span class="params">...args: Parameters&lt;T&gt;</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">func</span>(...args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125; <span class="keyword">as</span> T;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提供取消機制</span></span><br><span class="line">  (debouncedFunc <span class="keyword">as</span> <span class="title class_">DebouncedFunction</span>&lt;T&gt;).<span class="property">cancel</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> debouncedFunc <span class="keyword">as</span> <span class="title class_">DebouncedFunction</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>泛型設計</strong>：支持任意函數類型，保持類型安全</li><li><strong>取消機制</strong>：提供 <code>cancel</code> 方法，確保在組件卸載時清理資源</li></ul><p><strong>在專案內應用：</strong><br>用戶每次按鍵都會觸發，但只有停止輸入 1 秒後才真正執行保存，這樣既保證了數據不丟失，又避免了過度頻繁的 API 調用。</p><h3 id="2-深度比較工具"><a href="#2-深度比較工具" class="headerlink" title="2. 深度比較工具"></a>2. 深度比較工具</h3><p>為了避免不必要的保存觸發，會需要精確判斷數據是否真的有變更。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deepEqual = (<span class="attr">obj1</span>: <span class="built_in">unknown</span>, <span class="attr">obj2</span>: <span class="built_in">unknown</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 快速路徑：相同引用或相同原始值</span></span><br><span class="line">  <span class="keyword">if</span> (obj1 === obj2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// null 或 undefined 處理</span></span><br><span class="line">  <span class="keyword">if</span> (obj1 == <span class="literal">null</span> || obj2 == <span class="literal">null</span>) <span class="keyword">return</span> obj1 === obj2;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 類型不同直接返回 false</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj1 !== <span class="keyword">typeof</span> obj2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 原始類型直接比較</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj1 !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> obj1 === obj2;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 對象深度比較邏輯...</span></span><br><span class="line">  <span class="comment">// (省略具體實現細節)</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>為什麼會需要此一比較工具？</strong><br>在 JavaScript 中，對物件進行淺層比較時，如果它們的引用不同，即使內容完全相同，結果也會是 false。深度比較則能確保只有在內容真正變化時才觸發保存。</p><h3 id="3-狀態管理架構"><a href="#3-狀態管理架構" class="headerlink" title="3. 狀態管理架構"></a>3. 狀態管理架構</h3><h4 id="保存狀態-Store"><a href="#保存狀態-Store" class="headerlink" title="保存狀態 Store"></a>保存狀態 Store</h4><p>這個 Store 專門管理保存相關的狀態，支持多個文件同時編輯的場景。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SaveState</span> &#123;</span><br><span class="line">  <span class="attr">isSaving</span>: <span class="built_in">boolean</span>;  </span><br><span class="line">  <span class="attr">promptSaveStates</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, &#123; </span><br><span class="line">    <span class="attr">lastSavedAt</span>: <span class="title class_">Date</span> | <span class="literal">null</span>;     <span class="comment">// 最後保存時間</span></span><br><span class="line">    <span class="attr">hasSaveError</span>: <span class="built_in">boolean</span>;        <span class="comment">// 是否有保存錯誤</span></span><br><span class="line">    <span class="attr">isActive</span>: <span class="built_in">boolean</span>;            <span class="comment">// 是否有未保存的變更</span></span><br><span class="line">  &#125;&gt;;</span><br><span class="line">  <span class="attr">setSaving</span>: <span class="function">(<span class="params">isSaving: <span class="built_in">boolean</span>, promptId?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">setSaved</span>: <span class="function">(<span class="params">promptId: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">setSaveError</span>: <span class="function">(<span class="params">hasError: <span class="built_in">boolean</span>, promptId?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多實例支持的設計考量：</strong><br>這種設計允許同時追蹤多個檔案的保存狀態，每個檔案都有獨立的狀態管理，互不干擾。<br>在本專案中，透過保存狀態 Store（Save State Store）的設計實現多實例支持：</p><ul><li>Zustand 作為集中狀態管理器</li><li>Zustand 提供一個全域的 Store，用來集中管理所有檔案的保存狀態。<br><code>Record&lt;string, ...&gt;</code> 結構管理多檔案狀態<br>promptSaveStates 並非只儲存單一檔案狀態，而是採用類似字典（Map）的結構：<ul><li>鍵（Key）：每個檔案的唯一標識（如 promptId）</li><li>值（Value）：包含該檔案獨立保存狀態（如 lastSavedAt、hasSaveError 等）的物件</li></ul></li></ul><p>運作方式說明：</p><ul><li><p>當你需要更新或查詢某個檔案的狀態時，會以該檔案的 promptId 作為 key，從 promptSaveStates 這個大區塊中找到對應的狀態物件進行操作。</p></li><li><p>例如，若要標記 ID 為 “file-A” 的檔案有未保存變更，就更新 promptSaveStates[‘file-A’] 的狀態；而操作 ID 為 “file-B” 的檔案時，則讀寫 promptSaveStates[‘file-B’] 的狀態。</p></li><li><p>由於每個檔案都透過唯一 ID 進行索引，因此它們的狀態完全隔離，實現多實例支持且互不干擾。</p></li></ul><p>這種設計不僅能集中管理，也能保證每個檔案的狀態獨立，適合需要同時處理多檔案狀態的應用場景。</p><h3 id="4-業務邏輯整合"><a href="#4-業務邏輯整合" class="headerlink" title="4. 業務邏輯整合"></a>4. 業務邏輯整合</h3><p>核心的 <code>usePromptPageLogic</code> Hook 負責整合表單管理、變更檢測和自動保存觸發：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">usePromptPageLogic</span> = (<span class="params">&#123; promptId &#125;: UsePromptPageLogicProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 表單狀態管理</span></span><br><span class="line">  <span class="keyword">const</span> [formData, setFormData] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">shortcut</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 存儲初始值用於變更比較</span></span><br><span class="line">  <span class="keyword">const</span> [initialValues, setInitialValues] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">shortcut</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 核心保存函數</span></span><br><span class="line">  <span class="keyword">const</span> savePrompt = <span class="title function_">useCallback</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 保存邏輯實現</span></span><br><span class="line">  &#125;, [<span class="comment">/* 依賴項 */</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 創建 debounced 的保存函數</span></span><br><span class="line">  <span class="keyword">const</span> debouncedSave = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">debounce</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">savePrompt</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>), <span class="comment">// 1 秒延遲</span></span><br><span class="line">    [savePrompt]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 核心邏輯：檢查變更並觸發自動保存</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> hasChanges = !<span class="title function_">deepEqual</span>(formData, initialValues);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (hasChanges &amp;&amp; currentPrompt) &#123;</span><br><span class="line">      <span class="title function_">setActive</span>(<span class="literal">true</span>, promptId);   <span class="comment">// 標記為活躍狀態</span></span><br><span class="line">      <span class="title function_">debouncedSave</span>();             <span class="comment">// 觸發延遲保存</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasChanges) &#123;</span><br><span class="line">      <span class="title function_">setActive</span>(<span class="literal">false</span>, promptId);  <span class="comment">// 標記為非活躍狀態</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理函數：取消待執行的保存</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      debouncedSave.<span class="title function_">cancel</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [formData, initialValues, currentPrompt, debouncedSave, setActive, promptId]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回表單處理器和狀態</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 表單數據和處理函數</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>這個 Hook ：</strong></p><ol><li><strong>自動觸發機制</strong>：通過 <code>useEffect</code> 監聽表單數據變更</li><li><strong>智能去重</strong>：使用 <code>deepEqual</code> 避免錯誤觸發</li><li><strong>狀態同步</strong>：與 Zustand store 整合</li><li><strong>資源清理</strong>：確保組件卸載時取消待執行的保存</li></ol><h2 id="用戶體驗優化"><a href="#用戶體驗優化" class="headerlink" title="用戶體驗優化"></a>用戶體驗優化</h2><h3 id="1-UI-的實時狀態反饋"><a href="#1-UI-的實時狀態反饋" class="headerlink" title="1. UI 的實時狀態反饋"></a>1. UI 的實時狀態反饋</h3><p><code>SaveStatusIndicator</code> 組件提供即時的保存狀態反饋：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">SaveStatusIndicator</span> = (<span class="params">&#123; className = <span class="string">&#x27;&#x27;</span> &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [displayState, setDisplayState] = useState&lt;<span class="string">&#x27;idle&#x27;</span> | <span class="string">&#x27;saving&#x27;</span> | <span class="string">&#x27;saved&#x27;</span> | <span class="string">&#x27;error&#x27;</span>&gt;(<span class="string">&#x27;idle&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">renderContent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> (displayState) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;saving&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center space-x-2 text-primary&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Spinner</span> <span class="attr">className</span>=<span class="string">&quot;h-3 w-3 animate-spin&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>保存中...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;saved&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center space-x-2 text-green-600&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">CheckIcon</span> <span class="attr">className</span>=<span class="string">&quot;h-3 w-3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>已保存所有更改<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center space-x-2 text-red-600&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ErrorIcon</span> <span class="attr">className</span>=<span class="string">&quot;h-3 w-3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>保存失敗<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">transition-all</span> <span class="attr">duration-200</span> $&#123;<span class="attr">className</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;renderContent()&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="錯誤處理與容錯設計"><a href="#錯誤處理與容錯設計" class="headerlink" title="錯誤處理與容錯設計"></a>錯誤處理與容錯設計</h2><h3 id="1-網路異常處理"><a href="#1-網路異常處理" class="headerlink" title="1. 網路異常處理"></a>1. 網路異常處理</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> savePrompt = <span class="title function_">useCallback</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">setSaving</span>(<span class="literal">true</span>, promptId);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">updatePrompt</span>(promptId, updatedPrompt);</span><br><span class="line">    <span class="title function_">setSaved</span>(promptId);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 區分不同類型的錯誤</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="comment">// 認證失效，重定向登錄頁</span></span><br><span class="line">      router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">status</span> === <span class="number">403</span>) &#123;</span><br><span class="line">      <span class="comment">// 權限不足</span></span><br><span class="line">      <span class="title function_">setSaveError</span>(<span class="literal">true</span>, promptId);</span><br><span class="line">      <span class="title function_">showNotification</span>(<span class="string">&#x27;您沒有編輯此內容的權限&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">status</span> &gt;= <span class="number">500</span>) &#123;</span><br><span class="line">      <span class="comment">// 服務器錯誤</span></span><br><span class="line">      <span class="title function_">setSaveError</span>(<span class="literal">true</span>, promptId);</span><br><span class="line">      <span class="title function_">showNotification</span>(<span class="string">&#x27;服務器暫時無法響應，請稍後再試&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其他錯誤</span></span><br><span class="line">      <span class="title function_">setSaveError</span>(<span class="literal">true</span>, promptId);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;保存時發生錯誤:&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [<span class="comment">/* 依賴項 */</span>]);</span><br></pre></td></tr></table></figure><h2 id="專案實作內性能優化策略"><a href="#專案實作內性能優化策略" class="headerlink" title="專案實作內性能優化策略"></a>專案實作內性能優化策略</h2><h3 id="1-內存優化"><a href="#1-內存優化" class="headerlink" title="1. 內存優化"></a>1. 內存優化</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 useCallback 避免不必要的重新渲染</span></span><br><span class="line"><span class="keyword">const</span> handleNameChange = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">updateFormField</span>(<span class="string">&#x27;name&#x27;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;, [updateFormField]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 useMemo 緩存計算結果</span></span><br><span class="line"><span class="keyword">const</span> debouncedSave = <span class="title function_">useMemo</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> <span class="title function_">debounce</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">savePrompt</span>();</span><br><span class="line">  &#125;, <span class="number">1000</span>),</span><br><span class="line">  [savePrompt]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-狀態更新優化"><a href="#3-狀態更新優化" class="headerlink" title="3. 狀態更新優化"></a>3. 狀態更新優化</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Zustand 的淺層比較避免不必要的訂閱觸發</span></span><br><span class="line"><span class="keyword">const</span> &#123; isSaving, getSaveStateForPrompt &#125; = <span class="title function_">useSaveStore</span>(</span><br><span class="line">  <span class="title function_">useShallow</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">isSaving</span>: state.<span class="property">isSaving</span>,</span><br><span class="line">    <span class="attr">getSaveStateForPrompt</span>: state.<span class="property">getSaveStateForPrompt</span></span><br><span class="line">  &#125;))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="用戶體驗改善"><a href="#用戶體驗改善" class="headerlink" title="用戶體驗改善"></a>用戶體驗改善</h3><ol><li>用戶無需手動保存，專注於內容創作</li><li>清晰的保存狀態指示，用戶始終了解目前編輯狀態</li></ol><h2 id="適用場景與擴展"><a href="#適用場景與擴展" class="headerlink" title="適用場景與擴展"></a>適用場景與擴展</h2><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>通過這個真實項目的實踐，我學到了：</p><ul><li><strong>如何設計可擴展的前端架構</strong>：模塊化設計讓系統易於維護和擴展</li><li><strong>狀態管理的最佳實踐</strong>：Zustand 作為輕量級但功能完善的狀態管理工具，帶來高效的解決方案</li><li><strong>性能優化的具體技巧</strong>：從 debounce 到內存管理，細緻調校提升整體效</li><li><strong>用戶體驗設計的重要性</strong>：技術實現需要為用戶體驗服務</li></ul><p>這個項目體現了現代前端開發的高度複雜性，也證明了只要有合理的架構設計和邏輯實現，就能打造出穩定且高效的用戶體驗。自動保存功能雖然看似簡單，但要達到穩定性與流暢體驗，背後需要面對諸多細節與邊界情境的挑戰。</p>]]></content>
    
    
    <summary type="html">Implementing auto-save functionality with Zustand in Next.js 14 to enhance user experience and data security.</summary>
    
    
    
    <category term="side-project" scheme="https://eva813.github.io/categories/side-project/"/>
    
    
    <category term="side-project" scheme="https://eva813.github.io/tags/side-project/"/>
    
    <category term="Next.js" scheme="https://eva813.github.io/tags/Next-js/"/>
    
  </entry>
  
  <entry>
    <title>Next.js Middleware 中的身份驗證：Edge Runtime 限制與解決方案</title>
    <link href="https://eva813.github.io/2025/05/17/side-project-EdgeRuntime/"/>
    <id>https://eva813.github.io/2025/05/17/side-project-EdgeRuntime/</id>
    <published>2025-05-17T11:06:42.000Z</published>
    <updated>2025-09-07T01:00:35.821Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一個 Side Project 時，我想保護部分頁面（像是 /dashboard）需要登入才能訪問，於是決定使用 Next.js 的 Middleware 功能來進行 JWT 身份驗證。</p><p>理論上應該很簡單——從 Cookie 抓 token，用 jsonwebtoken 驗證它。但很快我就遇到阻礙：在 Middleware 中用 verify() 解 token，竟然直接報錯，完全無法運行。</p><h2 id="為什麼-jsonwebtoken-在-Middleware-裡失敗？"><a href="#為什麼-jsonwebtoken-在-Middleware-裡失敗？" class="headerlink" title="為什麼 jsonwebtoken 在 Middleware 裡失敗？"></a>為什麼 jsonwebtoken 在 Middleware 裡失敗？</h2><p>當你試圖這樣寫時：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next/server&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; verify &#125; <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> token = request.<span class="property">cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>)?.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> decoded = <span class="title function_">verify</span>(token, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>); <span class="comment">// ❌ 會報錯</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;/login&#x27;</span>, request.<span class="property">url</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>會出現這個錯誤訊息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Error</span>: <span class="title class_">The</span> <span class="title class_">Edge</span> <span class="title class_">Runtime</span> does not support <span class="title class_">Node</span>.<span class="property">js</span> <span class="string">&#x27;crypto&#x27;</span> <span class="variable language_">module</span>.</span><br></pre></td></tr></table></figure><p>這代表你不能在 Middleware 中使用 Node.js 的某些套件，像是 crypto。</p><h3 id="Edge-Runtime-是什麼？"><a href="#Edge-Runtime-是什麼？" class="headerlink" title="Edge Runtime 是什麼？"></a>Edge Runtime 是什麼？</h3><p>Next.js 的 Middleware 是在 Edge Runtime 上執行的，這個環境接近於瀏覽器，不具備完整的 Node.js API。所以 jsonwebtoken 這種依賴 Node.js crypto 模組的函式庫在這裡無法運作。</p><h2 id="解法一：使用-jose-函式庫-（採用方式）"><a href="#解法一：使用-jose-函式庫-（採用方式）" class="headerlink" title="解法一：使用 jose 函式庫 （採用方式）"></a>解法一：使用 jose 函式庫 （採用方式）</h2><p>jose 是專門設計來兼容 Web Crypto API 的 JWT 函式庫，可以在 Edge Runtime 中順利運作。</p><h3 id="Middleware-驗證範例："><a href="#Middleware-驗證範例：" class="headerlink" title="Middleware 驗證範例："></a>Middleware 驗證範例：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next/server&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; jwtVerify &#125; <span class="keyword">from</span> <span class="string">&#x27;jose&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> token = request.<span class="property">cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>)?.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;/login&#x27;</span>, request.<span class="property">url</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> secret = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>().<span class="title function_">encode</span>(process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>); <span class="comment">// Web API 兼容</span></span><br><span class="line">    <span class="keyword">const</span> &#123; payload &#125; = <span class="keyword">await</span> <span class="title function_">jwtVerify</span>(token, secret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 你可以選擇把 payload 傳給下游使用</span></span><br><span class="line">    <span class="keyword">const</span> requestHeaders = <span class="keyword">new</span> <span class="title class_">Headers</span>(request.<span class="property">headers</span>);</span><br><span class="line">    requestHeaders.<span class="title function_">set</span>(<span class="string">&#x27;x-user-id&#x27;</span>, payload.<span class="property">sub</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">next</span>(&#123;</span><br><span class="line">      <span class="attr">request</span>: &#123;</span><br><span class="line">        <span class="attr">headers</span>: requestHeaders,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;/login&#x27;</span>, request.<span class="property">url</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">matcher</span>: [<span class="string">&#x27;/dashboard/:path*&#x27;</span>, <span class="string">&#x27;/api/protected/:path*&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>無需額外 API 呼叫</li><li>jose 是針對 Web 環境優化的函式庫，效能好、兼容性強</li></ul><h2 id="解法二：將驗證邏輯移至-API-Route"><a href="#解法二：將驗證邏輯移至-API-Route" class="headerlink" title="解法二：將驗證邏輯移至 API Route"></a>解法二：將驗證邏輯移至 API Route</h2><p>如果你已經深度依賴 jsonwebtoken，可以將 JWT 驗證邏輯放到 API Route，由 Middleware 呼叫。</p><ul><li>API Route 處理驗證</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/api/auth/verify.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; verify &#125; <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">body</span>.<span class="property">token</span>;</span><br><span class="line">    <span class="keyword">const</span> decoded = <span class="title function_">verify</span>(token, process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">valid</span>: <span class="literal">true</span>, <span class="attr">user</span>: decoded &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">valid</span>: <span class="literal">false</span>, <span class="attr">error</span>: error.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Middleware 呼叫驗證 API</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next/server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> token = request.<span class="property">cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>)?.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;/login&#x27;</span>, request.<span class="property">url</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;request.nextUrl.origin&#125;</span>/api/auth/verify`</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; token &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!result.<span class="property">valid</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;/login&#x27;</span>, request.<span class="property">url</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>增加一次內部 API 呼叫</li><li>較影響效能與伺服器負載</li></ul><h2 id="使用-Web-Crypto-API"><a href="#使用-Web-Crypto-API" class="headerlink" title="使用 Web Crypto API"></a>使用 Web Crypto API</h2><p>進階使用者可以直接用 Web Crypto API 實作 JWT 驗證（這是 jose 底層的做法），但需要處理 Base64 解碼、簽名驗證、payload 檢查等細節。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next/server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">verifyJWT</span>(<span class="params">token, secret</span>) &#123;</span><br><span class="line">  <span class="comment">// 這裡需要實作 JWT 驗證的各個步驟</span></span><br><span class="line">  <span class="comment">// 1. 解析 header 和 payload</span></span><br><span class="line">  <span class="comment">// 2. 使用 crypto.subtle 驗證簽名</span></span><br><span class="line">  <span class="comment">// 3. 檢查過期時間等</span></span><br><span class="line">  <span class="comment">// 注意：這是簡化的示例，實際實作需要更多程式碼</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> parts = token.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (parts.<span class="property">length</span> !== <span class="number">3</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid token format&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 實作 JWT 驗證邏輯...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">/* 解碼後的 payload */</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="comment">// JWT 驗證邏輯</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>小結：<br>在 Next.js Middleware 中處理身份驗證需要注意 Edge Runtime 的限制。使用 jose 函式庫是最直接的解決方案，它專為 Web 環境設計，能在 Edge Runtime 中正常工作。</p>]]></content>
    
    
    <summary type="html">A project exploring the integration of Edge Runtime with Next.js and MongoDB.</summary>
    
    
    
    <category term="side-project" scheme="https://eva813.github.io/categories/side-project/"/>
    
    
    <category term="side-project" scheme="https://eva813.github.io/tags/side-project/"/>
    
    <category term="Next.js" scheme="https://eva813.github.io/tags/Next-js/"/>
    
  </entry>
  
  <entry>
    <title>Next.js API 與 MongoDB 設計實作：整合 NextAuth 多元驗證方式（Credentials + OAuth）</title>
    <link href="https://eva813.github.io/2025/05/17/side-project-mongoDB/"/>
    <id>https://eva813.github.io/2025/05/17/side-project-mongoDB/</id>
    <published>2025-05-17T10:23:24.000Z</published>
    <updated>2025-09-07T01:00:44.318Z</updated>
    
    <content type="html"><![CDATA[<p>在開發 SaaS 或工具型應用時，「使用者驗證系統」往往是關鍵基礎設施。這篇文章將分享我如何使用 Next.js（App Router）+ MongoDB + NextAuth，同時支援 Google OAuth 和 自定義帳密登入，並分享專案 mongoDB 資料結構與 API 架構。</p><h2 id="MongoDB-資料模型設計"><a href="#MongoDB-資料模型設計" class="headerlink" title="MongoDB 資料模型設計"></a>MongoDB 資料模型設計</h2><p>為了支援多元登入方式，我設計了以下幾個集合（Collections）：</p><ol><li>users - 使用者基本資訊</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  _id<span class="punctuation">:</span> ObjectId<span class="punctuation">,</span></span><br><span class="line">  email<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">  name<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">  createdAt<span class="punctuation">:</span> Date<span class="punctuation">,</span></span><br><span class="line">  updatedAt<span class="punctuation">:</span> Date</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>authProviders - 自定義驗證方式（帳密）</li></ol><span id="more"></span><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  userId<span class="punctuation">:</span> ObjectId<span class="punctuation">,</span> <span class="comment">// 關聯到 users._id</span></span><br><span class="line">  type<span class="punctuation">:</span> <span class="string">&quot;credentials&quot;</span><span class="punctuation">,</span></span><br><span class="line">  passwordHash<span class="punctuation">:</span> String<span class="punctuation">,</span> <span class="comment">// bcrypt 加密</span></span><br><span class="line">  createdAt<span class="punctuation">:</span> Date<span class="punctuation">,</span></span><br><span class="line">  updatedAt<span class="punctuation">:</span> Date</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>folders - 使用者資料夾</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  _id<span class="punctuation">:</span> ObjectId<span class="punctuation">,</span></span><br><span class="line">  userId<span class="punctuation">:</span> ObjectId<span class="punctuation">,</span></span><br><span class="line">  name<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">  description<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">  createdAt<span class="punctuation">:</span> Date<span class="punctuation">,</span></span><br><span class="line">  updatedAt<span class="punctuation">:</span> Date</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>snippets </li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  _id<span class="punctuation">:</span> ObjectId<span class="punctuation">,</span></span><br><span class="line">  userId<span class="punctuation">:</span> ObjectId<span class="punctuation">,</span></span><br><span class="line">  folderId<span class="punctuation">:</span> ObjectId<span class="punctuation">,</span></span><br><span class="line">  name<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">  content<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">  shortcut<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">  createdAt<span class="punctuation">:</span> Date<span class="punctuation">,</span></span><br><span class="line">  updatedAt<span class="punctuation">:</span> Date</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="NextAuth-與驗證流程設計"><a href="#NextAuth-與驗證流程設計" class="headerlink" title="NextAuth 與驗證流程設計"></a>NextAuth 與驗證流程設計</h2><p>在這個專案中，我將登入驗證分為兩條路徑：</p><table><thead><tr><th>驗證方式</th><th>實作方式</th><th>資料表使用</th></tr></thead><tbody><tr><td>Google 登入</td><td>NextAuth OAuth Provider</td><td><code>accounts</code> (NextAuth 自動建立)</td></tr><tr><td>帳號密碼</td><td>自定義 API + bcrypt 驗證</td><td><code>authProviders</code></td></tr></tbody></table><h2 id="NextAuth"><a href="#NextAuth" class="headerlink" title="NextAuth"></a>NextAuth</h2><p>使用 NextAuth 搭配 Google 登入時，NextAuth 會自動在資料庫中建立並管理一個 accounts collection（資料表）</p><p>這是 NextAuth 的內建行為，用來儲存與第三方驗證（如 Google、GitHub 等）相關的資訊。</p><p>下面詳細解說 NextAuth 如何使用 MongoDB 中的 <code>accounts</code> collection：</p><h3 id="NextAuth-自動建立的-Collections"><a href="#NextAuth-自動建立的-Collections" class="headerlink" title="NextAuth 自動建立的 Collections"></a>NextAuth 自動建立的 Collections</h3><p>當使用 NextAuth 與 MongoDB 整合時，NextAuth 會建立 <strong><code>accounts</code></strong>：儲存第三方驗證資訊</p><h3 id="accounts-Collection-的結構"><a href="#accounts-Collection-的結構" class="headerlink" title="accounts Collection 的結構"></a><code>accounts</code> Collection 的結構</h3><p>當使用者透過 Google 登入時，NextAuth 會在 <code>accounts</code> collection 中建立一筆資料，結構如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;ObjectId&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userId&quot;</span>: <span class="string">&quot;ObjectId&quot;</span>, <span class="comment">// 關聯到 users collection 中的使用者</span></span><br><span class="line">  <span class="string">&quot;provider&quot;</span>: <span class="string">&quot;google&quot;</span>, <span class="comment">// 驗證提供者，例如 google, github</span></span><br><span class="line">  <span class="string">&quot;providerAccountId&quot;</span>: <span class="string">&quot;google-account-id&quot;</span>, <span class="comment">// Google 提供的帳號 ID</span></span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;oauth&quot;</span>, <span class="comment">// 驗證類型</span></span><br><span class="line">  <span class="string">&quot;access_token&quot;</span>: <span class="string">&quot;google-access-token&quot;</span>,</span><br><span class="line">  <span class="string">&quot;id_token&quot;</span>: <span class="string">&quot;google-id-token&quot;</span>,</span><br><span class="line">  <span class="string">&quot;refresh_token&quot;</span>: <span class="string">&quot;google-refresh-token&quot;</span>,</span><br><span class="line">  <span class="string">&quot;expires_at&quot;</span>: <span class="number">1683500000</span>, <span class="comment">// Token 過期時間</span></span><br><span class="line">  <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;email profile&quot;</span>,</span><br><span class="line">  <span class="string">&quot;token_type&quot;</span>: <span class="string">&quot;Bearer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;session_state&quot;</span>: <span class="string">&quot;session-state&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="與自定義-authProviders-的區別"><a href="#與自定義-authProviders-的區別" class="headerlink" title="與自定義 authProviders 的區別"></a>與自定義 <code>authProviders</code> 的區別</h3><p>NextAuth 自動建立的 <code>accounts</code> collection 與自定義的 <code>authProviders</code> collection 有以下區別：</p><ol><li><strong><code>accounts</code></strong>：由 NextAuth 自動管理，專門用於第三方驗證（如 Google、GitHub 等）。</li><li><strong><code>authProviders</code></strong>：由你自定義，專門用於自己實現的驗證方式（如帳號密碼）。</li></ol><p>在你目前的登入 API 執行流程中（如 route.ts 檔案所示），你使用 <code>authProviders</code> collection 來儲存和驗證使用者的密碼：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> authProvider = <span class="keyword">await</span> db</span><br><span class="line">  .<span class="title function_">collection</span>(<span class="string">&quot;authProviders&quot;</span>)</span><br><span class="line">  .<span class="title function_">findOne</span>(&#123; <span class="attr">userId</span>: user.<span class="property">_id</span>, <span class="attr">type</span>: <span class="string">&quot;credentials&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">if</span> (!authProvider || !authProvider.<span class="property">passwordHash</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(</span><br><span class="line">    &#123; <span class="attr">message</span>: <span class="string">&quot;invalid credentials&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">status</span>: <span class="number">401</span> &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NextAuth-整合設計"><a href="#NextAuth-整合設計" class="headerlink" title="NextAuth 整合設計"></a>NextAuth 整合設計</h3><p> 使用 MongoDB Adapter</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// src/app/api/auth/[...nextauth]/route.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MongoDBAdapter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@auth/mongodb-adapter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = <span class="title class_">NextAuth</span>(&#123;</span><br><span class="line">  <span class="attr">adapter</span>: <span class="title class_">MongoDBAdapter</span>(clientPromise, &#123;</span><br><span class="line">    <span class="attr">databaseName</span>: process.<span class="property">env</span>.<span class="property">MONGODB_DB</span> || <span class="string">&quot;snippets-auth&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="支援多種-Provider"><a href="#支援多種-Provider" class="headerlink" title="支援多種 Provider"></a>支援多種 Provider</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">providers</span>: [</span><br><span class="line">  <span class="title class_">CredentialsProvider</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Credentials&quot;</span>,</span><br><span class="line">    <span class="attr">authorize</span>: <span class="keyword">async</span> (credentials) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 自定義帳密驗證邏輯</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="title class_">GoogleProvider</span>(&#123;</span><br><span class="line">    <span class="attr">clientId</span>: process.<span class="property">env</span>.<span class="property">GOOGLE_CLIENT_ID</span>!,</span><br><span class="line">    <span class="attr">clientSecret</span>: process.<span class="property">env</span>.<span class="property">GOOGLE_CLIENT_SECRET</span>!,</span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="自定義-JWT-與-Session-回傳資料"><a href="#自定義-JWT-與-Session-回傳資料" class="headerlink" title="自定義 JWT 與 Session 回傳資料"></a>自定義 JWT 與 Session 回傳資料</h3><p>為了讓 API 能拿到使用者資訊，我自定義了 jwt() 與 session() callback：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 回傳使用者資訊給 token</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">jwt</span>(<span class="params">&#123; token, user, account &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (account?.<span class="property">provider</span> === <span class="string">&#x27;google&#x27;</span> &amp;&amp; user) &#123;</span><br><span class="line">    token.<span class="property">id</span> = user.<span class="property">id</span>;</span><br><span class="line">    token.<span class="property">accessToken</span> = account.<span class="property">access_token</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (account?.<span class="property">provider</span> === <span class="string">&#x27;credentials&#x27;</span> &amp;&amp; user) &#123;</span><br><span class="line">    token.<span class="property">id</span> = user.<span class="property">id</span>;</span><br><span class="line">    token.<span class="property">email</span> = user.<span class="property">email</span>;</span><br><span class="line">    token.<span class="property">token</span> = user.<span class="property">token</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 token 資訊掛載到 session.user</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">session</span>(<span class="params">&#123; session, token &#125;</span>) &#123;</span><br><span class="line">  session.<span class="property">user</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: token.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">email</span>: token.<span class="property">email</span>,</span><br><span class="line">    <span class="attr">token</span>: token.<span class="property">token</span>,</span><br><span class="line">    <span class="attr">accessToken</span>: token.<span class="property">accessToken</span>,</span><br><span class="line">    <span class="attr">image</span>: <span class="keyword">typeof</span> token.<span class="property">image</span> === <span class="string">&#x27;string&#x27;</span> ? token.<span class="property">image</span> : <span class="literal">undefined</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這讓我們在前端取得使用者資訊，或是讓 Middleware 驗證身份更方便。</p><h2 id="API-設計架構"><a href="#API-設計架構" class="headerlink" title="API 設計架構"></a>API 設計架構</h2><p>所有 API 採用 RESTful 命名方式：</p><p>** 認證 API **<br>POST /api/v1/auth/signup – 註冊帳號</p><p>POST /api/v1/auth/login – 登入取得權杖</p><p>** 資料管理 API  **<br>GET/POST /api/v1/folders</p><p>GET/PUT/DELETE /api/v1/folders/[id]</p><p>GET/POST /api/v1/snippets</p><p>GET/PUT/DELETE /api/v1/snippets/[id]</p><p>** 健康檢查 **<br>GET /api/health – MongoDB 狀態回報</p><h2 id="API-Middleware-權限驗證"><a href="#API-Middleware-權限驗證" class="headerlink" title="API Middleware 權限驗證"></a>API Middleware 權限驗證</h2><p>使用 next-auth/jwt 驗證 JWT：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/middleware.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">request: NextRequest</span>) &#123;</span><br><span class="line">  <span class="comment">// 判斷公開路徑</span></span><br><span class="line">  <span class="keyword">const</span> publicPaths = [<span class="string">&quot;/api/v1/auth/login&quot;</span>, <span class="string">&quot;/api/v1/auth/signup&quot;</span>, <span class="string">&quot;/api/health&quot;</span>];</span><br><span class="line">  <span class="keyword">if</span> (publicPaths.<span class="title function_">includes</span>(path)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 驗證權杖</span></span><br><span class="line">  <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="title function_">getToken</span>(&#123; <span class="attr">req</span>: request, <span class="attr">secret</span>: process.<span class="property">env</span>.<span class="property">NEXTAUTH_SECRET</span> &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&quot;Unauthorized&quot;</span> &#125;, &#123; <span class="attr">status</span>: <span class="number">401</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 將使用者 ID 附加到請求標頭中</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="title class_">NextResponse</span>.<span class="title function_">next</span>();</span><br><span class="line">  res.<span class="property">headers</span>.<span class="title function_">set</span>(<span class="string">&quot;x-user-id&quot;</span>, token.<span class="property">id</span> <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 確保所有保護的 API 都檢查 x-user-id，實現使用者權限控管。</p><h2 id="實作涵蓋了完整驗證設計："><a href="#實作涵蓋了完整驗證設計：" class="headerlink" title="實作涵蓋了完整驗證設計："></a>實作涵蓋了完整驗證設計：</h2><ul><li>Google OAuth 登入（透過 NextAuth 自動化）</li><li>自定義帳密登入（使用 bcrypt + MongoDB）</li><li>多種登入方式共用同一個 users 集合</li><li>API 權限驗證 + Middleware 控制</li><li>使用 MongoDB Adapter 整合資料庫與 session 管理</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在開發 SaaS 或工具型應用時，「使用者驗證系統」往往是關鍵基礎設施。這篇文章將分享我如何使用 Next.js（App Router）+ MongoDB + NextAuth，同時支援 Google OAuth 和 自定義帳密登入，並分享專案 mongoDB 資料結構與 API 架構。&lt;/p&gt;
&lt;h2 id=&quot;MongoDB-資料模型設計&quot;&gt;&lt;a href=&quot;#MongoDB-資料模型設計&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 資料模型設計&quot;&gt;&lt;/a&gt;MongoDB 資料模型設計&lt;/h2&gt;&lt;p&gt;為了支援多元登入方式，我設計了以下幾個集合（Collections）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;users - 使用者基本資訊&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _id&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; ObjectId&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  email&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  createdAt&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; Date&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  updatedAt&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; Date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;authProviders - 自定義驗證方式（帳密）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="side-project" scheme="https://eva813.github.io/categories/side-project/"/>
    
    
    <category term="side-project" scheme="https://eva813.github.io/tags/side-project/"/>
    
    <category term="Next.js" scheme="https://eva813.github.io/tags/Next-js/"/>
    
    <category term="MongoDB" scheme="https://eva813.github.io/tags/MongoDB/"/>
    
    <category term="NextAuth" scheme="https://eva813.github.io/tags/NextAuth/"/>
    
  </entry>
  
  <entry>
    <title>刷題練習 - Maximum Depth of Binary Tree 解題策略</title>
    <link href="https://eva813.github.io/2025/05/01/leetcode-Maximum-Depth-of-Binary-Tree/"/>
    <id>https://eva813.github.io/2025/05/01/leetcode-Maximum-Depth-of-Binary-Tree/</id>
    <published>2025-05-01T05:01:11.000Z</published>
    <updated>2025-09-07T01:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode 題目多樣，尤其是「二元樹（Binary Tree）」相關題型，容易讓人看了發愣。</p><p>本篇文章將教你如何釐清解法邏輯，並將二元樹題型拆解為兩大類解題策略，搭配範例與模板，幫助你用 DFS（深度優先搜尋）更系統地解題</p><h3 id="類型一：遍歷型（Traversal-Type）"><a href="#類型一：遍歷型（Traversal-Type）" class="headerlink" title="類型一：遍歷型（Traversal Type）"></a>類型一：遍歷型（Traversal Type）</h3><p>這類題目需要「走過整棵樹的所有節點」，通常是為了計算某種總量，例如：</p><ul><li>節點總數</li><li>最大深度</li><li>所有路徑總和</li><li>葉子節點的數量</li></ul><p>解題思路</p><p>可根據需求使用：</p><ul><li><strong>後序遍歷 + 回傳值 return</strong> → 適合需要組合子樹結果的情況  </li><li><strong>前序遍歷 + 狀態變數追蹤</strong> → 適合需要累加或記錄路徑狀態的情況  </li></ul><h4 id="模板（後序-return）"><a href="#模板（後序-return）" class="headerlink" title="模板（後序 + return）"></a>模板（後序 + return）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> baseValue;</span><br><span class="line">  <span class="keyword">const</span> left = <span class="title function_">dfs</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="keyword">const</span> right = <span class="title function_">dfs</span>(node.<span class="property">right</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">combine</span>(left, right, node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模板（前序-狀態變數）"><a href="#模板（前序-狀態變數）" class="headerlink" title="模板（前序 + 狀態變數）"></a>模板（前序 + 狀態變數）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> pathDepth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">traverse</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  pathDepth++; <span class="comment">// 遞迴深入，深度 +1</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; node.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">    result = <span class="title class_">Math</span>.<span class="title function_">max</span>(result, pathDepth); <span class="comment">// 若為葉子，更新最大深度</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">traverse</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="title function_">traverse</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">  pathDepth--; <span class="comment">// 回歸</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Maximum-Depth-of-Binary-Tree"><a href="#Maximum-Depth-of-Binary-Tree" class="headerlink" title="Maximum Depth of Binary Tree"></a>Maximum Depth of Binary Tree</h2><p>題目連結：<a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">104. Maximum Depth of Binary Tree</a>  </p><p>題目描述:<br>給定一棵二元樹，請求出它的「最大深度」——也就是從根節點走到最遠的葉子節點所需經過的節點數量。</p><p>解題思路：使用前序遍歷 + 狀態變數追蹤</p><ol><li><p>使用 depth 追蹤當前所在第幾層</p></li><li><p>每遇到一個葉子節點，就與 <code>result</code> 比較並更新最大值</p></li><li><p>所有節點遍歷完畢後，<code>result</code> 即為最大深度</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">traverse</span> = (<span class="params">node</span>) =&gt;&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="comment">// 1. 進入節點：深度 +1</span></span><br><span class="line">        depth++</span><br><span class="line">        <span class="comment">// 2. 如果是葉子（左右都沒有子節點），就更新 res</span></span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; node.<span class="property">right</span> === <span class="literal">null</span>)&#123;</span><br><span class="line">            result = <span class="title class_">Math</span>.<span class="title function_">max</span>(result, depth)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 繼續遞歸兩側</span></span><br><span class="line">        <span class="title function_">traverse</span>(node.<span class="property">left</span>)</span><br><span class="line">        <span class="title function_">traverse</span>(node.<span class="property">right</span>)</span><br><span class="line">         <span class="comment">// 4. 離開節點：回到父層，深度 -1</span></span><br><span class="line">        depth--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">traverse</span>(root)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="第二類-Comparison-型-比較兩棵-兩節點"><a href="#第二類-Comparison-型-比較兩棵-兩節點" class="headerlink" title="第二類: Comparison 型 - 比較兩棵/兩節點"></a>第二類: Comparison 型 - 比較兩棵/兩節點</h3><p>這類題目不再只是單純遍歷，而是需要「比較兩個節點的結構與數值是否一致」，例如：</p><ul><li>判斷兩棵樹是否相同（Same Tree）</li><li>判斷是否為對稱樹（Symmetric Tree）</li></ul><h3 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h3><ol><li>同步比較兩個節點 <code>p</code> 與 <code>q</code></li><li>確認三件事：<ul><li>是否都為 <code>null</code></li><li>是否有一個是 <code>null</code>（另一個不是）</li><li>兩節點的值是否相等</li></ul></li><li>最後遞迴比對左子樹與右子樹是否一致</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">p, q</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (p === <span class="literal">null</span> &amp;&amp; q === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (p === <span class="literal">null</span> || q === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (p.<span class="property">val</span> !== q.<span class="property">val</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">compare</span>(p.<span class="property">left</span>, q.<span class="property">left</span>) &amp;&amp; <span class="title function_">compare</span>(p.<span class="property">right</span>, q.<span class="property">right</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="呼應-Maximum-Depth-of-Binary-Tree"><a href="#呼應-Maximum-Depth-of-Binary-Tree" class="headerlink" title="呼應 Maximum Depth of Binary Tree"></a>呼應 Maximum Depth of Binary Tree</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> leftMax  = <span class="title function_">maxDepth</span>(root.<span class="property">left</span>);</span><br><span class="line">  <span class="keyword">let</span> rightMax = <span class="title function_">maxDepth</span>(root.<span class="property">right</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">max</span>(leftMax, rightMax);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;LeetCode 題目多樣，尤其是「二元樹（Binary Tree）」相關題型，容易讓人看了發愣。&lt;/p&gt;
&lt;p&gt;本篇文章將教你如何釐清解法邏輯，並將二元樹題型拆解為兩大類解題策略，搭配範例與模板，幫助你用 DFS（深度優先搜尋）更系統地解題&lt;/p&gt;
&lt;h3 id=&quot;類型一：遍歷型（Traversal-Type）&quot;&gt;&lt;a href=&quot;#類型一：遍歷型（Traversal-Type）&quot; class=&quot;headerlink&quot; title=&quot;類型一：遍歷型（Traversal Type）&quot;&gt;&lt;/a&gt;類型一：遍歷型（Traversal Type）&lt;/h3&gt;&lt;p&gt;這類題目需要「走過整棵樹的所有節點」，通常是為了計算某種總量，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;節點總數&lt;/li&gt;
&lt;li&gt;最大深度&lt;/li&gt;
&lt;li&gt;所有路徑總和&lt;/li&gt;
&lt;li&gt;葉子節點的數量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解題思路&lt;/p&gt;
&lt;p&gt;可根據需求使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;後序遍歷 + 回傳值 return&lt;/strong&gt; → 適合需要組合子樹結果的情況  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前序遍歷 + 狀態變數追蹤&lt;/strong&gt; → 適合需要累加或記錄路徑狀態的情況  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;模板（後序-return）&quot;&gt;&lt;a href=&quot;#模板（後序-return）&quot; class=&quot;headerlink&quot; title=&quot;模板（後序 + return）&quot;&gt;&lt;/a&gt;模板（後序 + return）&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;dfs&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (node === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; baseValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; left = &lt;span class=&quot;title function_&quot;&gt;dfs&lt;/span&gt;(node.&lt;span class=&quot;property&quot;&gt;left&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; right = &lt;span class=&quot;title function_&quot;&gt;dfs&lt;/span&gt;(node.&lt;span class=&quot;property&quot;&gt;right&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;combine&lt;/span&gt;(left, right, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;模板（前序-狀態變數）&quot;&gt;&lt;a href=&quot;#模板（前序-狀態變數）&quot; class=&quot;headerlink&quot; title=&quot;模板（前序 + 狀態變數）&quot;&gt;&lt;/a&gt;模板（前序 + 狀態變數）&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pathDepth = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;traverse&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (node === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pathDepth++; &lt;span class=&quot;comment&quot;&gt;// 遞迴深入，深度 +1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (node.&lt;span class=&quot;property&quot;&gt;left&lt;/span&gt; === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; node.&lt;span class=&quot;property&quot;&gt;right&lt;/span&gt; === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result = &lt;span class=&quot;title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;max&lt;/span&gt;(result, pathDepth); &lt;span class=&quot;comment&quot;&gt;// 若為葉子，更新最大深度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title function_&quot;&gt;traverse&lt;/span&gt;(node.&lt;span class=&quot;property&quot;&gt;left&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title function_&quot;&gt;traverse&lt;/span&gt;(node.&lt;span class=&quot;property&quot;&gt;right&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pathDepth--; &lt;span class=&quot;comment&quot;&gt;// 回歸&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://eva813.github.io/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://eva813.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>React 重置技巧：React Key 與 CSS offsetWidth</title>
    <link href="https://eva813.github.io/2025/04/16/react-key-reflow/"/>
    <id>https://eva813.github.io/2025/04/16/react-key-reflow/</id>
    <published>2025-04-16T12:03:42.000Z</published>
    <updated>2025-04-16T12:21:51.781Z</updated>
    
    <content type="html"><![CDATA[<p>在前端開發中，動畫與互動是提升用戶體驗的關鍵元素。然而，當動畫與元件狀態、生命周期交織在一起時，實作上就可能遇到各種挑戰。</p><p>這篇文章記錄我在一個 React 專案中，解決「動畫重複觸發與重置」問題的過程，深入比較了使用 key 重置與 CSS Reflow（offsetWidth） 重置的方式</p><h2 id="問題概述"><a href="#問題概述" class="headerlink" title="問題概述"></a>問題概述</h2><p>在這個專案中，我有兩個自訂的元件，各自內部包含一個相同結構的 <code>&lt;input&gt;</code>。當使用者點擊某個操作後，我希望這些 input：</p><span id="more"></span><ul><li>執行一次 CSS 動畫（例如 fade-in）</li><li>自動獲得焦點，以利立即輸入內容</li></ul><p>實務操作時卻發現動畫無法正常重新觸發。透過分析發現：</p><ul><li>由於兩個元件 input 結構相同，React 為效能考量，複用了 DOM。</li><li>導致 CSS 動畫無法重新觸發，即便強制 re-render 也不一定能順利重新播放。</li></ul><p>這時我開始思考：有沒有方法可以「重置動畫」，但不要整個元件都重建？</p><p>我開始尋找「能重置動畫但不需重建元件」的方法，最終發現兩個可行方案。</p><h3 id="方法一：使用-key-重建元件"><a href="#方法一：使用-key-重建元件" class="headerlink" title="方法一：使用 key 重建元件"></a>方法一：使用 key 重建元件</h3><p>在 React 中，每個元件都可以透過 key 來標示其唯一性。當 key 改變時，React 會：</p><p>卸載原本的元件</p><p>掛載一個全新的元件實例</p><p>這表示：元件會完全重置，包括其 state、effects 和動畫效果。</p><ul><li><strong>優點</strong>：<ul><li>完整重置狀態與動畫</li><li>純 React 機制，簡單易懂</li></ul></li><li><strong>缺點</strong>：<ul><li>整個元件卸載重建，效能成本高</li><li>所有 effect 重跑一遍，需注意副作用</li></ul></li></ul><p>範例程式碼：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [keyIndex, setKeyIndex] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleReset</span> = (<span class="params"></span>) =&gt; <span class="title function_">setKeyIndex</span>(<span class="function"><span class="params">prev</span> =&gt;</span> prev + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleReset&#125;</span>&gt;</span>重置元件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InputBox</span> <span class="attr">key</span>=<span class="string">&#123;keyIndex&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">InputBox</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&quot;fade-in&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">autoFocus</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">placeholder</span>=<span class="string">&quot;輸入一些內容...&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>優點：<br>可徹底重置所有狀態與動畫</li></ul><p>不需額外操作 DOM，純粹靠 React 的 key 機制</p><ul><li>缺點：<br>整個元件會被卸載與重建，效能開銷較大</li></ul><p>所有副作用與初始化邏輯（如 useEffect）都會重新執行</p><h3 id="方法二：使用-offsetWidth-強制-CSS-重排（Reflow）"><a href="#方法二：使用-offsetWidth-強制-CSS-重排（Reflow）" class="headerlink" title="方法二：使用 offsetWidth 強制 CSS 重排（Reflow）"></a>方法二：使用 offsetWidth 強制 CSS 重排（Reflow）</h3><p>如果只需要「重播動畫」而不需要重置整個元件狀態，那其實 不必重建 DOM 元素，我們可以用 CSS 動畫與 DOM 操作來達成。</p><p>原理是透過：</p><p>移除動畫類別</p><p>存取 offsetWidth 觸發 Reflow</p><p>重新加入動畫類別</p><p>這樣就能「騙過」瀏覽器認為動畫是全新的一次播放。</p><ul><li><strong>優點</strong>：<ul><li>輕量級 DOM 操作</li><li>適合頻繁動畫觸發</li></ul></li><li><strong>缺點</strong>：<ul><li>需透過 DOM 操作或 state 管理 class</li><li>無法重置元件內部狀態</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;inputElement&quot;</span>);</span><br><span class="line"></span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;animate&quot;</span>);</span><br><span class="line"><span class="keyword">void</span> element.<span class="property">offsetWidth</span>;</span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;animate&quot;</span>);</span><br></pre></td></tr></table></figure><p>React 實作（使用 state）：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">InputWithAnimation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [animate, setAnimate] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">resetAnimation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setAnimate</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">setAnimate</span>(<span class="literal">true</span>), <span class="number">10</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;resetAnimation&#125;</span>&gt;</span>重新播放動畫<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;animate</span> ? &quot;<span class="attr">fade-in</span>&quot; <span class="attr">:</span> &quot;&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">autoFocus</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;輸入文字...&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>優點：<br>只更新 DOM 屬性，不會造成元件重建</li></ul><p>效能負擔小，適合單一或少量元素的動畫重播</p><ul><li>缺點：<br>需要操作 DOM（透過 ref 或 state 控制 class）</li></ul><p>只針對動畫，無法重置元件內部狀態</p><h3 id="最後選擇的方式：offsetWidth-重排，更高效又穩定"><a href="#最後選擇的方式：offsetWidth-重排，更高效又穩定" class="headerlink" title="最後選擇的方式：offsetWidth 重排，更高效又穩定"></a>最後選擇的方式：offsetWidth 重排，更高效又穩定</h3><p>在衡量了需求與效能之後，我最終選擇使用 CSS offsetWidth 的方式來重播動畫，原因如下：</p><h4 id="技術考量："><a href="#技術考量：" class="headerlink" title="技術考量："></a>技術考量：</h4><p>我只需要動畫重置與 focus 效果，不需要整個元件重建</p><p>若使用 key，元件會被卸載重建，對效能影響太大</p><p>CSS 方法可以更精準控制動畫行為</p><h4 id="效能層面："><a href="#效能層面：" class="headerlink" title="效能層面："></a>效能層面：</h4><p>使用 offsetWidth 只會觸發局部重排</p><p>不會進入 React 的 Virtual DOM Diff 過程</p><p>更適合需要高互動性與動畫頻繁觸發的場景</p><h4 id="技術總結與實務建議"><a href="#技術總結與實務建議" class="headerlink" title="技術總結與實務建議"></a>技術總結與實務建議</h4><p>建議原則：<br>動畫重播：使用 offsetWidth + class 操控，效能較佳且針對性強<br>狀態重置：使用 key 強制重新掛載，簡單直接但效能成本較高</p><hr><p>參考<br><a href="https://dev.to/olivare/how-to-make-your-app-faster-with-reacts-key-prop-170n">How to make your app faster with React’s key prop</a></p><p><a href="https://stackoverflow.com/questions/60686489/what-purpose-does-void-element-offsetwidth-serve/69029892#69029892">What purpose does void element.offsetWidth serve?</a></p><p><a href="https://dev.to/malapashish/mastering-react-re-renders-the-key-prop-hack-you-need-to-know-17hh">Mastering React Re-Renders : The Key Prop Hack You Need to Know</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在前端開發中，動畫與互動是提升用戶體驗的關鍵元素。然而，當動畫與元件狀態、生命周期交織在一起時，實作上就可能遇到各種挑戰。&lt;/p&gt;
&lt;p&gt;這篇文章記錄我在一個 React 專案中，解決「動畫重複觸發與重置」問題的過程，深入比較了使用 key 重置與 CSS Reflow（offsetWidth） 重置的方式&lt;/p&gt;
&lt;h2 id=&quot;問題概述&quot;&gt;&lt;a href=&quot;#問題概述&quot; class=&quot;headerlink&quot; title=&quot;問題概述&quot;&gt;&lt;/a&gt;問題概述&lt;/h2&gt;&lt;p&gt;在這個專案中，我有兩個自訂的元件，各自內部包含一個相同結構的 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;。當使用者點擊某個操作後，我希望這些 input：&lt;/p&gt;</summary>
    
    
    
    <category term="side-project" scheme="https://eva813.github.io/categories/side-project/"/>
    
    
    <category term="side-project" scheme="https://eva813.github.io/tags/side-project/"/>
    
  </entry>
  
  <entry>
    <title>刷題練習 - Permutation in String</title>
    <link href="https://eva813.github.io/2025/04/15/slide-window-Permutation-in-String/"/>
    <id>https://eva813.github.io/2025/04/15/slide-window-Permutation-in-String/</id>
    <published>2025-04-15T12:34:43.000Z</published>
    <updated>2025-09-07T01:02:35.745Z</updated>
    
    <content type="html"><![CDATA[<p>練習來自 <a href="https://labuladong.online/algo/essential-technique/sliding-window-framework/">labuladong 的演算法筆記</a> 的滑動視窗演算法核心程式碼模板。</p><h2 id="基本設置"><a href="#基本設置" class="headerlink" title="基本設置:"></a>基本設置:</h2><p>用兩個指針來界定一個區間，也就是一個「窗口」：</p><ul><li>左指針 left：表示窗口的起始位置。</li><li>右指針 right：表示窗口的尾部（通常採用左閉右開區間 [left, right)）。</li></ul><p>窗口內的資料會隨著 left 和 right 的移動而動態改變。解題的關鍵在於：</p><ul><li>擴大窗口：不斷將新的元素加入窗口，並更新窗口內的狀態或統計（例如字元出現次數）。</li><li>檢查窗口是否滿足條件：根據題目要求檢查當前窗口是否為合法解。</li><li>收縮窗口：如果當前窗口已滿足條件，嘗試從左側移除元素以找到更優（例如更短）的解，同時更新狀態。</li></ul><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slidingWindow = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用合適的資料結構記錄視窗中的資料，根據具體題目變通。</span></span><br><span class="line">    <span class="comment">// 例如：記錄字元出現的次數，或累加窗口內元素的和。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable language_">window</span> = &#123;&#125;;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="comment">// 取出將要加入視窗的字元</span></span><br><span class="line">        <span class="keyword">let</span> c = s[right];</span><br><span class="line">        right++;  <span class="comment">// 擴大窗口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新窗口內資料</span></span><br><span class="line">        <span class="comment">// 例如：window[c] = (window[c] || 0) + 1;</span></span><br><span class="line">        <span class="comment">// 根據具體題目邏輯進行更新</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// *** Debug 輸出位置 *** </span></span><br><span class="line">        <span class="comment">// console.log(&quot;窗口: [%d, %d)&quot;, left, right);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 當窗口不再滿足題目要求時，收縮窗口</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="comment">/* 判斷窗口需要收縮的條件 */</span>) &#123;</span><br><span class="line">            <span class="comment">// 取得將要移除的字元（為使變數名稱更具描述性可用 removedChar）</span></span><br><span class="line">            <span class="keyword">let</span> removedChar = s[left];</span><br><span class="line">            left++;  <span class="comment">// 縮小窗口</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新移除字元對窗口資料的影響</span></span><br><span class="line">            <span class="comment">// 例如：if (window[removedChar] ...) &#123; ... &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a><a href="https://leetcode.com/problems/permutation-in-string/description/">題目</a></h2><p>Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.</p><p>In other words, return true if one of s1’s permutations is the substring of s2.</p><p>給定兩個字串 s1 和 s2，若 s2 中包含 s1 的某個排列，則返回 true；否則返回 false。</p><p>換句話說，若 s1 的某個排列是 s2 的子字串，則返回 true。</p><p>Example 1:</p><p>Input: s1 = “ab”, s2 = “eidbaooo”<br>Output: true<br>Explanation: s2 contains one permutation of s1 (“ba”).</p><span id="more"></span><h3 id="解題思路："><a href="#解題思路：" class="headerlink" title="解題思路："></a>解題思路：</h3><ol><li>建立需求資料結構：</li></ol><ul><li>先建立一個哈希表 need，記錄 s1 中每個字元需出現的次數。這代表著當視窗中相應字元的出現次數達到 need 內的數量，該字元即滿足要求。</li></ul><ol start="2"><li>初始化視窗相關變數：</li></ol><ul><li>建立一個哈希表 window 用來記錄當前視窗內各字元出現次數。</li><li>初始化左右指標 left 與 right 為 0。</li><li>使用變數 valid 來計算目前在視窗中滿足 need 要求的字元種類數。</li><li>由於目標是找出是否存在 s1 中排列（即字元組合相同）出現在 s2 中，所以要求的視窗大小固定為 s1 長度。</li></ul><ol start="3"><li><p>擴大視窗：<br>利用 right 指標不斷擴大窗口，將 s2 中的字元依序加入窗口中，並更新 window 的計數。如果某個字元剛好滿足 need 的數量要求，則 valid 加 1。</p></li><li><p>收縮視窗並檢查條件：<br>當視窗的大小等於 s1 的長度時，此時視窗中的所有字元構成一個候選解。</p></li></ol><ul><li>檢查 valid 是否等於 need 中的字元種類數。如果相等，說明當前窗口中的字元頻率與 s1 完全一致，符合排列條件，直接返回 true。</li><li>如果不符合，則將左側字元移除（收縮窗口），並更新 window 中該字元的計數以及 valid（若該字元數量從滿足變成不足）。</li><li>窗口收縮後繼續擴大右側以遍歷 s2。</li></ul><ol start="5"><li>結束：<br>遍歷完 s2 後，若未能找到符合條件的窗口，則返回 false。</li></ol><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> checkInclusion = <span class="keyword">function</span>(<span class="params">s1, s2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable language_">window</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> need = &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> valid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> required = <span class="title class_">Object</span>.<span class="title function_">keys</span>(need).<span class="property">length</span>;  <span class="comment">// 需要滿足的字元種類數</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> s1)&#123;</span><br><span class="line">        need[item] = (need[item] || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(right &lt; s2.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> char = s2[right]</span><br><span class="line">        right++</span><br><span class="line">        <span class="keyword">if</span>(need[char])&#123;</span><br><span class="line">            <span class="variable language_">window</span>[char] = (<span class="variable language_">window</span>[char] || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">window</span>[char] === need[char])&#123;</span><br><span class="line">                valid++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 當窗口長度達到 s1 的長度時，開始收縮窗口</span></span><br><span class="line">        <span class="keyword">while</span>(right - left &gt;= s1.<span class="property">length</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(valid === <span class="title class_">Object</span>.<span class="title function_">keys</span>(need).<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">true</span>    </span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> removedChar = s2[left]</span><br><span class="line">            left++</span><br><span class="line">            <span class="comment">// 更新移出字元對窗口資料的影響</span></span><br><span class="line">            <span class="keyword">if</span>(need[removedChar])&#123; </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">window</span>[removedChar] === need[removedChar])&#123;</span><br><span class="line">                    valid--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">window</span>[removedChar]--</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="時間與空間複雜度分析"><a href="#時間與空間複雜度分析" class="headerlink" title="時間與空間複雜度分析"></a>時間與空間複雜度分析</h2><ol><li>時間複雜度： O(n + m)，其中 n 為 s2 的長度，m 為 s1 的長度。</li><li>空間複雜度： 最壞情況下為 O(m)。</li></ol><ul><li>綜合空間複雜度：<br>如果不假設字元集是固定大小（例如僅限小寫英文字母），那麼最壞情況下整體空間複雜度為 O(m)。<br>注意： 在許多實際情況下（例如字元集固定的狀況），可能會將此空間複雜度視為 O(1)；但從最壞情況分析角度，仍然為 O(m)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;練習來自 &lt;a href=&quot;https://labuladong.online/algo/essential-technique/sliding-window-framework/&quot;&gt;labuladong 的演算法筆記&lt;/a&gt; 的滑動視窗演算法核心程式碼模板。&lt;/p&gt;
&lt;h2 id=&quot;基本設置&quot;&gt;&lt;a href=&quot;#基本設置&quot; class=&quot;headerlink&quot; title=&quot;基本設置:&quot;&gt;&lt;/a&gt;基本設置:&lt;/h2&gt;&lt;p&gt;用兩個指針來界定一個區間，也就是一個「窗口」：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左指針 left：表示窗口的起始位置。&lt;/li&gt;
&lt;li&gt;右指針 right：表示窗口的尾部（通常採用左閉右開區間 [left, right)）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;窗口內的資料會隨著 left 和 right 的移動而動態改變。解題的關鍵在於：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;擴大窗口：不斷將新的元素加入窗口，並更新窗口內的狀態或統計（例如字元出現次數）。&lt;/li&gt;
&lt;li&gt;檢查窗口是否滿足條件：根據題目要求檢查當前窗口是否為合法解。&lt;/li&gt;
&lt;li&gt;收縮窗口：如果當前窗口已滿足條件，嘗試從左側移除元素以找到更優（例如更短）的解，同時更新狀態。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;模板&quot;&gt;&lt;a href=&quot;#模板&quot; class=&quot;headerlink&quot; title=&quot;模板&quot;&gt;&lt;/a&gt;模板&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slidingWindow = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;s&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 使用合適的資料結構記錄視窗中的資料，根據具體題目變通。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 例如：記錄字元出現的次數，或累加窗口內元素的和。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;variable language_&quot;&gt;window&lt;/span&gt; = &amp;#123;&amp;#125;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; left = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, right = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (right &amp;lt; s.&lt;span class=&quot;property&quot;&gt;length&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 取出將要加入視窗的字元&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; c = s[right];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        right++;  &lt;span class=&quot;comment&quot;&gt;// 擴大窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 更新窗口內資料&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 例如：window[c] = (window[c] || 0) + 1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 根據具體題目邏輯進行更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// *** Debug 輸出位置 *** &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// console.log(&amp;quot;窗口: [%d, %d)&amp;quot;, left, right);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 當窗口不再滿足題目要求時，收縮窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;comment&quot;&gt;/* 判斷窗口需要收縮的條件 */&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 取得將要移除的字元（為使變數名稱更具描述性可用 removedChar）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; removedChar = s[left];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            left++;  &lt;span class=&quot;comment&quot;&gt;// 縮小窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 更新移除字元對窗口資料的影響&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 例如：if (window[removedChar] ...) &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/permutation-in-string/description/&quot;&gt;題目&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.&lt;/p&gt;
&lt;p&gt;In other words, return true if one of s1’s permutations is the substring of s2.&lt;/p&gt;
&lt;p&gt;給定兩個字串 s1 和 s2，若 s2 中包含 s1 的某個排列，則返回 true；否則返回 false。&lt;/p&gt;
&lt;p&gt;換句話說，若 s1 的某個排列是 s2 的子字串，則返回 true。&lt;/p&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;p&gt;Input: s1 = “ab”, s2 = “eidbaooo”&lt;br&gt;Output: true&lt;br&gt;Explanation: s2 contains one permutation of s1 (“ba”).&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://eva813.github.io/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://eva813.github.io/tags/LeetCode/"/>
    
    <category term="slide-window" scheme="https://eva813.github.io/tags/slide-window/"/>
    
  </entry>
  
  <entry>
    <title>side-project-zustand</title>
    <link href="https://eva813.github.io/2025/03/31/side-project-zustand/"/>
    <id>https://eva813.github.io/2025/03/31/side-project-zustand/</id>
    <published>2025-03-30T23:23:58.000Z</published>
    <updated>2025-09-07T01:00:55.203Z</updated>
    
    <content type="html"><![CDATA[<p>這段時間在製作一個 snippet 管理的 side project，過程中遇到了一些跨頁面共享資料的需求。專案中有一包資料稱為 snippet，內部包含多個 folder 和小項目的 snippets。這些資料不僅會在 /snippet 路徑下的元件使用，還會跨 route 被其他頁面存取。</p><p>一開始，我選擇使用 React 的 Context API，透過建立一個 SnippetsContext 來管理狀態。在應用程式的最上層放置一次 SnippetsProvider，然後在需要的任何元件內直接使用 import { useSnippets } from ‘@/contexts/SnippetsContext’ 來取得 context。然而，隨著專案規模逐步擴展，這種方法逐漸顯露出其局限性。我發現即使已經有了最上層的 Provider，但在多個 dialog 或 component 中，仍然需要重複地導入 useSnippets，不僅造成代碼重複，也使得專案結構變得臃腫複雜。</p><p>為了解決上述問題，我嘗試了另一個狀態管理工具 —— Zustand。Zustand 提供了一種更直覺、更精簡的方式來建立和存取全域狀態，不需要透過 Provider 包裹元件，大幅減少了樣板代碼的使用，也讓資料流更加清晰易懂。</p><p>在這篇文章中，我會分享如何在專案中實際導入並使用 Zustand</p><h2 id="初步實作-Zustand"><a href="#初步實作-Zustand" class="headerlink" title="初步實作 Zustand"></a>初步實作 Zustand</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install zustand</span><br></pre></td></tr></table></figure><p>如果想使用持久化功能，也可以安裝：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install zustand/middleware</span><br></pre></td></tr></table></figure><h2 id="store-資料夾"><a href="#store-資料夾" class="headerlink" title="store 資料夾"></a>store 資料夾</h2><p>在專案的 src 資料夾下建立一個 store 資料夾，這之中包含給 folder , snippet 的 slice。之所以採用 slice 是因為原本 snippet 的處理邏輯較為複雜，包含了 folder 的儲存、內部 snippet 的儲存，以及一些專門給 dialog 使用的 UI 狀態。透過將 store 分拆成多個 slice（例如 folderSlice 與 uiSlice），每個模組都只負責處理自己相關的 state 與操作，能更好地維護代碼的結構與可讀性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line"> ├── types/</span><br><span class="line"> │    └── snippet.<span class="property">ts</span>            <span class="comment">// 共用型別，也可以有 auth.ts, settings.ts 等</span></span><br><span class="line"> └── stores/</span><br><span class="line">      ├── snippet/</span><br><span class="line">      │     ├── slices/</span><br><span class="line">      │     │     ├── folderSlice.<span class="property">ts</span></span><br><span class="line">      │     │     ├── snippetSlice.<span class="property">ts</span></span><br><span class="line">      │     │     └── uiSlice.<span class="property">ts</span></span><br><span class="line">      │     └── index.<span class="property">ts</span>        <span class="comment">// snippetStore.ts</span></span><br><span class="line">      ├── auth/</span><br><span class="line">      │     └── index.<span class="property">ts</span>        <span class="comment">// 假如之後， authStore.ts (可以進一步拆分 authSlices)</span></span><br><span class="line">      └── settings/</span><br><span class="line">            └── index.<span class="property">ts</span>        <span class="comment">// 假如之後，settingsStore.ts</span></span><br></pre></td></tr></table></figure><p>在專案中的 snippet 資料夾內，會建立一個 index.ts 檔案來整合所有獨立的 slice，並導出一個完整的 Zustand store。這麼做的優點是：之後在任何元件中需要使用狀態時，只需導入整個 store，而不需要逐一引入每個 slice</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/stores/snippet/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; create &#125; <span class="keyword">from</span> <span class="string">&#x27;zustand&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; persist &#125; <span class="keyword">from</span> <span class="string">&#x27;zustand/middleware&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FolderSlice</span>, createFolderSlice &#125; <span class="keyword">from</span> <span class="string">&#x27;./slices/folderSlice&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SnippetSlice</span>, createSnippetSlice &#125; <span class="keyword">from</span> <span class="string">&#x27;./slices/snippetSlice&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UISlice</span>, createUISlice &#125; <span class="keyword">from</span> <span class="string">&#x27;./slices/uiSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 組合所有模組的型別</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">AppStore</span> = <span class="title class_">FolderSlice</span> &amp; <span class="title class_">SnippetSlice</span> &amp; <span class="title class_">UISlice</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useSnippetStore = create&lt;<span class="title class_">AppStore</span>&gt;()(</span><br><span class="line">  <span class="title function_">persist</span>(</span><br><span class="line">    <span class="function">(<span class="params">set, get, api</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...<span class="title function_">createFolderSlice</span>(set, get, api),</span><br><span class="line">      ...<span class="title function_">createSnippetSlice</span>(set, get, api),</span><br><span class="line">      ...<span class="title function_">createUISlice</span>(set, get, api),</span><br><span class="line">    &#125;),</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;my-snippets-storage&#x27;</span>,</span><br><span class="line">      <span class="comment">// partialize 使我們只持久化 folders，UI 狀態不必存入 localStorage</span></span><br><span class="line">      <span class="attr">partialize</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">folders</span>: state.<span class="property">folders</span> &#125;),</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>使用 zustand 提供的 persist middleware，能輕鬆將特定狀態持久化到 localStorage。</li><li>透過 partialize 參數，我能夠靈活地指定只有某些狀態 (例如：folders) 需要持久化，而 UI 或其他臨時狀態則保持記憶體內即可。</li></ul><h2 id="folderSlice-ts"><a href="#folderSlice-ts" class="headerlink" title="folderSlice.ts"></a>folderSlice.ts</h2><p>在建立 folderSlice 時，透過 Zustand 的 StateCreator 定義了一個 slice，專門負責管理資料夾（folders）相關的狀態與邏輯。透過這個方式，能清楚地將資料夾的操作行為集中管理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/stores/snippet/slices/folderSlice.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StateCreator</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;zustand&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Folder</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types/snippets&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">FolderSlice</span> &#123;</span><br><span class="line">  <span class="attr">folders</span>: <span class="title class_">Folder</span>[];</span><br><span class="line">  <span class="attr">setFolders</span>: <span class="function">(<span class="params">folders: Folder[]</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">updateFolder</span>: <span class="function">(<span class="params">id: <span class="built_in">string</span>, updates: Partial&lt;Folder&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">addFolder</span>: <span class="function">(<span class="params">folder: Omit&lt;Folder, <span class="string">&quot;id&quot;</span>&gt;, index?: <span class="built_in">number</span></span>) =&gt;</span> <span class="title class_">Folder</span>;</span><br><span class="line">  <span class="attr">deleteFolder</span>: <span class="function">(<span class="params">id: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createFolderSlice</span>: <span class="title class_">StateCreator</span>&lt;<span class="title class_">FolderSlice</span>&gt; = <span class="function">(<span class="params">set, get</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">folders</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;HplOMyf2mDqvVMdphJbt&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;My Sample Snippets&#x27;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&#x27;This is a sample folder&#x27;</span>,</span><br><span class="line">      <span class="attr">snippets</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&#x27;5mJw031VPo2WxNIQyeXN&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;Demo - Plain text&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;be a software engineer&#x27;</span>,</span><br><span class="line">          <span class="attr">shortcut</span>: <span class="string">&#x27;/do&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&#x27;6mJw031VPo2WxNIQyeYN&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;Demo - Styled Text&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>:</span><br><span class="line">            <span class="string">&#x27;be a translate expert, I will give you a sentence and help me translate to english&#x27;</span>,</span><br><span class="line">          <span class="attr">shortcut</span>: <span class="string">&#x27;/doT&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;folder-1741057188488&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Test&#x27;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">      <span class="attr">snippets</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&#x27;snippet-1741057206823&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;&lt;p&gt;New snippet content Test&lt;/p&gt;&#x27;</span>,</span><br><span class="line">          <span class="attr">shortcut</span>: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">setFolders</span>: <span class="function">(<span class="params">folders</span>) =&gt;</span> <span class="title function_">set</span>(&#123; folders &#125;),</span><br><span class="line">  <span class="attr">updateFolder</span>: <span class="function">(<span class="params">id, updates</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">set</span>(&#123;</span><br><span class="line">      <span class="attr">folders</span>: <span class="title function_">get</span>().<span class="property">folders</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">folder</span>) =&gt;</span></span><br><span class="line">        folder.<span class="property">id</span> === id ? &#123; ...folder, ...updates &#125; : folder</span><br><span class="line">      ),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 新增資料夾，可選擇插入位置</span></span><br><span class="line">    <span class="attr">addFolder</span>: <span class="function">(<span class="params">folder, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">newFolder</span>: <span class="title class_">Folder</span> = &#123; ...folder, <span class="attr">id</span>: <span class="string">`folder-<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span> &#125;;</span><br><span class="line">      <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">folders</span>:</span><br><span class="line">          <span class="keyword">typeof</span> index === <span class="string">&quot;number&quot;</span></span><br><span class="line">            ? [</span><br><span class="line">                ...state.<span class="property">folders</span>.<span class="title function_">slice</span>(<span class="number">0</span>, index),</span><br><span class="line">                newFolder,</span><br><span class="line">                ...state.<span class="property">folders</span>.<span class="title function_">slice</span>(index),</span><br><span class="line">              ]</span><br><span class="line">            : [...state.<span class="property">folders</span>, newFolder],</span><br><span class="line">      &#125;));</span><br><span class="line">      <span class="keyword">return</span> newFolder;</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="attr">deleteFolder</span>: <span class="function">(<span class="params">id</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">set</span>(&#123;</span><br><span class="line">      <span class="attr">folders</span>: <span class="title function_">get</span>().<span class="property">folders</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">folder</span>) =&gt;</span> folder.<span class="property">id</span> !== id),</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用 set 來更新狀態，get 取得當前狀態。</li><li>addFolder 方法可指定新增資料夾的位置（透過可選的 index 參數）；若未指定，則預設新增到列表尾端。</li></ul><h2 id="snippetSlice-ts"><a href="#snippetSlice-ts" class="headerlink" title="snippetSlice.ts"></a>snippetSlice.ts</h2><p>snippetSlice 負責 snippet 的新增、刪除與更新操作。由於 snippets 存放於 folders 中，因此此 slice 會依賴 FolderSlice 的狀態來進行資料處理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/stores/snippet/slices/snippetSlice.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StateCreator</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;zustand&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Snippet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types/snippets&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FolderSlice</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./folderSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SnippetSlice</span> &#123;</span><br><span class="line">  <span class="attr">addSnippetToFolder</span>: <span class="function">(<span class="params">folderId: <span class="built_in">string</span>, snippet: Omit&lt;Snippet, <span class="string">&#x27;id&#x27;</span>&gt;</span>) =&gt;</span> <span class="title class_">Snippet</span>;</span><br><span class="line">  <span class="attr">deleteSnippetFromFolder</span>: <span class="function">(<span class="params">folderId: <span class="built_in">string</span>, snippetId: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">updateSnippet</span>: <span class="function">(<span class="params">snippetId: <span class="built_in">string</span>, updatedSnippet: Partial&lt;Snippet&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這裡依賴 FolderSlice，因為 snippets 都儲存在 folders 內</span></span><br><span class="line"><span class="comment">// 修改後，addSnippetToFolder 回傳新 snippet</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createSnippetSlice</span>: <span class="title class_">StateCreator</span>&lt;</span><br><span class="line">  <span class="title class_">FolderSlice</span> &amp; <span class="title class_">SnippetSlice</span>,</span><br><span class="line">  [],</span><br><span class="line">  [],</span><br><span class="line">  <span class="title class_">SnippetSlice</span></span><br><span class="line">&gt; = <span class="function">(<span class="params">set, get</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// 新增一個 snippet 到指定的資料夾，並回傳新增的 snippet（包含自動生成的 id）</span></span><br><span class="line">  <span class="attr">addSnippetToFolder</span>: <span class="function">(<span class="params">folderId, snippet</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">newSnippet</span>: <span class="title class_">Snippet</span> = &#123; ...snippet, <span class="attr">id</span>: <span class="string">`snippet-<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span> &#125;;</span><br><span class="line">    <span class="title function_">set</span>(&#123;</span><br><span class="line">      <span class="attr">folders</span>: <span class="title function_">get</span>().<span class="property">folders</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">folder</span>) =&gt;</span></span><br><span class="line">        folder.<span class="property">id</span> === folderId</span><br><span class="line">          ? &#123; ...folder, <span class="attr">snippets</span>: [...folder.<span class="property">snippets</span>, newSnippet] &#125;</span><br><span class="line">          : folder</span><br><span class="line">      ),</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> newSnippet; <span class="comment">// 回傳新增後完整的 snippet 物件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">deleteSnippetFromFolder</span>: <span class="function">(<span class="params">folderId, snippetId</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">set</span>(&#123;</span><br><span class="line">      <span class="attr">folders</span>: <span class="title function_">get</span>().<span class="property">folders</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">folder</span>) =&gt;</span></span><br><span class="line">        folder.<span class="property">id</span> === folderId</span><br><span class="line">          ? &#123;</span><br><span class="line">              ...folder,</span><br><span class="line">              <span class="attr">snippets</span>: folder.<span class="property">snippets</span>.<span class="title function_">filter</span>(</span><br><span class="line">                <span class="function">(<span class="params">snippet</span>) =&gt;</span> snippet.<span class="property">id</span> !== snippetId</span><br><span class="line">              ),</span><br><span class="line">            &#125;</span><br><span class="line">          : folder</span><br><span class="line">      ),</span><br><span class="line">    &#125;),</span><br><span class="line">  <span class="attr">updateSnippet</span>: <span class="function">(<span class="params">snippetId, updatedSnippet</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">set</span>(&#123;</span><br><span class="line">      <span class="attr">folders</span>: <span class="title function_">get</span>().<span class="property">folders</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">folder</span>) =&gt;</span> (&#123;</span><br><span class="line">        ...folder,</span><br><span class="line">        <span class="attr">snippets</span>: folder.<span class="property">snippets</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">snippet</span>) =&gt;</span></span><br><span class="line">          snippet.<span class="property">id</span> === snippetId ? &#123; ...snippet, ...updatedSnippet &#125; : snippet</span><br><span class="line">        ),</span><br><span class="line">      &#125;)),</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>新增 snippet（addSnippetToFolder）</p><p>提供一個資料夾 id 和 snippet 的內容（不含 id）。<br>自動產生 snippet 的 id（透過 Date.now()）。<br>將新的 snippet 放到指定的資料夾內，並回傳完整的新 snippet，方便後續操作使用。</p></li><li><p>刪除 snippet（deleteSnippetFromFolder）</p><p>根據指定的資料夾 id 和 snippet id 移除 snippet。<br>使用 filter 方法，確保其他 snippet 不受影響。</p></li><li><p>更新 snippet（updateSnippet）</p><p>-提供 snippet id 和欲更新的部分 snippet 屬性。<br>-使用 map 方法，只更新符合指定 id 的 snippet，其他 snippet 維持不變。</p></li></ul><h2 id="uiSlice-ts"><a href="#uiSlice-ts" class="headerlink" title="uiSlice.ts"></a>uiSlice.ts</h2><p>uiSlice 專門用來管理專案內與 UI 顯示相關的狀態，例如 dialog（對話框）的開啟或關閉狀態，以及當前匹配（matched）的 snippet 資訊。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/stores/snippet/slices/uiSlice.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StateCreator</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;zustand&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MatchedSnippet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types/snippets&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">UISlice</span> &#123;</span><br><span class="line">  <span class="attr">isDialogOpen</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">matchedSnippet</span>: <span class="title class_">MatchedSnippet</span>;</span><br><span class="line">  <span class="attr">setIsDialogOpen</span>: <span class="function">(<span class="params">open: <span class="built_in">boolean</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">setMatchedSnippet</span>: <span class="function">(<span class="params">snippet: MatchedSnippet</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">createUISlice</span>: <span class="title class_">StateCreator</span>&lt;<span class="title class_">UISlice</span>&gt; = <span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">isDialogOpen</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">matchedSnippet</span>: &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">targetElement</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">insert</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">shortcut</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">setIsDialogOpen</span>: <span class="function">(<span class="params">open: <span class="built_in">boolean</span></span>) =&gt;</span> <span class="title function_">set</span>(&#123; <span class="attr">isDialogOpen</span>: open &#125;),</span><br><span class="line">  <span class="attr">setMatchedSnippet</span>: <span class="function">(<span class="params">snippet: MatchedSnippet</span>) =&gt;</span> <span class="title function_">set</span>(&#123; <span class="attr">matchedSnippet</span>: snippet &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>isDialogOpen<br>負責追蹤 dialog 是否正在顯示，便於控制 dialog 元件的顯示與隱藏。</li><li>matchedSnippet<br>用於暫時儲存用戶目前匹配到的 snippet 資訊，例如 snippet 的內容、目標元素、快捷鍵資訊等等，讓 UI 能即時反應用戶操作。</li></ul><h2 id="在頁面中使用-Zustand-管理的狀態"><a href="#在頁面中使用-Zustand-管理的狀態" class="headerlink" title="在頁面中使用 Zustand 管理的狀態"></a>在頁面中使用 Zustand 管理的狀態</h2><p>想在頁面或元件內使用剛才建立的 Zustand 狀態時，只需從我們整合好的 useSnippetStore 引入所需的狀態或方法即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSnippetStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/snippet&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Snippet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types/snippets&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 從整合後的 store 直接取出需要的方法</span></span><br><span class="line">  <span class="keyword">const</span> &#123; addFolder &#125; = <span class="title function_">useSnippetStore</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 舉例：在元件載入時新增一個 folder</span></span><br><span class="line">    <span class="keyword">const</span> newFolder = <span class="title function_">addFolder</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;New Folder&#x27;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&#x27;Example folder created on load&#x27;</span>,</span><br><span class="line">      <span class="attr">snippets</span>: [],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新增了資料夾：&#x27;</span>, newFolder);</span><br><span class="line">  &#125;, [addFolder]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你的元件內容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>不再需要額外引入任何 Context Provider。</li><li>在任何需要存取全局狀態的地方，只需簡單導入 useSnippetStore，然後直接調用對應的方法或取得狀態即可。</li></ul><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>藉由導入 Zustand 並將狀態拆分成多個獨立的 Slice（folderSlice、snippetSlice、uiSlice），使我能夠：</p><ul><li>清晰地分離狀態責任：每個 Slice 專注於處理特定領域的邏輯，如資料夾管理、snippet 操作，以及 UI 狀態。</li><li>靈活管理持久化策略：透過 Zustand 提供的 middleware（如 persist 與 partialize），只將必要的資料（例如資料夾）持久化至 localStorage，而 UI 等臨時狀態則保留在記憶體中。</li><li>有效降低耦合度與樣板代碼：每個元件不再需要額外引入 Provider，簡化了開發流程，並且降低未來維護成本。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這段時間在製作一個 snippet 管理的 side project，過程中遇到了一些跨頁面共享資料的需求。專案中有一包資料稱為 snippet，內部包含多個 folder 和小項目的 snippets。這些資料不僅會在 /snippet 路徑下的元件使用，還會跨 rout</summary>
      
    
    
    
    <category term="side-project" scheme="https://eva813.github.io/categories/side-project/"/>
    
    
    <category term="React" scheme="https://eva813.github.io/tags/React/"/>
    
    <category term="side-project" scheme="https://eva813.github.io/tags/side-project/"/>
    
    <category term="Zustand" scheme="https://eva813.github.io/tags/Zustand/"/>
    
  </entry>
  
  <entry>
    <title>figma mcp 應用</title>
    <link href="https://eva813.github.io/2025/03/27/figma-mcp/"/>
    <id>https://eva813.github.io/2025/03/27/figma-mcp/</id>
    <published>2025-03-27T11:30:14.000Z</published>
    <updated>2025-03-27T11:52:21.217Z</updated>
    
    <content type="html"><![CDATA[<p>有新東西就是要來快速嘗試一下～～ 注意 cursor 要是付費版才能使用</p><p>至 GitHub clone 專案 <a href="https://github.com/sonnylazuardi/cursor-talk-to-figma-mcp">Cursor Talk to Figma MCP</a></p><p>然後遵循 README：<strong>Get Started 開始</strong></p><p>它需要安裝 bun 套件管理工具</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="attr">https</span>:<span class="comment">//bun.sh/install | bash</span></span><br></pre></td></tr></table></figure><p>需要在你的專案根目錄執行:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/your/cursor-talk-to-figma-mcp</span><br><span class="line">bun setup</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 啟動 WebSocket server（必須持續執行）</span></span><br><span class="line">bun socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 啟動 MCP server（另開一個終端）</span></span><br><span class="line">bunx cursor-talk-to-figma-mcp</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Add the server to your Cursor MCP configuration <span class="keyword">in</span> ~/.cursor/mcp.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;TalkToFigma&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;command&quot;</span>: <span class="string">&quot;bunx&quot;</span>,</span><br><span class="line">      <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;cursor-talk-to-figma-mcp&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下為圖示：</p><p><img src="https://i.imgur.com/6LuXXYv.png" alt="image.png"></p><span id="more"></span><p>從 Figma 的官網下載 ：<a href="https://www.figma.com/downloads/">https://www.figma.com/downloads/</a></p><p>在第一次設定：選擇左上角的 Figma Icon，點選「Plugins」→「Development」→「Import plugin from manifest」</p><ul><li>在 Figma 中，點選選單 → <strong>Plugins</strong> → <strong>Development</strong> → Import plugin from manifest</li><li>指定並選取專案中的 <code>src/cursor_mcp_plugin/manifest.json</code> 檔案</li><li>完成後，該外掛就會出現在你的 Figma Development Plugins 列表中，可以直接使用了。</li></ul><p><img src="https://i.imgur.com/UZwKie7.png" alt="image.png"></p><p>此外，要注意 cursor  連線，當你有成功連接 mcp 會有綠點，且呈現 Enable:</p><p><img src="https://i.imgur.com/ei4uzVB.png" alt="image.png"></p><p><img src="https://i.imgur.com/xysn5c0.png" alt="image.png"></p><p>確定與 figma 連線成功：</p><p>執行：talk fo figma , channel id: {你的 channel id}</p><p><img src="https://i.imgur.com/YhCxwoq.png" alt="image.png"></p><p>接著你就可以告訴他你要做得 figma 內容，像是我的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">設計一個 管理ai prompt 桌面版，請提出以下方式讓我完成 應用程式 所有需要的設計：</span><br><span class="line"></span><br><span class="line">思考使用者需要 管理ai prompt 桌面版 要提供哪些功能:</span><br><span class="line"></span><br><span class="line">作為產品經理提出功能規劃</span><br><span class="line"></span><br><span class="line">作為設計師提供整體介面設計</span><br><span class="line"></span><br><span class="line">可以使用 FrontAwesome 等圖示展示，讓原型圖更接近真實</span><br></pre></td></tr></table></figure><p>但是他只幫我產出簡單的 layout，要做出一設計稿還是很有大難度</p><p><img src="https://i.imgur.com/yr4O7rI.png" alt="image.png"></p><p>參考：<br><a href="https://muki.tw/figma-mcp-server-cursor/">https://muki.tw/figma-mcp-server-cursor/</a></p><hr><p>使用 <a href="https://github.com/GLips/Figma-Context-MCP">https://github.com/GLips/Figma-Context-MCP</a> </p><p>閱讀 Readme: <strong>Connecting to Cursor</strong></p><p>1.在自己終端機：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx figma-developer-mcp --figma-api-key=&lt;your-figma-api-key&gt;</span><br></pre></td></tr></table></figure><ul><li>-figma-api-key 要到 figma 登入後，點擊頭像 settings →  security → create new token</li></ul><p>2.到 <strong>Cursor → Cursor settings → mcp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;mcpServers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Framelink Figma MCP&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://localhost:3000/sse&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.可以回到 figma ，要選擇你要的畫面</p><p><img src="https://i.imgur.com/Lbv0HvC.png" alt="image.png"></p><p>注意你在本地，要先建立好一 react 專案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest my-react-app -- --template react</span><br></pre></td></tr></table></figure><p>然後到 cursor → cd my-react-app  →  chat 貼上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@https://www.figma.com/design/lImjbdZmdV25TQ23glGfvV/Locofy-Sample-Project---FickleFlight-(Community)?node-id=1003-3841&amp;t=CNAo85NCrYNAJpJ6-4 </span><br><span class="line">請幫我用 tailwindcss做此畫面， tailwind css 設定我已經處理好，請專注於做畫面，不要用其他 css框架，就全部使用tailwind，記得圖片也要抓下來</span><br></pre></td></tr></table></figure><p>在該 cursor 專案：</p><p><img src="https://i.imgur.com/ADYZghc.png" alt="image.png"></p><p>以下，可以看到他做的切版：</p><p>我參照的 figma template : Locofy Sample Project - FickleFlight (Community)</p><p><img src="https://i.imgur.com/L1PUGuw.png" alt="image.png"></p><p><img src="https://i.imgur.com/yMcOvmL.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有新東西就是要來快速嘗試一下～～ 注意 cursor 要是付費版才能使用&lt;/p&gt;
&lt;p&gt;至 GitHub clone 專案 &lt;a href=&quot;https://github.com/sonnylazuardi/cursor-talk-to-figma-mcp&quot;&gt;Cursor Talk to Figma MCP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然後遵循 README：&lt;strong&gt;Get Started 開始&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它需要安裝 bun 套件管理工具&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL &lt;span class=&quot;attr&quot;&gt;https&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//bun.sh/install | bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;需要在你的專案根目錄執行:&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /path/to/your/cursor-talk-to-figma-mcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bun setup&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 啟動 WebSocket server（必須持續執行）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bun socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 啟動 MCP server（另開一個終端）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bunx cursor-talk-to-figma-mcp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Add the server to your Cursor MCP configuration &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ~/.cursor/mcp.json:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;mcpServers&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;TalkToFigma&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;bunx&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;quot;cursor-talk-to-figma-mcp&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;以下為圖示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6LuXXYv.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue 動態事件名稱</title>
    <link href="https://eva813.github.io/2025/03/27/vue-dynamic-event/"/>
    <id>https://eva813.github.io/2025/03/27/vue-dynamic-event/</id>
    <published>2025-03-26T23:16:48.000Z</published>
    <updated>2025-03-27T11:54:47.993Z</updated>
    
    <content type="html"><![CDATA[<p>在 Vue 中使用動態事件名稱的功能自 Vue 2.6.0 版本開始支持。可以使用 v-on 或 @ 來動態綁定事件名稱</p><p>簡單舉例：<br>根據裝置類型切換事件（桌機 vs 手機）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> event = <span class="title function_">ref</span>(navigator.<span class="property">maxTouchPoints</span> ? <span class="string">&#x27;touchstart&#x27;</span> : <span class="string">&#x27;click&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handle</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Triggered on&#x27;</span>, event.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @[<span class="attr">event</span>]=<span class="string">&quot;handle&quot;</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.「檔案卡片」元件預覽或跳轉：</p><p>點擊 (click)：選擇／下載檔案<br>滑鼠移入 (mouseover)：預覽檔案摘要</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on</span>=<span class="string">&quot;&#123; click: handleDownload, mouseover: handlePreview &#125;&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; fileName &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;showPreview&quot;</span> <span class="attr">class</span>=<span class="string">&quot;preview-popup&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; previewText &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed, nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = defineProps&lt;&#123; <span class="attr">fileName</span>: string; <span class="attr">fileUrl</span>: string &#125;&gt;()</span><br><span class="line"><span class="keyword">const</span> showPreview = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> previewText = <span class="title function_">ref</span>(<span class="string">&#x27;Loading preview…&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 點擊 → 觸發下載</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleDownload</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">open</span>(props.<span class="property">fileUrl</span>, <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑鼠移入 → 取得並顯示檔案摘要</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handlePreview</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  showPreview.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 模擬 API 請求</span></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">setTimeout</span>(res, <span class="number">300</span>))</span><br><span class="line">  previewText.<span class="property">value</span> = <span class="string">`Preview of <span class="subst">$&#123;props.fileName&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑鼠移出後隱藏預覽</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hidePreview</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  showPreview.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽滑鼠離開整個卡片</span></span><br><span class="line"><span class="keyword">const</span> cardRef = ref&lt;<span class="title class_">HTMLElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">cardRef.<span class="property">value</span>?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, hidePreview)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.file-card</span> &#123; <span class="attribute">position</span>: relative; <span class="attribute">display</span>: inline-block; &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.preview-popup</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background</span>: white;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><a href="https://stackblitz.com/edit/vue-tip-dynamic-event-names-evguwtw8?file=README.md">Demo</a></p><p>注意：在「同一欄位會因不同情境而切換觸發事件」時，才建議用動態綁定。若只是單純切換事件名稱，建議直接在方法內判斷即可。</p><p>也可參考 Michael Hoffmann 這裡的另一實作方式：<br><a href="https://stackblitz.com/edit/vue-tip-dynamic-event-names?file=src%2FApp.vue">https://stackblitz.com/edit/vue-tip-dynamic-event-names?file=src%2FApp.vue</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Vue 中使用動態事件名稱的功能自 Vue 2.6.0 版本開始支持。可以使用 v-on 或 @ 來動態綁定事件名稱&lt;/p&gt;
&lt;p&gt;簡單舉例：&lt;br&gt;根據裝置類型切換事件（桌機 vs 手機）&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="Vue" scheme="https://eva813.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://eva813.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>twilwindCss-twMerge</title>
    <link href="https://eva813.github.io/2025/03/20/twilwindCss-twMerge/"/>
    <id>https://eva813.github.io/2025/03/20/twilwindCss-twMerge/</id>
    <published>2025-03-20T11:43:16.000Z</published>
    <updated>2025-03-20T12:06:20.200Z</updated>
    
    <content type="html"><![CDATA[<p>在開發 React 或 Vue 應用時，動態組合 Tailwind CSS class 是常見的需求。但當 class 來源多樣（例如 props 傳入、條件渲染等），你可能會遇到 class 重複、衝突或難以維護的問題，這時候，twMerge 就能幫助你解決這些困難。</p><h2 id="什麼是-twMerge"><a href="#什麼是-twMerge" class="headerlink" title="什麼是 twMerge"></a>什麼是 twMerge</h2><p><code>twMerge</code> 是一個專為 <strong>Tailwind CSS</strong> 設計的 class 合併工</p><ul><li><strong>衝突解決</strong>：當你從不同來源（例如預設樣式和 props 傳入的 class）合併 class 時，可能會出現相同屬性的重複定義，twMerge 會自動解決這些衝突，保證最終只保留正確的 class。</li><li><strong>動態組合</strong>：在實際應用中，很多時候 class 字符串是根據條件組合出來的，直接拼接可能會導致意料之外的覆蓋。twMerge 能夠讓你的 class 合併更有條理，避免混淆。</li></ul><p>安裝方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install tailwind-merge</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">yarn add tailwind-merge</span><br></pre></td></tr></table></figure><p>基本使用範例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; twMerge &#125; <span class="keyword">from</span> <span class="string">&#x27;tailwind-merge&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> classes = <span class="title function_">twMerge</span>(<span class="string">&quot;p-4&quot;</span>, <span class="string">&quot;p-2&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(classes); <span class="comment">// 輸出: &quot;p-2&quot;（自動移除衝突的 p-4）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="為什麼不用手動拼接-class？"><a href="#為什麼不用手動拼接-class？" class="headerlink" title="為什麼不用手動拼接 class？"></a>為什麼不用手動拼接 class？</h2><h3 id="無法處理-Tailwind-class-衝突"><a href="#無法處理-Tailwind-class-衝突" class="headerlink" title="無法處理 Tailwind class 衝突"></a><strong>無法處理 Tailwind class 衝突</strong></h3><p>當兩個 class 有衝突時，手動拼接無法確保後來的 class 是否正確覆蓋前者。例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> finalClasses = <span class="string">`p-4 p-2`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(finalClasses); <span class="comment">// &quot;p-4 p-2&quot; （無法移除衝突 class）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="條件渲染時-class-可能重複或失效"><a href="#條件渲染時-class-可能重複或失效" class="headerlink" title="條件渲染時 class 可能重複或失效"></a><strong>條件渲染時 class 可能重複或失效</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> isActive = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> finalClasses = <span class="string">`px-4 py-2 <span class="subst">$&#123;isActive ? <span class="string">&quot;bg-blue-500&quot;</span> : <span class="string">&quot;bg-gray-200&quot;</span>&#125;</span> bg-red-500`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(finalClasses);</span><br><span class="line"><span class="comment">// &quot;px-4 py-2 bg-blue-500 bg-gray-200 bg-red-500&quot; （背景顏色衝突）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改使用 twMerge</span></span><br><span class="line"><span class="keyword">const</span> finalClasses = <span class="title function_">twMerge</span>(<span class="string">&quot;px-4 py-2&quot;</span>, isActive ? <span class="string">&quot;bg-blue-500&quot;</span> : <span class="string">&quot;bg-gray-200&quot;</span>, <span class="string">&quot;bg-red-500&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(finalClasses);</span><br><span class="line"><span class="comment">// &quot;px-4 py-2 bg-red-500&quot; （自動解決衝突）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="也有使用模板字串（template-literal）來動態拼接-class，例如："><a href="#也有使用模板字串（template-literal）來動態拼接-class，例如：" class="headerlink" title="也有使用模板字串（template literal）來動態拼接 class，例如："></a><strong>也有使用模板字串（template literal）來動態拼接 class，例如：</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> finalClasses = <span class="string">`px-4 py-2 bg-blue-500 text-white <span class="subst">$&#123;isDisabled ? <span class="string">&quot;opacity-50 cursor-not-allowed&quot;</span> : <span class="string">&quot;&quot;</span>&#125;</span>`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>雖然，這樣可以根據條件動態組合 class，不過要注意兩點：</p><ol><li><p><strong>Tailwind CSS 掃描限制</strong><br> 若 class 是在字串插值中產生的，Tailwind 的掃描器可能無法檢測到某些動態組合的 class，這會導致對應 CSS 未被生成。這時候可能需要在 Tailwind 設定檔中加入 safelist。</p></li><li><p><strong>衝突管理</strong><br> 當有多個來源的 class 存在衝突（例如兩個不同的背景色），你必須手動確保拼接順序正確。如果衝突較多，使用 twMerge 可以更方便地自動解決這些衝突。</p></li></ol><h3 id="twMerge-的好處"><a href="#twMerge-的好處" class="headerlink" title="twMerge 的好處"></a>twMerge 的好處</h3><table><thead><tr><th>問題</th><th>手動拼 class</th><th>使用 twMerge</th></tr></thead><tbody><tr><td>衝突解決</td><td>必須自己追蹤哪個 class 最後生效</td><td>自動保留後出現的 class，刪除重複或衝突項 <a href="https://www.wsquare.io/blogs/how-to-use-and-get-benefits-from-tailwind-merge">wsquare.io</a></td></tr><tr><td>動態組合</td><td>條件判斷時拼接字串易漏寫或重複</td><td>傳多個參數給 twMerge，即使 class 來源複雜也只回傳一組乾淨結果 <a href="https://tailkits.com/blog/tailwind-css-class-conflicts-using-tailwind-merge/">tailkits.com</a></td></tr><tr><td>維護成本</td><td>隨著專案變大，class 字串容易失控</td><td>twMerge 會緩存結果，減少重複運算並讓程式碼更易讀</td></tr></tbody></table><h2 id="twMerge-的實踐"><a href="#twMerge-的實踐" class="headerlink" title="twMerge 的實踐"></a>twMerge 的實踐</h2><h3 id="在-React-中條件渲染-Tailwind-class"><a href="#在-React-中條件渲染-Tailwind-class" class="headerlink" title="在 React 中條件渲染 Tailwind class"></a><strong>在 React 中條件渲染 Tailwind class</strong></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; isDisabled &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;twMerge(</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &quot;<span class="attr">px-4</span> <span class="attr">py-2</span> <span class="attr">rounded</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">isDisabled</span> &amp;&amp; &quot;<span class="attr">opacity-50</span> <span class="attr">cursor-not-allowed</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    )&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Click Me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>當 <code>isDisabled = true</code>，twMerge 會<strong>自動移除 <code>false</code> 的 class</strong>，結果變成：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// isDisabled = true 時</span></span><br><span class="line"><span class="string">&quot;px-4 py-2 rounded opacity-50 cursor-not-allowed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isDisabled = false 時</span></span><br><span class="line"><span class="string">&quot;px-4 py-2 rounded&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這樣可以 <strong>避免<code>undefined</code> 或 <code>false</code> 的 class 影響最終輸出</strong>。</p><hr><h3 id="組件化時合併-props-傳入的-class"><a href="#組件化時合併-props-傳入的-class" class="headerlink" title="組件化時合併 props 傳入的 class"></a><strong>組件化時合併 props 傳入的 class</strong></h3><p>當你開發 <strong>可重用 UI 元件</strong> 時，通常會允許使用者傳入 <code>className</code> 來覆蓋預設樣式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Text</span> = (<span class="params">&#123; children, className &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;twMerge(</span>&quot;<span class="attr">font-normal</span> <span class="attr">text-lg</span>&quot;, <span class="attr">className</span>)&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Text</span> className=<span class="string">&quot;font-bold text-red-500&quot;</span>&gt;<span class="title class_">Hello</span>&lt;/<span class="title class_">Text</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這樣 <code>twMerge</code> 會確保：</p><ul><li><code>font-bold</code> 正確覆蓋 <code>font-normal</code></li><li><code>text-red-500</code> 正確覆蓋 <code>text-lg</code></li></ul><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>在開發 <strong>需要動態組合類別的元件</strong>，或 <strong>允許使用者自訂樣式覆蓋</strong> 的情境下，<code>twMerge</code> 是一個非常實用的工具。它能夠幫助你：  </p><p><strong>自動解決 class 衝突</strong><br>不必手動追蹤哪些類別可能互相覆蓋，<code>twMerge</code> 會確保最後宣告的樣式生效（例如 <code>p-4 p-2</code> 最終保留 <code>p-2</code>）。  </p><p><strong>支援條件渲染</strong><br>優雅地處理條件式樣式，避免 <code>false</code>、<code>undefined</code> 影響最終 class，讓程式碼更乾淨。  </p><p><strong>提升程式碼可讀性與維護性</strong><br>讓動態組合多個來源的 class 變得簡單清晰，減少維護成本，提高開發效率。</p><p><a href="https://antematter.io/blogs/mastering-css-customization-with-tailwind-merge">Override Tailwind Classes using Tailwind-Merge</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在開發 React 或 Vue 應用時，動態組合 Tailwind CSS class 是常見的需求。但當 class 來源多樣（例如 props 傳入、條件渲染等），你可能會遇到 class 重複、衝突或難以維護的問題，這時候，twMerge 就能幫助你解決這些困難。&lt;/p&gt;
&lt;h2 id=&quot;什麼是-twMerge&quot;&gt;&lt;a href=&quot;#什麼是-twMerge&quot; class=&quot;headerlink&quot; title=&quot;什麼是 twMerge&quot;&gt;&lt;/a&gt;什麼是 twMerge&lt;/h2&gt;&lt;p&gt;&lt;code&gt;twMerge&lt;/code&gt; 是一個專為 &lt;strong&gt;Tailwind CSS&lt;/strong&gt; 設計的 class 合併工&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;衝突解決&lt;/strong&gt;：當你從不同來源（例如預設樣式和 props 傳入的 class）合併 class 時，可能會出現相同屬性的重複定義，twMerge 會自動解決這些衝突，保證最終只保留正確的 class。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;動態組合&lt;/strong&gt;：在實際應用中，很多時候 class 字符串是根據條件組合出來的，直接拼接可能會導致意料之外的覆蓋。twMerge 能夠讓你的 class 合併更有條理，避免混淆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安裝方式：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install tailwind-merge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 或&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn add tailwind-merge&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;基本使用範例：&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; twMerge &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;tailwind-merge&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; classes = &lt;span class=&quot;title function_&quot;&gt;twMerge&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;p-4&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;p-2&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(classes); &lt;span class=&quot;comment&quot;&gt;// 輸出: &amp;quot;p-2&amp;quot;（自動移除衝突的 p-4）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://eva813.github.io/categories/frontend/"/>
    
    
    <category term="Tailwind CSS" scheme="https://eva813.github.io/tags/Tailwind-CSS/"/>
    
  </entry>
  
  <entry>
    <title>SOLID 物件導向</title>
    <link href="https://eva813.github.io/2025/02/24/Net-solid/"/>
    <id>https://eva813.github.io/2025/02/24/Net-solid/</id>
    <published>2025-02-24T07:28:09.000Z</published>
    <updated>2025-03-20T12:07:14.407Z</updated>
    
    <content type="html"><![CDATA[<ul><li>S 指的是 Single responsibility principle(SRP) 單一職責原則</li><li>O 指的是 Open/close principle(OCP) 開放/封閉原則</li><li>L 指的是 Liskov substitution principle(LSP) Liskov 替換原則</li><li>I 指的是 Interface Segregation Principle(ISP) 介面隔離原則</li><li>D 指的是 Dependency Inversion Principle(DIP) 依賴反轉原則</li></ul><h2 id="Single-responsibility-principle-SRP-單一職責原則"><a href="#Single-responsibility-principle-SRP-單一職責原則" class="headerlink" title="Single responsibility principle(SRP) 單一職責原則"></a>Single responsibility principle(SRP) 單一職責原則</h2><p>一個 class 別應該只有一個職責，並且只應該因為一個理由而改變。</p><p>C# 程式碼範例：</p><p>以違反 SRP 的範例：<br>在這個範例中，User 類別同時負責使用者資料的管理、資料庫儲存、發送歡迎信和使用者驗證等多個職責。這違反了 SRP。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Username &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveUserToDatabase</span>()</span> &#123; <span class="comment">/* 資料庫儲存邏輯 */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendWelcomeEmail</span>()</span> &#123; <span class="comment">/* 發送歡迎信邏輯 */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ValidateUser</span>()</span> &#123; <span class="comment">/* 使用者驗證邏輯 */</span> <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>符合 SRP 的範例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Username &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveUser</span>(<span class="params">User user</span>)</span> &#123; <span class="comment">/* 資料庫儲存邏輯 */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmailService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendWelcomeEmail</span>(<span class="params">User user</span>)</span> &#123; <span class="comment">/* 發送歡迎信邏輯 */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserValidator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ValidateUser</span>(<span class="params">User user</span>)</span> &#123; <span class="comment">/* 使用者驗證邏輯 */</span> <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這個範例中，我們將不同的職責分離到不同的類別中：</p><ul><li>User 類別只負責使用者資料的管理。</li><li>UserRepository 類別負責資料庫儲存。</li><li>EmailService 類別負責發送歡迎信。</li><li>UserValidator 類別負責使用者驗證。<br>這樣做使得每個類別都只有一個職責，並且只因為一個理由而改變，符合了 SRP。</li></ul><h3 id="從前端的解度來理解"><a href="#從前端的解度來理解" class="headerlink" title="從前端的解度來理解"></a>從前端的解度來理解</h3><p>在前端開發中，我們經常使用元件 (Component) 的概念來構建使用者介面。一個元件通常負責渲染一部分的 UI，並處理與該部分 UI 相關的互動。這與 SRP 的概念非常相似。一個好的前端元件應該只負責單一的職責，例如：</p><p>顯示資料： 只負責接收資料並將其渲染到 UI 上。<br>處理使用者輸入： 只負責處理使用者在介面上的輸入事件，例如按鈕點擊、表單提交等。<br>發送 API 請求： 只負責向後端發送 API 請求並處理回應。</p><span id="more"></span><h4 id="這個範例中，ProductList-元件同時負責："><a href="#這個範例中，ProductList-元件同時負責：" class="headerlink" title="這個範例中，ProductList 元件同時負責："></a>這個範例中，ProductList 元件同時負責：</h4><ul><li>渲染產品列表： products.map 部分。</li><li>處理加入購物車的邏輯： handleAddToCart 函數。</li><li>本地儲存購物車資料： localStorage.setItem。</li><li>追蹤加入購物車的事件： trackAddToCartEvent 函數。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 違反 SRP 的元件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProductList</span>(<span class="params">&#123; products &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [cart, setCart] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleAddToCart</span> = (<span class="params">product</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 同時處理加入購物車和本地儲存</span></span><br><span class="line">    <span class="title function_">setCart</span>([...cart, product]);</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;cart&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...cart, product]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同時處理追蹤事件</span></span><br><span class="line">    <span class="title function_">trackAddToCartEvent</span>(product);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">trackAddToCartEvent</span> = (<span class="params">product</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 追蹤加入購物車的事件，例如發送到 GA</span></span><br><span class="line">    <span class="comment">// ... 追蹤程式碼 ...</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Product <span class="subst">$&#123;product.name&#125;</span> added to cart.`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;products.map((product) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;product.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;product.name&#125; - $&#123;product.price&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleAddToCart(product)&#125;&gt;Add to Cart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以調整，將不同的職責分離到不同的函數或元件中：<br>ProductList 元件只負責渲染產品列表和處理按鈕點擊事件，並透過 onAddToCart prop 將加入購物車的事件傳遞給父元件。<br>CartManager 負責管理購物車的狀態、本地儲存和追蹤事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 符合 SRP 的元件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProductList</span>(<span class="params">&#123; products, onAddToCart &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;products.map((product) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;product.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;product.name&#125; - $&#123;product.price&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onAddToCart(product)&#125;&gt;Add to Cart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CartManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [cart, setCart] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleAddToCart</span> = (<span class="params">product</span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setCart</span>([...cart, product]);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;cart&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...cart, product]));</span><br><span class="line">        <span class="title function_">trackAddToCartEvent</span>(product); <span class="comment">// 呼叫追蹤函數</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">trackAddToCartEvent</span> = (<span class="params">product</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 追蹤加入購物車的事件</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Product <span class="subst">$&#123;product.name&#125;</span> added to cart.`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ProductList</span> <span class="attr">products</span>=<span class="string">&#123;products&#125;</span> <span class="attr">onAddToCart</span>=<span class="string">&#123;handleAddToCart&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Open-close-principle-OCP-開放-封閉原則"><a href="#Open-close-principle-OCP-開放-封閉原則" class="headerlink" title="Open/close principle(OCP) 開放/封閉原則"></a>Open/close principle(OCP) 開放/封閉原則</h2><ul><li>對擴展開放 (Open for extension)： 允許新增功能或行為。</li><li>對修改封閉 (Closed for modification)： 不應該修改既有的程式碼</li></ul><p>以生物分類學為背景，將「雞」和「火龍」視為不同的生物種類。它們之間有一些共同的特性（例如都會啼叫、用兩隻腳走路），也有各自獨特的特性（例如火龍會吐火、會飛）。</p><p>這個例子要說明的是，當我們需要新增「火龍」這個角色時，如果直接修改「雞」的類別，就會違反 OCP，並且造成程式碼的混亂。正確的做法是透過抽象化，建立更通用的概念（例如「雉科」、「飛龍種」），然後讓「雞」和「火龍」分別繼承這些概念，並實作各自獨特的行為。</p><h3 id="初始設計（未應用-OCP）："><a href="#初始設計（未應用-OCP）：" class="headerlink" title="初始設計（未應用 OCP）："></a>初始設計（未應用 OCP）：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Chicken</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeSound</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Cock-a-doodle-doo!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Walking on two legs.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要新增 Dragon，直接修改 Chicken 類別，違反 OCP</span></span><br><span class="line"><span class="comment">// public class Chicken</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     ...</span></span><br><span class="line"><span class="comment">//     public void Fly() // 這樣做不合理</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         // ...</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>應用 OCP 的設計：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義一個抽象的生物介面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAnimal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MakeSound</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Walk</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 雉科</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Phasianidae</span> : <span class="title">IAnimal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MakeSound</span>() <span class="comment">// 使用 virtual 允許子類別覆寫</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Generic bird sound.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Walking on two legs.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 雞</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Chicken</span> : <span class="title">Phasianidae</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MakeSound</span>() <span class="comment">// 覆寫 MakeSound 方法</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Cock-a-doodle-doo!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 飛龍</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Wyvern</span> : <span class="title">IAnimal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MakeSound</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Roar!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Running on two legs.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Flying in the sky.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FireBreath</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Breathing fire!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 火龍</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dragon</span> : <span class="title">Wyvern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MakeSound</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ROAR!!!&quot;</span>); <span class="comment">// 更大的叫聲</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Chicken chicken = <span class="keyword">new</span> Chicken();</span><br><span class="line">        chicken.MakeSound(); <span class="comment">// Cock-a-doodle-doo!</span></span><br><span class="line">        chicken.Walk();      <span class="comment">// Walking on two legs.</span></span><br><span class="line"></span><br><span class="line">        Dragon dragon = <span class="keyword">new</span> Dragon();</span><br><span class="line">        dragon.MakeSound();  <span class="comment">// ROAR!!!</span></span><br><span class="line">        dragon.Walk();       <span class="comment">// Running on two legs.</span></span><br><span class="line">        dragon.Fly();        <span class="comment">// Flying in the sky.</span></span><br><span class="line">        dragon.FireBreath(); <span class="comment">// Breathing fire!</span></span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過 IAnimal 介面和抽象類別 Phasianidae 和 Wyvern，成功地將「雞」和「火龍」的共同行為和特有行為分離開來。新增「火龍」的功能不需要修改 Chicken 類別。</p><h3 id="以前端角度來認識"><a href="#以前端角度來認識" class="headerlink" title="以前端角度來認識"></a>以前端角度來認識</h3><p>能夠添加新功能而不需要修改現有的代碼。以下以 React 元件設計方式來舉例。</p><p>將書籍類型，有區分Premium、Free 2種，Book 元件同時負責渲染書籍的基本信息（如 title 和 image）以及處理不同類型的邏輯（如 type 和按鈕行為）。這種設計將多個責任耦合在一起，降低了元件的可維護性。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Book = (&#123; title, image, type, onClickFree, onClickPremium &#125;: IBook) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> handleReadPremium = () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Some logic</span></span><br><span class="line">    onClickPremium();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleReadFree = () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Some logic</span></span><br><span class="line">    onClickFree();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;img src=&#123;image&#125; /&gt;</span><br><span class="line">      &lt;p&gt;&#123;title&#125;&lt;/p&gt;</span><br><span class="line">      &#123;type === <span class="string">&quot;Premium&quot;</span> &amp;&amp; (</span><br><span class="line">        &lt;button onClick=&#123;handleReadPremium&#125;&gt;Add to cart +&lt;/button&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">      &#123;type === <span class="string">&quot;Free&quot;</span> &amp;&amp; &lt;button onClick=&#123;handleReadFree&#125;&gt;Read&lt;/button&gt;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>嘗試遵循 OCP：<br>Book 元件的核心邏輯（如渲染書籍的基本信息）保持不變，無需因新增書籍類型而修改。<br>新的書籍類型（如 PremiumBook 或 FreeBook）可以通過組合和擴展來實現，而不需要改動 Book 元件的代碼。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Book</span> = (<span class="params">&#123; title, image, children &#125;: IBook</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;image&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PremiumBook</span> = (<span class="params">&#123; title, image, onClick &#125;: IBook</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Book</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span> <span class="attr">image</span>=<span class="string">&#123;image&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Add to cart +<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">FreeBook</span> = (<span class="params">&#123; title, image, onClick &#125;: IBook</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Book</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span> <span class="attr">image</span>=<span class="string">&#123;image&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Read<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新的書籍類型可以通過創建新的子元件（如 PremiumBook 或 FreeBook）來實現，這些子元件可以自由定義自己的行為和內容。</p><p>例如，若需要新增一個 ExclusiveBook 類型，只需創建一個新的元件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ExclusiveBook</span> = (<span class="params">&#123; title, image, onClick &#125;: IBook</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Book</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span> <span class="attr">image</span>=<span class="string">&#123;image&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Exclusive Access<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Book</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Liskov-substitution-principle-LSP-Liskov-替換原則"><a href="#Liskov-substitution-principle-LSP-Liskov-替換原則" class="headerlink" title="Liskov substitution principle(LSP) Liskov 替換原則"></a>Liskov substitution principle(LSP) Liskov 替換原則</h2><p>LSP 強調的是繼承關係中的「可替換性」。也就是說，任何使用父類別的地方，都應該可以毫無問題地替換成子類別的實例，而不需要修改任何程式碼。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bird</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Flying!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Penguin</span> : <span class="title">Bird</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Penguins can&#x27;t fly!&quot;</span>); <span class="comment">// 企鵝無法飛行，拋出例外</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Bird&gt; birds = <span class="keyword">new</span> List&lt;Bird&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Bird(),</span><br><span class="line">            <span class="keyword">new</span> Penguin()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (Bird bird <span class="keyword">in</span> birds)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                bird.Fly(); <span class="comment">// 迴圈中呼叫 Fly 方法，企鵝會拋出例外</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex.Message); <span class="comment">// 捕捉例外並印出訊息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Penguin 繼承了 Bird，並覆寫了 Fly 方法，使其拋出例外。這違反了 LSP，因為我們無法在不修改程式碼的情況下，用 Penguin 的實例替換 Bird 的實例。</p><ul><li>需要重新設計繼承關係，區分會飛的鳥類和不會飛的鳥類。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義一個會飛的鳥類的介面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFlyingBird</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鳥類基底類別 (可以不用是 abstract class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bird</span> &#123;</span><br><span class="line">  <span class="comment">// 通用方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MakeSound</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Generic bird sound.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">Eat</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;Name&#125;</span> is eating.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 會飛的鳥類</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sparrow</span> : <span class="title">Bird</span>, <span class="title">IFlyingBird</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Sparrow is flying!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MakeSound</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Chirp!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不會飛的鳥類</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Penguin</span> : <span class="title">Bird</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MakeSound</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Squawk!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Bird&gt; birds = <span class="keyword">new</span> List&lt;Bird&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Sparrow(),</span><br><span class="line">            <span class="keyword">new</span> Penguin()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (Bird bird <span class="keyword">in</span> birds)</span><br><span class="line">        &#123;</span><br><span class="line">            bird.MakeSound(); <span class="comment">// 所有鳥類都會發出叫聲，符合預期</span></span><br><span class="line">            <span class="keyword">if</span>(bird <span class="keyword">is</span> IFlyingBird flyingBird) &#123;</span><br><span class="line">                flyingBird.Fly(); <span class="comment">// 只有會飛的鳥類才會執行 Fly 方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>符合 LSP 的範例中：</p><p>我們定義了一個 IFlyingBird 介面，只有會飛的鳥類才會實作這個介面。<br>Sparrow 繼承了 Bird 並且實作了 IFlyingBird 介面。<br>Penguin 只繼承了 Bird，沒有實作 IFlyingBird 介面。</p><p> <strong>Liskov 替換原則的遵守</strong>：<br>    - 所有 <code>Bird</code> 子類別都可以在需要 <code>Bird</code> 的地方被替換，且行為符合預期。<br>    - 當需要特定行為（如飛行）時，可以使用介面進行額外約束，而不影響父類別的正確性。</p><h3 id="以前端角度來認識-1"><a href="#以前端角度來認識-1" class="headerlink" title="以前端角度來認識"></a>以前端角度來認識</h3><p><a href="https://www.youtube.com/watch?v=JkDg4-TPzL8&t=143s">Examples of Liskov Substitution Principle in React and Typescript (React Advanced Concepts)</a></p><p>LSP 的核心在於「行為子型別」（Behavioral Subtyping），即子型別應該能夠完全取代超型別，並且行為保持一致。以下是影片中如何實現 LSP 的步驟：</p><p>一個基本的對話框元件，具有標題 (header)、內容 (content) 和按鈕 (footer) 部分。<br>它被視為一個 superType。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假設的 Dialog 元件程式碼</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">DialogProps</span> &#123;</span><br><span class="line">  <span class="attr">header</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">content</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="attr">footer</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">DialogType</span>&lt;T = &#123;&#125;&gt; = <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">DialogProps</span> &amp; T&gt;;</span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">RegularDialogType</span> = <span class="title class_">DialogType</span>&lt;&#123;</span><br><span class="line">  className?:string</span><br><span class="line">&#125;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Dialog</span>: <span class="title class_">Dialog</span>: <span class="title class_">RegularDialogTyp</span> = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; header, content, footer, className= <span class="string">&#x27;dialog&#x27;</span> &#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">dialog</span> $&#123;<span class="attr">className</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">className</span>&#125;<span class="attr">-header</span>`&#125;&gt;</span>&#123;header&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">className</span>&#125;<span class="attr">-content</span>`&#125;&gt;</span>&#123;content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">className</span>&#125;<span class="attr">-footer</span>`&#125;&gt;</span>&#123;footer&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Dialog</span>;</span><br></pre></td></tr></table></figure><p>聖誕節對話框 (XmasDialog) 元件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假設的 XmasDialog 元件程式碼</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RegularDialogTyp</span>, <span class="title class_">Dialog</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dialog&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">XmasDialog</span>: <span class="title class_">RegularDialogTyp</span> = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; header, content, footer &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Dialog</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&quot;xmas-dialog&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">header</span>=<span class="string">&#123;header&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">content</span>=<span class="string">&#123;content&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">footer</span>=<span class="string">&#123;footer&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上範例，</p><ul><li>Dialog 作為 SuperType：定義了標題 (header)、內容 (content)、頁腳 (footer) 等基本屬性，所有對話框都應該符合這些屬性。</li><li>XmasDialog 作為子型別：它與 Dialog 使用相同的 props，確保 可替換性，但透過 className 改變外觀。</li><li>不改變行為： LSP 不僅要求子類型和 SuperType 具有相同的介面，還要求它們的行為一致，當使用子類型替換 SuperType 時，所有屬性 (props) 都被傳遞，且元件的功能應該保持不變 （如，XmasDialog 必須像 Dialog 一樣運作，不能缺少任何部分或停止運作）</li></ul><h3 id="組合-Composition-而非繼承-Inheritance"><a href="#組合-Composition-而非繼承-Inheritance" class="headerlink" title="組合 (Composition) 而非繼承 (Inheritance)"></a>組合 (Composition) 而非繼承 (Inheritance)</h3><p>在傳統 OOP 設計中，我們可能會讓 XmasDialog 繼承 Dialog，但這樣做會帶來以下問題：</p><p>❌ 耦合度高：如果 Dialog 內部發生變化，XmasDialog 可能會受影響，導致潛在的錯誤。<br>❌ 可維護性差：新增其他節日主題時，需要一直擴展 Dialog，導致程式碼複雜度增加。</p><p>因此，在這範例選擇 組合 (Composition) 來設計 XmasDialog，而不是直接繼承 Dialog：</p><p>XmasDialog 內部使用 Dialog，但只改變 className，避免邏輯耦合。<br>這種方式可以輕鬆擴展其他節日版本，例如 HalloweenDialog 或 NewYearDialog，而不影響 Dialog 的核心實作。</p><h3 id="條件渲染-Conditional-Rendering"><a href="#條件渲染-Conditional-Rendering" class="headerlink" title="條件渲染 (Conditional Rendering)"></a>條件渲染 (Conditional Rendering)</h3><p>以下根據應用狀態決定要顯示一般對話框 (Dialog) 或聖誕節對話框 (XmasDialog)。可以使用以下方式：</p><ul><li>透過 appStore.hasSales(‘xmas’) 判斷是否為聖誕節，並動態選擇 XmasDialog 或 Dialog。</li><li>確保在不同情境下應用的行為仍然一致，不會影響 UI 的運作。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Dialog</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dialog&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">XmasDialog</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./xmasDialog&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; appStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">App</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;&#123;&#125;&gt; = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Component</span> = appStore.<span class="title function_">hasSales</span>(<span class="string">&#x27;xmas&#x27;</span>) ? <span class="title class_">XmasDialog</span> : <span class="title class_">Dialog</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">header</span>=<span class="string">&#123;</span>&lt;<span class="attr">h3</span>&gt;</span>Profile Details<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        content=&#123;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Your name...&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Your surname...&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">        footer=&#123;<span class="tag">&lt;<span class="name">button</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在這邊，保持 Liskov 替換原則 (LSP) 一致性：</p><ul><li>Component 可以指向 Dialog 或 XmasDialog，但它們的介面完全相同，因此可以互換。</li><li>無論顯示哪個對話框，應用的邏輯不會受到影響。</li></ul><hr><h2 id="Interface-Segregation-Principle-ISP-介面隔離原則"><a href="#Interface-Segregation-Principle-ISP-介面隔離原則" class="headerlink" title="Interface Segregation Principle(ISP) 介面隔離原則"></a>Interface Segregation Principle(ISP) 介面隔離原則</h2><p>不應該強迫客戶端依賴它們不需要的介面。將大型介面拆分成小型、更具體的介面，可以提高系統的靈活性和可維護性。</p><p>IMultiFunctionPrinter 介面包含了列印、掃描和傳真等多個職責。SimplePrinter 類別只需要列印功能，但它被迫實作了 Scan 和 Fax 方法，這違反了 ISP。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMultiFunctionPrinter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Scan</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fax</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OldPrinter</span> : <span class="title">IMultiFunctionPrinter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>()</span> &#123; <span class="comment">/* 實作列印 */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Scan</span>()</span> &#123; <span class="comment">/* 實作掃描 */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fax</span>()</span> &#123; <span class="comment">/* 實作傳真 */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimplePrinter</span> : <span class="title">IMultiFunctionPrinter</span> <span class="comment">// 只需要列印功能</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>()</span> &#123; <span class="comment">/* 實作列印 */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Scan</span>()</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException(); &#125; <span class="comment">// 不需要掃描，被迫實作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fax</span>()</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException(); &#125; <span class="comment">// 不需要傳真，被迫實作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPrinter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IScanner</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Scan</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFax</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fax</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GoodPrinter</span> : <span class="title">IPrinter</span>, <span class="title">IScanner</span>, <span class="title">IFax</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>()</span> &#123; <span class="comment">/* 實作列印 */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Scan</span>()</span> &#123; <span class="comment">/* 實作掃描 */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fax</span>()</span> &#123; <span class="comment">/* 實作傳真 */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimplePrinter</span> : <span class="title">IPrinter</span> <span class="comment">// 只實作需要的介面</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>()</span> &#123; <span class="comment">/* 實作列印 */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端-JavaScript-範例："><a href="#前端-JavaScript-範例：" class="headerlink" title="前端 JavaScript 範例："></a>前端 JavaScript 範例：</h2><p>在前端 JavaScript 中，雖然沒有像 C# 的介面，但我們可以使用物件或函數來模擬介面的效果。</p><p>違反 ISP 的範例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> userActions = &#123;</span><br><span class="line">    <span class="attr">login</span>: <span class="function">() =&gt;</span> &#123; <span class="comment">/* 登入邏輯 */</span> &#125;,</span><br><span class="line">    <span class="attr">logout</span>: <span class="function">() =&gt;</span> &#123; <span class="comment">/* 登出邏輯 */</span> &#125;,</span><br><span class="line">    <span class="attr">createUser</span>: <span class="function">() =&gt;</span> &#123; <span class="comment">/* 建立使用者邏輯 */</span> &#125;,</span><br><span class="line">    <span class="attr">deleteUser</span>: <span class="function">() =&gt;</span> &#123; <span class="comment">/* 刪除使用者邏輯 */</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只需要登入和登出的元件被迫依賴不需要的 createUser 和 deleteUser</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AuthComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleLogin</span> = (<span class="params"></span>) =&gt; userActions.<span class="title function_">login</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleLogout</span> = (<span class="params"></span>) =&gt; userActions.<span class="title function_">logout</span>();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogin&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogout&#125;</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>符合 ISP 的範例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> authActions = &#123;</span><br><span class="line">    <span class="attr">login</span>: <span class="function">() =&gt;</span> &#123; <span class="comment">/* 登入邏輯 */</span> &#125;,</span><br><span class="line">    <span class="attr">logout</span>: <span class="function">() =&gt;</span> &#123; <span class="comment">/* 登出邏輯 */</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> adminActions = &#123;</span><br><span class="line">    <span class="attr">createUser</span>: <span class="function">() =&gt;</span> &#123; <span class="comment">/* 建立使用者邏輯 */</span> &#125;,</span><br><span class="line">    <span class="attr">deleteUser</span>: <span class="function">() =&gt;</span> &#123; <span class="comment">/* 刪除使用者邏輯 */</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AuthComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleLogin</span> = (<span class="params"></span>) =&gt; authActions.<span class="title function_">login</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleLogout</span> = (<span class="params"></span>) =&gt; authActions.<span class="title function_">logout</span>();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogin&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogout&#125;</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AdminComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleCreateUser</span> = (<span class="params"></span>) =&gt; adminActions.<span class="title function_">createUser</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleDeleteUser</span> = (<span class="params"></span>) =&gt; adminActions.<span class="title function_">deleteUser</span>();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleCreateUser&#125;</span>&gt;</span>Create User<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleDeleteUser&#125;</span>&gt;</span>Delete User<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這個範例中，我們將使用者操作拆分為 authActions 和 adminActions 兩個物件，分別包含不同的職責。AuthComponent 只需要依賴 authActions，AdminComponent 只需要依賴 adminActions，避免了不必要的依賴。<br>一個元件不應該接收過多的 props 或提供過多的方法，而是應該只接收它需要的 props 和提供它需要的方法。這可以提高元件的重用性和可維護性。</p><h2 id="Dependency-Inversion-Principle-DIP-依賴反轉原則"><a href="#Dependency-Inversion-Principle-DIP-依賴反轉原則" class="headerlink" title="Dependency Inversion Principle(DIP) 依賴反轉原則"></a>Dependency Inversion Principle(DIP) 依賴反轉原則</h2><h3 id="什麼是高階模組和低階模組？"><a href="#什麼是高階模組和低階模組？" class="headerlink" title="什麼是高階模組和低階模組？"></a>什麼是高階模組和低階模組？</h3><p>高階模組不應依賴於低階模組，兩者皆應依賴於抽象實體</p><ol><li>高階模組 (High-level Modules)： 這些模組包含應用程式的核心業務邏輯和控制流程。它們定義了應用程式的整體行為，通常比較抽象，關注的是「做什麼」，而不是「怎麼做」。例如：<br>訂單處理模組 (Order Processing Module)<br>使用者驗證模組 (User Authentication Module)<br>報表產生模組 (Report Generation Module)</li><li>低階模組 (Low-level Modules)： 這些模組負責具體的實作細節，例如資料庫存取、檔案操作、網路通訊等。它們關注的是「怎麼做」，而不是「做什麼」。例如：<br>資料庫存取模組 (Database Access Module)<br>檔案系統模組 (File System Module)<br>郵件發送模組 (Email Sending Module)</li></ol><p>以假設 情境： </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 低階模組：PayPal 付款</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PayPalPayment</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>(<span class="params"><span class="built_in">decimal</span> amount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Processing payment of <span class="subst">&#123;amount&#125;</span> via PayPal.&quot;</span>);</span><br><span class="line">        <span class="comment">// 實際的 PayPal 付款邏輯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高階模組：購物車</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShoppingCart</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> PayPalPayment _payPalPayment; <span class="comment">// 直接依賴 PayPalPayment</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShoppingCart</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _payPalPayment = <span class="keyword">new</span> PayPalPayment();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Checkout</span>(<span class="params"><span class="built_in">decimal</span> totalAmount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _payPalPayment.ProcessPayment(totalAmount);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Order completed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ShoppingCart cart = <span class="keyword">new</span> ShoppingCart();</span><br><span class="line">        cart.Checkout(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>符合 DIP 的範例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象介面：付款方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPaymentProcessor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ProcessPayment</span>(<span class="params"><span class="built_in">decimal</span> amount</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 低階模組：PayPal 付款</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PayPalPayment</span> : <span class="title">IPaymentProcessor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>(<span class="params"><span class="built_in">decimal</span> amount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Processing payment of <span class="subst">&#123;amount&#125;</span> via PayPal.&quot;</span>);</span><br><span class="line">        <span class="comment">// 實際的 PayPal 付款邏輯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 低階模組：Stripe 付款</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StripePayment</span> : <span class="title">IPaymentProcessor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessPayment</span>(<span class="params"><span class="built_in">decimal</span> amount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Processing payment of <span class="subst">&#123;amount&#125;</span> via Stripe.&quot;</span>);</span><br><span class="line">        <span class="comment">// 實際的 Stripe 付款邏輯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高階模組：購物車</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShoppingCart</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IPaymentProcessor _paymentProcessor; <span class="comment">// 依賴介面</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShoppingCart</span>(<span class="params">IPaymentProcessor paymentProcessor</span>) <span class="comment">// 建構子注入</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        _paymentProcessor = paymentProcessor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Checkout</span>(<span class="params"><span class="built_in">decimal</span> totalAmount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _paymentProcessor.ProcessPayment(totalAmount);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Order completed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用 PayPal 付款</span></span><br><span class="line">        IPaymentProcessor payPalPayment = <span class="keyword">new</span> PayPalPayment();</span><br><span class="line">        ShoppingCart cart1 = <span class="keyword">new</span> ShoppingCart(payPalPayment);</span><br><span class="line">        cart1.Checkout(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine();</span><br><span class="line"></span><br><span class="line">        IPaymentProcessor stripePayment = <span class="keyword">new</span> StripePayment();</span><br><span class="line">        ShoppingCart cart2 = <span class="keyword">new</span> ShoppingCart(stripePayment);</span><br><span class="line">        cart2.Checkout(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以前端角度來認識-2"><a href="#以前端角度來認識-2" class="headerlink" title="以前端角度來認識"></a>以前端角度來認識</h3><p>以表單元件的重用，當有一個表單元件需要在不同情境下重用時，例如創建和編輯書籍的表單，它們的 UI 相同但邏輯不同。<br>解決方案: 抽象出一個接口（如onSubmit函數），讓表單元件依賴於這個抽象接口，而不是直接依賴於API請求的實現。<br>抽象出一個接口（如onSubmit函數），讓表單元件依賴於這個抽象接口，而不是直接依賴於API請求的實現。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BookForm</span> = (<span class="params">&#123; onSubmit &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;bookType&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建書籍的邏輯</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CreateBookForm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCreateBook</span> = <span class="keyword">async</span> (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(e.<span class="property">currentTarget</span>);</span><br><span class="line">      <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&quot;https://myapi.com/books&quot;</span>, formData);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">BookForm</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleCreateBook&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 編輯書籍的邏輯</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">EditBookForm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleEditBook</span> = <span class="keyword">async</span> (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 編輯書籍的邏輯</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">BookForm</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleEditBook&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://adeesh.hashnode.dev/using-the-dependency-inversion-principle-dip-in-react">Using the Dependency Inversion Principle (DIP) in React</a><br><a href="https://dev.to/mikhaelesa/dependency-inversion-principle-in-react-5287">Dependency Inversion Principle in React</a></p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;S 指的是 Single responsibility principle(SRP) 單一職責原則&lt;/li&gt;
&lt;li&gt;O 指的是 Open/close principle(OCP) 開放/封閉原則&lt;/li&gt;
&lt;li&gt;L 指的是 Liskov substitution principle(LSP) Liskov 替換原則&lt;/li&gt;
&lt;li&gt;I 指的是 Interface Segregation Principle(ISP) 介面隔離原則&lt;/li&gt;
&lt;li&gt;D 指的是 Dependency Inversion Principle(DIP) 依賴反轉原則&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Single-responsibility-principle-SRP-單一職責原則&quot;&gt;&lt;a href=&quot;#Single-responsibility-principle-SRP-單一職責原則&quot; class=&quot;headerlink&quot; title=&quot;Single responsibility principle(SRP) 單一職責原則&quot;&gt;&lt;/a&gt;Single responsibility principle(SRP) 單一職責原則&lt;/h2&gt;&lt;p&gt;一個 class 別應該只有一個職責，並且只應該因為一個理由而改變。&lt;/p&gt;
&lt;p&gt;C# 程式碼範例：&lt;/p&gt;
&lt;p&gt;以違反 SRP 的範例：&lt;br&gt;在這個範例中，User 類別同時負責使用者資料的管理、資料庫儲存、發送歡迎信和使用者驗證等多個職責。這違反了 SRP。&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; Username &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; Password &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; Email &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SaveUserToDatabase&lt;/span&gt;()&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* 資料庫儲存邏輯 */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SendWelcomeEmail&lt;/span&gt;()&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* 發送歡迎信邏輯 */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ValidateUser&lt;/span&gt;()&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* 使用者驗證邏輯 */&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;符合 SRP 的範例：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; Username &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; Password &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; Email &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserRepository&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SaveUser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;User user&lt;/span&gt;)&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* 資料庫儲存邏輯 */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EmailService&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SendWelcomeEmail&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;User user&lt;/span&gt;)&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* 發送歡迎信邏輯 */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserValidator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ValidateUser&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;User user&lt;/span&gt;)&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* 使用者驗證邏輯 */&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在這個範例中，我們將不同的職責分離到不同的類別中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User 類別只負責使用者資料的管理。&lt;/li&gt;
&lt;li&gt;UserRepository 類別負責資料庫儲存。&lt;/li&gt;
&lt;li&gt;EmailService 類別負責發送歡迎信。&lt;/li&gt;
&lt;li&gt;UserValidator 類別負責使用者驗證。&lt;br&gt;這樣做使得每個類別都只有一個職責，並且只因為一個理由而改變，符合了 SRP。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;從前端的解度來理解&quot;&gt;&lt;a href=&quot;#從前端的解度來理解&quot; class=&quot;headerlink&quot; title=&quot;從前端的解度來理解&quot;&gt;&lt;/a&gt;從前端的解度來理解&lt;/h3&gt;&lt;p&gt;在前端開發中，我們經常使用元件 (Component) 的概念來構建使用者介面。一個元件通常負責渲染一部分的 UI，並處理與該部分 UI 相關的互動。這與 SRP 的概念非常相似。一個好的前端元件應該只負責單一的職責，例如：&lt;/p&gt;
&lt;p&gt;顯示資料： 只負責接收資料並將其渲染到 UI 上。&lt;br&gt;處理使用者輸入： 只負責處理使用者在介面上的輸入事件，例如按鈕點擊、表單提交等。&lt;br&gt;發送 API 請求： 只負責向後端發送 API 請求並處理回應。&lt;/p&gt;</summary>
    
    
    
    <category term="dotnet" scheme="https://eva813.github.io/categories/dotnet/"/>
    
    
    <category term="dotnet" scheme="https://eva813.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>LINQ 進階運算子：拓展你的查詢能力</title>
    <link href="https://eva813.github.io/2025/01/24/Net-learning-4/"/>
    <id>https://eva813.github.io/2025/01/24/Net-learning-4/</id>
    <published>2025-01-24T06:22:20.000Z</published>
    <updated>2025-01-24T07:01:40.373Z</updated>
    
    <content type="html"><![CDATA[<p>除了基礎運算子（如 Where、Select 和 OrderBy），LINQ 還提供了許多進階運算子，用於解決更複雜的查詢需求。以下是一些使用頻率較高的進階運算子，以及它們的功能與應用場景。</p><h2 id="Projection-Operators-投影"><a href="#Projection-Operators-投影" class="headerlink" title="Projection Operators 投影"></a>Projection Operators 投影</h2><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><p>範例：投影字串清單中每個字串的第一個字母。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; words = [<span class="string">&quot;an&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;day&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = words.Select(word =&gt; word.Substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> query)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This code produces the following output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    a</span></span><br><span class="line"><span class="comment">    a</span></span><br><span class="line"><span class="comment">    a</span></span><br><span class="line"><span class="comment">    d</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SelectMany"><a href="#SelectMany" class="headerlink" title="SelectMany"></a>SelectMany</h3><p>SelectMany 將一個集合中的子集合展平（Flatten），生成單一層級的結果序列。它非常適合處理嵌套集合。</p><p>適用場景：需要從多個子集合中提取元素，並將它們組合為單一集合。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; phrases = [<span class="string">&quot;an apple a day&quot;</span>, <span class="string">&quot;the quick brown fox&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = <span class="keyword">from</span> phrase <span class="keyword">in</span> phrases</span><br><span class="line">            <span class="keyword">from</span> word <span class="keyword">in</span> phrase.Split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="keyword">select</span> word;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> query)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This code produces the following output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    an</span></span><br><span class="line"><span class="comment">    apple</span></span><br><span class="line"><span class="comment">    a</span></span><br><span class="line"><span class="comment">    day</span></span><br><span class="line"><span class="comment">    the</span></span><br><span class="line"><span class="comment">    quick</span></span><br><span class="line"><span class="comment">    brown</span></span><br><span class="line"><span class="comment">    fox</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; phrases = [<span class="string">&quot;an apple a day&quot;</span>, <span class="string">&quot;the quick brown fox&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = phrases.SelectMany(phrases =&gt; phrases.Split(<span class="string">&#x27; &#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> query)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This code produces the following output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    an</span></span><br><span class="line"><span class="comment">    apple</span></span><br><span class="line"><span class="comment">    a</span></span><br><span class="line"><span class="comment">    day</span></span><br><span class="line"><span class="comment">    the</span></span><br><span class="line"><span class="comment">    quick</span></span><br><span class="line"><span class="comment">    brown</span></span><br><span class="line"><span class="comment">    fox</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在提供一個，處理多對多關係數據（如學生和他們的選修課程）。<br>範例：攤平學生的課程清單</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> students = <span class="keyword">new</span>[]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> &#123; Name = <span class="string">&quot;Alice&quot;</span>, Courses = <span class="keyword">new</span>[] &#123; <span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Physics&quot;</span> &#125; &#125;,</span><br><span class="line">    <span class="keyword">new</span> &#123; Name = <span class="string">&quot;Bob&quot;</span>, Courses = <span class="keyword">new</span>[] &#123; <span class="string">&quot;Biology&quot;</span>, <span class="string">&quot;Chemistry&quot;</span> &#125; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展平成單一課程清單</span></span><br><span class="line"><span class="keyword">var</span> allCourses = students.SelectMany(s =&gt; s.Courses);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;所有課程：&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> course <span class="keyword">in</span> allCourses)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出結果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">所有課程：</span><br><span class="line"><span class="title class_">Math</span></span><br><span class="line"><span class="title class_">Physics</span></span><br><span class="line"><span class="title class_">Biology</span></span><br><span class="line"><span class="title class_">Chemistry</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="集合運算子：Distinct、Union、Intersect、Except"><a href="#集合運算子：Distinct、Union、Intersect、Except" class="headerlink" title="集合運算子：Distinct、Union、Intersect、Except"></a>集合運算子：Distinct、Union、Intersect、Except</h2><p>這些運算子用於對集合執行集合操作（如去重、取交集、聯集和差集）。</p><p>Distinct: 從一個集合中移除所有的重複元素，只保留唯一值。<br>union: 功能是將兩個集合合併，並移除重複的元素，返回一個唯一值集合。<br>Intersect: 方法來找出兩個陣列中共同的元素<br>Except: 快速列出兩個集合的差異項目</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setA = <span class="keyword">new</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> setB = <span class="keyword">new</span>[] &#123; <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> union = setA.Union(setB); <span class="comment">// 聯集</span></span><br><span class="line"><span class="keyword">var</span> intersect = setA.Intersect(setB); <span class="comment">// 交集</span></span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;聯集：&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.Join(<span class="string">&quot;, &quot;</span>, union));</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;交集：&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.Join(<span class="string">&quot;, &quot;</span>, intersect));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="量詞運算子：Any-和-All"><a href="#量詞運算子：Any-和-All" class="headerlink" title="量詞運算子：Any 和 All"></a>量詞運算子：Any 和 All</h2><ul><li>Any：判斷集合中是否有任意一個元素滿足條件。</li><li>All：判斷集合中的所有元素是否都滿足條件。</li></ul><p>可以適用於：<br>驗證數據的完整性或一致性。<br>篩選集合中是否包含特定類型的元素。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> products = <span class="keyword">new</span>[]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Laptop&quot;</span>, Price = <span class="number">160</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Mouse&quot;</span>, Price = <span class="number">50</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Keyboard&quot;</span>, Price = <span class="number">75</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> hasExpensiveProduct = products.Any(p =&gt; p.Price &gt; <span class="number">150</span>); </span><br><span class="line"><span class="built_in">bool</span> allProductsHaveName = products.All(p =&gt; !<span class="built_in">string</span>.IsNullOrEmpty(p.Name)); <span class="comment">// 是否所有商品都有名稱</span></span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">$&quot;有價格超過 150 的商品嗎？<span class="subst">&#123;hasExpensiveProduct&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;所有商品都有名稱嗎？<span class="subst">&#123;allProductsHaveName&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有價格超過 150 的商品嗎？True</span></span><br><span class="line"><span class="comment">// 所有商品都有名稱嗎？True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分組運算子：GroupBy"><a href="#分組運算子：GroupBy" class="headerlink" title="分組運算子：GroupBy"></a>分組運算子：GroupBy</h2><p>GroupBy 根據鍵（Key）將集合中的元素分組，每個分組包含鍵和值集合。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Product&gt; products = GetProductList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">from</span> p <span class="keyword">in</span>  products</span><br><span class="line">             <span class="keyword">group</span> p <span class="keyword">by</span> p.<span class="function">Category <span class="keyword">into</span> c</span></span><br><span class="line"><span class="function">             <span class="title">select</span> (<span class="params">Category: c.Key , Products: c</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">var</span> orderGroup <span class="keyword">in</span> result)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Products in <span class="subst">&#123;orderGroup.Category&#125;</span> category:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> product <span class="keyword">in</span> orderGroup.Products)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;\t<span class="subst">&#123;product&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://learn.microsoft.com/zh-tw/dotnet/csharp/linq/standard-query-operators/projection-operations">learn.microsoft</a><br><a href="https://github.com/dotnet/try-samples/blob/main/101-linq-samples/index.md">101 LINQ Samples</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;除了基礎運算子（如 Where、Select 和 OrderBy），LINQ 還提供了許多進階運算子，用於解決更複雜的查詢需求。以下是一些使用頻率較高的進階運算子，以及它們的功能與應用場景。&lt;/p&gt;
&lt;h2 id=&quot;Projection-Operators-投影&quot;&gt;&lt;a href=&quot;#Projection-Operators-投影&quot; class=&quot;headerlink&quot; title=&quot;Projection Operators 投影&quot;&gt;&lt;/a&gt;Projection Operators 投影&lt;/h2&gt;&lt;h3 id=&quot;Select&quot;&gt;&lt;a href=&quot;#Select&quot; class=&quot;headerlink&quot; title=&quot;Select&quot;&gt;&lt;/a&gt;Select&lt;/h3&gt;&lt;p&gt;範例：投影字串清單中每個字串的第一個字母。&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; words = [&lt;span class=&quot;string&quot;&gt;&amp;quot;an&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; query = words.Select(word =&amp;gt; word.Substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; query)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* This code produces the following output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&quot;SelectMany&quot;&gt;&lt;a href=&quot;#SelectMany&quot; class=&quot;headerlink&quot; title=&quot;SelectMany&quot;&gt;&lt;/a&gt;SelectMany&lt;/h3&gt;&lt;p&gt;SelectMany 將一個集合中的子集合展平（Flatten），生成單一層級的結果序列。它非常適合處理嵌套集合。&lt;/p&gt;
&lt;p&gt;適用場景：需要從多個子集合中提取元素，並將它們組合為單一集合。&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; phrases = [&lt;span class=&quot;string&quot;&gt;&amp;quot;an apple a day&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;the quick brown fox&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; query = &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; phrase &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; phrases&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; word &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; phrase.Split(&lt;span class=&quot;string&quot;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; query)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* This code produces the following output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    apple&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    day&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    quick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    brown&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    fox&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; phrases = [&lt;span class=&quot;string&quot;&gt;&amp;quot;an apple a day&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;the quick brown fox&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; query = phrases.SelectMany(phrases =&amp;gt; phrases.Split(&lt;span class=&quot;string&quot;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; query)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* This code produces the following output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    apple&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    day&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    quick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    brown&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    fox&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;在提供一個，處理多對多關係數據（如學生和他們的選修課程）。&lt;br&gt;範例：攤平學生的課程清單&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; students = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;[]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &amp;#123; Name = &lt;span class=&quot;string&quot;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;, Courses = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;[] &amp;#123; &lt;span class=&quot;string&quot;&gt;&amp;quot;Math&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Physics&amp;quot;&lt;/span&gt; &amp;#125; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &amp;#123; Name = &lt;span class=&quot;string&quot;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;, Courses = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;[] &amp;#123; &lt;span class=&quot;string&quot;&gt;&amp;quot;Biology&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Chemistry&amp;quot;&lt;/span&gt; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 展平成單一課程清單&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; allCourses = students.SelectMany(s =&amp;gt; s.Courses);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&amp;quot;所有課程：&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; course &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; allCourses)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(course);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;輸出結果&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所有課程：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;Math&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;Physics&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;Biology&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;Chemistry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="dotnet" scheme="https://eva813.github.io/categories/dotnet/"/>
    
    
    <category term="dotnet" scheme="https://eva813.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>深入淺出 C# LINQ：讓查詢語法變得更簡單</title>
    <link href="https://eva813.github.io/2025/01/18/Net-learning-3/"/>
    <id>https://eva813.github.io/2025/01/18/Net-learning-3/</id>
    <published>2025-01-18T11:28:54.000Z</published>
    <updated>2025-01-24T06:18:38.943Z</updated>
    
    <content type="html"><![CDATA[<p>C# 的 LINQ (Language Integrated Query，語言整合查詢) 是一個非常強大的功能，它讓你可以使用類似 SQL 的語法來查詢各種不同的資料來源。這意味著你可以用統一的方式來處理資料，無論資料是來自陣列、列表、資料庫、XML 或其他任何支援 LINQ 的來源。</p><h2 id="LINQ-的兩種語法："><a href="#LINQ-的兩種語法：" class="headerlink" title="LINQ 的兩種語法："></a>LINQ 的兩種語法：</h2><p>LINQ 有兩種主要的語法形式：</p><ul><li>查詢語法 (Query Syntax)： 看起來很像 SQL 語法，使用 from、where、select 等關鍵字。這種語法比較易讀，尤其是在處理複雜的查詢時。</li><li>方法語法 (Method Syntax)： 使用擴充方法 (Extension Methods) 來表示查詢運算子。這種語法更簡潔，也更靈活。簡單的查詢或需要鏈式操作時，通常使用方法語法更為方便。</li></ul><span id="more"></span><h2 id="基本範例："><a href="#基本範例：" class="headerlink" title="基本範例："></a>基本範例：</h2><p>所有的 LINQ 查詢作業都包含三個不同的動作：<br>  取得資料來源。<br>  建立查詢。<br>  執行查詢。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 資料來源</span></span><br><span class="line"><span class="built_in">int</span>[] numbers = [ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 建立查詢</span></span><br><span class="line"><span class="comment">// numQuery is an IEnumerable&lt;int&gt;</span></span><br><span class="line"><span class="keyword">var</span> numQuery = <span class="function"><span class="keyword">from</span> num <span class="keyword">in</span> numbers</span></span><br><span class="line"><span class="function">               <span class="title">where</span> (<span class="params">num % <span class="number">2</span></span>)</span> == <span class="number">0</span></span><br><span class="line">               <span class="keyword">select</span> num;</span><br><span class="line"><span class="comment">// 建立查詢 (方法語法)</span></span><br><span class="line"><span class="comment">// var numQuery = numbers.Where(num =&gt; (num % 2) == 0); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 執行查詢</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> num <span class="keyword">in</span> numQuery)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">&quot;&#123;0,1&#125; &quot;</span>, num);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>重點： 建立查詢的步驟並不會實際執行查詢，它只是定義了查詢的邏輯。查詢本身並不會立即從資料來源中提取任何資料。</p><h3 id="對比範例，不用-LINQ-的情況"><a href="#對比範例，不用-LINQ-的情況" class="headerlink" title="對比範例，不用 LINQ 的情況"></a>對比範例，不用 LINQ 的情況</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; numbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;() &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; evenNumbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> num <span class="keyword">in</span> numbers)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        evenNumbers.Add(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.Join(<span class="string">&quot;, &quot;</span>, evenNumbers)); <span class="comment">// Output: 0, 2, 4, 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查詢語法的基本結構"><a href="#查詢語法的基本結構" class="headerlink" title="查詢語法的基本結構"></a>查詢語法的基本結構</h2><p>在 LINQ 查詢中，語法的開頭和結尾有著固定的規則：</p><ul><li><p>開頭<br>LINQ 查詢的開頭必須使用 from 子句。<br>from 子句的作用：定義資料來源（數據源）以及範圍變數（即用於遍歷數據的臨時變數）。<br>通常，範圍變數會在接下來的子句中使用，例如 where、select 或 orderby。</p></li><li><p>查詢過程中的子句<br>LINQ 支援許多類似 SQL 的子句，例如：</p><ul><li>Where： 根據指定的條件篩選序列中的元素。</li><li>Select： 將序列中的每個元素轉換成新的形式。你可以選擇元素的某些屬性，或者進行計算。</li><li>OrderBy： 以遞增順序排序序列中的元素。</li></ul></li></ul><h3 id="查詢語法的結尾：group-與-select-子句"><a href="#查詢語法的結尾：group-與-select-子句" class="headerlink" title="查詢語法的結尾：group 與 select 子句"></a>查詢語法的結尾：group 與 select 子句</h3><p>在 LINQ 查詢中，每個查詢的結尾必須包含 group 或 select 子句：</p><ol><li>select 子句</li></ol><ul><li>作用：將每個範圍變數轉換為新的形式或提取所需的屬性。</li><li>結果類型：通常是 <code>IEnumerable&lt;T&gt;</code>，其中 T 是返回值的類型。</li></ul><ol start="2"><li>group 子句</li></ol><ul><li>作用：將範圍變數根據某個鍵值（Key）進行分組。</li><li>結果類型：會產生一個分組後的序列，每個分組包含一個鍵和一組元素。</li></ul><p>使用 group by 分組，以下是使用 group by 子句進行分組的範例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>[] countries = &#123; <span class="string">&quot;France&quot;</span>, <span class="string">&quot;Germany&quot;</span>, <span class="string">&quot;Finland&quot;</span>, <span class="string">&quot;India&quot;</span>, <span class="string">&quot;Italy&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根據國家名稱的第一個字母分組</span></span><br><span class="line"><span class="keyword">var</span> groupedCountries = <span class="keyword">from</span> country <span class="keyword">in</span> countries</span><br><span class="line">                       <span class="keyword">group</span> country <span class="keyword">by</span> country[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> <span class="keyword">group</span> <span class="keyword">in</span> groupedCountries)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Key: <span class="subst">&#123;<span class="keyword">group</span>.Key&#125;</span>&quot;</span>); <span class="comment">// 群組鍵 (國家名稱的首字母)</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> country <span class="keyword">in</span> <span class="keyword">group</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot; - <span class="subst">&#123;country&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在前面的章節中，我們已經了解了 LINQ 的兩種語法形式和基本結構：</p><ul><li>查詢語法提供類似 SQL 的直觀寫法</li><li>方法語法更加簡潔靈活</li><li>每個 LINQ 查詢都包含三個關鍵步驟：取得資料來源、建立查詢、執行查詢</li></ul><h2 id="LINQ-的延遲執行-Deferred-Execution"><a href="#LINQ-的延遲執行-Deferred-Execution" class="headerlink" title="LINQ 的延遲執行 (Deferred Execution)"></a>LINQ 的延遲執行 (Deferred Execution)</h2><p>在 LINQ 中，查詢並不會在宣告時立即執行，而是等到你開始列舉查詢結果時（例如在 foreach 迴圈中）才會實際執行。這種特性被稱為延遲執行（Deferred Execution）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = numbers.Where(n =&gt; n &gt; <span class="number">2</span>); <span class="comment">// 定義查詢</span></span><br><span class="line"></span><br><span class="line">numbers.Add(<span class="number">6</span>); <span class="comment">// 修改原數據源</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> num <span class="keyword">in</span> query) <span class="comment">// 查詢在這裡執行</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(num); <span class="comment">// 輸出：3, 4, 5, 6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="惰性求值（Lazy-Evaluation）"><a href="#惰性求值（Lazy-Evaluation）" class="headerlink" title="惰性求值（Lazy Evaluation）"></a>惰性求值（Lazy Evaluation）</h3><p>惰性求值（Lazy Evaluation）與 LINQ 的延遲執行（Deferred Execution）關係：<br>在 C# 中，惰性求值（Lazy Evaluation）和延遲執行（Deferred Execution）基本上是同義的，尤其是在 LINQ 的背景下。這兩個術語都描述了查詢在需要時才被執行的行為，而不是在查詢定義時立即執行</p><ul><li>Lazy Evaluation 的靈活性雖然很高，但在某些場景下可能導致效能問題，特別是在多次迭代同一查詢時。以下是常見的陷阱與解決方案：</li></ul><ol><li>重複執行查詢<br>如果對同一個 LINQ 查詢進行多次操作，會導致查詢邏輯被重複執行。</li></ol><p>範例：<br>程式中，query 在每次 foreach 時都會重新執行過濾邏輯，對於大型集合來說可能導致效能下降。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義查詢</span></span><br><span class="line"><span class="keyword">var</span> query = numbers.Where(n =&gt; n &gt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重複遍歷查詢結果</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> num <span class="keyword">in</span> query) &#123; Console.WriteLine(num); &#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> num <span class="keyword">in</span> query) &#123; Console.WriteLine(num); &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以改使用，即時執行</p><p>如果查詢結果不需要動態更新，可以使用 <code>ToList()</code> 或 <code>ToArray()</code> 等方法，將查詢結果緩存到集合中：</p><ul><li>使用 <code>ToList()</code> 來觸發 <strong>eager query execution</strong>（急切查詢執行），也就是查詢會立即執行並且結果會被快取下來。</li><li>當使用 <code>ToList()</code> 時，LINQ 查詢會在 <code>ToList()</code> 調用的那一刻就立刻執行，並且將查詢結果儲存到一個列表中。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cachedQuery = query.ToList(); <span class="comment">// 將結果存入清單</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> num <span class="keyword">in</span> cachedQuery) &#123; Console.WriteLine(num); &#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> num <span class="keyword">in</span> cachedQuery) &#123; Console.WriteLine(num); &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何選擇-Lazy-Execution-或-Eager-Execution"><a href="#如何選擇-Lazy-Execution-或-Eager-Execution" class="headerlink" title="如何選擇 Lazy Execution 或 Eager Execution?"></a>如何選擇 Lazy Execution 或 Eager Execution?</h3><ol><li>Lazy Execution<br>懶性執行是 LINQ 的預設行為。查詢定義時不會執行，只有在真正需要查詢結果時（如遍歷或調用終結操作）才執行。這種方式的優勢是：</li></ol><ul><li>高效處理大數據源：僅在需要時才進行查詢計算。</li><li>支持動態數據源：查詢結果會隨著數據源的變化而更新。</li></ul><p>適用情境：</p><ul><li>查詢結果不需要頻繁重複使用。</li><li>數據源可能在查詢執行前發生變化（例如數據被添加、刪除或修改）。</li></ul><ol start="2"><li>Eager Execution<br>急切執行會立即執行查詢並將結果存儲到記憶體中（如使用 <code>ToList()</code> 或 <code>ToArray()</code>）。這種方式的優勢是：</li></ol><ul><li>避免重複執行查詢邏輯：特別是當需要多次使用查詢結果時，可以提升效能。</li><li>結果穩定：查詢結果不受數據源變更影響，適合處理不可預測的數據變化或並發情境。<br>適用情境：</li><li>需要多次使用查詢結果，或避免重複計算開銷。</li><li>數據源可能因其他操作發生變化（例如多線程環境）。</li></ul><h4 id="進一步，詢問-AI-工具來提供範例區分-2-者使用情境"><a href="#進一步，詢問-AI-工具來提供範例區分-2-者使用情境" class="headerlink" title="進一步，詢問 AI 工具來提供範例區分 2 者使用情境"></a>進一步，詢問 AI 工具來提供範例區分 2 者使用情境</h4><ol><li>商品篩選功能（Lazy Evaluation）</li></ol><p>功能描述：<br>假設我們在開發一個電子商務平台，頁面上有商品清單，並且允許用戶使用篩選器（例如「價格高於某個門檻」）動態查看符合條件的商品。<br>在這種場景中：<br>需求的重點：數據源可能隨時變更（例如新增、刪除商品），篩選結果需要即時反映最新的狀態。<br>適用解決方案：選擇「懶性執行」，讓查詢邏輯在每次迭代結果時重新評估數據源，確保結果始終是最新的。</p><ul><li>數據變更頻繁：例如，後端通過 API 新增商品，或者某些商品的價格被更新。</li><li>結果不需要重複使用：查詢邏輯只需要執行一次，為用戶提供實時的篩選結果即可。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> products = <span class="keyword">new</span> List&lt;Product&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Laptop&quot;</span>, Price = <span class="number">150</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Mouse&quot;</span>, Price = <span class="number">50</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Keyboard&quot;</span>, Price = <span class="number">75</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義篩選條件查詢</span></span><br><span class="line"><span class="keyword">var</span> expensiveProducts = products.Where(p =&gt; p.Price &gt; <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用戶動態新增商品</span></span><br><span class="line">products.Add(<span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Monitor&quot;</span>, Price = <span class="number">200</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在前端頁面看到的結果</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;篩選結果：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> product <span class="keyword">in</span> expensiveProducts)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;product.Name&#125;</span> - $<span class="subst">&#123;product.Price&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>生成商品報表功能（ Eager Execution）</li></ol><p>功能描述：<br>另一個需求是生成商品的銷售報表，例如篩選出價格高於某個門檻的商品，並將結果存儲為報表文件或傳遞到其他業務模組進行處理。<br>在這種場景中：<br>需求的重點：查詢結果應保持穩定，不受數據源後續變更影響。<br>適用解決方案：選擇「急切執行」，將查詢結果存儲到集合中（如 <code>List&lt;T&gt;</code>），避免查詢邏輯重複執行，並確保報表數據的穩定性。</p><ul><li>數據變更不可預測：例如，商品清單可能會因用戶操作（新增、刪除）或外部系統影響（同步失敗）而改變。</li><li>結果需要重複使用：生成報表後，數據可能會被多次輸出或傳遞，存入集合可以避免多次執行查詢邏輯。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> products = <span class="keyword">new</span> List&lt;Product&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Laptop&quot;</span>, Price = <span class="number">150</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Mouse&quot;</span>, Price = <span class="number">50</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Keyboard&quot;</span>, Price = <span class="number">75</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義並執行查詢</span></span><br><span class="line"><span class="keyword">var</span> reportData = products.Where(p =&gt; p.Price &gt; <span class="number">100</span>).ToList(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 模擬後續新增商品</span></span><br><span class="line">products.Add(<span class="keyword">new</span> Product &#123; Name = <span class="string">&quot;Monitor&quot;</span>, Price = <span class="number">200</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成報表時使用緩存結果</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;\n報表篩選結果：&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> product <span class="keyword">in</span> reportData)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;product.Name&#125;</span> - $<span class="subst">&#123;product.Price&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LINQ 提供了一種簡潔、強大的方式來查詢和操作各種資料來源。透過本篇文章，學習了 LINQ 的基本語法、查詢結構和延遲執行的概念。在後續的文章中，我們將會深入探討 LINQ 的進階運算子和更複雜的應用場景。</p><p><a href="https://learn.microsoft.com/zh-tw/dotnet/csharp/linq/get-started/introduction-to-linq-queries">C# 的 LINQ 查詢簡介</a><br><a href="https://github.com/dotnet/try-samples/blob/main/101-linq-samples/index.md">101 LINQ Samples</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;C# 的 LINQ (Language Integrated Query，語言整合查詢) 是一個非常強大的功能，它讓你可以使用類似 SQL 的語法來查詢各種不同的資料來源。這意味著你可以用統一的方式來處理資料，無論資料是來自陣列、列表、資料庫、XML 或其他任何支援 LINQ 的來源。&lt;/p&gt;
&lt;h2 id=&quot;LINQ-的兩種語法：&quot;&gt;&lt;a href=&quot;#LINQ-的兩種語法：&quot; class=&quot;headerlink&quot; title=&quot;LINQ 的兩種語法：&quot;&gt;&lt;/a&gt;LINQ 的兩種語法：&lt;/h2&gt;&lt;p&gt;LINQ 有兩種主要的語法形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查詢語法 (Query Syntax)： 看起來很像 SQL 語法，使用 from、where、select 等關鍵字。這種語法比較易讀，尤其是在處理複雜的查詢時。&lt;/li&gt;
&lt;li&gt;方法語法 (Method Syntax)： 使用擴充方法 (Extension Methods) 來表示查詢運算子。這種語法更簡潔，也更靈活。簡單的查詢或需要鏈式操作時，通常使用方法語法更為方便。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="dotnet" scheme="https://eva813.github.io/categories/dotnet/"/>
    
    
    <category term="dotnet" scheme="https://eva813.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>C# - class 建立與使用</title>
    <link href="https://eva813.github.io/2025/01/15/Net-learning-2/"/>
    <id>https://eva813.github.io/2025/01/15/Net-learning-2/</id>
    <published>2025-01-15T12:04:35.000Z</published>
    <updated>2025-01-18T11:27:18.828Z</updated>
    
    <content type="html"><![CDATA[<p>class 是物件導向程式設計 (OOP) 語言的核心功能。它通過邏輯性地組織方法和屬性，來表示並封裝特定的問題概念。</p><h2 id="建立-class-與-instance"><a href="#建立-class-與-instance" class="headerlink" title="建立 class 與 instance"></a>建立 class 與 instance</h2><p>假設要建立一 person 的 class </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="新增-Method-與-property"><a href="#新增-Method-與-property" class="headerlink" title="新增 Method 與 property"></a>新增 Method 與 property</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetFullName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;John Smith&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 建立 Person 類別的實例</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 呼叫方法</span></span><br><span class="line">        animal.GetFullName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="屬性-Properties-的-get-和-set-概念"><a href="#屬性-Properties-的-get-和-set-概念" class="headerlink" title="屬性(Properties)的 get 和 set 概念"></a>屬性(Properties)的 get 和 set 概念</h3><ol><li>get (讀取)</li></ol><ul><li>允許讀取屬性的值</li><li>當程式碼存取屬性值時，就會調用 get。</li><li>例如：當我們寫 <code>string sound = animal.Sound;</code> 時，就會調用 Sound 屬性的 get 存取器。</li><li>get 存取器必須返回與屬性相同類型的值</li></ul><ol start="2"><li>set (寫入)</li></ol><ul><li>允許賦值給屬性的值。</li><li>當程式碼賦值給屬性時，就會調用 set 存取器。</li><li>例如：當我們寫 <code>animal.Sound = &quot;Hiii&quot;;</code> 時，就會調用 Sound 屬性的 set。</li><li>set 有一個隱含的 value 參數，它代表賦予屬性的新值。在範例 <code>set &#123; sound = value; &#125;</code> 中，<code>value</code> 就是 <code>&quot;Hiii&quot;</code>。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1. 自動實作屬性寫法</span></span><br><span class="line">    <span class="comment">// 適合用在單純需要存取資料,不需要額外邏輯的情況</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 完整實作屬性寫法</span></span><br><span class="line">    <span class="comment">// 允許我們完全控制屬性的讀取和寫入邏輯。透過明確地定義 get 和 set，可以在存取屬性時執行額外的程式碼，例如驗證、轉換、通知等。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> firstName; <span class="comment">// 背景欄位</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName   <span class="comment">// 屬性</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> firstName; &#125;<span class="comment">// 讀取值</span></span><br><span class="line">        <span class="keyword">set</span> &#123; firstName = <span class="keyword">value</span>; &#125;<span class="comment">// 設定值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式：</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.FirstName = <span class="string">&quot;Hiii&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> nameData = person.FirstName;<span class="comment">// 調用 get</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在-get-或-set-中加入額外邏輯"><a href="#在-get-或-set-中加入額外邏輯" class="headerlink" title="在 get 或 set 中加入額外邏輯"></a>在 get 或 set 中加入額外邏輯</h3><p>實現資料驗證、格式轉換、通知其他物件等功能。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ProductExample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 私有字段</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">decimal</span> price;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> stock;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 屬性 - 商品名稱</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(<span class="keyword">value</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Product name cannot be null or empty.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                name = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 屬性 - 價格</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">decimal</span> Price</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> price; &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">value</span> &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Price cannot be negative.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                price = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 屬性 - 庫存數量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Stock</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> stock; &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">value</span> &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Stock cannot be negative.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                stock = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只讀屬性 - 總價 (計算屬性)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">decimal</span> TotalValue</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> price * stock; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法 - 更新庫存</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateStock</span>(<span class="params"><span class="built_in">int</span> quantity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (quantity &lt; <span class="number">0</span> &amp;&amp; Math.Abs(quantity) &gt; stock)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Cannot reduce stock below zero.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stock += quantity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 建立 Product 物件</span></span><br><span class="line">                Product product = <span class="keyword">new</span> Product</span><br><span class="line">                &#123;</span><br><span class="line">                    Name = <span class="string">&quot;Laptop&quot;</span>,</span><br><span class="line">                    Price = <span class="number">1200.50</span>m,</span><br><span class="line">                    Stock = <span class="number">10</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顯示初始資料</span></span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Product: <span class="subst">&#123;product.Name&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Price: <span class="subst">&#123;product.Price:C&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Stock: <span class="subst">&#123;product.Stock&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Total Value: <span class="subst">&#123;product.TotalValue:C&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新庫存</span></span><br><span class="line">                product.UpdateStock(<span class="number">-3</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;\nAfter selling 3 units:&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Stock: <span class="subst">&#123;product.Stock&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Total Value: <span class="subst">&#123;product.TotalValue:C&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 嘗試設定無效價格</span></span><br><span class="line">                product.Price = <span class="number">-100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;\nError: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="constructor-建構子"><a href="#constructor-建構子" class="headerlink" title="constructor 建構子"></a>constructor 建構子</h2><p>在建立類別的新實例 (instance) 時自動執行。它的主要目的是初始化物件的狀態，確保物件在建立後立即處於可用狀態。<br> <strong>建構子的宣告：</strong><br>    - <strong>名稱：</strong> <code>Person</code>（必須與類別名稱相同）。<br>    - <strong>關鍵字：</strong> 使用 <code>public</code> 讓建構子可以從外部訪問。<br>    - <strong>參數：</strong> 在小括號內定義建構子所需的參數（此例中為 <code>string firstName</code> 和 <code>string lastName</code>）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 屬性定義</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建構子定義</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> firstName, <span class="built_in">string</span> lastName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 將傳入的參數值賦值給屬性</span></span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        LastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法定義</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Introduce</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Hi, my name is <span class="subst">&#123;FirstName&#125;</span> <span class="subst">&#123;LastName&#125;</span>.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用建構子創建 Person 類別的實例</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 呼叫方法</span></span><br><span class="line">        person.Introduce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建構子多載-Constructor-Overloading"><a href="#建構子多載-Constructor-Overloading" class="headerlink" title="建構子多載 (Constructor Overloading)"></a>建構子多載 (Constructor Overloading)</h3><p>這些建構子可以接受不同數量的參數或不同類型的參數，以提供不同的初始化方式。</p><p>另外，如果類別沒有明確定義任何建構子，C# 編譯器會自動產生一個預設建構子 (Default Constructor) 或無參數建構子 (Parameterless Constructor)。 這個預設建構子不接受任何參數，並且會將物件的欄位初始化為其預設值 (例如，int 為 0，string 為 null)。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建構子 1：接受姓名和年齡</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建構子 2：只接受姓名 (使用建構子鏈結呼叫建構子 1)</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> personName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = personName;</span><br><span class="line">        Age = <span class="number">0</span>; <span class="comment">// 明確設定年齡為 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建構子 3：無參數建構子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        Age = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>); <span class="comment">// 使用建構子 1</span></span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Jane&quot;</span>);    <span class="comment">// 使用建構子 2</span></span><br><span class="line">        Person person3 = <span class="keyword">new</span> Person();        <span class="comment">// 使用建構子 3</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;person1.Name&#125;</span>, <span class="subst">&#123;person1.Age&#125;</span>&quot;</span>); <span class="comment">// 輸出：John, 30</span></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;person2.Name&#125;</span>, <span class="subst">&#123;person2.Age&#125;</span>&quot;</span>); <span class="comment">// 輸出：Jane, 0</span></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;person3.Name&#125;</span>, <span class="subst">&#123;person3.Age&#125;</span>&quot;</span>); <span class="comment">// 輸出：Unknown, -1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>說明：<br>在這個範例中，Person 類別定義了三個建構子：一個接受姓名和年齡，一個只接受姓名，還有一個無參數建構子。</p><ul><li>注意，Constructor Overloading 是根據參數的 數量 和 類型 來區分的，而不是參數名稱。因此，若建構子具有相同的參數類型和數量，編譯器會認為它們是相同的，這就會導致編譯錯誤，因為它無法選擇其中一個構造函數來調用。</li></ul><p>參考資料：<br><a href="https://dotnetcademy.net/Learn/2036/Pages/13">dotnetcademy</a><br><a href="https://learn.microsoft.com/zh-tw/shows/c-fundamentals-for-absolute-beginners/17">適用於初學者的 C# 基礎知識</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;class 是物件導向程式設計 (OOP) 語言的核心功能。它通過邏輯性地組織方法和屬性，來表示並封裝特定的問題概念。&lt;/p&gt;
&lt;h2 id=&quot;建立-class-與-instance&quot;&gt;&lt;a href=&quot;#建立-class-與-instance&quot; class=&quot;headerlink&quot; title=&quot;建立 class 與 instance&quot;&gt;&lt;/a&gt;建立 class 與 instance&lt;/h2&gt;&lt;p&gt;假設要建立一 person 的 class &lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Program&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Person person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="dotnet" scheme="https://eva813.github.io/categories/dotnet/"/>
    
    
    <category term="dotnet" scheme="https://eva813.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>C# 變數與型別</title>
    <link href="https://eva813.github.io/2025/01/12/Net-learning-1/"/>
    <id>https://eva813.github.io/2025/01/12/Net-learning-1/</id>
    <published>2025-01-12T06:48:50.000Z</published>
    <updated>2025-01-18T11:27:16.736Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年有機會在公司內部接觸一些些後端語言，公司的後端是 ASP.Net，所以開啟了 C# 學習之路<br>最最初階的學習資源，目前是來自：<br><a href="https://dotnetcademy.net/Learn/2036/Pages/13">dotnetcademy</a><br><a href="https://learn.microsoft.com/zh-tw/shows/c-fundamentals-for-absolute-beginners/17">適用於初學者的 C# 基礎知識</a></p><h2 id="宣告變數，需指定其類型並提供名稱"><a href="#宣告變數，需指定其類型並提供名稱" class="headerlink" title="宣告變數，需指定其類型並提供名稱"></a>宣告變數，需指定其類型並提供名稱</h2><p>C# 是 強型別語言 (Strongly Typed Language)，這表示每個變數 (Variable) 或常數 (Constant) 在使用之前都必須先明確定義其型別 (Type)。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> greeting;</span><br><span class="line"><span class="built_in">int</span> a, b, c;</span><br><span class="line">List&lt;<span class="built_in">double</span>&gt; xs;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Value-Types-與-Reference-Types"><a href="#Value-Types-與-Reference-Types" class="headerlink" title="Value Types 與 Reference Types"></a>Value Types 與 Reference Types</h2><h3 id="Value-Types"><a href="#Value-Types" class="headerlink" title="Value Types"></a>Value Types</h3><ul><li>直接存放值本身於變數的記憶體中。</li><li>當將 value type 變數的值指派給另一個變數時，是將該值<strong>複製</strong>一份，兩個變數之間完全獨立。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b = a;  <span class="comment">// b 複製了 a 的值，此時 b = 1</span></span><br><span class="line">b = <span class="number">2</span>;      <span class="comment">// 修改 b 的值，不影響 a</span></span><br><span class="line">Console.WriteLine(a); <span class="comment">// 輸出 1</span></span><br><span class="line">Console.WriteLine(b); <span class="comment">// 輸出 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>型別</th><th>說明</th></tr></thead><tbody><tr><td><code>bool</code></td><td>布林值（<code>true</code> 或 <code>false</code>）</td></tr><tr><td><code>byte</code></td><td>8 位元整數</td></tr><tr><td><code>int</code></td><td>32 位元整數</td></tr><tr><td><code>decimal</code></td><td>高精度小數</td></tr><tr><td><code>double</code></td><td>雙精度浮點數</td></tr><tr><td><code>char</code></td><td>單一 Unicode 字元</td></tr><tr><td><code>struct</code></td><td>結構</td></tr><tr><td><code>enum</code></td><td>列舉</td></tr></tbody></table><h3 id="Reference-Types"><a href="#Reference-Types" class="headerlink" title="Reference Types"></a>Reference Types</h3><ul><li>存放的是記憶體中值的位址，而非值本身。</li><li>如果將 Reference Types 的變數指派給另一個變數，兩者會<strong>指向同一個記憶體位址</strong>，因此修改一個變數會影響另一個。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person person1 = <span class="keyword">new</span> Person &#123; Name = <span class="string">&quot;Amy&quot;</span> &#125;;</span><br><span class="line">Person person2 = person1; <span class="comment">// person2 指向與 person1 相同的記憶體位置</span></span><br><span class="line">person2.Name = <span class="string">&quot;Nina&quot;</span>;    <span class="comment">// 修改 person2 的 Name</span></span><br><span class="line">Console.WriteLine(person1.Name); <span class="comment">// 輸出 Nina，因為兩者指向相同的物件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>型別</th><th>說明</th></tr></thead><tbody><tr><td><code>string</code></td><td>字串（特例：不可變）</td></tr><tr><td><code>array</code></td><td>陣列</td></tr><tr><td><code>object</code></td><td>所有型別的基底型別</td></tr><tr><td><code>class</code></td><td>類別</td></tr><tr><td><code>interface</code></td><td>介面</td></tr><tr><td><code>delegate</code></td><td>委派</td></tr><tr><td><code>dynamic</code></td><td>動態型別</td></tr></tbody></table><h3 id="字串的特殊性"><a href="#字串的特殊性" class="headerlink" title="字串的特殊性"></a><strong>字串的特殊性</strong></h3><p>雖然 <code>string</code> 是參考型別，但它有一個特性：<strong>不可變性 (Immutable)</strong>。這表示：</p><ul><li>字串的值一旦建立就無法改變。</li><li>當改變字串的值時，其實是建立了一個新字串，並在新的記憶體位置中儲存。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">string</span> a = <span class="string">&quot;Amy&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> b = a;  <span class="comment">// b 指向與 a 相同的值 &quot;Amy&quot;</span></span><br><span class="line">b = <span class="string">&quot;Nina&quot;</span>;    <span class="comment">// b 創建了一個新字串 &quot;Nina&quot;，與 a 無關</span></span><br><span class="line">Console.WriteLine(a); <span class="comment">// 輸出 Amy</span></span><br><span class="line">Console.WriteLine(b); <span class="comment">// 輸出 Nina</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Primitive-Types"><a href="#Primitive-Types" class="headerlink" title="Primitive Types"></a>Primitive Types</h2><ul><li>Value Types vs Reference Types 告訴我們數據在內存中如何存儲和傳遞</li><li>Primitive Types 則表示這些是語言內建的基本類型</li></ul><table><thead><tr><th>基本型別</th><th>別名型別</th></tr></thead><tbody><tr><td>sbyte</td><td>System.SByte</td></tr><tr><td>byte</td><td>System.Byte</td></tr><tr><td>short</td><td>System.Int16</td></tr><tr><td>ushort</td><td>System.UInt16</td></tr><tr><td>int</td><td>System.Int32</td></tr><tr><td>uint</td><td>System.UInt32</td></tr><tr><td>long</td><td>System.Int64</td></tr><tr><td>ulong</td><td>System.UInt64</td></tr><tr><td>char</td><td>System.Char</td></tr><tr><td>float</td><td>System.Single</td></tr><tr><td>double</td><td>System.Double</td></tr><tr><td>bool</td><td>System.Boolean</td></tr><tr><td>decimal</td><td>System.Decimal</td></tr></tbody></table><ul><li>注意：字串在 C# .NET 中並非基本型別，而是 System.String 類別的物件，屬於參考型別。而字串變數儲存的是字串在記憶體中的參考，並具有不可變性，此設計主要考量記憶體效率和彈性。</li></ul><h2 id="const-與-var"><a href="#const-與-var" class="headerlink" title="const 與 var"></a>const 與 var</h2><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>常數是編譯期間已知且在程式執行期間不會改變的不可變值。常數透過 const 關鍵字來宣告，並且必須在宣告時進行初始化。</p><ul><li>類型限制：C# 只允許內建型別（如數字類型、字串）作為常數。自定義型別（如類別、結構和陣列）無法作為常數，這些型別必須使用 readonly 修飾符來達到不可變效果。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Calendar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> Months = <span class="number">12</span>; <span class="comment">// 常數初始化為 12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="const-不能賦予-class-實例？"><a href="#const-不能賦予-class-實例？" class="headerlink" title="const 不能賦予 class 實例？"></a>const 不能賦予 class 實例？</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onst Person person = <span class="keyword">new</span> Person(); <span class="comment">// 編譯錯誤</span></span><br></pre></td></tr></table></figure><p>因為 new Person() 是一個執行時創建的對象，無法在編譯期間確定。因此，無法將它賦值給 const。</p><p>如果想要保存某個物件或類別的實例，但又希望它不可變，應該使用 readonly，而不是 const。<br>readonly 變數在物件初始化時（例如在建構函數中）可以賦值，但一旦設定後便無法更改。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> Person person = <span class="keyword">new</span> Person(<span class="string">&quot;John&quot;</span>); <span class="comment">// 使用 readonly</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayPerson</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(person.Name); <span class="comment">// 這個值是不可變的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>主要用途是語言特性中的類型推斷。這意味著，當你使用 var 宣告變數時，編譯器會根據變數的初始值自動推斷出其類型，而不需要明確地指定變數的類型。</p><h3 id="1-使用-var-的基本示例"><a href="#1-使用-var-的基本示例" class="headerlink" title="1. 使用 var 的基本示例"></a>1. <strong>使用 <code>var</code> 的基本示例</strong></h3><p>假設你有以下程式碼，這是傳統的變數宣告方式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> one = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">string</span> two = <span class="string">&quot;two&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在這裡，我們已經明確指定了 <code>one</code> 的類型為 <code>int</code>，<code>two</code> 的類型為 <code>string</code>。如果你使用 <code>var</code>，則可以省略顯式指定類型，讓編譯器自動推斷：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> one = <span class="number">1</span>;   <span class="comment">// 編譯器會推斷 one 是 int</span></span><br><span class="line"><span class="keyword">var</span> two = <span class="string">&quot;two&quot;</span>; <span class="comment">// 編譯器會推斷 two 是 string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這仍然是有效的 C# 程式碼，因為編譯器會根據賦值來推斷變數的類型。在這個例子中，<code>one</code> 的值是 <code>1</code>，編譯器推斷它是 <code>int</code>；<code>two</code> 的值是字串 <code>&quot;two&quot;</code>，所以編譯器推斷它是 <code>string</code>。</p><ol><li>使用 <code>var</code> 可以簡化程式碼，減少重複寫類型名稱的次數，特別是在處理泛型類型時。例如，以下是兩種不同寫法的比較：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ConcurrentDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dictionary = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(); </span><br><span class="line"><span class="keyword">var</span> dictionary = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在這裡，<code>var</code> 使得宣告變數時類型名稱變得簡潔，避免了重複書寫 <code>ConcurrentDictionary&lt;string, int&gt;</code>。</p><ol start="2"><li>支援匿名型別: 允許在不事先定義類別的情況下建立物件。匿名型別的宣告必須使用 var 關鍵字。<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> &#123; Name = <span class="string">&quot;John Smith&quot;</span> &#125;;</span><br></pre></td></tr></table></figure></li></ol><ul><li>建立了一個匿名型別的物件，其具有一個名為 Name 的屬性，值為 “John Smith”。由於匿名型別沒有明確的名稱，因此必須使用 var 來宣告變數。</li></ul><p>要注意，var 關鍵字在 C# 中提供了簡化程式碼和支援匿名型別的功能，使程式碼更簡潔、更具彈性。但需要注意的是，var 並非萬能，只有在編譯器可以明確推斷出類型的情況下才能使用。過度使用 var 可能會降低程式碼的可讀性，因此應謹慎使用。</p><p>參考資料：<br><a href="https://dotnetcademy.net/Learn/2036/Pages/13">dotnetcademy</a><br><a href="https://learn.microsoft.com/zh-tw/shows/c-fundamentals-for-absolute-beginners/17">適用於初學者的 C# 基礎知識</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;新的一年有機會在公司內部接觸一些些後端語言，公司的後端是 ASP.Net，所以開啟了 C# 學習之路&lt;br&gt;最最初階的學習資源，目前是來自：&lt;br&gt;&lt;a href=&quot;https://dotnetcademy.net/Learn/2036/Pages/13&quot;&gt;dotnetcademy&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://learn.microsoft.com/zh-tw/shows/c-fundamentals-for-absolute-beginners/17&quot;&gt;適用於初學者的 C# 基礎知識&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;宣告變數，需指定其類型並提供名稱&quot;&gt;&lt;a href=&quot;#宣告變數，需指定其類型並提供名稱&quot; class=&quot;headerlink&quot; title=&quot;宣告變數，需指定其類型並提供名稱&quot;&gt;&lt;/a&gt;宣告變數，需指定其類型並提供名稱&lt;/h2&gt;&lt;p&gt;C# 是 強型別語言 (Strongly Typed Language)，這表示每個變數 (Variable) 或常數 (Constant) 在使用之前都必須先明確定義其型別 (Type)。&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; greeting;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; a, b, c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;&lt;span class=&quot;built_in&quot;&gt;double&lt;/span&gt;&amp;gt; xs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="dotnet" scheme="https://eva813.github.io/categories/dotnet/"/>
    
    
    <category term="dotnet" scheme="https://eva813.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>刷題練習 - Cache with Time Limit</title>
    <link href="https://eva813.github.io/2025/01/04/TimeLimitedCache/"/>
    <id>https://eva813.github.io/2025/01/04/TimeLimitedCache/</id>
    <published>2025-01-04T11:53:52.000Z</published>
    <updated>2025-09-07T01:02:42.116Z</updated>
    
    <content type="html"><![CDATA[<p>Write a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key.</p><p>The class has three public methods:</p><p><code>set(key, value, duration)</code>: accepts an integer <code>key</code>, an integer <code>value</code>, and a <code>duration</code> in milliseconds. Once the <code>duration</code> has elapsed, the key should be inaccessible. The method should return true if the same un-expired key already exists and false otherwise. Both the value and duration should be overwritten if the key already exists.</p><p><code>get(key)</code>: if an un-expired key exists, it should return the associated value. Otherwise it should return -1.</p><p><code>count()</code>: returns the count of un-expired keys.</p><h2 id="中文說明"><a href="#中文說明" class="headerlink" title="中文說明"></a>中文說明</h2><p><code>set(key, value, duration)</code>： 接受一個整數的 key、一個整數值 value，以及一個毫秒為單位的時間 duration。當持續時間結束後，這個鍵值對將不能被存取。如果相同且未過期的鍵存在，則回傳 true，若不存在則回傳 false。如果這個鍵已經存在，其值與持續時間都應該被新傳入的 value 與 duration 覆寫。<br><code>get(key)</code>：如果存在未過期的鍵，回傳其對應的值。若沒有相對應的鍵，則回傳 -1。<br><code>count()</code>：回傳現存未過期的鍵的總數量。</p><span id="more"></span><h2 id="解題思路："><a href="#解題思路：" class="headerlink" title="解題思路："></a>解題思路：</h2><p>1.理解題目需求：<br>  要做一個可以「設定時間限制」的快取（cache）。<br>  支援三個方法：<br>  set(key, value, duration)：設定一個緩存，並在 duration 毫秒後自動移除。<br>  get(key)：獲取緩存的值，若該緩存過期則返回 -1。<br>  count()：返回當前未過期的緩存數量。<br>2.使用 Map ，查找 (get) 和新增 (set) 都很快。</p><ul><li>可以存複雜的結構（像我們要存值和計時器 ID）</li></ul><h2 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">TimeLimitedCache</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; duration time until expiration in ms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125; if un-expired key already existed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">TimeLimitedCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">set</span> = <span class="keyword">function</span>(<span class="params">key, value, duration</span>) &#123;</span><br><span class="line">    <span class="comment">// 先確認 key 是否存在</span></span><br><span class="line">    <span class="keyword">const</span> found = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key);</span><br><span class="line">    <span class="comment">// 如果鍵已存在（未過期），清除舊的計時器，避免舊計時器的干擾</span></span><br><span class="line">    <span class="keyword">if</span>(found)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key).<span class="property">timerId</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 無論是否已有 key，都會設定新的值和計時器：</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key,&#123;</span><br><span class="line">        value,</span><br><span class="line">        <span class="attr">timerId</span>: <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key),duration)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 此函式要回傳 boolean, if the same un-expired key already exists(true)</span></span><br><span class="line">    <span class="keyword">return</span> found</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">key</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125; value associated with key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">TimeLimitedCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key).<span class="property">value</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125; count of non-expired keys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">TimeLimitedCache</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">count</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="property">size</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="補充說明"><a href="#補充說明" class="headerlink" title="補充說明"></a>補充說明</h3><ol><li>為什麼存在(found)時要 clearTimeout？<br>假設緩存中已有鍵 key，且其倒計時尚未結束：</li></ol><ul><li>如果直接覆蓋而不清除舊的 setTimeout 計時器，舊計時器仍然會在原定的時間觸發刪除操作。</li><li>清除舊的計時器 (clearTimeout) 可以避免多餘的操作，確保新的計時器能正確控制過期時間。</li></ul><ol start="2"><li>setTimeout 的參數作用是什麼？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">timerId</span>: <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key), duration)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>setTimeout 的參數是一個回調函數：</p><ul><li><code>() =&gt; this.cache.delete(key)</code>：當計時器觸發時，執行刪除操作。</li><li>duration：計時器的延遲時間（以毫秒為單位），指定在多長時間後執行該回調。</li><li>setTimeout 確保鍵在 duration 毫秒後自動過期並刪除。</li></ul><h2 id="可應用實際案例："><a href="#可應用實際案例：" class="headerlink" title="可應用實際案例："></a>可應用實際案例：</h2><p>特別適合需要管理短期數據的應用場景，例如緩存用戶會話、臨時配置或頻繁變化的數據</p><p>例如，可以使用 TimeLimitedCache 來緩存 API 的回應結果。這樣一來能減少對後端的請求次數。例如，當多個用戶請求相同數據時，可以快速返回緩存結果，而不必每次都發送請求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用提供的 TimeLimitedCache</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TimeLimitedCache</span> <span class="keyword">from</span> <span class="string">&#x27;./timeLimitedCache.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化全局緩存實例</span></span><br><span class="line"><span class="keyword">const</span> apiCache = <span class="keyword">new</span> <span class="title class_">TimeLimitedCache</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將判斷該取得後端 url 的 cache 處理，包為一函式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchWithCache</span> = <span class="keyword">async</span> (<span class="params">url, ttl = <span class="number">5000</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> cachedResponse = apiCache.<span class="title function_">get</span>(url);</span><br><span class="line">    <span class="comment">// 檢查指定 URL 是否有未過期的緩存</span></span><br><span class="line">    <span class="comment">// 我們可以使用 TimeLimitedCache 中的 get 方法</span></span><br><span class="line">    <span class="keyword">if</span> (cachedResponse !== -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Fetching from cache:&#x27;</span>, url);</span><br><span class="line">        <span class="keyword">return</span> cachedResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="comment">// 緩存 API 回應</span></span><br><span class="line">    apiCache.<span class="title function_">set</span>(url, data, ttl);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 組件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">const</span> apiUrl = <span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>; <span class="comment">// 測試 API</span></span><br><span class="line">            <span class="comment">// 傳入 apiUrl 並設定時間</span></span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetchWithCache</span>(apiUrl, <span class="number">10000</span>); <span class="comment">// 10 秒 Time-to-Live</span></span><br><span class="line">            <span class="title function_">setData</span>(result);</span><br><span class="line">            <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">fetchData</span>();</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Post Details<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Title:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;data.title&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Body:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;data.body&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="補充可以使用-class"><a href="#補充可以使用-class" class="headerlink" title="補充可以使用 class"></a>補充可以使用 class</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeLimitedCache</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">key, value, duration</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> found = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (found) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key).<span class="property">timerId</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, &#123;</span><br><span class="line">      value,</span><br><span class="line">      value,</span><br><span class="line">      <span class="attr">timerId</span>: <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">      &#125;, duration),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> found;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key) ? <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key).<span class="property">value</span> : -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">count</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="property">size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>參考資料<br><a href="https://www.explainthis.io/zh-hant/swe/cache-with-time-limit">[Medium] LeetCode JS 30 - 2622. Cache with Time Limit</a><br><a href="https://ithelp.ithome.com.tw/m/articles/10329969">LeetCode JS30-Day17 | 2622. Cache With Time Limit 有時間限制的緩存Cache</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Write a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key.&lt;/p&gt;
&lt;p&gt;The class has three public methods:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set(key, value, duration)&lt;/code&gt;: accepts an integer &lt;code&gt;key&lt;/code&gt;, an integer &lt;code&gt;value&lt;/code&gt;, and a &lt;code&gt;duration&lt;/code&gt; in milliseconds. Once the &lt;code&gt;duration&lt;/code&gt; has elapsed, the key should be inaccessible. The method should return true if the same un-expired key already exists and false otherwise. Both the value and duration should be overwritten if the key already exists.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get(key)&lt;/code&gt;: if an un-expired key exists, it should return the associated value. Otherwise it should return -1.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;count()&lt;/code&gt;: returns the count of un-expired keys.&lt;/p&gt;
&lt;h2 id=&quot;中文說明&quot;&gt;&lt;a href=&quot;#中文說明&quot; class=&quot;headerlink&quot; title=&quot;中文說明&quot;&gt;&lt;/a&gt;中文說明&lt;/h2&gt;&lt;p&gt;&lt;code&gt;set(key, value, duration)&lt;/code&gt;： 接受一個整數的 key、一個整數值 value，以及一個毫秒為單位的時間 duration。當持續時間結束後，這個鍵值對將不能被存取。如果相同且未過期的鍵存在，則回傳 true，若不存在則回傳 false。如果這個鍵已經存在，其值與持續時間都應該被新傳入的 value 與 duration 覆寫。&lt;br&gt;&lt;code&gt;get(key)&lt;/code&gt;：如果存在未過期的鍵，回傳其對應的值。若沒有相對應的鍵，則回傳 -1。&lt;br&gt;&lt;code&gt;count()&lt;/code&gt;：回傳現存未過期的鍵的總數量。&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://eva813.github.io/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://eva813.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Python 安裝與環境</title>
    <link href="https://eva813.github.io/2024/11/15/python-install/"/>
    <id>https://eva813.github.io/2024/11/15/python-install/</id>
    <published>2024-11-14T23:29:29.000Z</published>
    <updated>2024-11-19T12:39:05.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-的安裝步驟"><a href="#Python-的安裝步驟" class="headerlink" title="Python 的安裝步驟"></a>Python 的安裝步驟</h2><h3 id="為什麼要學習-Python？"><a href="#為什麼要學習-Python？" class="headerlink" title="為什麼要學習 Python？"></a>為什麼要學習 Python？</h3><p>最近發現 GitHub 上許多新專案都適用 Python 或是要使用的 AI 工具也會是使用 Python 開發，於是決定也來學學 Python！</p><h3 id="如何安裝-Python？"><a href="#如何安裝-Python？" class="headerlink" title="如何安裝 Python？"></a>如何安裝 Python？</h3><ul><li>前往 Python 的官方網站 下載安裝程式。</li><li>按照安裝程式的指示完成安裝。</li><li>安裝完成後，打開終端機（或命令提示字元），輸入以下指令確認安裝是否成功：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure></li><li>若您有多個專案需使用不同的 Python 版本，建議使用版本管理工具，例如 pyenv。</li></ul><span id="more"></span><h2 id="pyenv-入門：環境與基本安裝"><a href="#pyenv-入門：環境與基本安裝" class="headerlink" title="pyenv 入門：環境與基本安裝"></a>pyenv 入門：環境與基本安裝</h2><p>在開發過程中，不同專案可能需要不同版本的 Python，或是需要測試程式碼在不同版本的相容性。pyenv 能有效隔離環境，避免版本衝突，讓管理變得更加靈活。</p><h3 id="安裝-pyenv"><a href="#安裝-pyenv" class="headerlink" title="安裝 pyenv"></a>安裝 pyenv</h3><p>至 <a href="https://github.com/pyenv/pyenv?tab=readme-ov-file#homebrew-in-macos">pyenv GitHub</a> 頁面，根據你的作業系統進行安裝。<br>安裝完成後，重啟終端機，並輸入以下指令確認安裝：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv -v</span><br></pre></td></tr></table></figure><h2 id="pyenv-的常見指令"><a href="#pyenv-的常見指令" class="headerlink" title="pyenv 的常見指令"></a>pyenv 的常見指令</h2><h3 id="列出已安裝的-Python-版本"><a href="#列出已安裝的-Python-版本" class="headerlink" title="列出已安裝的 Python 版本"></a>列出已安裝的 Python 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure><h3 id="查看可安裝的-Python-版本"><a href="#查看可安裝的-Python-版本" class="headerlink" title="查看可安裝的 Python 版本"></a>查看可安裝的 Python 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure><h3 id="安裝特定版本的-Python"><a href="#安裝特定版本的-Python" class="headerlink" title="安裝特定版本的 Python"></a>安裝特定版本的 Python</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.12.7</span><br></pre></td></tr></table></figure><h3 id="切換-Python-版本"><a href="#切換-Python-版本" class="headerlink" title="切換 Python 版本"></a>切換 Python 版本</h3><ul><li>臨時切換：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv shell 3.12.7</span><br></pre></td></tr></table></figure></li><li>永久切換（全域預設版本）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv global 3.12.7</span><br></pre></td></tr></table></figure></li></ul><h3 id="移除已安裝的-Python-版本"><a href="#移除已安裝的-Python-版本" class="headerlink" title="移除已安裝的 Python 版本"></a>移除已安裝的 Python 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv uninstall 3.12.7</span><br></pre></td></tr></table></figure><h2 id="虛擬環境"><a href="#虛擬環境" class="headerlink" title="虛擬環境"></a>虛擬環境</h2><p>虛擬環境是 Python 開發中用來隔離專案依賴的工具，雖然它對於剛開始學習 Python 的新手不是必要的，但當專案規模逐漸擴大、需要處理多個專案或套件版本時，它的重要性會逐漸浮現。</p><h3 id="什麼是虛擬環境？"><a href="#什麼是虛擬環境？" class="headerlink" title="什麼是虛擬環境？"></a>什麼是虛擬環境？</h3><p>虛擬環境是 Python 提供的一種工具，讓你可以在同一台電腦上建立多個彼此獨立的 Python 環境，每個環境可以擁有不同的：</p><ul><li>Python 版本</li><li>已安裝的套件及其版本</li></ul><p>虛擬環境可以避免多個專案之間因套件衝突而導致問題。</p><p>以下幾種情境下特別建議使用：<br>1.需要管理不同的專案依賴：<br>假設專案 A 使用 Django 4.0，而專案 B 使用 Django 5.0，虛擬環境可以讓兩者共存，互不干擾。<br>2.避免污染全域環境：<br>在系統的 Python 安裝目錄安裝套件可能會對其他專案造成影響，虛擬環境能避免這種問題。</p><p>常見的虛擬環境工具</p><ol><li>內建工具 venv<br>Python 3.3 之後內建的工具，無需額外安裝。<br>適合大多數基本需求。</li><li>第三方工具 virtualenv<br>功能更完整，支援更多選項。<br>比 venv 更適合舊版 Python（如 Python 2.x）。</li><li>進階工具 Poetry<br>不僅管理虛擬環境，還能管理依賴套件和版本。<br>提供「一站式」解決方案，是目前非常流行的工具。</li></ol><p>以下我將以 <code>venv</code>, <code>Poetry</code> 介紹</p><h2 id="使用內建的-venv-工具"><a href="#使用內建的-venv-工具" class="headerlink" title="使用內建的 venv 工具"></a>使用內建的 venv 工具</h2><ol><li>建立虛擬環境：</li></ol><ul><li>注意：要在專案目錄下執行以下命令</li><li>myenv 是虛擬環境的名稱，可以替換成其他名字。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv myenv</span><br></pre></td></tr></table></figure><ol start="2"><li>啟動虛擬環境 (macOS)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source myenv/<span class="built_in">bin</span>/activate</span><br></pre></td></tr></table></figure><ul><li>啟動後，命令列會顯示 (myenv)，代表已進入虛擬環境。</li></ul><p>接續在虛擬環境，可以執行專案內需要的套件安裝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests beautifulsoup4</span><br></pre></td></tr></table></figure><ol start="3"><li>退出虛擬環境</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><h2 id="使用-Poetry"><a href="#使用-Poetry" class="headerlink" title="使用 Poetry"></a>使用 Poetry</h2><ol><li>安裝 Poetry（建議用 pipx 安裝）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipx install poetry</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>建立新專案：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">poetry new myproject</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br></pre></td></tr></table></figure><ul><li>預設會生成 pyproject.toml 作為專案配置檔案。</li></ul><ol start="3"><li>啟動虛擬環境：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry shell</span><br></pre></td></tr></table></figure><p>或直接在虛擬環境中運行程式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry run python my_script.py</span><br></pre></td></tr></table></figure><ol start="4"><li>添加 dependency：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add django</span><br></pre></td></tr></table></figure><ul><li>poetry.lock 和 pyproject.toml 會自動更新，鎖定依賴版本。</li></ul><ol start="5"><li>群組化依賴（開發用套件）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add --group dev pytest</span><br></pre></td></tr></table></figure><ol start="6"><li>安裝全部依賴： 當其他人下載專案時，只需執行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Python-的安裝步驟&quot;&gt;&lt;a href=&quot;#Python-的安裝步驟&quot; class=&quot;headerlink&quot; title=&quot;Python 的安裝步驟&quot;&gt;&lt;/a&gt;Python 的安裝步驟&lt;/h2&gt;&lt;h3 id=&quot;為什麼要學習-Python？&quot;&gt;&lt;a href=&quot;#為什麼要學習-Python？&quot; class=&quot;headerlink&quot; title=&quot;為什麼要學習 Python？&quot;&gt;&lt;/a&gt;為什麼要學習 Python？&lt;/h3&gt;&lt;p&gt;最近發現 GitHub 上許多新專案都適用 Python 或是要使用的 AI 工具也會是使用 Python 開發，於是決定也來學學 Python！&lt;/p&gt;
&lt;h3 id=&quot;如何安裝-Python？&quot;&gt;&lt;a href=&quot;#如何安裝-Python？&quot; class=&quot;headerlink&quot; title=&quot;如何安裝 Python？&quot;&gt;&lt;/a&gt;如何安裝 Python？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;前往 Python 的官方網站 下載安裝程式。&lt;/li&gt;
&lt;li&gt;按照安裝程式的指示完成安裝。&lt;/li&gt;
&lt;li&gt;安裝完成後，打開終端機（或命令提示字元），輸入以下指令確認安裝是否成功：&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;若您有多個專案需使用不同的 Python 版本，建議使用版本管理工具，例如 pyenv。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="https://eva813.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://eva813.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>scroll snap</title>
    <link href="https://eva813.github.io/2024/10/30/scroll-snap/"/>
    <id>https://eva813.github.io/2024/10/30/scroll-snap/</id>
    <published>2024-10-29T23:38:54.000Z</published>
    <updated>2024-10-29T23:51:52.656Z</updated>
    
    <content type="html"><![CDATA[<p>CSS Scroll Snap 是一種用於控制滾動行為的 CSS 模組，允許開發者在使用者停止滾動時，自動將視圖對齊到特定的元素。這種功能常用於創造更流暢的用戶體驗，例如分頁文章、圖片輪播等。</p><h2 id="主要由兩個屬性來控制："><a href="#主要由兩個屬性來控制：" class="headerlink" title="主要由兩個屬性來控制："></a>主要由兩個屬性來控制：</h2><p>scroll-snap-type：設置在滾動容器（父元素）上，用於定義滾動軸向和滾動對齊的行為。</p><p>格式為：scroll-snap-type: [軸向] [行為]<br>軸向可以是 x（水平滾動）、y（垂直滾動）或 both（同時支持水平與垂直）。<br>行為可以是 mandatory 或 proximity：<br>mandatory：滾動必須對齊到指定位置，確保每次停下來都會對齊。<br>proximity：當滾動接近某個指定的位置時，會進行對齊。<br>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.scroll-container &#123;</span><br><span class="line">  scroll-snap-type: y mandatory; /* 在垂直方向強制對齊 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scroll-snap-align：設置在滾動內容項目（子元素）上，定義這些元素在滾動容器中的對齊方式。</p><p>可選的值有 start、center、end，決定項目在滾動結束時如何與容器對齊。<br>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scroll-item</span> &#123;</span><br><span class="line">  <span class="attribute">scroll-snap-align</span>: start; <span class="comment">/* 將項目對齊到滾動容器的頂端 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>屬性</th><th>描述</th></tr></thead><tbody><tr><td><code>scroll-snap-type</code></td><td>定義滾動容器的捕捉行為，包括方向（x, y, both）和強制程度（mandatory, proximity）。</td></tr><tr><td><code>scroll-padding</code></td><td>設置容器內邊距，影響捕捉點的位置。</td></tr><tr><td><code>scroll-snap-align</code></td><td>定義子元素在容器中的對齊方式（start, center, end）。</td></tr><tr><td><code>scroll-snap-stop</code></td><td>控制是否在特定元素上停留，默認情況下僅在停止滾動時觸發。</td></tr></tbody></table><h2 id="使用時注意事項"><a href="#使用時注意事項" class="headerlink" title="使用時注意事項"></a>使用時注意事項</h2><ol><li>跨瀏覽器不一致性<br>雖然大多數現代瀏覽器都支持 Scroll Snap，但在行為上可能會有一些細微的差異。請務必在各種瀏覽器上測試你的實現，確保用戶能夠獲得一致的體驗。像是使用 <a href="https://caniuse.com/">cna I us</a> 確認支援。<br>對於某些舊版本仍然需要前綴。使用 WebKit 前綴來支持較舊的 Safari 和 Chrome。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scroll-container</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">scroll-snap-type</span>: y mandatory; <span class="comment">/* 用於舊版 Safari 和 Chrome */</span></span><br><span class="line">  <span class="attribute">scroll-snap-type</span>: y mandatory; <span class="comment">/* 標準屬性 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 @supports 進行功能檢測：你可以使用 @supports 檢測瀏覽器是否支持 Scroll Snap，並提供相應的回退方案。例如，如果某些瀏覽器不支持，則可以使用 JavaScript 實現類似的行為。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">@supports</span> (<span class="attribute">scroll-snap-type</span>: y mandatory) &#123;</span><br><span class="line">  <span class="selector-class">.scroll-container</span> &#123;</span><br><span class="line">    <span class="attribute">scroll-snap-type</span>: y mandatory;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@supports</span> <span class="keyword">not</span> (<span class="attribute">scroll-snap-type</span>: y mandatory) &#123;</span><br><span class="line">  <span class="selector-class">.scroll-container</span> &#123;</span><br><span class="line">    <span class="comment">/* 恢復樣式，或提供 JavaScript 實現滾動行為 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>預期外的滾動行為<br>如果發現未對齊正確，或者容器的尺寸設置不當，可能會出現預期外的滾動行為。<br>解決方案：<br>設置固定尺寸：確保滾動容器和子元素的尺寸設置正確。對於橫向滾動，應確保每個項目的寬度是明確的，對於縱向滾動，應設置每個項目的高度。例如：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">複製程式碼</span><br><span class="line"><span class="selector-class">.scroll-container</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-x</span>: scroll; <span class="comment">/* 必須設置 overflow 屬性 */</span></span><br><span class="line">  <span class="attribute">scroll-snap-type</span>: x mandatory; <span class="comment">/* 水平捕捉點 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.scroll-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/* 保證每個項目都佔據滾動區域 */</span></span><br><span class="line">  <span class="attribute">scroll-snap-align</span>: start; <span class="comment">/* scroll-snap-align 決定了子元素在滾動容器中如何對齊 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>性能影響</li></ol><p>當頁面內容繁多，或包含大量動畫和捕捉點時，可能會導致性能問題。這會導致滾動卡頓，特別是在移動設備上。</p><p>解決方案：<br>避免過度使用捕捉點：不要對每一個小元素都設置 scroll-snap-align，僅在核心內容（如頁面段落、關鍵節點）設置捕捉點。例如，圖片輪播或長段落之間可以有捕捉點，但不需要對每個小項目設置。</p><p>除此之外，可以嘗試 lazy load：對於圖片或大型內容，使用懶加載技術（如 Intersection Observer API）可以避免一次性渲染過多內容，從而減輕滾動過程中的性能負擔。</p><ul><li>使用 Intersection Observer 實現懶加載: 用來觀察（observe）當指定元素接觸到父層以上或者是視窗的方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> images = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.lazy-load&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> img = entry.<span class="property">target</span>;</span><br><span class="line">      img.<span class="property">src</span> = img.<span class="property">dataset</span>.<span class="property">src</span>; <span class="comment">// 替換為真正的圖片</span></span><br><span class="line">      observer.<span class="title function_">unobserve</span>(img); <span class="comment">// 停止觀察</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">images.<span class="title function_">forEach</span>(<span class="function"><span class="params">image</span> =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">observe</span>(image); <span class="comment">// 觀察每個懶加載圖片</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>減少不必要的動畫：過多的動畫和滾動事件監聽器會降低滾動性能，特別是如果動畫效果頻繁更新。例如，可以使用 requestAnimationFrame 來控制滾動動畫的頻率，避免過多的重排和重繪。或是嘗試，節流滾動事件：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isScrolling;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(isScrolling);</span><br><span class="line">  isScrolling = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在滾動結束後觸發的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滾動結束&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">66</span>); <span class="comment">// 節流時間間隔</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>參考文章：<br><a href="https://jim1105.coderbridge.io/2022/07/30/intersection-observer/">超好用的 Web API - Intersection Observer</a><br><a href="https://medium.com/@bogdanfromkyiv/no-js-required-you-can-do-this-with-css-e4635e40502c">No JS required — you can do this with CSS!</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CSS Scroll Snap 是一種用於控制滾動行為的 CSS 模組，允許開發者在使用者停止滾動時，自動將視圖對齊到特定的元素。這種功能常用於創造更流暢的用戶體驗，例如分頁文章、圖片輪播等。&lt;/p&gt;
&lt;h2 id=&quot;主要由兩個屬性來控制：&quot;&gt;&lt;a href=&quot;#主要由兩個</summary>
      
    
    
    
    
    <category term="css" scheme="https://eva813.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>自訂 Quasar 日期選擇器：實現 Year/Month 選擇功能</title>
    <link href="https://eva813.github.io/2024/08/24/quasar-monthlyPicker/"/>
    <id>https://eva813.github.io/2024/08/24/quasar-monthlyPicker/</id>
    <published>2024-08-24T11:46:38.000Z</published>
    <updated>2024-11-14T12:35:35.150Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://hackmd.io/_uploads/B1UukbOo0.png" alt="image"></p><p>在 Quasar 的日期選擇器，要使用 QInput + QDate 方式，可以參考文件 <a href="https://quasar.dev/vue-components/date/#with-qinput">Date Picker</a>。</p><p>但在此次功能需求，是讓使用者只能選擇年/月。所以首先依循查詢結果，找到 <a href="https://github.com/quasarframework/quasar/discussions/13101">monthpicker</a> ，在其中 <a href="https://codepen.io/metalsadman/pen/xxYBqMo">codepen - QDate: DATE YEAR/MONTH PICKER</a>，透過設置 setView 屬性，使得選擇器界面可以顯示年、月以及日的選擇視圖。</p><h2 id="自制-monthlyPicker"><a href="#自制-monthlyPicker" class="headerlink" title="自制 monthlyPicker"></a>自制 monthlyPicker</h2><p>因此參考上方的方式，建立一個 monthlyPicker 元件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;q-mr-md&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;monthValue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;date-input&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;single-month-picker&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">readonly</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:append</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-icon</span></span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">&quot;fa-regular fa-calendar&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;cursor-pointer&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">size</span>=<span class="string">&quot;1.1rem&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">q-popup-proxy</span> <span class="attr">cover</span> <span class="attr">transition-show</span>=<span class="string">&quot;scale&quot;</span> <span class="attr">transition-hide</span>=<span class="string">&quot;scale&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;q-date__header flex column items-start&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;handleToMonthView&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cursor-pointer&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>&#123;&#123; &quot;Year - Month&quot; &#125;&#125;&lt;/span</span><br><span class="line">              &gt;</span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-h5 cursor-pointer&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleToYearView&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123; monthValue &#125;&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">q-date</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;date-disable-btn&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">              <span class="attr">ref</span>=<span class="string">&quot;dateRef&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-model</span>=<span class="string">&quot;monthValue&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">default-view</span>=<span class="string">&quot;Years&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">emit-immediately</span></span></span><br><span class="line"><span class="tag">              @<span class="attr">update:model-value</span>=<span class="string">&quot;onUpdate&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">mask</span>=<span class="string">&quot;YYYY-MM&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">minimal</span></span></span><br><span class="line"><span class="tag">              <span class="attr">years-in-month-view</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:navigation-min-year-month</span>=<span class="string">&quot;minYearMonth&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:navigation-max-year-month</span>=<span class="string">&quot;maxYearMonth&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row items-center justify-end date-action-btn&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">flat</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">v-close-popup</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">class</span>=<span class="string">&quot;btn--no-hover&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">label</span>=<span class="string">&quot;Close&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">q-date</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">q-popup-proxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">q-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; date, <span class="title class_">QDate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;quasar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;selectedDate&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">    <span class="attr">month</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> monthValue = <span class="title function_">ref</span>(props.<span class="property">month</span>)</span><br><span class="line"><span class="keyword">const</span> dateRef = ref&lt;<span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> <span class="title class_">QDate</span>&gt; | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> currentView = ref&lt;<span class="string">&#x27;Years&#x27;</span> | <span class="string">&#x27;Months&#x27;</span> | <span class="string">&#x27;Days&#x27;</span>&gt;(<span class="string">&#x27;Years&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed</span></span><br><span class="line"><span class="keyword">const</span> minYearMonth = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oneYearAgo = date.<span class="title function_">subtractFromDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), &#123; <span class="attr">month</span>: <span class="number">13</span> &#125;)</span><br><span class="line">    <span class="keyword">return</span> date.<span class="title function_">formatDate</span>(oneYearAgo, <span class="string">&#x27;YYYY/MM&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> maxYearMonth = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oneMonthAgo = date.<span class="title function_">subtractFromDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), &#123; <span class="attr">month</span>: <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="keyword">return</span> date.<span class="title function_">formatDate</span>(oneMonthAgo, <span class="string">&#x27;YYYY/MM&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onUpdate</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;selectedDate&#x27;</span>, date.<span class="title function_">formatDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(monthValue.<span class="property">value</span>), <span class="string">&#x27;YYYY-MM&#x27;</span>))</span><br><span class="line">    <span class="title function_">setCalendarView</span>(<span class="string">&#x27;Months&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleToMonthView</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCalendarView</span>(<span class="string">&#x27;Months&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleToYearView</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCalendarView</span>(<span class="string">&#x27;Years&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setCalendarView</span> = (<span class="params">view: <span class="string">&#x27;Years&#x27;</span> | <span class="string">&#x27;Months&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">    currentView.<span class="property">value</span> = view</span><br><span class="line">    dateRef.<span class="property">value</span>?.<span class="title function_">setView</span>(view)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="簡要說明"><a href="#簡要說明" class="headerlink" title="簡要說明"></a>簡要說明</h3><ul><li>QDate 組件：設置 default-view 為 Years，讓選擇器初始顯示年份視圖。mask 設置為 YYYY-MM，確保輸出格式為年-月。</li><li>計算屬性：透過 minYearMonth 和 maxYearMonth 屬性，限制使用者只能選擇過去一年內的日期範圍。</li><li>視圖切換：通過 handleToMonthView 和 handleToYearView 函數來實現視圖切換，並且用 setCalendarView 函數來控制視圖變更。</li></ul><h2 id="外層使用該元件方式"><a href="#外層使用該元件方式" class="headerlink" title="外層使用該元件方式"></a>外層使用該元件方式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">monthly-picker</span> <span class="attr">:month</span>=<span class="string">&quot;selectedMonth&quot;</span> @<span class="attr">selectedDate</span>=<span class="string">&quot;handleDateSelected&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你選擇的月份是：&#123;&#123; selectedMonth &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">MonthlyPicker</span> <span class="keyword">from</span> <span class="string">&quot;./components/MonthlyPicker.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> selectedMonth = <span class="title function_">ref</span>(<span class="string">&quot;2024-08&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">handleDateSelected</span> = (<span class="params">date: string</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    selectedMonth.<span class="property">value</span> = date;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://hackmd.io/_uploads/B1UukbOo0.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 Quasar 的日期選擇器，要使用 QInput + QDate 方式，可以參考文件 &lt;a href=&quot;https://qua</summary>
      
    
    
    
    <category term="Quasar" scheme="https://eva813.github.io/categories/Quasar/"/>
    
    
    <category term="Vue" scheme="https://eva813.github.io/tags/Vue/"/>
    
    <category term="quasar" scheme="https://eva813.github.io/tags/quasar/"/>
    
  </entry>
  
</feed>
